oap_del() deep deletes tt__ImagingSettings data members, use only after tt__ImagingSettings::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettings::soap_type() returns SOAP_TYPE_tt__ImagingSettings or derived type identifier
class tt__ImagingSettings
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensation.
    tt__BacklightCompensation*           BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Brightness" of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "ColorSaturation" of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Contrast" of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":Exposure.
    tt__Exposure*                        Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusConfiguration.
    tt__FocusConfiguration*              Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "IrCutFilter" of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum tt__IrCutFilterMode*            IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Sharpness" of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRange.
    tt__WideDynamicRange*                WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalance.
    tt__WhiteBalance*                    WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension.
    tt__ImagingSettingsExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension is a complexType.
///
/// @note class tt__ImagingSettingsExtension operations:
/// - tt__ImagingSettingsExtension* soap_new_tt__ImagingSettingsExtension(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension* soap_new_tt__ImagingSettingsExtension(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension* soap_new_req_tt__ImagingSettingsExtension(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension* soap_new_set_tt__ImagingSettingsExtension(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension(soap*, tt__ImagingSettingsExtension*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension(soap*, tt__ImagingSettingsExtension*) serialize to a stream
/// - tt__ImagingSettingsExtension* tt__ImagingSettingsExtension::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension::soap_del() deep deletes tt__ImagingSettingsExtension data members, use only after tt__ImagingSettingsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension or derived type identifier
class tt__ImagingSettingsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure is a complexType.
///
/// @note class tt__Exposure operations:
/// - tt__Exposure* soap_new_tt__Exposure(soap*) allocate and default initialize
/// - tt__Exposure* soap_new_tt__Exposure(soap*, int num) allocate and default initialize an array
/// - tt__Exposure* soap_new_req_tt__Exposure(soap*, ...) allocate, set required members
/// - tt__Exposure* soap_new_set_tt__Exposure(soap*, ...) allocate, set all public members
/// - tt__Exposure::soap_default(soap*) default initialize members
/// - int soap_read_tt__Exposure(soap*, tt__Exposure*) deserialize from a stream
/// - int soap_write_tt__Exposure(soap*, tt__Exposure*) serialize to a stream
/// - tt__Exposure* tt__Exposure::soap_dup(soap*) returns deep copy of tt__Exposure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Exposure::soap_del() deep deletes tt__Exposure data members, use only after tt__Exposure::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Exposure::soap_type() returns SOAP_TYPE_tt__Exposure or derived type identifier
class tt__Exposure
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the NVT.</li>
///   <li>Manual Disabled exposure algorithm on the NVT.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum tt__ExposureMode                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
///
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum tt__ExposurePriority            Priority                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
///
/// Element "Window" of type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinExposureTime" of type xs:float.
    float                                MinExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxExposureTime" of type xs:float.
    float                                MaxExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinGain" of type xs:float.
    float                                MinGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxGain" of type xs:float.
    float                                MaxGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinIris" of type xs:float.
    float                                MinIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxIris" of type xs:float.
    float                                MaxIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
///
/// Element "ExposureTime" of type xs:float.
    float                                ExposureTime                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
///
/// Element "Gain" of type xs:float.
    float                                Gain                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// </BLOCKQUOTE></PRE>
///
/// Element "Iris" of type xs:float.
    float                                Iris                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange is a complexType.
///
/// @note class tt__WideDynamicRange operations:
/// - tt__WideDynamicRange* soap_new_tt__WideDynamicRange(soap*) allocate and default initialize
/// - tt__WideDynamicRange* soap_new_tt__WideDynamicRange(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRange* soap_new_req_tt__WideDynamicRange(soap*, ...) allocate, set required members
/// - tt__WideDynamicRange* soap_new_set_tt__WideDynamicRange(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRange(soap*, tt__WideDynamicRange*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange(soap*, tt__WideDynamicRange*) serialize to a stream
/// - tt__WideDynamicRange* tt__WideDynamicRange::soap_dup(soap*) returns deep copy of tt__WideDynamicRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRange::soap_del() deep deletes tt__WideDynamicRange data members, use only after tt__WideDynamicRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRange::soap_type() returns SOAP_TYPE_tt__WideDynamicRange or derived type identifier
class tt__WideDynamicRange
{ public:
/// <PRE><BLOCKQUOTE>
///   White dynamic range (on/off)
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum tt__WideDynamicMode             Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unitless)
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation is a complexType.
///
/// @note class tt__BacklightCompensation operations:
/// - tt__BacklightCompensation* soap_new_tt__BacklightCompensation(soap*) allocate and default initialize
/// - tt__BacklightCompensation* soap_new_tt__BacklightCompensation(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensation* soap_new_req_tt__BacklightCompensation(soap*, ...) allocate, set required members
/// - tt__BacklightCompensation* soap_new_set_tt__BacklightCompensation(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensation::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensation(soap*, tt__BacklightCompensation*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation(soap*, tt__BacklightCompensation*) serialize to a stream
/// - tt__BacklightCompensation* tt__BacklightCompensation::soap_dup(soap*) returns deep copy of tt__BacklightCompensation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensation::soap_del() deep deletes tt__BacklightCompensation data members, use only after tt__BacklightCompensation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensation::soap_type() returns SOAP_TYPE_tt__BacklightCompensation or derived type identifier
class tt__BacklightCompensation
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum tt__BacklightCompensationMode   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":BacklightCompensationOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ExposureOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":WhiteBalanceOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusMove is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AbsoluteFocus is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RelativeFocus is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ContinuousFocus is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MoveOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RelativeFocusOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ContinuousFocusOptions is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance is a complexType.
///
/// @note class tt__WhiteBalance operations:
/// - tt__WhiteBalance* soap_new_tt__WhiteBalance(soap*) allocate and default initialize
/// - tt__WhiteBalance* soap_new_tt__WhiteBalance(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance* soap_new_req_tt__WhiteBalance(soap*, ...) allocate, set required members
/// - tt__WhiteBalance* soap_new_set_tt__WhiteBalance(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance(soap*, tt__WhiteBalance*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance(soap*, tt__WhiteBalance*) serialize to a stream
/// - tt__WhiteBalance* tt__WhiteBalance::soap_dup(soap*) returns deep copy of tt__WhiteBalance, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance::soap_del() deep deletes tt__WhiteBalance data members, use only after tt__WhiteBalance::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance::soap_type() returns SOAP_TYPE_tt__WhiteBalance or derived type identifier
class tt__WhiteBalance
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto whitebalancing mode (auto/manual).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum tt__WhiteBalanceMode            Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CrGain" of type xs:float.
    float                                CrGain                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CbGain" of type xs:float.
    float                                CbGain                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingStatus20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingStatus20Extension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusStatus20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusStatus20Extension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the ImagingSettings of a VideoSource. The supported options and ranges can be obtained via the GetOptions command.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ImagingSettings20 operations:
/// - tt__ImagingSettings20* soap_new_tt__ImagingSettings20(soap*) allocate and default initialize
/// - tt__ImagingSettings20* soap_new_tt__ImagingSettings20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettings20* soap_new_req_tt__ImagingSettings20(soap*, ...) allocate, set required members
/// - tt__ImagingSettings20* soap_new_set_tt__ImagingSettings20(soap*, ...) allocate, set all public members
/// - tt__ImagingSettings20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettings20(soap*, tt__ImagingSettings20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings20(soap*, tt__ImagingSettings20*) serialize to a stream
/// - tt__ImagingSettings20* tt__ImagingSettings20::soap_dup(soap*) returns deep copy of tt__ImagingSettings20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettings20::soap_del() deep deletes tt__ImagingSettings20 data members, use only after tt__ImagingSettings20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettings20::soap_type() returns SOAP_TYPE_tt__ImagingSettings20 or derived type identifier
class tt__ImagingSettings20
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "BacklightCompensation" of type "http://www.onvif.org/ver10/schema":BacklightCompensation20.
    tt__BacklightCompensation20*         BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Brightness" of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "ColorSaturation" of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Contrast" of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "Exposure" of type "http://www.onvif.org/ver10/schema":Exposure20.
    tt__Exposure20*                      Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Focus" of type "http://www.onvif.org/ver10/schema":FocusConfiguration20.
    tt__FocusConfiguration20*            Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "IrCutFilter" of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum tt__IrCutFilterMode*            IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Sharpness" of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WideDynamicRange" of type "http://www.onvif.org/ver10/schema":WideDynamicRange20.
    tt__WideDynamicRange20*              WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "WhiteBalance" of type "http://www.onvif.org/ver10/schema":WhiteBalance20.
    tt__WhiteBalance20*                  WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20.
    tt__ImagingSettingsExtension20*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20 is a complexType.
///
/// @note class tt__ImagingSettingsExtension20 operations:
/// - tt__ImagingSettingsExtension20* soap_new_tt__ImagingSettingsExtension20(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension20* soap_new_tt__ImagingSettingsExtension20(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension20* soap_new_req_tt__ImagingSettingsExtension20(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension20* soap_new_set_tt__ImagingSettingsExtension20(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension20::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension20(soap*, tt__ImagingSettingsExtension20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension20(soap*, tt__ImagingSettingsExtension20*) serialize to a stream
/// - tt__ImagingSettingsExtension20* tt__ImagingSettingsExtension20::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension20::soap_del() deep deletes tt__ImagingSettingsExtension20 data members, use only after tt__ImagingSettingsExtension20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension20::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension20 or derived type identifier
class tt__ImagingSettingsExtension20
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImageStabilization" of type "http://www.onvif.org/ver10/schema":ImageStabilization.
    tt__ImageStabilization*              ImageStabilization             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202.
    tt__ImagingSettingsExtension202*     Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202 is a complexType.
///
/// @note class tt__ImagingSettingsExtension202 operations:
/// - tt__ImagingSettingsExtension202* soap_new_tt__ImagingSettingsExtension202(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension202* soap_new_tt__ImagingSettingsExtension202(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension202* soap_new_req_tt__ImagingSettingsExtension202(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension202* soap_new_set_tt__ImagingSettingsExtension202(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension202::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension202(soap*, tt__ImagingSettingsExtension202*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension202(soap*, tt__ImagingSettingsExtension202*) serialize to a stream
/// - tt__ImagingSettingsExtension202* tt__ImagingSettingsExtension202::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension202, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension202::soap_del() deep deletes tt__ImagingSettingsExtension202 data members, use only after tt__ImagingSettingsExtension202::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension202::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension202 or derived type identifier
class tt__ImagingSettingsExtension202
{ public:
/// <PRE><BLOCKQUOTE>
///   An optional parameter applied to only auto mode to adjust timing of toggling Ir cut filter.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IrCutFilterAutoAdjustment* is 0..unbounded.
  $ int                                  __sizeIrCutFilterAutoAdjustment 0;
/// Pointer to array tt__IrCutFilterAutoAdjustment* of size 0..unbounded.
    tt__IrCutFilterAutoAdjustment*      *IrCutFilterAutoAdjustment      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203.
    tt__ImagingSettingsExtension203*     Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203 is a complexType.
///
/// @note class tt__ImagingSettingsExtension203 operations:
/// - tt__ImagingSettingsExtension203* soap_new_tt__ImagingSettingsExtension203(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension203* soap_new_tt__ImagingSettingsExtension203(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension203* soap_new_req_tt__ImagingSettingsExtension203(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension203* soap_new_set_tt__ImagingSettingsExtension203(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension203::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension203(soap*, tt__ImagingSettingsExtension203*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension203(soap*, tt__ImagingSettingsExtension203*) serialize to a stream
/// - tt__ImagingSettingsExtension203* tt__ImagingSettingsExtension203::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension203, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension203::soap_del() deep deletes tt__ImagingSettingsExtension203 data members, use only after tt__ImagingSettingsExtension203::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension203::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension203 or derived type identifier
class tt__ImagingSettingsExtension203
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Contrast Compensation.
/// </BLOCKQUOTE></PRE>
///
/// Element "ToneCompensation" of type "http://www.onvif.org/ver10/schema":ToneCompensation.
    tt__ToneCompensation*                ToneCompensation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Defogging.
/// </BLOCKQUOTE></PRE>
///
/// Element "Defogging" of type "http://www.onvif.org/ver10/schema":Defogging.
    tt__Defogging*                       Defogging                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Noise Reduction.
/// </BLOCKQUOTE></PRE>
///
/// Element "NoiseReduction" of type "http://www.onvif.org/ver10/schema":NoiseReduction.
    tt__NoiseReduction*                  NoiseReduction                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204.
    tt__ImagingSettingsExtension204*     Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204 is a complexType.
///
/// @note class tt__ImagingSettingsExtension204 operations:
/// - tt__ImagingSettingsExtension204* soap_new_tt__ImagingSettingsExtension204(soap*) allocate and default initialize
/// - tt__ImagingSettingsExtension204* soap_new_tt__ImagingSettingsExtension204(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettingsExtension204* soap_new_req_tt__ImagingSettingsExtension204(soap*, ...) allocate, set required members
/// - tt__ImagingSettingsExtension204* soap_new_set_tt__ImagingSettingsExtension204(soap*, ...) allocate, set all public members
/// - tt__ImagingSettingsExtension204::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettingsExtension204(soap*, tt__ImagingSettingsExtension204*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension204(soap*, tt__ImagingSettingsExtension204*) serialize to a stream
/// - tt__ImagingSettingsExtension204* tt__ImagingSettingsExtension204::soap_dup(soap*) returns deep copy of tt__ImagingSettingsExtension204, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettingsExtension204::soap_del() deep deletes tt__ImagingSettingsExtension204 data members, use only after tt__ImagingSettingsExtension204::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingSettingsExtension204::soap_type() returns SOAP_TYPE_tt__ImagingSettingsExtension204 or derived type identifier
class tt__ImagingSettingsExtension204
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilization is a complexType.
///
/// @note class tt__ImageStabilization operations:
/// - tt__ImageStabilization* soap_new_tt__ImageStabilization(soap*) allocate and default initialize
/// - tt__ImageStabilization* soap_new_tt__ImageStabilization(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilization* soap_new_req_tt__ImageStabilization(soap*, ...) allocate, set required members
/// - tt__ImageStabilization* soap_new_set_tt__ImageStabilization(soap*, ...) allocate, set all public members
/// - tt__ImageStabilization::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilization(soap*, tt__ImageStabilization*) deserialize from a stream
/// - int soap_write_tt__ImageStabilization(soap*, tt__ImageStabilization*) serialize to a stream
/// - tt__ImageStabilization* tt__ImageStabilization::soap_dup(soap*) returns deep copy of tt__ImageStabilization, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilization::soap_del() deep deletes tt__ImageStabilization data members, use only after tt__ImageStabilization::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilization::soap_type() returns SOAP_TYPE_tt__ImageStabilization or derived type identifier
class tt__ImageStabilization
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ImageStabilizationMode.
    enum tt__ImageStabilizationMode      Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified)
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ImageStabilizationExtension.
    tt__ImageStabilizationExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationExtension is a complexType.
///
/// @note class tt__ImageStabilizationExtension operations:
/// - tt__ImageStabilizationExtension* soap_new_tt__ImageStabilizationExtension(soap*) allocate and default initialize
/// - tt__ImageStabilizationExtension* soap_new_tt__ImageStabilizationExtension(soap*, int num) allocate and default initialize an array
/// - tt__ImageStabilizationExtension* soap_new_req_tt__ImageStabilizationExtension(soap*, ...) allocate, set required members
/// - tt__ImageStabilizationExtension* soap_new_set_tt__ImageStabilizationExtension(soap*, ...) allocate, set all public members
/// - tt__ImageStabilizationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImageStabilizationExtension(soap*, tt__ImageStabilizationExtension*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationExtension(soap*, tt__ImageStabilizationExtension*) serialize to a stream
/// - tt__ImageStabilizationExtension* tt__ImageStabilizationExtension::soap_dup(soap*) returns deep copy of tt__ImageStabilizationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImageStabilizationExtension::soap_del() deep deletes tt__ImageStabilizationExtension data members, use only after tt__ImageStabilizationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImageStabilizationExtension::soap_type() returns SOAP_TYPE_tt__ImageStabilizationExtension or derived type identifier
class tt__ImageStabilizationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustment is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustment operations:
/// - tt__IrCutFilterAutoAdjustment* soap_new_tt__IrCutFilterAutoAdjustment(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustment* soap_new_tt__IrCutFilterAutoAdjustment(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustment* soap_new_req_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustment* soap_new_set_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustment::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustment(soap*, tt__IrCutFilterAutoAdjustment*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustment(soap*, tt__IrCutFilterAutoAdjustment*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustment* tt__IrCutFilterAutoAdjustment::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustment, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustment::soap_del() deep deletes tt__IrCutFilterAutoAdjustment data members, use only after tt__IrCutFilterAutoAdjustment::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustment::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustment or derived type identifier
class tt__IrCutFilterAutoAdjustment
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies which boundaries to automatically toggle Ir cut filter following parameters are applied to. Its options shall be chosen from tt:IrCutFilterAutoBoundaryType.
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundaryType" of type xs:string.
    char*                                BoundaryType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Adjusts boundary exposure level for toggling Ir cut filter to on/off specified with unitless normalized value from +1.0 to -1.0. Zero is default and -1.0 is the darkest adjustment (Unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundaryOffset" of type xs:float.
    float*                               BoundaryOffset                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delay time of toggling Ir cut filter to on/off after crossing of the boundary exposure levels.
/// </BLOCKQUOTE></PRE>
///
/// Element "ResponseTime" of type xs:duration.
    xsd__duration                        ResponseTime                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension.
    tt__IrCutFilterAutoAdjustmentExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension is a complexType.
///
/// @note class tt__IrCutFilterAutoAdjustmentExtension operations:
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*) allocate and default initialize
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*, int num) allocate and default initialize an array
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set required members
/// - tt__IrCutFilterAutoAdjustmentExtension* soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set all public members
/// - tt__IrCutFilterAutoAdjustmentExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap*, tt__IrCutFilterAutoAdjustmentExtension*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentExtension(soap*, tt__IrCutFilterAutoAdjustmentExtension*) serialize to a stream
/// - tt__IrCutFilterAutoAdjustmentExtension* tt__IrCutFilterAutoAdjustmentExtension::soap_dup(soap*) returns deep copy of tt__IrCutFilterAutoAdjustmentExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IrCutFilterAutoAdjustmentExtension::soap_del() deep deletes tt__IrCutFilterAutoAdjustmentExtension data members, use only after tt__IrCutFilterAutoAdjustmentExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IrCutFilterAutoAdjustmentExtension::soap_type() returns SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension or derived type identifier
class tt__IrCutFilterAutoAdjustmentExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether WDR mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__WideDynamicRange20 operations:
/// - tt__WideDynamicRange20* soap_new_tt__WideDynamicRange20(soap*) allocate and default initialize
/// - tt__WideDynamicRange20* soap_new_tt__WideDynamicRange20(soap*, int num) allocate and default initialize an array
/// - tt__WideDynamicRange20* soap_new_req_tt__WideDynamicRange20(soap*, ...) allocate, set required members
/// - tt__WideDynamicRange20* soap_new_set_tt__WideDynamicRange20(soap*, ...) allocate, set all public members
/// - tt__WideDynamicRange20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WideDynamicRange20(soap*, tt__WideDynamicRange20*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange20(soap*, tt__WideDynamicRange20*) serialize to a stream
/// - tt__WideDynamicRange20* tt__WideDynamicRange20::soap_dup(soap*) returns deep copy of tt__WideDynamicRange20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WideDynamicRange20::soap_del() deep deletes tt__WideDynamicRange20 data members, use only after tt__WideDynamicRange20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WideDynamicRange20::soap_type() returns SOAP_TYPE_tt__WideDynamicRange20 or derived type identifier
class tt__WideDynamicRange20
{ public:
/// <PRE><BLOCKQUOTE>
///   Wide dynamic range mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum tt__WideDynamicMode             Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether BLC mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__BacklightCompensation20 operations:
/// - tt__BacklightCompensation20* soap_new_tt__BacklightCompensation20(soap*) allocate and default initialize
/// - tt__BacklightCompensation20* soap_new_tt__BacklightCompensation20(soap*, int num) allocate and default initialize an array
/// - tt__BacklightCompensation20* soap_new_req_tt__BacklightCompensation20(soap*, ...) allocate, set required members
/// - tt__BacklightCompensation20* soap_new_set_tt__BacklightCompensation20(soap*, ...) allocate, set all public members
/// - tt__BacklightCompensation20::soap_default(soap*) default initialize members
/// - int soap_read_tt__BacklightCompensation20(soap*, tt__BacklightCompensation20*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation20(soap*, tt__BacklightCompensation20*) serialize to a stream
/// - tt__BacklightCompensation20* tt__BacklightCompensation20::soap_dup(soap*) returns deep copy of tt__BacklightCompensation20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BacklightCompensation20::soap_del() deep deletes tt__BacklightCompensation20 data members, use only after tt__BacklightCompensation20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BacklightCompensation20::soap_type() returns SOAP_TYPE_tt__BacklightCompensation20 or derived type identifier
class tt__BacklightCompensation20
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum tt__BacklightCompensationMode   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the exposure settings.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__Exposure20 operations:
/// - tt__Exposure20* soap_new_tt__Exposure20(soap*) allocate and default initialize
/// - tt__Exposure20* soap_new_tt__Exposure20(soap*, int num) allocate and default initialize an array
/// - tt__Exposure20* soap_new_req_tt__Exposure20(soap*, ...) allocate, set required members
/// - tt__Exposure20* soap_new_set_tt__Exposure20(soap*, ...) allocate, set all public members
/// - tt__Exposure20::soap_default(soap*) default initialize members
/// - int soap_read_tt__Exposure20(soap*, tt__Exposure20*) deserialize from a stream
/// - int soap_write_tt__Exposure20(soap*, tt__Exposure20*) serialize to a stream
/// - tt__Exposure20* tt__Exposure20::soap_dup(soap*) returns deep copy of tt__Exposure20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Exposure20::soap_del() deep deletes tt__Exposure20 data members, use only after tt__Exposure20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Exposure20::soap_type() returns SOAP_TYPE_tt__Exposure20 or derived type identifier
class tt__Exposure20
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the device.</li>
///   <li>Manual Disabled exposure algorithm on the device.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum tt__ExposureMode                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
///
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum tt__ExposurePriority*           Priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
///
/// Element "Window" of type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinExposureTime" of type xs:float.
    float*                               MinExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxExposureTime" of type xs:float.
    float*                               MaxExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinGain" of type xs:float.
    float*                               MinGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxGain" of type xs:float.
    float*                               MaxGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm. 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
///
/// Element "MinIris" of type xs:float.
    float*                               MinIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm. 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxIris" of type xs:float.
    float*                               MaxIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
///
/// Element "ExposureTime" of type xs:float.
    float*                               ExposureTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
///
/// Element "Gain" of type xs:float.
    float*                               Gain                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Iris" of type xs:float.
    float*                               Iris                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensation is a complexType.
///
/// @note class tt__ToneCompensation operations:
/// - tt__ToneCompensation* soap_new_tt__ToneCompensation(soap*) allocate and default initialize
/// - tt__ToneCompensation* soap_new_tt__ToneCompensation(soap*, int num) allocate and default initialize an array
/// - tt__ToneCompensation* soap_new_req_tt__ToneCompensation(soap*, ...) allocate, set required members
/// - tt__ToneCompensation* soap_new_set_tt__ToneCompensation(soap*, ...) allocate, set all public members
/// - tt__ToneCompensation::soap_default(soap*) default initialize members
/// - int soap_read_tt__ToneCompensation(soap*, tt__ToneCompensation*) deserialize from a stream
/// - int soap_write_tt__ToneCompensation(soap*, tt__ToneCompensation*) serialize to a stream
/// - tt__ToneCompensation* tt__ToneCompensation::soap_dup(soap*) returns deep copy of tt__ToneCompensation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ToneCompensation::soap_del() deep deletes tt__ToneCompensation data members, use only after tt__ToneCompensation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ToneCompensation::soap_type() returns SOAP_TYPE_tt__ToneCompensation or derived type identifier
class tt__ToneCompensation
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic ToneCompensation feature. Its options shall be chosen from tt:ToneCompensationMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type xs:string.
    char*                                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ToneCompensationExtension.
    tt__ToneCompensationExtension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationExtension is a complexType.
///
/// @note class tt__ToneCompensationExtension operations:
/// - tt__ToneCompensationExtension* soap_new_tt__ToneCompensationExtension(soap*) allocate and default initialize
/// - tt__ToneCompensationExtension* soap_new_tt__ToneCompensationExtension(soap*, int num) allocate and default initialize an array
/// - tt__ToneCompensationExtension* soap_new_req_tt__ToneCompensationExtension(soap*, ...) allocate, set required members
/// - tt__ToneCompensationExtension* soap_new_set_tt__ToneCompensationExtension(soap*, ...) allocate, set all public members
/// - tt__ToneCompensationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ToneCompensationExtension(soap*, tt__ToneCompensationExtension*) deserialize from a stream
/// - int soap_write_tt__ToneCompensationExtension(soap*, tt__ToneCompensationExtension*) serialize to a stream
/// - tt__ToneCompensationExtension* tt__ToneCompensationExtension::soap_dup(soap*) returns deep copy of tt__ToneCompensationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ToneCompensationExtension::soap_del() deep deletes tt__ToneCompensationExtension data members, use only after tt__ToneCompensationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ToneCompensationExtension::soap_type() returns SOAP_TYPE_tt__ToneCompensationExtension or derived type identifier
class tt__ToneCompensationExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Defogging is a complexType.
///
/// @note class tt__Defogging operations:
/// - tt__Defogging* soap_new_tt__Defogging(soap*) allocate and default initialize
/// - tt__Defogging* soap_new_tt__Defogging(soap*, int num) allocate and default initialize an array
/// - tt__Defogging* soap_new_req_tt__Defogging(soap*, ...) allocate, set required members
/// - tt__Defogging* soap_new_set_tt__Defogging(soap*, ...) allocate, set all public members
/// - tt__Defogging::soap_default(soap*) default initialize members
/// - int soap_read_tt__Defogging(soap*, tt__Defogging*) deserialize from a stream
/// - int soap_write_tt__Defogging(soap*, tt__Defogging*) serialize to a stream
/// - tt__Defogging* tt__Defogging::soap_dup(soap*) returns deep copy of tt__Defogging, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Defogging::soap_del() deep deletes tt__Defogging data members, use only after tt__Defogging::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Defogging::soap_type() returns SOAP_TYPE_tt__Defogging or derived type identifier
class tt__Defogging
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic Defogging feature. Its options shall be chosen from tt:DefoggingMode Type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type xs:string.
    char*                                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DefoggingExtension.
    tt__DefoggingExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingExtension is a complexType.
///
/// @note class tt__DefoggingExtension operations:
/// - tt__DefoggingExtension* soap_new_tt__DefoggingExtension(soap*) allocate and default initialize
/// - tt__DefoggingExtension* soap_new_tt__DefoggingExtension(soap*, int num) allocate and default initialize an array
/// - tt__DefoggingExtension* soap_new_req_tt__DefoggingExtension(soap*, ...) allocate, set required members
/// - tt__DefoggingExtension* soap_new_set_tt__DefoggingExtension(soap*, ...) allocate, set all public members
/// - tt__DefoggingExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DefoggingExtension(soap*, tt__DefoggingExtension*) deserialize from a stream
/// - int soap_write_tt__DefoggingExtension(soap*, tt__DefoggingExtension*) serialize to a stream
/// - tt__DefoggingExtension* tt__DefoggingExtension::soap_dup(soap*) returns deep copy of tt__DefoggingExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DefoggingExtension::soap_del() deep deletes tt__DefoggingExtension data members, use only after tt__DefoggingExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DefoggingExtension::soap_type() returns SOAP_TYPE_tt__DefoggingExtension or derived type identifier
class tt__DefoggingExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NoiseReduction is a complexType.
///
/// @note class tt__NoiseReduction operations:
/// - tt__NoiseReduction* soap_new_tt__NoiseReduction(soap*) allocate and default initialize
/// - tt__NoiseReduction* soap_new_tt__NoiseReduction(soap*, int num) allocate and default initialize an array
/// - tt__NoiseReduction* soap_new_req_tt__NoiseReduction(soap*, ...) allocate, set required members
/// - tt__NoiseReduction* soap_new_set_tt__NoiseReduction(soap*, ...) allocate, set all public members
/// - tt__NoiseReduction::soap_default(soap*) default initialize members
/// - int soap_read_tt__NoiseReduction(soap*, tt__NoiseReduction*) deserialize from a stream
/// - int soap_write_tt__NoiseReduction(soap*, tt__NoiseReduction*) serialize to a stream
/// - tt__NoiseReduction* tt__NoiseReduction::soap_dup(soap*) returns deep copy of tt__NoiseReduction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NoiseReduction::soap_del() deep deletes tt__NoiseReduction data members, use only after tt__NoiseReduction::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NoiseReduction::soap_type() returns SOAP_TYPE_tt__NoiseReduction or derived type identifier
class tt__NoiseReduction
{ public:
/// <PRE><BLOCKQUOTE>
///   Level parameter specified with unitless normalized value from 0.0 to +1.0. Level=0 means no noise reduction or minimal noise reduction.
/// </BLOCKQUOTE></PRE>
///
/// Element "Level" of type xs:float.
    float                                Level                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions20Extension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions20Extension2 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions20Extension3 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingOptions20Extension4 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImageStabilizationOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImageStabilizationOptionsExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptionsExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ExposureOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MoveOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RelativeFocusOptions20 is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20 is a complexType.
///
/// @note class tt__WhiteBalance20 operations:
/// - tt__WhiteBalance20* soap_new_tt__WhiteBalance20(soap*) allocate and default initialize
/// - tt__WhiteBalance20* soap_new_tt__WhiteBalance20(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance20* soap_new_req_tt__WhiteBalance20(soap*, ...) allocate, set required members
/// - tt__WhiteBalance20* soap_new_set_tt__WhiteBalance20(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance20::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance20(soap*, tt__WhiteBalance20*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20(soap*, tt__WhiteBalance20*) serialize to a stream
/// - tt__WhiteBalance20* tt__WhiteBalance20::soap_dup(soap*) returns deep copy of tt__WhiteBalance20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance20::soap_del() deep deletes tt__WhiteBalance20 data members, use only after tt__WhiteBalance20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance20::soap_type() returns SOAP_TYPE_tt__WhiteBalance20 or derived type identifier
class tt__WhiteBalance20
{ public:
/// <PRE><BLOCKQUOTE>
///   'AUTO' or 'MANUAL'
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum tt__WhiteBalanceMode            Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CrGain" of type xs:float.
    float*                               CrGain                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
///
/// Element "CbGain" of type xs:float.
    float*                               CbGain                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":WhiteBalance20Extension.
    tt__WhiteBalance20Extension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20Extension is a complexType.
///
/// @note class tt__WhiteBalance20Extension operations:
/// - tt__WhiteBalance20Extension* soap_new_tt__WhiteBalance20Extension(soap*) allocate and default initialize
/// - tt__WhiteBalance20Extension* soap_new_tt__WhiteBalance20Extension(soap*, int num) allocate and default initialize an array
/// - tt__WhiteBalance20Extension* soap_new_req_tt__WhiteBalance20Extension(soap*, ...) allocate, set required members
/// - tt__WhiteBalance20Extension* soap_new_set_tt__WhiteBalance20Extension(soap*, ...) allocate, set all public members
/// - tt__WhiteBalance20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__WhiteBalance20Extension(soap*, tt__WhiteBalance20Extension*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20Extension(soap*, tt__WhiteBalance20Extension*) serialize to a stream
/// - tt__WhiteBalance20Extension* tt__WhiteBalance20Extension::soap_dup(soap*) returns deep copy of tt__WhiteBalance20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__WhiteBalance20Extension::soap_del() deep deletes tt__WhiteBalance20Extension data members, use only after tt__WhiteBalance20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__WhiteBalance20Extension::soap_type() returns SOAP_TYPE_tt__WhiteBalance20Extension or derived type identifier
class tt__WhiteBalance20Extension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20 is a complexType.
///
/// @note class tt__FocusConfiguration20 operations:
/// - tt__FocusConfiguration20* soap_new_tt__FocusConfiguration20(soap*) allocate and default initialize
/// - tt__FocusConfiguration20* soap_new_tt__FocusConfiguration20(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration20* soap_new_req_tt__FocusConfiguration20(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration20* soap_new_set_tt__FocusConfiguration20(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration20::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration20(soap*, tt__FocusConfiguration20*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20(soap*, tt__FocusConfiguration20*) serialize to a stream
/// - tt__FocusConfiguration20* tt__FocusConfiguration20::soap_dup(soap*) returns deep copy of tt__FocusConfiguration20, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration20::soap_del() deep deletes tt__FocusConfiguration20 data members, use only after tt__FocusConfiguration20::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration20::soap_type() returns SOAP_TYPE_tt__FocusConfiguration20 or derived type identifier
class tt__FocusConfiguration20
{ public:
/// <PRE><BLOCKQUOTE>
///   Mode of auto focus.
///   <ul>
///   <li>AUTO - The device automatically adjusts focus.</li>
///   <li>MANUAL - The device does not automatically adjust focus.</li>
///   </ul>
///   Note: for devices supporting both manual and auto operation at the same time manual operation may be supported even if the Mode parameter is set to Auto.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoFocusMode" of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum tt__AutoFocusMode               AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of type xs:float.
    float*                               DefaultSpeed                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "NearLimit" of type xs:float.
    float*                               NearLimit                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "FarLimit" of type xs:float.
    float*                               FarLimit                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension.
    tt__FocusConfiguration20Extension*   Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Zero or more modes as defined in enumeration tt:AFModes.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AFMode" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList                   AFMode                         0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension is a complexType.
///
/// @note class tt__FocusConfiguration20Extension operations:
/// - tt__FocusConfiguration20Extension* soap_new_tt__FocusConfiguration20Extension(soap*) allocate and default initialize
/// - tt__FocusConfiguration20Extension* soap_new_tt__FocusConfiguration20Extension(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration20Extension* soap_new_req_tt__FocusConfiguration20Extension(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration20Extension* soap_new_set_tt__FocusConfiguration20Extension(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration20Extension::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration20Extension(soap*, tt__FocusConfiguration20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20Extension(soap*, tt__FocusConfiguration20Extension*) serialize to a stream
/// - tt__FocusConfiguration20Extension* tt__FocusConfiguration20Extension::soap_dup(soap*) returns deep copy of tt__FocusConfiguration20Extension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration20Extension::soap_del() deep deletes tt__FocusConfiguration20Extension data members, use only after tt__FocusConfiguration20Extension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration20Extension::soap_type() returns SOAP_TYPE_tt__FocusConfiguration20Extension or derived type identifier
class tt__FocusConfiguration20Extension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusOptions20 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusOptions20Extension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ToneCompensationOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":DefoggingOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":NoiseReductionOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MessageExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":ItemList is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   List of parameters according to the corresponding ItemListDescription.
///   Each item in the list shall have a unique name.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ItemList operations:
/// - tt__ItemList* soap_new_tt__ItemList(soap*) allocate and default initialize
/// - tt__ItemList* soap_new_tt__ItemList(soap*, int num) allocate and default initialize an array
/// - tt__ItemList* soap_new_req_tt__ItemList(soap*, ...) allocate, set required members
/// - tt__ItemList* soap_new_set_tt__ItemList(soap*, ...) allocate, set all public members
/// - tt__ItemList::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemList(soap*, tt__ItemList*) deserialize from a stream
/// - int soap_write_tt__ItemList(soap*, tt__ItemList*) serialize to a stream
/// - tt__ItemList* tt__ItemList::soap_dup(soap*) returns deep copy of tt__ItemList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemList::soap_del() deep deletes tt__ItemList data members, use only after tt__ItemList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemList::soap_type() returns SOAP_TYPE_tt__ItemList or derived type identifier
class tt__ItemList
{ public:
/// <PRE><BLOCKQUOTE>
///   Value name pair as defined by the corresponding description.
/// </BLOCKQUOTE></PRE>
///
/// Size of SimpleItem array is 0..unbounded.
  $ int                                  __sizeSimpleItem               0;
/// @note class _tt__ItemList_SimpleItem operations:
/// - _tt__ItemList_SimpleItem* soap_new__tt__ItemList_SimpleItem(soap*) allocate and default initialize
/// - _tt__ItemList_SimpleItem* soap_new__tt__ItemList_SimpleItem(soap*, int num) allocate and default initialize an array
/// - _tt__ItemList_SimpleItem* soap_new_req__tt__ItemList_SimpleItem(soap*, ...) allocate, set required members
/// - _tt__ItemList_SimpleItem* soap_new_set__tt__ItemList_SimpleItem(soap*, ...) allocate, set all public members
/// - _tt__ItemList_SimpleItem::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemList_SimpleItem(soap*, _tt__ItemList_SimpleItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_SimpleItem(soap*, _tt__ItemList_SimpleItem*) serialize to a stream
/// - _tt__ItemList_SimpleItem* _tt__ItemList_SimpleItem::soap_dup(soap*) returns deep copy of _tt__ItemList_SimpleItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemList_SimpleItem::soap_del() deep deletes _tt__ItemList_SimpleItem data members, use only after _tt__ItemList_SimpleItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemList_SimpleItem::soap_type() returns SOAP_TYPE__tt__ItemList_SimpleItem or derived type identifier
    class _tt__ItemList_SimpleItem
    { public:
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ char*                                Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Item value. The type is defined in the corresponding description.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Value" of type xs:anySimpleType.
  @ xsd__anySimpleType                   Value                          1;	///< Required attribute.
    }                                   *SimpleItem                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Complex value structure.
/// </BLOCKQUOTE></PRE>
///
/// Size of ElementItem array is 0..unbounded.
  $ int                                  __sizeElementItem              0;
/// @note class _tt__ItemList_ElementItem operations:
/// - _tt__ItemList_ElementItem* soap_new__tt__ItemList_ElementItem(soap*) allocate and default initialize
/// - _tt__ItemList_ElementItem* soap_new__tt__ItemList_ElementItem(soap*, int num) allocate and default initialize an array
/// - _tt__ItemList_ElementItem* soap_new_req__tt__ItemList_ElementItem(soap*, ...) allocate, set required members
/// - _tt__ItemList_ElementItem* soap_new_set__tt__ItemList_ElementItem(soap*, ...) allocate, set all public members
/// - _tt__ItemList_ElementItem::soap_default(soap*) default initialize members
/// - int soap_read__tt__ItemList_ElementItem(soap*, _tt__ItemList_ElementItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_ElementItem(soap*, _tt__ItemList_ElementItem*) serialize to a stream
/// - _tt__ItemList_ElementItem* _tt__ItemList_ElementItem::soap_dup(soap*) returns deep copy of _tt__ItemList_ElementItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__ItemList_ElementItem::soap_del() deep deletes _tt__ItemList_ElementItem data members, use only after _tt__ItemList_ElementItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__ItemList_ElementItem::soap_type() returns SOAP_TYPE__tt__ItemList_ElementItem or derived type identifier
    class _tt__ItemList_ElementItem
    { public:
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ char*                                Name                           1;	///< Required attribute.
    }                                   *ElementItem                    0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ItemListExtension.
    tt__ItemListExtension*               Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListExtension is a complexType.
///
/// @note class tt__ItemListExtension operations:
/// - tt__ItemListExtension* soap_new_tt__ItemListExtension(soap*) allocate and default initialize
/// - tt__ItemListExtension* soap_new_tt__ItemListExtension(soap*, int num) allocate and default initialize an array
/// - tt__ItemListExtension* soap_new_req_tt__ItemListExtension(soap*, ...) allocate, set required members
/// - tt__ItemListExtension* soap_new_set_tt__ItemListExtension(soap*, ...) allocate, set all public members
/// - tt__ItemListExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ItemListExtension(soap*, tt__ItemListExtension*) deserialize from a stream
/// - int soap_write_tt__ItemListExtension(soap*, tt__ItemListExtension*) serialize to a stream
/// - tt__ItemListExtension* tt__ItemListExtension::soap_dup(soap*) returns deep copy of tt__ItemListExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ItemListExtension::soap_del() deep deletes tt__ItemListExtension data members, use only after tt__ItemListExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ItemListExtension::soap_type() returns SOAP_TYPE_tt__ItemListExtension or derived type identifier
class tt__ItemListExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":MessageDescription is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MessageDescriptionExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ItemListDescription is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":Polyline is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration is a complexType.
///
/// @note class tt__AnalyticsEngineConfiguration operations:
/// - tt__AnalyticsEngineConfiguration* soap_new_tt__AnalyticsEngineConfiguration(soap*) allocate and default initialize
/// - tt__AnalyticsEngineConfiguration* soap_new_tt__AnalyticsEngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineConfiguration* soap_new_req_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineConfiguration* soap_new_set_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineConfiguration(soap*, tt__AnalyticsEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfiguration(soap*, tt__AnalyticsEngineConfiguration*) serialize to a stream
/// - tt__AnalyticsEngineConfiguration* tt__AnalyticsEngineConfiguration::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineConfiguration::soap_del() deep deletes tt__AnalyticsEngineConfiguration data members, use only after tt__AnalyticsEngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineConfiguration::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineConfiguration or derived type identifier
class tt__AnalyticsEngineConfiguration
{ public:
/// Size of array of tt__Config* is 0..unbounded.
  $ int                                  __sizeAnalyticsModule          0;
/// Pointer to array tt__Config* of size 0..unbounded.
    tt__Config*                         *AnalyticsModule                0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension.
    tt__AnalyticsEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension is a complexType.
///
/// @note class tt__AnalyticsEngineConfigurationExtension operations:
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_tt__AnalyticsEngineConfigurationExtension(soap*) allocate and default initialize
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_tt__AnalyticsEngineConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_req_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsEngineConfigurationExtension* soap_new_set_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsEngineConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsEngineConfigurationExtension(soap*, tt__AnalyticsEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfigurationExtension(soap*, tt__AnalyticsEngineConfigurationExtension*) serialize to a stream
/// - tt__AnalyticsEngineConfigurationExtension* tt__AnalyticsEngineConfigurationExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsEngineConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsEngineConfigurationExtension::soap_del() deep deletes tt__AnalyticsEngineConfigurationExtension data members, use only after tt__AnalyticsEngineConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsEngineConfigurationExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension or derived type identifier
class tt__AnalyticsEngineConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfiguration is a complexType.
///
/// @note class tt__RuleEngineConfiguration operations:
/// - tt__RuleEngineConfiguration* soap_new_tt__RuleEngineConfiguration(soap*) allocate and default initialize
/// - tt__RuleEngineConfiguration* soap_new_tt__RuleEngineConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__RuleEngineConfiguration* soap_new_req_tt__RuleEngineConfiguration(soap*, ...) allocate, set required members
/// - tt__RuleEngineConfiguration* soap_new_set_tt__RuleEngineConfiguration(soap*, ...) allocate, set all public members
/// - tt__RuleEngineConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__RuleEngineConfiguration(soap*, tt__RuleEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfiguration(soap*, tt__RuleEngineConfiguration*) serialize to a stream
/// - tt__RuleEngineConfiguration* tt__RuleEngineConfiguration::soap_dup(soap*) returns deep copy of tt__RuleEngineConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RuleEngineConfiguration::soap_del() deep deletes tt__RuleEngineConfiguration data members, use only after tt__RuleEngineConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RuleEngineConfiguration::soap_type() returns SOAP_TYPE_tt__RuleEngineConfiguration or derived type identifier
class tt__RuleEngineConfiguration
{ public:
/// Size of array of tt__Config* is 0..unbounded.
  $ int                                  __sizeRule                     0;
/// Pointer to array tt__Config* of size 0..unbounded.
    tt__Config*                         *Rule                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension.
    tt__RuleEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension is a complexType.
///
/// @note class tt__RuleEngineConfigurationExtension operations:
/// - tt__RuleEngineConfigurationExtension* soap_new_tt__RuleEngineConfigurationExtension(soap*) allocate and default initialize
/// - tt__RuleEngineConfigurationExtension* soap_new_tt__RuleEngineConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__RuleEngineConfigurationExtension* soap_new_req_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__RuleEngineConfigurationExtension* soap_new_set_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__RuleEngineConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RuleEngineConfigurationExtension(soap*, tt__RuleEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfigurationExtension(soap*, tt__RuleEngineConfigurationExtension*) serialize to a stream
/// - tt__RuleEngineConfigurationExtension* tt__RuleEngineConfigurationExtension::soap_dup(soap*) returns deep copy of tt__RuleEngineConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RuleEngineConfigurationExtension::soap_del() deep deletes tt__RuleEngineConfigurationExtension data members, use only after tt__RuleEngineConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RuleEngineConfigurationExtension::soap_type() returns SOAP_TYPE_tt__RuleEngineConfigurationExtension or derived type identifier
class tt__RuleEngineConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Config is a complexType.
///
/// @note class tt__Config operations:
/// - tt__Config* soap_new_tt__Config(soap*) allocate and default initialize
/// - tt__Config* soap_new_tt__Config(soap*, int num) allocate and default initialize an array
/// - tt__Config* soap_new_req_tt__Config(soap*, ...) allocate, set required members
/// - tt__Config* soap_new_set_tt__Config(soap*, ...) allocate, set all public members
/// - tt__Config::soap_default(soap*) default initialize members
/// - int soap_read_tt__Config(soap*, tt__Config*) deserialize from a stream
/// - int soap_write_tt__Config(soap*, tt__Config*) serialize to a stream
/// - tt__Config* tt__Config::soap_dup(soap*) returns deep copy of tt__Config, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Config::soap_del() deep deletes tt__Config data members, use only after tt__Config::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Config::soap_type() returns SOAP_TYPE_tt__Config or derived type identifier
class tt__Config
{ public:
/// <PRE><BLOCKQUOTE>
///   List of configuration parameters as defined in the correspding description.
/// </BLOCKQUOTE></PRE>
///
/// Element "Parameters" of type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Parameters                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of the configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Name" of type xs:string.
  @ char*                                Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The Type attribute specifies the type of rule and shall be equal to value of one of Name attributes of ConfigDescription elements returned by GetSupportedRules and GetSupportedAnalyticsModules command.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Type" of type xs:QName.
  @ _QName                               Type                           1;	///< Required attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ConfigDescription is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SupportedRules is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SupportedRulesExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SupportedAnalyticsModules is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PolylineArray is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PolylineArrayExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PolylineArrayConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MotionExpression is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MotionExpressionConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":CellLayout is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PaneConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PaneLayout is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":Layout is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":LayoutExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":CodingCapabilities is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":LayoutOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":LayoutOptionsExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PaneLayoutOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PaneOptionExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":Receiver is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ReceiverConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ReceiverStateInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SourceReference is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":DateTimeRange is a complexType.
///
/// @note class tt__DateTimeRange operations:
/// - tt__DateTimeRange* soap_new_tt__DateTimeRange(soap*) allocate and default initialize
/// - tt__DateTimeRange* soap_new_tt__DateTimeRange(soap*, int num) allocate and default initialize an array
/// - tt__DateTimeRange* soap_new_req_tt__DateTimeRange(soap*, ...) allocate, set required members
/// - tt__DateTimeRange* soap_new_set_tt__DateTimeRange(soap*, ...) allocate, set all public members
/// - tt__DateTimeRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__DateTimeRange(soap*, tt__DateTimeRange*) deserialize from a stream
/// - int soap_write_tt__DateTimeRange(soap*, tt__DateTimeRange*) serialize to a stream
/// - tt__DateTimeRange* tt__DateTimeRange::soap_dup(soap*) returns deep copy of tt__DateTimeRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DateTimeRange::soap_del() deep deletes tt__DateTimeRange data members, use only after tt__DateTimeRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DateTimeRange::soap_type() returns SOAP_TYPE_tt__DateTimeRange or derived type identifier
class tt__DateTimeRange
{ public:
/// Element "From" of type xs:dateTime.
    time_t                               From                           1;	///< Required element.
/// Element "Until" of type xs:dateTime.
    time_t                               Until                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingSummary is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SearchScope is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SearchScopeExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PTZPositionFilter is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MetadataFilter is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindRecordingResultList is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindEventResultList is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindEventResult is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindPTZPositionResultList is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindPTZPositionResult is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindMetadataResultList is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FindMetadataResult is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingSourceInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":TrackInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MediaAttributes is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":TrackAttributes is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":TrackAttributesExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoAttributes is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AudioAttributes is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MetadataAttributes is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":TrackConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":GetRecordingsResponseItem is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":GetTracksResponseList is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":GetTracksResponseItem is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobSource is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobTrack is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobStateInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobStateSource is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobStateTracks is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":RecordingJobStateTrack is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":GetRecordingJobsResponseItem is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ReplayConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":EngineConfiguration is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SourceIdentification is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":SourceIdentificationExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MetadataInput is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":MetadataInputExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsStateInformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AnalyticsState is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ActionEngineEventPayload is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ActionEngineEventPayloadExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AudioClassCandidate is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AudioClassDescriptor is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":AudioClassDescriptorExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ActiveConnection is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ProfileStatus is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ProfileStatusExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfiguration is a complexType.
///
/// @note class tt__OSDPosConfiguration operations:
/// - tt__OSDPosConfiguration* soap_new_tt__OSDPosConfiguration(soap*) allocate and default initialize
/// - tt__OSDPosConfiguration* soap_new_tt__OSDPosConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDPosConfiguration* soap_new_req_tt__OSDPosConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDPosConfiguration* soap_new_set_tt__OSDPosConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDPosConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDPosConfiguration(soap*, tt__OSDPosConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfiguration(soap*, tt__OSDPosConfiguration*) serialize to a stream
/// - tt__OSDPosConfiguration* tt__OSDPosConfiguration::soap_dup(soap*) returns deep copy of tt__OSDPosConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDPosConfiguration::soap_del() deep deletes tt__OSDPosConfiguration data members, use only after tt__OSDPosConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDPosConfiguration::soap_type() returns SOAP_TYPE_tt__OSDPosConfiguration or derived type identifier
class tt__OSDPosConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   For OSD position type, following are the pre-defined: <ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type xs:string.
    char*                                Type                           1;	///< Required element.
/// Element "Pos" of type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Pos                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension.
    tt__OSDPosConfigurationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension is a complexType.
///
/// @note class tt__OSDPosConfigurationExtension operations:
/// - tt__OSDPosConfigurationExtension* soap_new_tt__OSDPosConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDPosConfigurationExtension* soap_new_tt__OSDPosConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDPosConfigurationExtension* soap_new_req_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDPosConfigurationExtension* soap_new_set_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDPosConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDPosConfigurationExtension(soap*, tt__OSDPosConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfigurationExtension(soap*, tt__OSDPosConfigurationExtension*) serialize to a stream
/// - tt__OSDPosConfigurationExtension* tt__OSDPosConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDPosConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDPosConfigurationExtension::soap_del() deep deletes tt__OSDPosConfigurationExtension data members, use only after tt__OSDPosConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDPosConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDPosConfigurationExtension or derived type identifier
class tt__OSDPosConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColor is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The value range of "Transparent" could be defined by vendors only should follow this rule: the minimum value means non-transparent and the maximum value maens fully transparent.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__OSDColor operations:
/// - tt__OSDColor* soap_new_tt__OSDColor(soap*) allocate and default initialize
/// - tt__OSDColor* soap_new_tt__OSDColor(soap*, int num) allocate and default initialize an array
/// - tt__OSDColor* soap_new_req_tt__OSDColor(soap*, ...) allocate, set required members
/// - tt__OSDColor* soap_new_set_tt__OSDColor(soap*, ...) allocate, set all public members
/// - tt__OSDColor::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColor(soap*, tt__OSDColor*) deserialize from a stream
/// - int soap_write_tt__OSDColor(soap*, tt__OSDColor*) serialize to a stream
/// - tt__OSDColor* tt__OSDColor::soap_dup(soap*) returns deep copy of tt__OSDColor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColor::soap_del() deep deletes tt__OSDColor data members, use only after tt__OSDColor::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColor::soap_type() returns SOAP_TYPE_tt__OSDColor or derived type identifier
class tt__OSDColor
{ public:
/// Element "Color" of type "http://www.onvif.org/ver10/schema":Color.
    tt__Color*                           Color                          1;	///< Required element.
/// Attribute "Transparent" of type xs:int.
  @ int*                                 Transparent                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfiguration is a complexType.
///
/// @note class tt__OSDTextConfiguration operations:
/// - tt__OSDTextConfiguration* soap_new_tt__OSDTextConfiguration(soap*) allocate and default initialize
/// - tt__OSDTextConfiguration* soap_new_tt__OSDTextConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextConfiguration* soap_new_req_tt__OSDTextConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDTextConfiguration* soap_new_set_tt__OSDTextConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDTextConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextConfiguration(soap*, tt__OSDTextConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfiguration(soap*, tt__OSDTextConfiguration*) serialize to a stream
/// - tt__OSDTextConfiguration* tt__OSDTextConfiguration::soap_dup(soap*) returns deep copy of tt__OSDTextConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextConfiguration::soap_del() deep deletes tt__OSDTextConfiguration data members, use only after tt__OSDTextConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextConfiguration::soap_type() returns SOAP_TYPE_tt__OSDTextConfiguration or derived type identifier
class tt__OSDTextConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   The following OSD Text Type are defined:<ul>
///   <li>Plain - The Plain type means the OSD is shown as a text string which defined in the "PlainText" item.</li>
///   <li>Date - The Date type means the OSD is shown as a date, format of which should be present in the "DateFormat" item.</li>
///   <li>Time - The Time type means the OSD is shown as a time, format of which should be present in the "TimeFormat" item.</li>
///   <li>DateAndTime - The DateAndTime type means the OSD is shown as date and time, format of which should be present in the "DateFormat" and the "TimeFormat" item.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type xs:string.
    char*                                Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD date formats. This element shall be present when the value of Type field has Date or DateAndTime. The following DateFormat are defined:<ul>
///   <li>M/d/yyyy - e.g. 3/6/2013</li>
///   <li>MM/dd/yyyy - e.g. 03/06/2013</li>
///   <li>dd/MM/yyyy - e.g. 06/03/2013</li>
///   <li>yyyy/MM/dd - e.g. 2013/03/06</li>
///   <li>yyyy-MM-dd - e.g. 2013-06-03</li>
///   <li>dddd, MMMM dd, yyyy - e.g. Wednesday, March 06, 2013</li>
///   <li>MMMM dd, yyyy - e.g. March 06, 2013</li>
///   <li>dd MMMM, yyyy - e.g. 06 March, 2013</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "DateFormat" of type xs:string.
    char*                                DateFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD time formats. This element shall be present when the value of Type field has Time or DateAndTime. The following TimeFormat are defined:<ul>
///   <li>h:mm:ss tt - e.g. 2:14:21 PM</li>
///   <li>hh:mm:ss tt - e.g. 02:14:21 PM</li>
///   <li>H:mm:ss - e.g. 14:14:21</li>
///   <li>HH:mm:ss - e.g. 14:14:21</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "TimeFormat" of type xs:string.
    char*                                TimeFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font size of the text in pt.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontSize" of type xs:int.
    int*                                 FontSize                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font color of the text.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontColor" of type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Background color of the text.
/// </BLOCKQUOTE></PRE>
///
/// Element "BackgroundColor" of type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        BackgroundColor                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The content of text to be displayed.
/// </BLOCKQUOTE></PRE>
///
/// Element "PlainText" of type xs:string.
    char*                                PlainText                      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension.
    tt__OSDTextConfigurationExtension*   Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This flag is applicable for Type Plain and defaults to true. When set to false the PlainText content will not be persistent across device reboots.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "IsPersistentText" of type xs:boolean.
  @ bool*                                IsPersistentText               0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension is a complexType.
///
/// @note class tt__OSDTextConfigurationExtension operations:
/// - tt__OSDTextConfigurationExtension* soap_new_tt__OSDTextConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDTextConfigurationExtension* soap_new_tt__OSDTextConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextConfigurationExtension* soap_new_req_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDTextConfigurationExtension* soap_new_set_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDTextConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextConfigurationExtension(soap*, tt__OSDTextConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfigurationExtension(soap*, tt__OSDTextConfigurationExtension*) serialize to a stream
/// - tt__OSDTextConfigurationExtension* tt__OSDTextConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDTextConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextConfigurationExtension::soap_del() deep deletes tt__OSDTextConfigurationExtension data members, use only after tt__OSDTextConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDTextConfigurationExtension or derived type identifier
class tt__OSDTextConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfiguration is a complexType.
///
/// @note class tt__OSDImgConfiguration operations:
/// - tt__OSDImgConfiguration* soap_new_tt__OSDImgConfiguration(soap*) allocate and default initialize
/// - tt__OSDImgConfiguration* soap_new_tt__OSDImgConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgConfiguration* soap_new_req_tt__OSDImgConfiguration(soap*, ...) allocate, set required members
/// - tt__OSDImgConfiguration* soap_new_set_tt__OSDImgConfiguration(soap*, ...) allocate, set all public members
/// - tt__OSDImgConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgConfiguration(soap*, tt__OSDImgConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfiguration(soap*, tt__OSDImgConfiguration*) serialize to a stream
/// - tt__OSDImgConfiguration* tt__OSDImgConfiguration::soap_dup(soap*) returns deep copy of tt__OSDImgConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgConfiguration::soap_del() deep deletes tt__OSDImgConfiguration data members, use only after tt__OSDImgConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgConfiguration::soap_type() returns SOAP_TYPE_tt__OSDImgConfiguration or derived type identifier
class tt__OSDImgConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   The URI of the image which to be displayed.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImgPath" of type xs:anyURI.
    xsd__anyURI                          ImgPath                        1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension.
    tt__OSDImgConfigurationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension is a complexType.
///
/// @note class tt__OSDImgConfigurationExtension operations:
/// - tt__OSDImgConfigurationExtension* soap_new_tt__OSDImgConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDImgConfigurationExtension* soap_new_tt__OSDImgConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgConfigurationExtension* soap_new_req_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDImgConfigurationExtension* soap_new_set_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDImgConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgConfigurationExtension(soap*, tt__OSDImgConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfigurationExtension(soap*, tt__OSDImgConfigurationExtension*) serialize to a stream
/// - tt__OSDImgConfigurationExtension* tt__OSDImgConfigurationExt