#! /usr/bin/python

"""
This script generates markdown files for all the MAVLink message definition XML at: 
https://github.com/mavlink/mavlink/tree/master/message_definitions/v1.0
  
The files can be imported into a gitbook to display the messages as HTML

The script runs on both Python2 and Python 3. The following libraries must be imported: lxml, requests, bs4.

The file is run in mavlink/doc/ with no arguments. It writes the files to /messages/
"""

import lxml.etree as ET
import requests
from bs4 import BeautifulSoup as bs
import re
import os # for walk


xsl_file_name = "mavlink_to_html_table_gitbook.xsl"
xml_message_definitions_dir_name = "../message_definitions/v1.0/"

output_dir = "./messages/"
output_dir_html=output_dir+"_html/"
if not os.path.exists(output_dir_html):
    os.makedirs(output_dir_html)


# File for index
index_file_name = "README.md"
index_file_name = output_dir + index_file_name

# Get XSLT
with open(xsl_file_name, 'r') as content_file:
    xsl_file = content_file.read()
xslt = ET.fromstring(xsl_file)

#initialise text for index file. 
index_text="""<!-- THIS FILE IS AUTO-GENERATED (DO NOT UPDATE GITBOOK): https://github.com/mavlink/mavlink/blob/master/doc/mavlink_gitbook.py -->
# XML Definition Files & Dialects

MAVLink definitions files can be found in [mavlink/message definitions](https://github.com/mavlink/mavlink/blob/master/message_definitions/).
These can roughtly be divided into:
- [Standard definitions](#standard-definitions) - core definitions shared by many flight stacks
- [Test definitions](#test-definitions) - definitions to support testing and validation
- [Dialects](#dialects) - *protocol-* and *vendor-specific* messages, enums and commands


## Standard Definitions

The following XML definition files are considered standard/core (i.e. not dialects):

- [minimal.xml](minimal.md) - the minimum set of entities (messages, enums, MAV_CMD) required to set up a MAVLink network.
- [standard.xml](standard.md) - the standard set of entities that are implemented by almost all flight stacks (at least 2, in a compatible way).
  This `includes` [minimal.xml](minimal.md).
- [common.xml](../messages/common.md) - the set of entitites that have been implemented in at least one core flight stack.
  This `includes` [standard.xml](minimal.md)

> **Note** We are still working towards moving the truly standard entities from **common.xml** to **standard.xml**
  Currently you should include [common.xml](../messages/common.md)
  
 In addition:
 - [development.xml](development.md) - XML definitions that are _proposed_ for inclusion in the standard definitions.
   These are work in progress.


## Test Definitions

The following definitions are used for testing and dialect validation:

- [all.xml](all.md) - This includes all other XML files, and is used to verify that there are no ID clashes (and can potentially be used by GCS to communicate with any core dialect).
- [test.xml](test.md) - Test XML definition file.


## Dialects  {#dialects}

MAVLink *dialects* are XML definition files that define *protocol-* and *vendor-specific* messages, enums and commands.

> **Note** Vendor forks of MAVLink may contain XML entities that have not yet been pushed into the main repository (and will not be documented).

Dialects may *include* other MAVLink XML files, which may in turn contain other XML files (up to 5 levels of XML file nesting are allowed - see `MAXIMUM_INCLUDE_FILE_NESTING` in [mavgen.py](https://github.com/ArduPilot/pymavlink/blob/master/generator/mavgen.py#L44)).
A typical pattern is for a dialect to include [common.xml](../messages/common.md) (containing the *MAVLink standard definitions*), extending it with vendor or protocol specific messages.

The dialect definitions are:
"""

index_text_trailer="""
"""

#Fix up the BeautifulSoup output so to fix build-link errors in the generated gitbook.
## BS puts each tag/content in its own line. Gitbook generates anchors using the spaces/newlines. 
## This puts displayed text content immediately within tags so that anchors/links generate properly
def fix_content_in_tags(input_html):
    #print("fix_content_in_tags was called")
    def remove_space_between_content_tags(matchobj):
        stripped_string=matchobj.group(1).strip()
        return '>%s<' % stripped_string

    input_html=re.sub(r'\>(\s+?\w+?.*?)\<', remove_space_between_content_tags, input_html,flags=re.DOTALL)
    return input_html
    
def fix_external_dialect_link(input_html):
    #print("fix_external_dialect_link was called")
    def fixupexternaldialecturls(matchobj):
        return matchobj.group(1).strip()

    input_html=re.sub(r'<a href="../../external/.*?>(.*?)</a>', fixupexternaldialecturls, input_html,flags=re.DOTALL)
    return input_html

def fix_include_file_extension(input_html):
    ## Fixes up file extension .xml.md.unlikely (easier than fixing up the XSLT to strip file extensions!)
    input_html=input_html.replace('.xml.md.unlikely','.md')
    return input_html

def fix_replace_space_marker(input_html):
    ## Above we remove hidden space. I can't seem to regexp just that type of space, so use space markers in text
    input_html=input_html.replace('xxx_space_xxx',' ')
    return input_html

def strip_text_before_string(original_text,strip_text):
    # Strip out all text before some string
    index=original_text.find(strip_text)
    stripped_string=original_text
    if index !=-1 :
        stripped_string = stripped_string[index:] 
    return stripped_string
    
def fix_add_implicit_links_items(input_html):
    # Makes screaming snake case into anchors. Special fix for MAV_CMD.
    #print("fix_add_implicit_link was called")
    def make_text_to_link(matchobj):
        #print("make_entry_to_link was called: %s" % matchobj.group(0))
        item_string = matchobj.group(2)
        item_url=item_string
        if item_string == 'MAV_CMD':
            item_url='mav_commands'
        returnString = '%s<a href="#%s">%s</a>%s' % (matchobj.group(1),item_url,item_string,matchobj.group(3))
        #print("returnstring: %s" % returnString)
        return returnString

    input_html=re.sub(r'([\`\(\s,]|^)([A-Z]{2,}(?:_[A-Z0-9]+)+)([\`\)\s\.,:]|$)', make_text_to_link, input_html,flags=re.DOTALL)
    return input_html
    
    
def inject_top_level_docs(input_html,filename):
    #Inject top level heading and other details.
    print('FILENAME (prefix): %s' % filename)
    insert_text='<!-- THIS FILE IS AUTO-GENERATED: https://github.com/mavlink/mavlink/blob/master/doc/mavlink_gitbook.py -->'
    if filename == 'common':
        insert_text+="""
# MAVLINK Common Message Set

The MAVLink *common* message set contains *standard* definitions that are managed by the MAVLink project.
The definitions cover functionality that is considered useful to most ground control stations and autopilots.
MAVLink-compatible systems are expected to use these definitions where possible (if an appropriate message exists) rather than rolling out variants in their own [dialects](../messages/README.md).

The original definitions are defined in [common.xml](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/common.xml).

> **Tip** The common set `includes` [minimal.xml](minimal.md), which contains the *minimal set* of definitions for any MAVLink system.
  These definitions are [reproduced at the end of this topic](#minimal).

"""
    elif filename == 'minimal':
        insert_text+="""
# MAVLink Minimal Set

The MAVLink *minimal* set contains the minimal set of definitions for a viable MAVLink system.

The message set is defined in [minimal.xml](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/minimal.xml) and is managed by the MAVLink project.

> **Tip** The minimal set is included (imported into) other xml definition files, including the [MAVLink Common Message Set (common.xml)](minimal.md).

"""
    elif filename == 'ardupilotmega':
        insert_text+="""
# Dialect: ArduPilotMega

These messages define the ArduPilot specific message set, which is custom to [http://ardupilot.org](http://ardupilot.org).

This topic is a human-readable form of the XML definition file: [ardupilotmega.xml](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/ardupilotmega.xml).

> **Warning** The ArduPilot MAVLink fork of [ardupilotmega.xml](https://github.com/ArduPilot/mavlink/blob/master/message_definitions/v1.0/ardupilotmega.xml) may contain messages that have not yet been merged into this documentation.
"""
    elif filename == 'development':
        insert_text+="""
# Dialect: development

This dialect contains messages that are proposed for inclusion in the [standard set](standard.md), in order to ease development of prototype implementations.
They should be considered a 'work in progress' and not included in production builds.

This topic is a human-readable form of the XML definition file: [development.xml](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/development.xml).
"""
    elif filename == 'all':
        insert_text+="""
# Dialect: all

This dialect is intended to `include` all other [dialects](../messages/README.md) in the mavlink/mavlink repository (including [external dialects](https://github.com/mavlink/mavlink/tree/master/external/dialects#mavlink-external-dialects)).

Dialects that are in **all.xml** are guaranteed to not have clashes in messages, enums, enum ids, and MAV_CMDs.
This ensure that:
- Systems based on these dialects can co-exist on the same MAVLink network.
- A Ground Station might (optionally) use libraries generated from **all.xml** to communicate using any of the dialects.

> **Warning** New dialect files in the official repository must be added to **all.xml** and restrict themselves to using ids in their own allocated range.
  A few older dialects are not included because these operate in completely closed networks or because they are only used for tests.
  
This topic is a human-readable form of the XML definition file: [all.xml](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/all.xml).
"""
    else:
        insert_text+='\n# Dialect: %s' % filename.rsplit('.',1)[0]
        insert_text+='\n\n*This is a human-readable form of the XML definition file: [%s](https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/%s).*' % (filename, filename)
    insert_text+="""

<span></span>
> **Note** MAVLink 2 messages have an ID > 255 and are marked up using **(MAVLink 2)** in their description.

<span id="mav2_extension_field"></span>
> **Note** MAVLink 2 extension fields that have been added to MAVLink 1 messages are displayed in blue.

<style>
td {
    vertical-align:top;
}
</style>
"""
    # Include HTML in generated content
    insert_text+='\n\n{%% include "_html/%s.html" %%}' % filename
    input_html=insert_text+'\n\n'+input_html

    if filename == 'common':
        input_html+="""
# Minimal.xml {#minimal}

The minimal set of definitions required for any MAVLink system are included from [minimal.xml](minimal.md).
These are listed below.


{% include "_html/minimal.html" %}"""

    
    #print(input_html)
    return input_html
    
dialect_files = set()
all_files = set()    

for subdir, dirs, files in os.walk(xml_message_definitions_dir_name):
    #Generate html for all the XML files
    for file in files:
        print(file)
        if not file.endswith('.xml'): #only process xml files.
           continue
        xml_file_name = xml_message_definitions_dir_name+file
        with open(xml_file_name, 'r') as content_file:
            xml_file = content_file.read()
            dom = ET.fromstring(xml_file)
            transform = ET.XSLT(xslt)
            newdom = transform(dom)

            #Prettify the HTML using BeautifulSoup
            soup=bs(str(newdom), "lxml")
            prettyHTML=soup.prettify()

            #Strip out text before <html> tag in XSLT output
            prettyHTML=strip_text_before_string(prettyHTML,'<html>')
            prettyHTML = fix_content_in_tags(prettyHTML)
            
            #Replace invalid file extensions (workaround for xslt)
            prettyHTML = fix_include_file_extension(prettyHTML)

            #Replace space markers with intentional space
            prettyHTML = fix_replace_space_marker(prettyHTML)

            #Fix up links to external dialects to not be links
            prettyHTML = fix_external_dialect_link(prettyHTML)
            
            #Fix up plain text mav symbols to be internal links
            prettyHTML = fix_add_implicit_links_items(prettyHTML)     
            
            
            #Write output html file
            output_file_name_html = file.rsplit('.',1)[0]+".html"

            output_file_name_html_withdir = output_dir_html+output_file_name_html
            print("Output filename (html): %s" % output_file_name_html)

            with open(output_file_name_html_withdir, 'w') as out:
                out.write(prettyHTML)

            # Create sortable list of output file names
            #Write output markdown file
            output_file_name_prefix = file.rsplit('.',1)[0]
            all_files.add(output_file_name_prefix)
            if not file=='common.xml' and not file=='standard.xml' and not file=='minimal.xml' and not file=='test.xml' and not file=='development.xml':
                dialect_files.add(output_file_name_prefix)


# Generate the markdown files
for file_prefix in all_files:
    print(file_prefix)
    markdown_text=''
    #Inject a heading and doc-type intro (markdown format)
    markdown_text = inject_top_level_docs(markdown_text,file_prefix)

    output_file_name_md_withdir = output_dir+file_prefix+'.md'
    print("Output filename (md): %s" % output_file_name_md_withdir)

    with open(output_file_name_md_withdir, 'w') as out:
        out.write(markdown_text)

            
for the_file in sorted(dialect_files):
    index_text+='\n* [%s.xml](%s.md)' % (the_file,the_file)
index_text+='\n\n'
index_text+=index_text_trailer
            
#Write the index
with open(index_file_name, 'w') as content_file:
    content_file.write(index_text)

print("COMPLETED")



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <?xml version="1.0"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="//include">
   <h1>MAVLink Include Files</h1>
   <p><strong><em>Including files: </em><xsl:value-of select="." /></strong></p>
</xsl:template>

<xsl:template match="//enums">
   <h1>MAVLink Type Enumerations</h1>
   <xsl:apply-templates />
</xsl:template>

<xsl:template match="//messages">
   <h1>MAVLink Messages</h1>
   <xsl:apply-templates />
</xsl:template>

<xsl:template match="//message">
  <a>
    <xsl:attribute name="name">
      <xsl:value-of select="@name"/>
    </xsl:attribute>
  </a>
  <h3 class="mavlink_message_name"><xsl:value-of select="@name" /> (
   <a>
    <xsl:attribute name="href">
      #<xsl:value-of select="@name"/>
    </xsl:attribute>
   #<xsl:value-of select="@id" />
   </a>
   )</h3>
   <p class="description"><xsl:value-of select="description" /></p>
   <table class="sortable">
   <thead>
   <tr>
     <th class="mavlink_field_header">Field Name</th>
     <th class="mavlink_field_header">Type</th>
     <th class="mavlink_field_header">Description</th>
   </tr>
   </thead>
   <tbody>
   <xsl:apply-templates select="field" />
  </tbody>
  </table>
</xsl:template>

<xsl:template match="//field">
   <tr class="mavlink_field">
   <td class="mavlink_name" valign="top"><xsl:value-of select="@name" /></td>
   <td class="mavlink_type" valign="top"><xsl:value-of select="@type" /></td>
   <td class="mavlink_comment"><xsl:value-of select="." /></td>
   </tr>
</xsl:template>

<xsl:template match="//version">
   <h2 style="color:red;">MAVLink Documentation</h2>
   <p>
   The <a href="https://mavlink.io/en/messages/common.html">Official MAVLink message documentation</a> contains additional information, including field units and enum values.
   </p>
   
   <h2>MAVLink Protocol Version</h2>
   <p>The current MAVLink version is 2.<xsl:value-of select="." />. The minor version numbers (after the dot) range from 1-255. </p>
</xsl:template>

<xsl:template match="//enum">
   <a>
    <xsl:attribute name="name">
      ENUM_<xsl:value-of select="@name"/>
    </xsl:attribute>
  </a>
   <h3 class="mavlink_message_name"><xsl:value-of select="@name" /></h3>

   <p class="description"><xsl:value-of select="description" /></p>
   <table class="sortable">
   <thead>
   <tr>
     <th class="mavlink_field_header">Value</th>
     <th class="mavlink_field_header">Field Name</th>
     <th class="mavlink_field_header">Description</th>
   </tr>
   </thead>
   <tbody>
   <xsl:apply-templates select="entry" />
  </tbody>
  </table>
</xsl:template>

<xsl:template match="//entry">
   <tr class="mavlink_field" id="{@name}">
   <td class="mavlink_type" valign="top"><xsl:value-of select="@value" /></td>
   <td class="mavlink_name" valign="top"><xsl:value-of select="@name" /></td>
   <td class="mavlink_comment"><xsl:value-of select="description" /></td>
   </tr>
   <tr>
     <td></td>
   	 <xsl:apply-templates select="param" />
   </tr>
   <tr>
    <td colspan="3"><br /></td>
   </tr>
</xsl:template>

<xsl:template match="//param">
   <tr>
   <td></td>
   <td class="mavlink_mission_param" valign="top">Mission Param #<xsl:value-of select="@index" /></td>
   <td class="mavlink_comment"><xsl:value-of select="." /></td>
   </tr>
</xsl:template>


</xsl:stylesheet>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?xml version="1.0"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="//include">
   <p><strong>MAVLink Include Files: </strong> <a><xsl:attribute name="href"><xsl:value-of select="."/>.md.unlikely</xsl:attribute><xsl:value-of select="." /></a> </p>
</xsl:template>

<xsl:template match="//enums">
   <h2 id="enums">MAVLink Type Enumerations</h2>
   <xsl:apply-templates select="enum[@name!='MAV_CMD']" />

   <a id="MAV_CMD"></a>
   <h2 id="mav_commands">MAVLink Commands (MAV_CMD)</h2>
   <blockquote class="alert alert-info clearfix"><strong class="fa fa-2x fa-edit"></strong><p>MAVLink commands (MAV_CMD) and messages are different! These commands define the values of up to 7 parameters that are packaged INSIDE specific messages used in the Mission Protocol and Command Protocol. Use commands for actions in missions or if you need acknowledgment and/or retry logic from a request. Otherwise use messages.</p></blockquote>
   <xsl:apply-templates select="enum[@name='MAV_CMD']" mode="params"/>

</xsl:template>



<xsl:template match="//messages">
   <h2 id="messages">MAVLink Messages</h2>
   <xsl:apply-templates />
</xsl:template>

<xsl:template match="//message">
  <h3> <!-- mavlink_message_name -->
   <xsl:attribute name="id"><xsl:value-of select="@name"/></xsl:attribute>
   <xsl:value-of select="@name" /> (
   <a>
    <xsl:attribute name="href">#<xsl:value-of select="@name"/></xsl:attribute>
    #<xsl:value-of select="@id" />
   </a>
  )</h3>
   <xsl:apply-templates select="wip" />
   <xsl:apply-templates select="deprecated" />
   <p> <!-- description --><a href="#messages">[Message]</a>
     <xsl:if test='@id > 255'><strong>(MAVLink 2) </strong></xsl:if>
     <xsl:value-of select="description" /></p>
   <table class="sortable">
   <thead>
   <tr> <!-- mavlink_field_header -->
     <th>Field Name</th>
     <th>Type</th>

     <xsl:if test='*/@units'>
      <th>Units</th>
     </xsl:if>
     
     <xsl:if test='*/@enum'>
      <th>Values</th>
     </xsl:if>

     <th>Description</th>
   </tr>
   </thead>
   <tbody>
   <xsl:apply-templates select="field" /> 
  </tbody>
  </table>
</xsl:template>


<xsl:template match="//field">
   <tr> <!-- mavlink_field -->
   <xsl:choose>
     <xsl:when test="preceding-sibling::extensions">
       <td style="color:blue;"><xsl:value-of select="@name" />&#160;<a href="#mav2_extension_field" title="MAVLink2 extension field">**</a></td> <!-- mavlink_name -->
     </xsl:when>
     <xsl:otherwise>
       <td><xsl:value-of select="@name" /></td> <!-- mavlink_name -->
     </xsl:otherwise>
   </xsl:choose>
  
   <td><xsl:value-of select="@type" /></td> <!-- mavlink_type -->
   
   <xsl:if test='../*/@units'>
     <td><xsl:value-of select="@units" /></td> <!-- mavlink_units -->
   </xsl:if>
   
   <xsl:if test='../*/@enum'>
   <td><xsl:if test='@enum'>
      <a><xsl:attribute name="href">#<xsl:value-of select="@enum" /></xsl:attribute><xsl:value-of select="@enum" /></a>
      </xsl:if>
   </td> <!-- mavlink_value -->
   </xsl:if>
     
   <td><xsl:value-of select="." /></td> <!-- mavlink_comment -->
   </tr>
</xsl:template>

<xsl:template match="//version">
   <h2>MAVLink Protocol Version</h2>
   <p>The current MAVLink version is 2.<xsl:value-of select="." />. The minor version numbers (after the dot) range from 1-255. </p>
</xsl:template>

<xsl:template match="//dialect">
   <p>This file has protocol dialect: <xsl:value-of select="." />.</p>
</xsl:template>


<xsl:template match="//enum">
   <h3> <!-- mavlink_enum_name -->
     <xsl:attribute name="id"><xsl:value-of select="@name"/></xsl:attribute>
     <xsl:value-of select="@name" /></h3>
   <xsl:apply-templates select="deprecated" />  
   <p><a href="#enums">[Enum]</a><xsl:value-of select="description" /></p> <!-- description -->
   <table class="sortable">
   <thead>
   <tr> <!-- mavlink_field_header -->
     <th>Value</th>
     <th>Field Name</th>
     <th>Description</th>
   </tr>
   </thead>
   <tbody>
   <xsl:apply-templates select="entry" />
  </tbody>
  </table>
</xsl:template>


<xsl:template match="//enum" mode="params">
   <p><xsl:value-of select="description" /> </p>
   <xsl:apply-templates select="entry" mode="params" />
</xsl:template>


<xsl:template match="//entry" mode="params">
   <h3 id="{@name}"><xsl:value-of select="@name" /> (<a><xsl:attribute name="href">#<xsl:value-of select="@name"/></xsl:attribute><xsl:value-of select="@value" /></a>)</h3>
      <xsl:apply-templates select="deprecated" />
      <xsl:apply-templates select="wip" />
      <p><a href="#mav_commands">[Command]</a><xsl:value-of select="description" /> </p> <!-- mavlink_comment -->


   <table class="sortable">
   <thead>
   <tr> <!-- mavlink_field_header -->
      <th>Param (:Label)</th>
      <th>Description</th>

      <xsl:if test='*/@enum or */@minValue or */@maxValue or */@increment'>
        <th>Values</th>
      </xsl:if>

     <xsl:if test='*/@units'>
       <th>Units</th>
     </xsl:if>

   </tr>
   </thead>
   <tbody>
    <xsl:apply-templates select="param" mode="params" /> 
   </tbody>
  </table>

</xsl:template>


<xsl:template match="//entry">
   <tr id="{@name}"> <!-- mavlink_field -->
   <td><xsl:value-of select="@value" /></td>  <!-- mavlink_type -->
   <td>
      <a><xsl:attribute name="href">#<xsl:value-of select="@name"/></xsl:attribute><xsl:value-of select="@name" /></a> 
      <xsl:apply-templates select="deprecated" />
      <xsl:apply-templates select="wip" />
   </td> <!-- mavlink_name -->
   <td><xsl:value-of select="description" /></td> <!-- mavlink_comment -->
   </tr>


<xsl:if test='param'>
   <tr>
     <td></td>
     <xsl:apply-templates select="param" />
   </tr>
   <tr>
    <td colspan="3"><br /></td>
   </tr>
</xsl:if>
</xsl:template>



<xsl:template match="//param" mode="params">
    <tr>
        <td><xsl:value-of select="@index" /> 
        <xsl:if test='@label'>: <xsl:value-of select="@label" /></xsl:if>
        </td> <!-- mission_param -->

        <td><xsl:if test='@reserved = "true"'>Reserved (set to <xsl:if test='@default'><xsl:value-of select="@default" /></xsl:if><xsl:if test='not(@default)'>0</xsl:if>)</xsl:if><xsl:value-of select="." />
            <xsl:if test='@decimalPlaces'><br /><strong>GCS display settings:</strong>
            <xsl:if test='@label'><em>Label:</em> <xsl:value-of select="@label" />, </xsl:if>
            <xsl:if test='@decimalPlaces'><em>decimalPlaces:</em> <xsl:value-of select="@decimalPlaces" /></xsl:if>
         </xsl:if>
        </td>


   <xsl:if test='../*/@enum or ../*/@minValue or ../*/@maxValue or ../*/@increment'>
     <td>
      <xsl:choose>
         <xsl:when test="@enum">
           <a><xsl:attribute name="href">#<xsl:value-of select="@enum" /></xsl:attribute><xsl:value-of select="@enum" /></a>
         </xsl:when>
         <xsl:when test="@minValue or @maxValue or @increment ">
           <xsl:if test='@minValue'><em>min:</em><xsl:value-of select="@minValue" /><xsl:text>xxx_space_xxx</xsl:text></xsl:if>
           <xsl:if test='@maxValue'><em>max:</em><xsl:value-of select="@maxValue" /><xsl:text>xxx_space_xxx</xsl:text></xsl:if>
           <xsl:if test='@increment'><em>increment:</em><xsl:value-of select="@increment" /></xsl:if>
         </xsl:when>
      </xsl:choose>
  </td>
   </xsl:if>
      
   <xsl:if test='../*/@units'>
     <td><xsl:value-of select="@units" /></td> <!-- mavlink_units -->
   </xsl:if>
       
   </tr>
</xsl:template>



<xsl:template match="//param">
   <tr>
   <td></td>
   <td>Param #<xsl:value-of select="@index" /></td> <!-- mission_param -->
   <td>
       <xsl:value-of select="." />

       <xsl:choose>
         <xsl:when test="@enum">
            <br /><strong>Possible values:</strong> <xsl:value-of select="@enum" />
         </xsl:when>
         <xsl:when test="@minValue or @maxValue or @increment or @units">
           <br /><strong>Values:</strong>
           <xsl:if test='@units'><em>units:</em> <xsl:value-of select="@minValue" />, </xsl:if>
           <xsl:if test='@minValue'><em>min:</em><xsl:value-of select="@minValue" />, </xsl:if>
           <xsl:if test='@maxValue'><em>max:</em><xsl:value-of select="@maxValue" />, </xsl:if>
           <xsl:if test='@increment'><em>increment:</em><xsl:value-of select="@increment" /></xsl:if>
         </xsl:when>
       </xsl:choose>

       <xsl:if test='@label or @decimalPlaces'><br /><strong>GCS display settings:</strong>
           <xsl:if test='@label'><em>Label:</em> <xsl:value-of select="@label" />, </xsl:if>
           <xsl:if test='@decimalPlaces'><em>decimalPlaces:</em> <xsl:value-of select="@decimalPlaces" /></xsl:if>
       </xsl:if>


   </td> <!-- mavlink_comment -->
   </tr>
</xsl:template>

<xsl:template match="//wip">
  <p style="color:red"><strong>WORK IN PROGRESS:</strong><xsl:text>xxx_space_xxx</xsl:text>Do not use in stable production environments (it may change).</p>
</xsl:template>

<xsl:template match="//deprecated">
  <p style="color:red"><strong>DEPRECATED:</strong><xsl:text>xxx_space_xxx</xsl:text>Replaced by <xsl:value-of select="@replaced_by" /> (<xsl:value-of select="@since" />).


  <xsl:if test='.'>
    <xsl:value-of select="." />
  </xsl:if>
</p>
</xsl:template>



</xsl:stylesheet>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           mavlink_udp
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # MAVLink UDP Quickstart Instructions

MAVLink UDP Example for *nix system (Linux, MacOS, BSD, etc.)

To compile with GCC, just enter:

```
gcc -std=c99 -I ../../include/common -o mavlink_udp mavlink_udp.c
```

The MAVLink header directory must be added to the include path, as shown above. 
Be sure to use version 2.0 of the MAVLink headers for this example
as the example uses MAVLink 2 extension fields.

To run, type:

```
./mavlink_udp
```

If you run *QGroundControl* on the same machine, checkout received message in MAVLink Inspector widget.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*******************************************************************************
 Copyright (C) 2010  Bryan Godbolt godbolt ( a t ) ualberta.ca
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 ****************************************************************************/
/*
 This program sends some data to qgroundcontrol using the mavlink protocol.  The sent packets
 cause qgroundcontrol to respond with heartbeats.  Any settings or custom commands sent from
 qgroundcontrol are printed by this program along with the heartbeats.
 
 
 I compiled this program sucessfully on Ubuntu 10.04 with the following command
 
 gcc -I ../../pixhawk/mavlink/include -o udp-server udp-server-test.c
 
 the rt library is needed for the clock_gettime on linux
 */
/* These headers are for QNX, but should all be standard on unix/linux */
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <time.h>
#if (defined __QNX__) | (defined __QNXNTO__)
/* QNX specific headers */
#include <unix.h>
#else
/* Linux / MacOS POSIX timer headers */
#include <sys/time.h>
#include <time.h>
#include <arpa/inet.h>
#include <stdbool.h> /* required for the definition of bool in C99 */
#endif

/* This assumes you have the mavlink headers on your include path
 or in the same folder as this source file */
#include <mavlink.h>


#define BUFFER_LENGTH 2041 // minimum buffer size that can be used with qnx (I don't know why)

uint64_t microsSinceEpoch();

int main(int argc, char* argv[])
{
	
	char help[] = "--help";
	
	
	char target_ip[100];
	
	float position[6] = {};
	int sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
	struct sockaddr_in gcAddr; 
	struct sockaddr_in locAddr;
	//struct sockaddr_in fromAddr;
	uint8_t buf[BUFFER_LENGTH];
	ssize_t recsize;
	socklen_t fromlen = sizeof(gcAddr);
	int bytes_sent;
	mavlink_message_t msg;
	uint16_t len;
	int i = 0;
	//int success = 0;
	unsigned int temp = 0;
	
	// Check if --help flag was used
	if ((argc == 2) && (strcmp(argv[1], help) == 0))
    {
		printf("\n");
		printf("\tUsage:\n\n");
		printf("\t");
		printf("%s", argv[0]);
		printf(" <ip address of QGroundControl>\n");
		printf("\tDefault for localhost: udp-server 127.0.0.1\n\n");
		exit(EXIT_FAILURE);
    }
	
	
	// Change the target ip if parameter was given
	strcpy(target_ip, "127.0.0.1");
	if (argc == 2)
    {
		strcpy(target_ip, argv[1]);
    }
	
	
	memset(&locAddr, 0, sizeof(locAddr));
	locAddr.sin_family = AF_INET;
	locAddr.sin_addr.s_addr = INADDR_ANY;
	locAddr.sin_port = htons(14551);
	
	/* Bind the socket to port 14551 - necessary to receive packets from qgroundcontrol */ 
	if (-1 == bind(sock,(struct sockaddr *)&locAddr, sizeof(struct sockaddr)))
    {
		perror("error bind failed");
		close(sock);
		exit(EXIT_FAILURE);
    } 
	
	/* Attempt to make it non blocking */
#if (defined __QNX__) | (defined __QNXNTO__)
	if (fcntl(sock, F_SETFL, O_NONBLOCK | FASYNC) < 0)
#else
	if (fcntl(sock, F_SETFL, O_NONBLOCK | O_ASYNC) < 0)
#endif

    {
		fprintf(stderr, "error setting nonblocking: %s\n", strerror(errno));
		close(sock);
		exit(EXIT_FAILURE);
    }
	
	
	memset(&gcAddr, 0, sizeof(gcAddr));
	gcAddr.sin_family = AF_INET;
	gcAddr.sin_addr.s_addr = inet_addr(target_ip);
	gcAddr.sin_port = htons(14550);
	
	
	
	for (;;) 
    {
		
		/*Send Heartbeat */
		mavlink_msg_heartbeat_pack(1, 200, &msg, MAV_TYPE_HELICOPTER, MAV_AUTOPILOT_GENERIC, MAV_MODE_GUIDED_ARMED, 0, MAV_STATE_ACTIVE);
		len = mavlink_msg_to_send_buffer(buf, &msg);
		bytes_sent = sendto(sock, buf, len, 0, (struct sockaddr*)&gcAddr, sizeof(struct sockaddr_in));
		
		/* Send Status */
		mavlink_msg_sys_status_pack(1, 200, &msg, 0, 0, 0, 500, 11000, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		len = mavlink_msg_to_send_buffer(buf, &msg);
		bytes_sent = sendto(sock, buf, len, 0, (struct sockaddr*)&gcAddr, sizeof (struct sockaddr_in));
		
		/* Send Local Position */
		mavlink_msg_local_position_ned_pack(1, 200, &msg, microsSinceEpoch(), 
										position[0], position[1], position[2],
										position[3], position[4], position[5]);
		len = mavlink_msg_to_send_buffer(buf, &msg);
		bytes_sent = sendto(sock, buf, len, 0, (struct sockaddr*)&gcAddr, sizeof(struct sockaddr_in));
		
		/* Send attitude */
		mavlink_msg_attitude_pack(1, 200, &msg, microsSinceEpoch(), 1.2, 1.7, 3.14, 0.01, 0.02, 0.03);
		len = mavlink_msg_to_send_buffer(buf, &msg);
		bytes_sent = sendto(sock, buf, len, 0, (struct sockaddr*)&gcAddr, sizeof(struct sockaddr_in));
		
		
		memset(buf, 0, BUFFER_LENGTH);
		recsize = recvfrom(sock, (void *)buf, BUFFER_LENGTH, 0, (struct sockaddr *)&gcAddr, &fromlen);
		if (recsize > 0)
      	{
			// Something received - print out all bytes and parse packet
			mavlink_message_t msg;
			mavlink_status_t status;
			
			printf("Bytes Received: %d\nDatagram: ", (int)recsize);
			for (i = 0; i < recsize; ++i)
			{
				temp = buf[i];
				printf("%02x ", (unsigned char)temp);
				if (mavlink_parse_char(MAVLINK_COMM_0, buf[i], &msg, &status))
				{
					// Packet received
					printf("\nReceived packet: SYS: %d, COMP: %d, LEN: %d, MSG ID: %d\n", msg.sysid, msg.compid, msg.len, msg.msgid);
				}
			}
			printf("\n");
		}
		memset(buf, 0, BUFFER_LENGTH);
		sleep(1); // Sleep one second
    }
}


/* QNX timer version */
#if (defined __QNX__) | (defined __QNXNTO__)
uint64_t microsSinceEpoch()
{
	
	struct timespec time;
	
	uint64_t micros = 0;
	
	clock_gettime(CLOCK_REALTIME, &time);  
	micros = (uint64_t)time.tv_sec * 1000000 + time.tv_nsec/1000;
	
	return micros;
}
#else
uint64_t microsSinceEpoch()
{
	
	struct timeval tv;
	
	uint64_t micros = 0;
	
	gettimeofday(&tv, NULL);  
	micros =  ((uint64_t)tv.tv_sec) * 1000000 + tv.tv_usec;
	
	return micros;
}
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #!/usr/bin/env python
"""\
mavgenerate.py is a GUI front-end for mavgen, a python based MAVLink
header generation tool.

Notes:
-----
* 2012-7-16 -- dagoodman
    Working on Mac 10.6.8 darwin, with Python 2.7.1

* 2012-7-17 -- dagoodman
    Only GUI code working on Mac 10.6.8 darwin, with Python 3.2.3
    Working on Windows 7 SP1, with Python 2.7.3 and 3.2.3
    Mavgen doesn't work with Python 3.x yet

* 2012-9-25 -- dagoodman
    Passing error limit into mavgen to make output cleaner.

Copyright 2012 David Goodman (dagoodman@soe.ucsc.edu)
Released under GNU GPL version 3 or later

"""
import os
import re   
import sys

# Python 2.x and 3.x compatibility
if sys.version_info[0] == 3:
    from tkinter import *
    import tkinter.filedialog
    import tkinter.messagebox
else:
    # Must be using Python 2.x, import and rename
    from Tkinter import *
    import tkFileDialog
    import tkMessageBox

    tkinter.filedialog = tkFileDialog
    del tkFileDialog
    tkinter.messagebox = tkMessageBox
    del tkMessageBox
    

from pymavlink.generator import mavgen
from pymavlink.generator import mavparse

title = "MAVLink Generator"
error_limit = 5


class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack_propagate(0)
        self.grid( sticky=N+S+E+W)
        self.createWidgets()

    """\
    Creates the gui and all of its content.
    """
    def createWidgets(self):


        #----------------------------------------
        # Create the XML entry

        self.xml_value = StringVar()
        self.xml_label = Label( self, text="XML" )
        self.xml_label.grid(row=0, column = 0)
        self.xml_entry = Entry( self, width = 26, textvariable=self.xml_value )
        self.xml_entry.grid(row=0, column = 1)
        self.xml_button = Button (self, text="Browse", command=self.browseXMLFile)
        self.xml_button.grid(row=0, column = 2)

        #----------------------------------------
        # Create the Out entry

        self.out_value = StringVar()
        self.out_label = Label( self, text="Out" )
        self.out_label.grid(row=1,column = 0)
        self.out_entry = Entry( self, width = 26, textvariable=self.out_value )
        self.out_entry.grid(row=1, column = 1)
        self.out_button = Button (self, text="Browse", command=self.browseOutDirectory)
        self.out_button.grid(row=1, column = 2)

        #----------------------------------------
        # Create the Lang box

        self.language_value = StringVar()
        self.language_choices = mavgen.supportedLanguages
        self.language_label = Label( self, text="Language" )
        self.language_label.grid(row=2, column=0)
        self.language_menu = OptionMenu(self,self.language_value,*self.language_choices)
        self.language_value.set(mavgen.DEFAULT_LANGUAGE)
        self.language_menu.config(width=10)
        self.language_menu.grid(row=2, column=1,sticky=W)

        #----------------------------------------
        # Create the Protocol box

        self.protocol_value = StringVar()
        self.protocol_choices = [mavparse.PROTOCOL_1_0, mavparse.PROTOCOL_2_0]
        self.protocol_label = Label( self, text="Protocol")
        self.protocol_label.grid(row=3, column=0)
        self.protocol_menu = OptionMenu(self,self.protocol_value,*self.protocol_choices)
        self.protocol_value.set(mavgen.DEFAULT_WIRE_PROTOCOL)
        self.protocol_menu.config(width=10)
        self.protocol_menu.grid(row=3, column=1,sticky=W)

        #----------------------------------------
        # Create the Validate box

        self.validate_value = BooleanVar()
        self.validate_label = Label( self, text="Validate")
        self.validate_label.grid(row=4, column=0)
        self.validate_button = Checkbutton(self, variable=self.validate_value, onvalue=True, offvalue=False)
        self.validate_value.set(mavgen.DEFAULT_VALIDATE)
        self.validate_button.config(width=10)
        self.validate_button.grid(row=4, column=1,sticky=W)

        #----------------------------------------
        # Create the Validate Units box

        self.strict_units_value = BooleanVar()
        self.strict_units_label = Label( self, text="Validate Units")
        self.strict_units_label.grid(row=5, column=0)
        self.strict_units_button = Checkbutton(self, variable=self.strict_units_value, onvalue=True, offvalue=False)
        self.strict_units_value.set(mavgen.DEFAULT_STRICT_UNITS)
        self.strict_units_button.config(width=10)
        self.strict_units_button.grid(row=5, column=1,sticky=W)

        #----------------------------------------
        # Create the generate button

        self.generate_button = Button ( self, text="Generate", command=self.generateHeaders)
        self.generate_button.grid(row=6,column=1)

    """\
    Open a file selection window to choose the XML message definition.
    """
    def browseXMLFile(self):
        # TODO Allow specification of multiple XML definitions
        xml_file = tkinter.filedialog.askopenfilename(parent=self, title='Choose a definition file')
        if xml_file != None:
            self.xml_value.set(xml_file)

    """\
    Open a directory selection window to choose an output directory for
    headers.
    """
    def browseOutDirectory(self):
        mavlinkFolder = os.path.dirname(os.path.realpath(__file__))
        out_dir = tkinter.filedialog.askdirectory(parent=self,initialdir=mavlinkFolder,title='Please select an output directory')
        if out_dir != None:
            self.out_value.set(out_dir)

    """\
    Generates the header files and place them in the output directory.
    """
    def generateHeaders(self):
        # Verify settings
        rex = re.compile(".*\\.xml$", re.IGNORECASE)
        if not self.xml_value.get():
            tkinter.messagebox.showerror('Error Generating Headers','An XML message definition file must be specified.')
            return

        if not self.out_value.get():
            tkinter.messagebox.showerror('Error Generating Headers', 'An output directory must be specified.')
            return


        if os.path.isdir(self.out_value.get()):
            if not tkinter.messagebox.askokcancel('Overwrite Headers?','The output directory \'{0}\' already exists. Headers may be overwritten if they already exist.'.format(self.out_value.get())):
                return

        # Generate headers
        opts = mavgen.Opts(self.out_value.get(), wire_protocol=self.protocol_value.get(), language=self.language_value.get(), validate=self.validate_value.get(), error_limit=error_limit, strict_units=self.strict_units_value.get());
        args = [self.xml_value.get()]
        try:
            mavgen.mavgen(opts,args)
            tkinter.messagebox.showinfo('Successfully Generated Headers', 'Headers generated successfully.')

        except Exception as ex:
            exStr = formatErrorMessage(str(ex));
            tkinter.messagebox.showerror('Error Generating Headers','{0!s}'.format(exStr))
            return

"""\
Format the mavgen exceptions by removing 'ERROR: '.
"""
def formatErrorMessage(message):
    reObj = re.compile(r'^(ERROR):\s+',re.M);
    matches = re.findall(reObj, message);
    prefix = ("An error occurred in mavgen:" if len(matches) == 1 else "Errors occurred in mavgen:\n")
    message = re.sub(reObj, '\n', message);

    return prefix + message


# End of Application class
# ---------------------------------

# ---------------------------------
# Start

if __name__ == '__main__':
  app = Application()
  app.master.title(title)
  app.mainloop()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?xml version="1.0"?>
<!-- ASLUAV Mavlink Message Definition File -->
<!-- Used for the ASLUAV fixed-wing autopilot (www.asl.ethz.ch), which implements extensions to the Pixhawk (https://docs.px4.io/en/flight_controller/pixhawk.html) autopilot -->
<mavlink>
  <include>common.xml</include>
  <enums>
    <enum name="MAV_CMD">
      <!-- ASLUAV specific MAV_CMD_* commands -->
      <entry name="MAV_CMD_RESET_MPPT" value="40001">
        <description>Mission command to reset Maximum Power Point Tracker (MPPT)</description>
        <param index="1">MPPT number</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
      <entry name="MAV_CMD_PAYLOAD_CONTROL" value="40002">
        <description>Mission command to perform a power cycle on payload</description>
        <param index="1">Complete power cycle</param>
        <param index="2">VISensor power cycle</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
    </enum>
    <enum name="GSM_LINK_TYPE">
      <entry value="0" name="GSM_LINK_TYPE_NONE">
        <description>no service</description>
      </entry>
      <entry value="1" name="GSM_LINK_TYPE_UNKNOWN">
        <description>link type unknown</description>
      </entry>
      <entry value="2" name="GSM_LINK_TYPE_2G">
        <description>2G (GSM/GRPS/EDGE) link</description>
      </entry>
      <entry value="3" name="GSM_LINK_TYPE_3G">
        <description>3G link (WCDMA/HSDPA/HSPA) </description>
      </entry>
      <entry value="4" name="GSM_LINK_TYPE_4G">
        <description>4G link (LTE)</description>
      </entry>
    </enum>
    <enum name="GSM_MODEM_TYPE">
      <entry value="0" name="GSM_MODEM_TYPE_UNKNOWN">
        <description>not specified</description>
      </entry>
      <entry value="1" name="GSM_MODEM_TYPE_HUAWEI_E3372">
        <description>HUAWEI LTE USB Stick E3372</description>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="223" name="COMMAND_INT_STAMPED">
      <description>Message encoding a command with parameters as scaled integers and additional metadata. Scaling depends on the actual command value.</description>
      <field type="uint32_t" name="utc_time">UTC time, seconds elapsed since 01.01.1970</field>
      <field type="uint64_t" name="vehicle_timestamp">Microseconds elapsed since vehicle boot</field>
      <field type="uint8_t" name="target_system">System ID</field>
      <field type="uint8_t" name="target_component">Component ID</field>
      <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the COMMAND, as defined by MAV_FRAME enum</field>
      <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the mission item, as defined by MAV_CMD enum</field>
      <field type="uint8_t" name="current">false:0, true:1</field>
      <field type="uint8_t" name="autocontinue">autocontinue to next wp</field>
      <field type="float" name="param1">PARAM1, see MAV_CMD enum</field>
      <field type="float" name="param2">PARAM2, see MAV_CMD enum</field>
      <field type="float" name="param3">PARAM3, see MAV_CMD enum</field>
      <field type="float" name="param4">PARAM4, see MAV_CMD enum</field>
      <field type="int32_t" name="x">PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7</field>
      <field type="int32_t" name="y">PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7</field>
      <field type="float" name="z">PARAM7 / z position: global: altitude in meters (MSL, WGS84, AGL or relative to home - depending on frame).</field>
    </message>
    <message id="224" name="COMMAND_LONG_STAMPED">
      <description>Send a command with up to seven parameters to the MAV and additional metadata</description>
      <field type="uint32_t" name="utc_time">UTC time, seconds elapsed since 01.01.1970</field>
      <field type="uint64_t" name="vehicle_timestamp">Microseconds elapsed since vehicle boot</field>
      <field type="uint8_t" name="target_system">System which should execute the command</field>
      <field type="uint8_t" name="target_component">Component which should execute the command, 0 for all components</field>
      <field type="uint16_t" name="command" enum="MAV_CMD">Command ID, as defined by MAV_CMD enum.</field>
      <field type="uint8_t" name="confirmation">0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)</field>
      <field type="float" name="param1">Parameter 1, as defined by MAV_CMD enum.</field>
      <field type="float" name="param2">Parameter 2, as defined by MAV_CMD enum.</field>
      <field type="float" name="param3">Parameter 3, as defined by MAV_CMD enum.</field>
      <field type="float" name="param4">Parameter 4, as defined by MAV_CMD enum.</field>
      <field type="float" name="param5">Parameter 5, as defined by MAV_CMD enum.</field>
      <field type="float" name="param6">Parameter 6, as defined by MAV_CMD enum.</field>
      <field type="float" name="param7">Parameter 7, as defined by MAV_CMD enum.</field>
    </message>
    <message id="8002" name="SENS_POWER">
      <description>Voltage and current sensor data</description>
      <field type="float" name="adc121_vspb_volt" units="V"> Power board voltage sensor reading</field>
      <field type="float" name="adc121_cspb_amp" units="A"> Power board current sensor reading</field>
      <field type="float" name="adc121_cs1_amp" units="A"> Board current sensor 1 reading</field>
      <field type="float" name="adc121_cs2_amp" units="A"> Board current sensor 2 reading</field>
    </message>
    <message id="8003" name="SENS_MPPT">
      <description>Maximum Power Point Tracker (MPPT) sensor data for solar module power performance tracking</description>
      <field type="uint64_t" name="mppt_timestamp" units="us"> MPPT last timestamp </field>
      <field type="float" name="mppt1_volt" units="V"> MPPT1 voltage </field>
      <field type="float" name="mppt1_amp" units="A"> MPPT1 current </field>
      <field type="uint16_t" name="mppt1_pwm" units="us"> MPPT1 pwm </field>
      <field type="uint8_t" name="mppt1_status"> MPPT1 status </field>
      <field type="float" name="mppt2_volt" units="V"> MPPT2 voltage </field>
      <field type="float" name="mppt2_amp" units="A"> MPPT2 current </field>
      <field type="uint16_t" name="mppt2_pwm" units="us"> MPPT2 pwm </field>
      <field type="uint8_t" name="mppt2_status"> MPPT2 status </field>
      <field type="float" name="mppt3_volt" units="V">MPPT3 voltage </field>
      <field type="float" name="mppt3_amp" units="A"> MPPT3 current </field>
      <field type="uint16_t" name="mppt3_pwm" units="us"> MPPT3 pwm </field>
      <field type="uint8_t" name="mppt3_status"> MPPT3 status </field>
    </message>
    <message id="8004" name="ASLCTRL_DATA">
      <description>ASL-fixed-wing controller data</description>
      <field type="uint64_t" name="timestamp" units="us"> Timestamp</field>
      <field type="uint8_t" name="aslctrl_mode"> ASLCTRL control-mode (manual, stabilized, auto, etc...)</field>
      <field type="float" name="h"> See sourcecode for a description of these values... </field>
      <field type="float" name="hRef"> </field>
      <field type="float" name="hRef_t"> </field>
      <field type="float" name="PitchAngle" units="deg">Pitch angle</field>
      <field type="float" name="PitchAngleRef" units="deg">Pitch angle reference</field>
      <field type="float" name="q"> </field>
      <field type="float" name="qRef"> </field>
      <field type="float" name="uElev"> </field>
      <field type="float" name="uThrot"> </field>
      <field type="float" name="uThrot2"> </field>
      <field type="float" name="nZ"> </field>
      <field type="float" name="AirspeedRef" units="m/s">Airspeed reference</field>
      <field type="uint8_t" name="SpoilersEngaged"> </field>
      <field type="float" name="YawAngle" units="deg">Yaw angle</field>
      <field type="float" name="YawAngleRef" units="deg">Yaw angle reference</field>
      <field type="float" name="RollAngle" units="deg">Roll angle</field>
      <field type="float" name="RollAngleRef" units="deg">Roll angle reference</field>
      <field type="float" name="p"> </field>
      <field type="float" name="pRef"> </field>
      <field type="float" name="r"> </field>
      <field type="float" name="rRef"> </field>
      <field type="float" name="uAil"> </field>
      <field type="float" name="uRud"> </field>
    </message>
    <message id="8005" name="ASLCTRL_DEBUG">
      <description>ASL-fixed-wing controller debug data</description>
      <field type="uint32_t" name="i32_1"> Debug data</field>
      <field type="uint8_t" name="i8_1"> Debug data</field>
      <field type="uint8_t" name="i8_2"> Debug data</field>
      <field type="float" name="f_1"> Debug data </field>
      <field type="float" name="f_2"> Debug data</field>
      <field type="float" name="f_3"> Debug data</field>
      <field type="float" name="f_4"> Debug data</field>
      <field type="float" name="f_5"> Debug data</field>
      <field type="float" name="f_6"> Debug data</field>
      <field type="float" name="f_7"> Debug data</field>
      <field type="float" name="f_8"> Debug data</field>
    </message>
    <message id="8006" name="ASLUAV_STATUS">
      <description>Extended state information for ASLUAVs</description>
      <field type="uint8_t" name="LED_status"> Status of the position-indicator LEDs</field>
      <field type="uint8_t" name="SATCOM_status"> Status of the IRIDIUM satellite communication system</field>
      <field type="uint8_t[8]" name="Servo_status"> Status vector for up to 8 servos</field>
      <field type="float" name="Motor_rpm"> Motor RPM </field>
      <!-- to be extended-->
    </message>
    <message id="8007" name="EKF_EXT">
      <description>Extended EKF state estimates for ASLUAVs</description>
      <field type="uint64_t" name="timestamp" units="us"> Time since system start</field>
      <field type="float" name="Windspeed" units="m/s"> Magnitude of wind velocity (in lateral inertial plane)</field>
      <field type="float" name="WindDir" units="rad"> Wind heading angle from North</field>
      <field type="float" name="WindZ" units="m/s"> Z (Down) component of inertial wind velocity</field>
      <field type="float" name="Airspeed" units="m/s"> Magnitude of air velocity</field>
      <field type="float" name="beta" units="rad"> Sideslip angle</field>
      <field type="float" name="alpha" units="rad"> Angle of attack</field>
    </message>
    <message id="8008" name="ASL_OBCTRL">
      <description>Off-board controls/commands for ASLUAVs</description>
      <field type="uint64_t" name="timestamp" units="us"> Time since system start</field>
      <field type="float" name="uElev"> Elevator command [~]</field>
      <field type="float" name="uThrot"> Throttle command [~]</field>
      <field type="float" name="uThrot2"> Throttle 2 command [~]</field>
      <field type="float" name="uAilL"> Left aileron command [~]</field>
      <field type="float" name="uAilR"> Right aileron command [~]</field>
      <field type="float" name="uRud"> Rudder command [~]</field>
      <field type="uint8_t" name="obctrl_status"> Off-board computer status</field>
    </message>
    <message id="8009" name="SENS_ATMOS">
      <description>Atmospheric sensors (temperature, humidity, ...) </description>
      <field type="uint64_t" name="timestamp" units="us">Time since system boot</field>
      <field type="float" name="TempAmbient" units="degC"> Ambient temperature</field>
      <field type="float" name="Humidity" units="%"> Relative humidity</field>
    </message>
    <message id="8010" name="SENS_BATMON">
      <description>Battery pack monitoring data for Li-Ion batteries</description>
      <field type="uint64_t" name="batmon_timestamp" units="us">Time since system start</field>
      <field type="float" name="temperature" units="degC">Battery pack temperature</field>
      <field type="uint16_t" name="voltage" units="mV">Battery pack voltage</field>
      <field type="int16_t" name="current" units="mA">Battery pack current</field>
      <field type="uint8_t" name="SoC">Battery pack state-of-charge</field>
      <field type="uint16_t" name="batterystatus">Battery monitor status report bits in Hex</field>
      <field type="uint16_t" name="serialnumber">Battery monitor serial number in Hex</field>
      <field type="uint32_t" name="safetystatus">Battery monitor safetystatus report bits in Hex</field>
      <field type="uint32_t" name="operationstatus">Battery monitor operation status report bits in Hex</field>
      <field type="uint16_t" name="cellvoltage1" units="mV">Battery pack cell 1 voltage</field>
      <field type="uint16_t" name="cellvoltage2" units="mV">Battery pack cell 2 voltage</field>
      <field type="uint16_t" name="cellvoltage3" units="mV">Battery pack cell 3 voltage</field>
      <field type="uint16_t" name="cellvoltage4" units="mV">Battery pack cell 4 voltage</field>
      <field type="uint16_t" name="cellvoltage5" units="mV">Battery pack cell 5 voltage</field>
      <field type="uint16_t" name="cellvoltage6" units="mV">Battery pack cell 6 voltage</field>
    </message>
    <message id="8011" name="FW_SOARING_DATA">
      <description>Fixed-wing soaring (i.e. thermal seeking) data</description>
      <field type="uint64_t" name="timestamp" units="ms">Timestamp</field>
      <field type="uint64_t" name="timestampModeChanged" units="ms">Timestamp since last mode change</field>
      <field type="float" name="xW" units="m/s">Thermal core updraft strength</field>
      <field type="float" name="xR" units="m">Thermal radius</field>
      <field type="float" name="xLat" units="deg">Thermal center latitude</field>
      <field type="float" name="xLon" units="deg">Thermal center longitude</field>
      <field type="float" name="VarW">Variance W</field>
      <field type="float" name="VarR">Variance R</field>
      <field type="float" name="VarLat">Variance Lat</field>
      <field type="float" name="VarLon">Variance Lon </field>
      <field type="float" name="LoiterRadius" units="m">Suggested loiter radius</field>
      <field type="float" name="LoiterDirection">Suggested loiter direction</field>
      <field type="float" name="DistToSoarPoint" units="m">Distance to soar point</field>
      <field type="float" name="vSinkExp" units="m/s">Expected sink rate at current airspeed, roll and throttle</field>
      <field type="float" name="z1_LocalUpdraftSpeed" units="m/s">Measurement / updraft speed at current/local airplane position</field>
      <field type="float" name="z2_DeltaRoll" units="deg">Measurement / roll angle tracking error</field>
      <field type="float" name="z1_exp">Expected measurement 1</field>
      <field type="float" name="z2_exp">Expected measurement 2</field>
      <field type="float" name="ThermalGSNorth" units="m/s">Thermal drift (from estimator prediction step only)</field>
      <field type="float" name="ThermalGSEast" units="m/s">Thermal drift (from estimator prediction step only)</field>
      <field type="float" name="TSE_dot" units="m/s"> Total specific energy change (filtered)</field>
      <field type="float" name="DebugVar1"> Debug variable 1</field>
      <field type="float" name="DebugVar2"> Debug variable 2</field>
      <field type="uint8_t" name="ControlMode">Control Mode [-]</field>
      <field type="uint8_t" name="valid">Data valid [-]</field>
    </message>
    <message id="8012" name="SENSORPOD_STATUS">
      <description>Monitoring of sensorpod status</description>
      <field type="uint64_t" name="timestamp" units="ms">Timestamp in linuxtime (since 1.1.1970)</field>
      <field type="uint8_t" name="visensor_rate_1">Rate of ROS topic 1</field>
      <field type="uint8_t" name="visensor_rate_2">Rate of ROS topic 2</field>
      <field type="uint8_t" name="visensor_rate_3">Rate of ROS topic 3</field>
      <field type="uint8_t" name="visensor_rate_4">Rate of ROS topic 4</field>
      <field type="uint8_t" name="recording_nodes_count">Number of recording nodes</field>
      <field type="uint8_t" name="cpu_temp" units="degC">Temperature of sensorpod CPU in</field>
      <field type="uint16_t" name="free_space">Free space available in recordings directory in [Gb] * 1e2</field>
    </message>
    <message id="8013" name="SENS_POWER_BOARD">
      <description>Monitoring of power board status</description>
      <field type="uint64_t" name="timestamp" units="us">Timestamp</field>
      <field type="uint8_t" name="pwr_brd_status">Power board status register</field>
      <field type="uint8_t" name="pwr_brd_led_status">Power board leds status</field>
      <field type="float" name="pwr_brd_system_volt" units="V">Power board system voltage</field>
      <field type="float" name="pwr_brd_servo_volt" units="V">Power board servo voltage</field>
      <field type="float" name="pwr_brd_digital_volt" units="V">Power board digital voltage</field>
      <field type="float" name="pwr_brd_mot_l_amp" units="A">Power board left motor current sensor</field>
      <field type="float" name="pwr_brd_mot_r_amp" units="A">Power board right motor current sensor</field>
      <field type="float" name="pwr_brd_analog_amp" units="A">Power board analog current sensor</field>
      <field type="float" name="pwr_brd_digital_amp" units="A">Power board digital current sensor</field>
      <field type="float" name="pwr_brd_ext_amp" units="A">Power board extension current sensor</field>
      <field type="float" name="pwr_brd_aux_amp" units="A">Power board aux current sensor</field>
    </message>
    <message id="8014" name="GSM_LINK_STATUS">
      <description>Status of GSM modem (connected to onboard computer)</description>
      <field type="uint64_t" name="timestamp" units="us">Timestamp (of OBC)</field>
      <field type="uint8_t" name="gsm_modem_type" enum="GSM_MODEM_TYPE">GSM modem used</field>
      <field type="uint8_t" name="gsm_link_type" enum="GSM_LINK_TYPE">GSM link type</field>
      <field type="uint8_t" name="rssi">RSSI as reported by modem (unconverted)</field>
      <field type="uint8_t" name="rsrp_rscp">RSRP (LTE) or RSCP (WCDMA) as reported by modem (unconverted)</field>
      <field type="uint8_t" name="sinr_ecio">SINR (LTE) or ECIO (WCDMA) as reported by modem (unconverted)</field>
      <field type="uint8_t" name="rsrq">RSRQ (LTE only) as reported by modem (unconverted)</field>
    </message>
    <!-- Using mavlink 1 msg ID from the arudpilot reserved space, in order to save header size -->
    <message id="8015" name="SATCOM_LINK_STATUS">
      <description>Status of the SatCom link</description>
      <field type="uint64_t" name="timestamp" units="us">Timestamp</field>
      <field type="uint64_t" name="last_heartbeat" units="us">Timestamp of the last successful sbd session</field>
      <field type="uint16_t" name="failed_sessions">Number of failed sessions</field>
      <field type="uint16_t" name="successful_sessions">Number of successful sessions</field>
      <field type="uint8_t" name="signal_quality">Signal quality</field>
      <field type="uint8_t" name="ring_pending">Ring call pending</field>
      <field type="uint8_t" name="tx_session_pending">Transmission session pending</field>
      <field type="uint8_t" name="rx_session_pending">Receiving session pending</field>
    </message>
    <message id="8016" name="SENSOR_AIRFLOW_ANGLES">
      <description>Calibrated airflow angle measurements</description>
      <field type="uint64_t" name="timestamp" units="us">Timestamp</field>
      <field type="float" name="angleofattack" units="deg">Angle of attack</field>
      <field type="uint8_t" name="angleofattack_valid">Angle of attack measurement valid</field>
      <field type="float" name="sideslip" units="deg">Sideslip angle</field>
      <field type="uint8_t" name="sideslip_valid">Sideslip angle measurement valid</field>
    </message>
  </messages>
</mavlink>
                                                                                                                                                                <?xml version="1.0"?>
<!-- AVSS is a Canadian aerospace company commercializing safety technologies for Urban Air Mobility. -->
<!-- AVSS is first commercially available products are parachute recovery systems for commercial drones. -->
<!-- AVSS contact info: -->
<!-- company URL: https://www.avss.co -->
<!-- email contact: josh.boudreau@avss.co thomas.li@avss.co llxxgg@gmail.com-->
<!-- mavlink messenger ID range: 60050 - 60099,  mavlink command ID range: 60050 - 60099-->
<mavlink>
  <include>common.xml</include>
  <version>2</version>
  <dialect>1</dialect>
  <enums>
    <enum name="MAV_CMD">
      <!-- AVSS specific MAV_CMD_PRS* commands -->
      <entry name="MAV_CMD_PRS_SET_ARM" value="60050" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Set PRS arm statuses.</description>
        <param index="1" label="ARM status">PRS arm statuses</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_GET_ARM" value="60051" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Gets PRS arm statuses</description>
        <param index="1">User defined</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_GET_BATTERY" value="60052" isDestination="false" hasLocation="false">
        <description>AVSS defined command.  Get the PRS battery voltage in millivolts</description>
        <param index="1">User defined</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_GET_ERR" value="60053" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Get the PRS error statuses.</description>
        <param index="1">User defined</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_SET_ARM_ALTI" value="60070" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Set the ATS arming altitude in meters.</description>
        <param index="1" label="Altitude" units="m">ATS arming altitude</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_GET_ARM_ALTI" value="60071" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Get the ATS arming altitude in meters.</description>
        <param index="1">User defined</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
      <entry name="MAV_CMD_PRS_SHUTDOWN" value="60072" isDestination="false" hasLocation="false">
        <description>AVSS defined command. Shuts down the PRS system.</description>
        <param index="1">User defined</param>
        <param index="2">User defined</param>
        <param index="3">User defined</param>
        <param index="4">User defined</param>
        <param index="5">User defined</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
    </enum>
    <enum name="MAV_AVSS_COMMAND_FAILURE_REASON">
      <entry name="PRS_NOT_STEADY" value="1">
        <description>AVSS defined command failure reason. PRS not steady.</description>
      </entry>
      <entry name="PRS_DTM_NOT_ARMED" value="2">
        <description>AVSS defined command failure reason. PRS DTM not armed.</description>
      </entry>
      <entry name="PRS_OTM_NOT_ARMED" value="3">
        <description>AVSS defined command failure reason. PRS OTM not armed.</description>
      </entry>
    </enum>
    <enum name="AVSS_M300_OPERATION_MODE">
      <entry name="MODE_M300_MANUAL_CTRL" value="0">
        <description>In manual control mode</description>
      </entry>
      <entry name="MODE_M300_ATTITUDE" value="1">
        <description>In attitude mode </description>
      </entry>
      <entry name="MODE_M300_P_GPS" value="6">
        <description>In GPS mode</description>
      </entry>
      <entry name="MODE_M300_HOTPOINT_MODE" value="9">
        <description>In hotpoint mode </description>
      </entry>
      <entry name="MODE_M300_ASSISTED_TAKEOFF" value="10">
        <description>In assisted takeoff mode</description>
      </entry>
      <entry name="MODE_M300_AUTO_TAKEOFF" value="11">
        <description>In auto takeoff mode</description>
      </entry>
      <entry name="MODE_M300_AUTO_LANDING" value="12">
        <description>In auto landing mode</description>
      </entry>
      <entry name="MODE_M300_NAVI_GO_HOME" value="15">
        <description>In go home mode</description>
      </entry>
      <entry name="MODE_M300_NAVI_SDK_CTRL" value="17">
        <description>In sdk control mode</description>
      </entry>
      <entry name="MODE_M300_S_SPORT" value="31">
        <description>In sport mode</description>
      </entry>
      <entry name="MODE_M300_FORCE_AUTO_LANDING" value="33">
        <description>In force auto landing mode</description>
      </entry>
      <entry name="MODE_M300_T_TRIPOD" value="38">
        <description>In tripod mode</description>
      </entry>
      <entry name="MODE_M300_SEARCH_MODE" value="40">
        <description>In search mode</description>
      </entry>
      <entry name="MODE_M300_ENGINE_START" value="41">
        <description>In engine mode</description>
      </entry>
    </enum>
    <enum name="AVSS_HORSEFLY_OPERATION_MODE">
      <entry name="MODE_HORSEFLY_MANUAL_CTRL" value="0">
        <description>In manual control mode</description>
      </entry>
      <entry name="MODE_HORSEFLY_AUTO_TAKEOFF" value="1">
        <description>In auto takeoff mode</description>
      </entry>
      <entry name="MODE_HORSEFLY_AUTO_LANDING" value="2">
        <description>In auto landing mode</description>
      </entry>
      <entry name="MODE_HORSEFLY_NAVI_GO_HOME" value="3">
        <description>In go home mode</description>
      </entry>
      <entry name="MODE_HORSEFLY_DROP" value="4">
        <description>In drop mode</description>
      </entry>
    </enum>
  </enums>
  <messages>
    <message name="AVSS_PRS_SYS_STATUS" id="60050">
      <description> AVSS PRS system status.</description>
      <field name="time_boot_ms" units="ms" type="uint32_t">Timestamp (time since PRS boot).</field>
      <field name="error_status" type="uint32_t">PRS error statuses</field>
      <field name="battery_status" type="uint32_t">Estimated battery run-time without a remote connection and PRS battery voltage</field>
      <field name="arm_status" type="uint8_t">PRS arm statuses</field>
      <field name="charge_status" type="uint8_t">PRS battery charge statuses</field>
    </message>
    <message name="AVSS_DRONE_POSITION" id="60051">
      <description> Drone position.</description>
      <field name="time_boot_ms" units="ms" type="uint32_t">Timestamp (time since FC boot).</field>
      <field name="lat" units="degE7" type="int32_t">Latitude, expressed</field>
      <field name="lon" units="degE7" type="int32_t">Longitude, expressed</field>
      <field name="alt" units="mm" type="int32_t">Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.</field>
      <field name="ground_alt" units="m" type="float">Altitude above ground, This altitude is measured by a ultrasound, Laser rangefinder or millimeter-wave radar</field>
      <field name="barometer_alt" units="m" type="float">This altitude is measured by a barometer</field>
    </message>
    <message name="AVSS_DRONE_IMU" id="60052">
      <description> Drone IMU data. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).</description>
      <field name="time_boot_ms" units="ms" type="uint32_t">Timestamp (time since FC boot).</field>
      <field name="q1" type="float">Quaternion component 1, w (1 in null-rotation)</field>
      <field name="q2" type="float">Quaternion component 2, x (0 in null-rotation)</field>
      <field name="q3" type="float">Quaternion component 3, y (0 in null-rotation)</field>
      <field name="q4" type="float">Quaternion component 4, z (0 in null-rotation)</field>
      <field name="xacc" units="m/s/s" type="float">X acceleration</field>
      <field name="yacc" units="m/s/s" type="float">Y acceleration</field>
      <field name="zacc" units="m/s/s" type="float">Z acceleration</field>
      <field name="xgyro" units="rad/s" type="float">Angular speed around X axis</field>
      <field name="ygyro" units="rad/s" type="float">Angular speed around Y axis</field>
      <field name="zgyro" units="rad/s" type="float">Angular speed around Z axis</field>
    </message>
    <message name="AVSS_DRONE_OPERATION_MODE" id="60053">
      <description> Drone operation mode.</description>
      <field name="time_boot_ms" units="ms" type="uint32_t">Timestamp (time since FC boot).</field>
      <field name="M300_operation_mode" type="uint8_t">DJI M300 operation mode</field>
      <field name="horsefly_operation_mode" type="uint8_t">horsefly operation mode</field>
    </message>
  </messages>
</mavlink>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?xml version="1.0"?>
<mavlink>
  <include>ardupilotmega.xml</include>
  <!-- ASLUAV.xml range of IDs:
    messages: 8000 - 8999
    commands: 40001 - 41999
  -->
  <include>ASLUAV.xml</include>
  <include>common.xml</include>
  <include>development.xml</include>
  <include>icarous.xml</include>
  <!-- matrixpilot.xml: ERROR: Duplicate message id 150 for FLEXIFUNCTION_SET (matrixpilot.xml:50) also used by SENSOR_OFFSETS (ardupilotmega.xml:1101) -->
  <!-- <include>matrixpilot.xml</include> -->
  <include>minimal.xml</include>
  <!-- paparazzi.xml: : ERROR: Duplicate message id 180 for SCRIPT_ITEM (paparazzi.xml:9) also used by CAMERA_FEEDBACK (ardupilotmega.xml:1370) -->
  <!-- <include>paparazzi.xml</include> -->
  <include>python_array_test.xml</include>
  <include>standard.xml</include>
  <include>test.xml</include>
  <include>ualberta.xml</include>
  <include>uAvionix.xml</include>
  <!-- loweheiser.xml range of IDs:
       messages: 10150 - 10199
       commands: 10150 - 10199
  -->
  <include>loweheiser.xml</include>
  <!-- storm32.xml range of IDs:
    messages: 60000 - 60049
    commands: 60000 - 60049
  -->
  <include>storm32.xml</include>
  <!-- AVSSUAS.xml range of IDs:
    messages: 60050 - 60099 
    commands: 60050 - 60099
  -->
  <include>AVSSUAS.xml</include>
  <!-- Herelink.xml range of IDs:
    messages: 50000 - 50099
    commands: 50000 - 50099
  -->
  <include>cubepilot.xml</include>
  <include>csAirLink.xml</include>
  <!-- csAirLink.xml range of IDs:
    messages: 52000 - 52099
    commands: 52000 - 52099
  -->
  <!--Next range to allocate range of IDs:
    messages: 52100 - ? < 60000
    commands: 52100 - ? < 60000
  -->
  <messages/>
</mavlink>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <?xml version="1.0"?>
<mavlink>
  <include>common.xml</include>
  <!-- Vendors -->
  <include>uAvionix.xml</include>
  <include>icarous.xml</include>
  <include>loweheiser.xml</include>
  <include>cubepilot.xml</include>
  <include>csAirLink.xml</include>
  <dialect>2</dialect>
  <!-- Note that ArduPilot-specific messages should use the command id range from 150 to 250, to leave plenty of room for growth of common.xml If you prototype a message here, then you should consider if it is general enough to move into common.xml later -->
  <enums>
    <enum name="ACCELCAL_VEHICLE_POS">
      <entry value="1" name="ACCELCAL_VEHICLE_POS_LEVEL"/>
      <entry value="2" name="ACCELCAL_VEHICLE_POS_LEFT"/>
      <entry value="3" name="ACCELCAL_VEHICLE_POS_RIGHT"/>
      <entry value="4" name="ACCELCAL_VEHICLE_POS_NOSEDOWN"/>
      <entry value="5" name="ACCELCAL_VEHICLE_POS_NOSEUP"/>
      <entry value="6" name="ACCELCAL_VEHICLE_POS_BACK"/>
      <entry value="16777215" name="ACCELCAL_VEHICLE_POS_SUCCESS"/>
      <entry value="16777216" name="ACCELCAL_VEHICLE_POS_FAILED"/>
    </enum>
    <enum name="HEADING_TYPE">
      <entry value="0" name="HEADING_TYPE_COURSE_OVER_GROUND"/>
      <entry value="1" name="HEADING_TYPE_HEADING"/>
    </enum>
    <!-- ardupilot specific MAV_CMD_* commands -->
    <enum name="MAV_CMD">
      <!-- 200 to 214 used by common.xml -->
      <entry value="215" name="MAV_CMD_DO_SET_RESUME_REPEAT_DIST" hasLocation="false" isDestination="false">
        <description>Set the distance to be repeated on mission resume</description>
        <param index="1" label="Distance" units="m">Distance.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="216" name="MAV_CMD_DO_SPRAYER" hasLocation="false" isDestination="false">
        <description>Control attached liquid sprayer</description>
        <param index="1" label="Sprayer Enable" minValue="0" maxValue="1" increment="1">0: disable sprayer. 1: enable sprayer.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="217" name="MAV_CMD_DO_SEND_SCRIPT_MESSAGE" hasLocation="false" isDestination="false">
        <description>Pass instructions onto scripting, a script should be checking for a new command</description>
        <param index="1" label="ID" minValue="0" maxValue="65535" increment="1">uint16 ID value to be passed to scripting</param>
        <param index="2" label="param 1">float value to be passed to scripting</param>
        <param index="3" label="param 2">float value to be passed to scripting</param>
        <param index="4" label="param 3">float value to be passed to scripting</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="218" name="MAV_CMD_DO_AUX_FUNCTION">
        <description>Execute auxiliary function</description>
        <param index="1" label="AuxiliaryFunction">Auxiliary Function.</param>
        <param index="2" label="SwitchPosition" enum="MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL">Switch Level.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="83" name="MAV_CMD_NAV_ALTITUDE_WAIT" hasLocation="false" isDestination="false">
        <description>Mission command to wait for an altitude or downwards vertical speed. This is meant for high altitude balloon launches, allowing the aircraft to be idle until either an altitude is reached or a negative vertical speed is reached (indicating early balloon burst). The wiggle time is how often to wiggle the control surfaces to prevent them seizing up.</description>
        <param index="1" label="Altitude" units="m">Altitude.</param>
        <param index="2" label="Descent Speed" units="m/s">Descent speed.</param>
        <param index="3" label="Wiggle Time" units="s">How long to wiggle the control surfaces to prevent them seizing up.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42000" name="MAV_CMD_POWER_OFF_INITIATED" hasLocation="false" isDestination="false">
        <description>A system wide power-off event has been initiated.</description>
        <param index="1">Empty.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <!-- MAV_CMD_SOLO_BTN_* are here to provide vendor-specific support for 3DR Solo until a better solution is found to atomically make multiple commands with control flow -->
      <entry value="42001" name="MAV_CMD_SOLO_BTN_FLY_CLICK" hasLocation="false" isDestination="false">
        <description>FLY button has been clicked.</description>
        <param index="1">Empty.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42002" name="MAV_CMD_SOLO_BTN_FLY_HOLD" hasLocation="false" isDestination="false">
        <description>FLY button has been held for 1.5 seconds.</description>
        <param index="1" label="Takeoff Altitude" units="m">Takeoff altitude.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42003" name="MAV_CMD_SOLO_BTN_PAUSE_CLICK" hasLocation="false" isDestination="false">
        <description>PAUSE button has been clicked.</description>
        <param index="1" label="Shot Mode" minValue="0" maxValue="1" increment="1">1 if Solo is in a shot mode, 0 otherwise.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42004" name="MAV_CMD_FIXED_MAG_CAL" hasLocation="false" isDestination="false">
        <description>Magnetometer calibration based on fixed position
        in earth field given by inclination, declination and intensity.</description>
        <param index="1" label="Declination" units="deg">Magnetic declination.</param>
        <param index="2" label="Inclination" units="deg">Magnetic inclination.</param>
        <param index="3" label="Intensity" units="mgauss">Magnetic intensity.</param>
        <param index="4" label="Yaw" units="deg">Yaw.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42005" name="MAV_CMD_FIXED_MAG_CAL_FIELD" hasLocation="false" isDestination="false">
        <description>Magnetometer calibration based on fixed expected field values.</description>
        <param index="1" label="Field X" units="mgauss">Field strength X.</param>
        <param index="2" label="Field Y" units="mgauss">Field strength Y.</param>
        <param index="3" label="Field Z" units="mgauss">Field strength Z.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <!-- 42006 MAV_CMD_FIXED_MAG_CAL_YAW moved to common.xml -->
      <entry value="42007" name="MAV_CMD_SET_EKF_SOURCE_SET" hasLocation="false" isDestination="false">
        <description>Set EKF sensor source set.</description>
        <param index="1" label="SourceSetId" minValue="1" maxValue="3" increment="1">Source Set Id.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42424" name="MAV_CMD_DO_START_MAG_CAL" hasLocation="false" isDestination="false">
        <description>Initiate a magnetometer calibration.</description>
        <param index="1" label="Magnetometers Bitmask" minValue="0" maxValue="255" increment="1">Bitmask of magnetometers to calibrate. Use 0 to calibrate all sensors that can be started (sensors may not start if disabled, unhealthy, etc.). The command will NACK if calibration does not start for a sensor explicitly specified by the bitmask.</param>
        <param index="2" label="Retry on Failure" minValue="0" maxValue="1" increment="1">Automatically retry on failure (0=no retry, 1=retry).</param>
        <param index="3" label="Autosave" minValue="0" maxValue="1" increment="1">Save without user input (0=require input, 1=autosave).</param>
        <param index="4" label="Delay" units="s">Delay.</param>
        <param index="5" label="Autoreboot" minValue="0" maxValue="1" increment="1">Autoreboot (0=user reboot, 1=autoreboot).</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42425" name="MAV_CMD_DO_ACCEPT_MAG_CAL" hasLocation="false" isDestination="false">
        <description>Accept a magnetometer calibration.</description>
        <param index="1" label="Magnetometers Bitmask" minValue="0" maxValue="255" increment="1">Bitmask of magnetometers that calibration is accepted (0 means all).</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42426" name="MAV_CMD_DO_CANCEL_MAG_CAL" hasLocation="false" isDestination="false">
        <description>Cancel a running magnetometer calibration.</description>
        <param index="1" label="Magnetometers Bitmask" minValue="0" maxValue="255" increment="1">Bitmask of magnetometers to cancel a running calibration (0 means all).</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42429" name="MAV_CMD_ACCELCAL_VEHICLE_POS" hasLocation="false" isDestination="false">
        <description>Used when doing accelerometer calibration. When sent to the GCS tells it what position to put the vehicle in. When sent to the vehicle says what position the vehicle is in.</description>
        <param index="1" label="Position" enum="ACCELCAL_VEHICLE_POS">Position.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42428" name="MAV_CMD_DO_SEND_BANNER" hasLocation="false" isDestination="false">
        <description>Reply with the version banner.</description>
        <param index="1">Empty.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42427" name="MAV_CMD_SET_FACTORY_TEST_MODE" hasLocation="false" isDestination="false">
        <description>Command autopilot to get into factory test/diagnostic mode.</description>
        <param index="1" label="Test Mode" minValue="0" maxValue="1" increment="1">0: activate test mode, 1: exit test mode.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42501" name="MAV_CMD_GIMBAL_RESET" hasLocation="false" isDestination="false">
        <description>Causes the gimbal to reset and boot as if it was just powered on.</description>
        <param index="1">Empty.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42502" name="MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS" hasLocation="false" isDestination="false">
        <description>Reports progress and success or failure of gimbal axis calibration procedure.</description>
        <param index="1" label="Axis" enum="GIMBAL_AXIS">Gimbal axis we're reporting calibration progress for.</param>
        <param index="2" label="Progress" units="%" minValue="0" maxValue="100">Current calibration progress for this axis.</param>
        <param index="3" label="Status" enum="GIMBAL_AXIS_CALIBRATION_STATUS">Status of the calibration.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42503" name="MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION" hasLocation="false" isDestination="false">
        <description>Starts commutation calibration on the gimbal.</description>
        <param index="1">Empty.</param>
        <param index="2">Empty.</param>
        <param index="3">Empty.</param>
        <param index="4">Empty.</param>
        <param index="5">Empty.</param>
        <param index="6">Empty.</param>
        <param index="7">Empty.</param>
      </entry>
      <entry value="42505" name="MAV_CMD_GIMBAL_FULL_RESET" hasLocation="false" isDestination="false">
        <description>Erases gimbal application and parameters.</description>
        <param index="1">Magic number.</param>
        <param index="2">Magic number.</param>
        <param index="3">Magic number.</param>
        <param index="4">Magic number.</param>
        <param index="5">Magic number.</param>
        <param index="6">Magic number.</param>
        <param index="7">Magic number.</param>
      </entry>
      <!-- 42600 used by common.xml -->
      <entry value="42650" name="MAV_CMD_FLASH_BOOTLOADER" hasLocation="false" isDestination="false">
        <description>Update the bootloader</description>
        <param index="1">Empty</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5" label="Magic Number" increment="1">Magic number - set to 290876 to actually flash</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
      <entry value="42651" name="MAV_CMD_BATTERY_RESET" hasLocation="false" isDestination="false">
        <description>Reset battery capacity for batteries that accumulate consumed battery via integration.</description>
        <param index="1" label="battery mask">Bitmask of batteries to reset. Least significant bit is for the first battery.</param>
        <param index="2" label="percentage" minValue="0" maxValue="100" increment="1">Battery percentage remaining to set.</param>
      </entry>
      <entry value="42700" name="MAV_CMD_DEBUG_TRAP" hasLocation="false" isDestination="false">
        <description>Issue a trap signal to the autopilot process, presumably to enter the debugger.</descrip<?xml version="1.0"?>
<mavlink>
  <!-- ClearSky Air-Link contact info:          -->
  <!-- company URL: https://air-link.space/     -->
  <!-- email contact: drone@air-link.space      -->
  <!-- mavlink ID range: 52000 - 52099          -->
  <version>3</version>
  <enums>
    <enum name="AIRLINK_AUTH_RESPONSE_TYPE">
      <entry value="0" name="AIRLINK_ERROR_LOGIN_OR_PASS">
        <description>Login or password error</description>
      </entry>
      <entry value="1" name="AIRLINK_AUTH_OK">
        <description>Auth successful</description>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="52000" name="AIRLINK_AUTH">
      <description>Authorization package</description>
      <field type="char[50]" name="login">Login</field>
      <field type="char[50]" name="password">Password</field>
    </message>
    <message id="52001" name="AIRLINK_AUTH_RESPONSE">
      <description>Response to the authorization request</description>
      <field type="uint8_t" name="resp_type" enum="AIRLINK_AUTH_RESPONSE_TYPE">Response type</field>
    </message>
  </messages>
</mavlink>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <?xml version="1.0"?>
<mavlink>
  <!-- Cubepilot contact info:                                              -->
  <!-- company URL: http://www.cubepilot.com                                -->
  <!-- email contact: siddharth@cubepilot.com or michael@cubepilot.com      -->
  <!-- mavlink ID range: 50000 - 50099                                      -->
  <include>common.xml</include>
  <messages>
    <message id="50001" name="CUBEPILOT_RAW_RC">
      <description>Raw RC Data</description>
      <field type="uint8_t[32]" name="rc_raw"/>
    </message>
    <message id="50002" name="HERELINK_VIDEO_STREAM_INFORMATION">
      <description>Information about video stream</description>
      <field type="uint8_t" name="camera_id">Video Stream ID (1 for first, 2 for second, etc.)</field>
      <field type="uint8_t" name="status">Number of streams available.</field>
      <field type="float" name="framerate" units="Hz">Frame rate.</field>
      <field type="uint16_t" name="resolution_h" units="pix">Horizontal resolution.</field>
      <field type="uint16_t" name="resolution_v" units="pix">Vertical resolution.</field>
      <field type="uint32_t" name="bitrate" units="bits/s">Bit rate.</field>
      <field type="uint16_t" name="rotation" units="deg">Video image rotation clockwise.</field>
      <field type="char[230]" name="uri">Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).</field>
    </message>
    <message id="50003" name="HERELINK_TELEM">
      <description>Herelink Telemetry</description>
      <field type="uint8_t" name="rssi"/>
      <field type="int16_t" name="snr"/>
      <field type="uint32_t" name="rf_freq"/>
      <field type="uint32_t" name="link_bw"/>
      <field type="uint32_t" name="link_rate"/>
      <field type="int16_t" name="cpu_temp"/>
      <field type="int16_t" name="board_temp"/>
    </message>
    <message id="50004" name="CUBEPILOT_FIRMWARE_UPDATE_START">
      <description>Start firmware update with encapsulated data.</description>
      <field type="uint8_t" name="target_system">System ID.</field>
      <field type="uint8_t" name="target_component">Component ID.</field>
      <field type="uint32_t" name="size" units="bytes">FW Size.</field>
      <field type="uint32_t" name="crc">FW CRC.</field>
    </message>
    <message id="50005" name="CUBEPILOT_FIRMWARE_UPDATE_RESP">
      <description>offset response to encapsulated data.</description>
      <field type="uint8_t" name="target_system">System ID.</field>
      <field type="uint8_t" name="target_component">Component ID.</field>
      <field type="uint32_t" name="offset" units="bytes">FW Offset.</field>
    </message>
  </messages>
</mavlink>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?xml version="1.0"?>
<mavlink>
  <!-- XML file for prototyping definitions for standard.xml  -->
  <include>standard.xml</include>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="AIRSPEED_SENSOR_FLAGS" bitmask="true">
      <description>Airspeed sensor flags</description>
      <entry value="0" name="AIRSPEED_SENSOR_UNHEALTHY">
        <description>Airspeed sensor is unhealthy</description>
      </entry>
      <entry value="1" name="AIRSPEED_SENSOR_USING">
        <description>True if the data from this sensor is being actively used by the flight controller for guidance, navigation or control.</description>
      </entry>
    </enum>
    <enum name="RADIO_RC_CHANNELS_FLAGS" bitmask="true">
      <description>RADIO_RC_CHANNELS flags (bitmask).</description>
      <entry value="1" name="RADIO_RC_CHANNELS_FLAGS_FAILSAFE">
        <description>Failsafe is active. The content of the RC channels data in the RADIO_RC_CHANNELS message is implementation dependent.</description>
      </entry>
      <entry value="2" name="RADIO_RC_CHANNELS_FLAGS_OUTDATED">
        <description>Channel data may be out of date. This is set when the receiver is unable to validate incoming data from the transmitter and has therefore resent the last valid data it received.</description>
      </entry>
    </enum>
    <enum name="MAV_CMD">
      <entry value="610" name="MAV_CMD_DO_SET_SYS_CMP_ID" hasLocation="false" isDestination="false">
        <description>
          Set system and component id.
          This allows moving of a system and all its components to a new system id, or moving a particular component to a new system/component id.
          Recipients must reject command addressed to broadcast system ID.
        </description>
        <param index="1" label="System ID" minValue="1" maxValue="255" increment="1">New system ID for target component(s). 0: ignore and reject command (broadcast system ID not allowed).</param>
        <param index="2" label="Component ID" minValue="0" maxValue="255" increment="1">New component ID for target component(s). 0: ignore (component IDs don't change).</param>
        <param index="3" label="Reboot">Reboot components after ID change. Any non-zero value triggers the reboot.</param>
        <param index="4" reserved="true" default="NaN"/>
      </entry>
      <entry value="43004" name="MAV_CMD_EXTERNAL_WIND_ESTIMATE" hasLocation="false" isDestination="false">
        <description>Set an external estimate of wind direction and speed.
          This might be used to provide an initial wind estimate to the estimator (EKF) in the case where the vehicle is wind dead-reckoning, extending the time when operating without GPS before before position drift builds to an unsafe level. For this use case the command might reasonably be sent every few minutes when operating at altitude, and the value is cleared if the estimator resets itself.
        </description>
        <param index="1" label="Wind speed" units="m/s" minValue="0">Horizontal wind speed.</param>
        <param index="2" label="Wind speed accuracy" units="m/s">Estimated 1 sigma accuracy of wind speed. Set to NaN if unknown.</param>
        <param index="3" label="Direction" units="deg" minValue="0" maxValue="360">Azimuth (relative to true north) from where the wind is blowing.</param>
        <param index="4" label="Direction accuracy" units="deg">Estimated 1 sigma accuracy of wind direction. Set to NaN if unknown.</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="53" name="MISSION_CHECKSUM">
      <description>Checksum for the current mission, rally point or geofence plan, or for the "combined" plan (a GCS can use these checksums to determine if it has matching plans).
        This message must be broadcast with the appropriate checksum following any change to a mission, geofence or rally point definition
        (immediately after the MISSION_ACK that completes the upload sequence).
        It may also be requested using MAV_CMD_REQUEST_MESSAGE, where param 2 indicates the plan type for which the checksum is required.
        The checksum must be calculated on the autopilot, but may also be calculated by the GCS.
        The checksum uses the same CRC32 algorithm as MAVLink FTP (https://mavlink.io/en/services/ftp.html#crc32-implementation).
        The checksum for a mission, geofence or rally point definition is run over each item in the plan in seq order (excluding the home location if present in the plan), and covers the following fields (in order):
        frame, command, autocontinue, param1, param2, param3, param4, param5, param6, param7.
        The checksum for the whole plan (MAV_MISSION_TYPE_ALL) is calculated using the same approach, running over each sub-plan in the following order: mission, geofence then rally point.
      </description>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
      <field type="uint32_t" name="checksum">CRC32 checksum of current plan for specified type.</field>
    </message>
    <message id="295" name="AIRSPEED">
      <description>Airspeed information from a sensor.</description>
      <field type="uint8_t" name="id" instance="true">Sensor ID.</field>
      <field type="float" name="airspeed" units="m/s">Calibrated airspeed (CAS).</field>
      <field type="int16_t" name="temperature" units="cdegC">Temperature. INT16_MAX for value unknown/not supplied.</field>
      <field type="float" name="raw_press" units="hPa">Raw differential pressure. NaN for value unknown/not supplied.</field>
      <field type="uint8_t" name="flags" enum="AIRSPEED_SENSOR_FLAGS">Airspeed sensor flags.</field>
    </message>
    <message id="420" name="RADIO_RC_CHANNELS">
      <description>RC channel outputs from a MAVLink RC receiver for input to a flight controller or other components (allows an RC receiver to connect via MAVLink instead of some other protocol such as PPM-Sum or S.BUS).
        Note that this is not intended to be an over-the-air format, and does not replace RC_CHANNELS and similar messages reported by the flight controller.
        The target_system field should normally be set to the system id of the system to control, typically the flight controller.
        The target_component field can normally be set to 0, so that all components of the system can receive the message.
        The channels array field can publish up to 32 channels; the number of channel items used in the array is specified in the count field.
        The time_last_update_ms field contains the timestamp of the last received valid channels data in the receiver's time domain.
        The count field indicates the first index of the channel array that is not used for channel data (this and later indexes are zero-filled).
        The RADIO_RC_CHANNELS_FLAGS_OUTDATED flag is set by the receiver if the channels data is not up-to-date (for example, if new data from the transmitter could not be validated so the last valid data is resent).
        The RADIO_RC_CHANNELS_FLAGS_FAILSAFE failsafe flag is set by the receiver if the receiver's failsafe condition is met (implementation dependent, e.g., connection to the RC radio is lost).
        In this case time_last_update_ms still contains the timestamp of the last valid channels data, but the content of the channels data is not defined by the protocol (it is up to the implementation of the receiver).
        For instance, the channels data could contain failsafe values configured in the receiver; the default is to carry the last valid data.
        Note: The RC channels fields are extensions to ensure that they are located at the end of the serialized payload and subject to MAVLink's trailing-zero trimming.
      </description>
      <field type="uint8_t" name="target_system">System ID (ID of target system, normally flight controller).</field>
      <field type="uint8_t" name="target_component">Component ID (normally 0 for broadcast).</field>
      <field type="uint32_t" name="time_last_update_ms" units="ms">Time when the data in the channels field were last updated (time since boot in the receiver's time domain).</field>
      <field type="uint16_t" name="flags" enum="RADIO_RC_CHANNELS_FLAGS" display="bitmask">Radio RC channels status flags.</field>
      <field type="uint8_t" name="count">Total number of RC channels being received. This can be larger than 32, indicating that more channels are available but not given in this message.</field>
      <extensions/>
      <field type="int16_t[32]" name="channels" minValue="-4096" maxValue="4096">RC channels.
        Channel values are in centered 13 bit format. Range is -4096 to 4096, center is 0. Conversion to PWM is x * 5/32 + 1500.
        Channels with indexes equal or above count should be set to 0, to benefit from MAVLink's trailing-zero trimming.</field>
    </message>
  </messages>
</mavlink>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    