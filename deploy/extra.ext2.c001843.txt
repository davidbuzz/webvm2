 1;	///< Required element.
/// Size of array of xsd__token is 0..unbounded.
  $ int                                  __sizeCACertificateID          0;
/// Pointer to array xsd__token of size 0..unbounded.
    xsd__token                          *CACertificateID                0;	///< Multiple elements.
/// Element "EAPMethodConfiguration" of type "http://www.onvif.org/ver10/schema":EAPMethodConfiguration.
    tt__EAPMethodConfiguration*          EAPMethodConfiguration         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension.
    tt__Dot1XConfigurationExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension is a complexType.
///
/// @note class tt__Dot1XConfigurationExtension operations:
/// - tt__Dot1XConfigurationExtension* soap_new_tt__Dot1XConfigurationExtension(soap*) allocate and default initialize
/// - tt__Dot1XConfigurationExtension* soap_new_tt__Dot1XConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot1XConfigurationExtension* soap_new_req_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__Dot1XConfigurationExtension* soap_new_set_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__Dot1XConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot1XConfigurationExtension(soap*, tt__Dot1XConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfigurationExtension(soap*, tt__Dot1XConfigurationExtension*) serialize to a stream
/// - tt__Dot1XConfigurationExtension* tt__Dot1XConfigurationExtension::soap_dup(soap*) returns deep copy of tt__Dot1XConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot1XConfigurationExtension::soap_del() deep deletes tt__Dot1XConfigurationExtension data members, use only after tt__Dot1XConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot1XConfigurationExtension::soap_type() returns SOAP_TYPE_tt__Dot1XConfigurationExtension or derived type identifier
class tt__Dot1XConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EAPMethodConfiguration is a complexType.
///
/// @note class tt__EAPMethodConfiguration operations:
/// - tt__EAPMethodConfiguration* soap_new_tt__EAPMethodConfiguration(soap*) allocate and default initialize
/// - tt__EAPMethodConfiguration* soap_new_tt__EAPMethodConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__EAPMethodConfiguration* soap_new_req_tt__EAPMethodConfiguration(soap*, ...) allocate, set required members
/// - tt__EAPMethodConfiguration* soap_new_set_tt__EAPMethodConfiguration(soap*, ...) allocate, set all public members
/// - tt__EAPMethodConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__EAPMethodConfiguration(soap*, tt__EAPMethodConfiguration*) deserialize from a stream
/// - int soap_write_tt__EAPMethodConfiguration(soap*, tt__EAPMethodConfiguration*) serialize to a stream
/// - tt__EAPMethodConfiguration* tt__EAPMethodConfiguration::soap_dup(soap*) returns deep copy of tt__EAPMethodConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EAPMethodConfiguration::soap_del() deep deletes tt__EAPMethodConfiguration data members, use only after tt__EAPMethodConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EAPMethodConfiguration::soap_type() returns SOAP_TYPE_tt__EAPMethodConfiguration or derived type identifier
class tt__EAPMethodConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Confgiuration information for TLS Method.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLSConfiguration" of type "http://www.onvif.org/ver10/schema":TLSConfiguration.
    tt__TLSConfiguration*                TLSConfiguration               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Password for those EAP Methods that require a password. The password shall never be returned on a get method.
/// </BLOCKQUOTE></PRE>
///
/// Element "Password" of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":EapMethodExtension.
    tt__EapMethodExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EapMethodExtension is a complexType.
///
/// @note class tt__EapMethodExtension operations:
/// - tt__EapMethodExtension* soap_new_tt__EapMethodExtension(soap*) allocate and default initialize
/// - tt__EapMethodExtension* soap_new_tt__EapMethodExtension(soap*, int num) allocate and default initialize an array
/// - tt__EapMethodExtension* soap_new_req_tt__EapMethodExtension(soap*, ...) allocate, set required members
/// - tt__EapMethodExtension* soap_new_set_tt__EapMethodExtension(soap*, ...) allocate, set all public members
/// - tt__EapMethodExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__EapMethodExtension(soap*, tt__EapMethodExtension*) deserialize from a stream
/// - int soap_write_tt__EapMethodExtension(soap*, tt__EapMethodExtension*) serialize to a stream
/// - tt__EapMethodExtension* tt__EapMethodExtension::soap_dup(soap*) returns deep copy of tt__EapMethodExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EapMethodExtension::soap_del() deep deletes tt__EapMethodExtension data members, use only after tt__EapMethodExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EapMethodExtension::soap_type() returns SOAP_TYPE_tt__EapMethodExtension or derived type identifier
class tt__EapMethodExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":TLSConfiguration is a complexType.
///
/// @note class tt__TLSConfiguration operations:
/// - tt__TLSConfiguration* soap_new_tt__TLSConfiguration(soap*) allocate and default initialize
/// - tt__TLSConfiguration* soap_new_tt__TLSConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__TLSConfiguration* soap_new_req_tt__TLSConfiguration(soap*, ...) allocate, set required members
/// - tt__TLSConfiguration* soap_new_set_tt__TLSConfiguration(soap*, ...) allocate, set all public members
/// - tt__TLSConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__TLSConfiguration(soap*, tt__TLSConfiguration*) deserialize from a stream
/// - int soap_write_tt__TLSConfiguration(soap*, tt__TLSConfiguration*) serialize to a stream
/// - tt__TLSConfiguration* tt__TLSConfiguration::soap_dup(soap*) returns deep copy of tt__TLSConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TLSConfiguration::soap_del() deep deletes tt__TLSConfiguration data members, use only after tt__TLSConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TLSConfiguration::soap_type() returns SOAP_TYPE_tt__TLSConfiguration or derived type identifier
class tt__TLSConfiguration
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":GenericEapPwdConfigurationExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":RelayOutputSettings is a complexType.
///
/// @note class tt__RelayOutputSettings operations:
/// - tt__RelayOutputSettings* soap_new_tt__RelayOutputSettings(soap*) allocate and default initialize
/// - tt__RelayOutputSettings* soap_new_tt__RelayOutputSettings(soap*, int num) allocate and default initialize an array
/// - tt__RelayOutputSettings* soap_new_req_tt__RelayOutputSettings(soap*, ...) allocate, set required members
/// - tt__RelayOutputSettings* soap_new_set_tt__RelayOutputSettings(soap*, ...) allocate, set all public members
/// - tt__RelayOutputSettings::soap_default(soap*) default initialize members
/// - int soap_read_tt__RelayOutputSettings(soap*, tt__RelayOutputSettings*) deserialize from a stream
/// - int soap_write_tt__RelayOutputSettings(soap*, tt__RelayOutputSettings*) serialize to a stream
/// - tt__RelayOutputSettings* tt__RelayOutputSettings::soap_dup(soap*) returns deep copy of tt__RelayOutputSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RelayOutputSettings::soap_del() deep deletes tt__RelayOutputSettings data members, use only after tt__RelayOutputSettings::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RelayOutputSettings::soap_type() returns SOAP_TYPE_tt__RelayOutputSettings or derived type identifier
class tt__RelayOutputSettings
{ public:
/// <PRE><BLOCKQUOTE>
///   'Bistable' or 'Monostable'
///   <ul>
///   <li>Bistable After setting the state, the relay remains in this state.</li>
///   <li>Monostable After setting the state, the relay returns to its idle state after the specified time.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":RelayMode.
    enum tt__RelayMode                   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
/// </BLOCKQUOTE></PRE>
///
/// Element "DelayTime" of type xs:duration.
    xsd__duration                        DelayTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   'open' or 'closed'
///   <ul>
///   <li>'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.</li>
///   <li>'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Element "IdleState" of type "http://www.onvif.org/ver10/schema":RelayIdleState.
    enum tt__RelayIdleState              IdleState                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension is a complexType.
///
/// @note class tt__PTZNodeExtension operations:
/// - tt__PTZNodeExtension* soap_new_tt__PTZNodeExtension(soap*) allocate and default initialize
/// - tt__PTZNodeExtension* soap_new_tt__PTZNodeExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZNodeExtension* soap_new_req_tt__PTZNodeExtension(soap*, ...) allocate, set required members
/// - tt__PTZNodeExtension* soap_new_set_tt__PTZNodeExtension(soap*, ...) allocate, set all public members
/// - tt__PTZNodeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZNodeExtension(soap*, tt__PTZNodeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension(soap*, tt__PTZNodeExtension*) serialize to a stream
/// - tt__PTZNodeExtension* tt__PTZNodeExtension::soap_dup(soap*) returns deep copy of tt__PTZNodeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZNodeExtension::soap_del() deep deletes tt__PTZNodeExtension data members, use only after tt__PTZNodeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZNodeExtension::soap_type() returns SOAP_TYPE_tt__PTZNodeExtension or derived type identifier
class tt__PTZNodeExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Detail of supported Preset Tour feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedPresetTour" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSupported.
    tt__PTZPresetTourSupported*          SupportedPresetTour            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZNodeExtension2.
    tt__PTZNodeExtension2*               Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension2 is a complexType.
///
/// @note class tt__PTZNodeExtension2 operations:
/// - tt__PTZNodeExtension2* soap_new_tt__PTZNodeExtension2(soap*) allocate and default initialize
/// - tt__PTZNodeExtension2* soap_new_tt__PTZNodeExtension2(soap*, int num) allocate and default initialize an array
/// - tt__PTZNodeExtension2* soap_new_req_tt__PTZNodeExtension2(soap*, ...) allocate, set required members
/// - tt__PTZNodeExtension2* soap_new_set_tt__PTZNodeExtension2(soap*, ...) allocate, set all public members
/// - tt__PTZNodeExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZNodeExtension2(soap*, tt__PTZNodeExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension2(soap*, tt__PTZNodeExtension2*) serialize to a stream
/// - tt__PTZNodeExtension2* tt__PTZNodeExtension2::soap_dup(soap*) returns deep copy of tt__PTZNodeExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZNodeExtension2::soap_del() deep deletes tt__PTZNodeExtension2 data members, use only after tt__PTZNodeExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZNodeExtension2::soap_type() returns SOAP_TYPE_tt__PTZNodeExtension2 or derived type identifier
class tt__PTZNodeExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupported is a complexType.
///
/// @note class tt__PTZPresetTourSupported operations:
/// - tt__PTZPresetTourSupported* soap_new_tt__PTZPresetTourSupported(soap*) allocate and default initialize
/// - tt__PTZPresetTourSupported* soap_new_tt__PTZPresetTourSupported(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSupported* soap_new_req_tt__PTZPresetTourSupported(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSupported* soap_new_set_tt__PTZPresetTourSupported(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSupported::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSupported(soap*, tt__PTZPresetTourSupported*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupported(soap*, tt__PTZPresetTourSupported*) serialize to a stream
/// - tt__PTZPresetTourSupported* tt__PTZPresetTourSupported::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSupported, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSupported::soap_del() deep deletes tt__PTZPresetTourSupported data members, use only after tt__PTZPresetTourSupported::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSupported::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSupported or derived type identifier
class tt__PTZPresetTourSupported
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates number of preset tours that can be created. Required preset tour operations shall be available for this PTZ Node if one or more preset tour is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfPresetTours" of type xs:int.
    int                                  MaximumNumberOfPresetTours     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates which preset tour operations are available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__PTZPresetTourOperation is 0..unbounded.
  $ int                                  __sizePTZPresetTourOperation   0;
/// Pointer to array enum tt__PTZPresetTourOperation of size 0..unbounded.
    enum tt__PTZPresetTourOperation     *PTZPresetTourOperation         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension.
    tt__PTZPresetTourSupportedExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension is a complexType.
///
/// @note class tt__PTZPresetTourSupportedExtension operations:
/// - tt__PTZPresetTourSupportedExtension* soap_new_tt__PTZPresetTourSupportedExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourSupportedExtension* soap_new_tt__PTZPresetTourSupportedExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSupportedExtension* soap_new_req_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSupportedExtension* soap_new_set_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSupportedExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSupportedExtension(soap*, tt__PTZPresetTourSupportedExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupportedExtension(soap*, tt__PTZPresetTourSupportedExtension*) serialize to a stream
/// - tt__PTZPresetTourSupportedExtension* tt__PTZPresetTourSupportedExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSupportedExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSupportedExtension::soap_del() deep deletes tt__PTZPresetTourSupportedExtension data members, use only after tt__PTZPresetTourSupportedExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSupportedExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSupportedExtension or derived type identifier
class tt__PTZPresetTourSupportedExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension is a complexType.
///
/// @note class tt__PTZConfigurationExtension operations:
/// - tt__PTZConfigurationExtension* soap_new_tt__PTZConfigurationExtension(soap*) allocate and default initialize
/// - tt__PTZConfigurationExtension* soap_new_tt__PTZConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationExtension* soap_new_req_tt__PTZConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationExtension* soap_new_set_tt__PTZConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationExtension(soap*, tt__PTZConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension(soap*, tt__PTZConfigurationExtension*) serialize to a stream
/// - tt__PTZConfigurationExtension* tt__PTZConfigurationExtension::soap_dup(soap*) returns deep copy of tt__PTZConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationExtension::soap_del() deep deletes tt__PTZConfigurationExtension data members, use only after tt__PTZConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationExtension::soap_type() returns SOAP_TYPE_tt__PTZConfigurationExtension or derived type identifier
class tt__PTZConfigurationExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure PT Control Direction related features.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTControlDirection" of type "http://www.onvif.org/ver10/schema":PTControlDirection.
    tt__PTControlDirection*              PTControlDirection             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2.
    tt__PTZConfigurationExtension2*      Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2 is a complexType.
///
/// @note class tt__PTZConfigurationExtension2 operations:
/// - tt__PTZConfigurationExtension2* soap_new_tt__PTZConfigurationExtension2(soap*) allocate and default initialize
/// - tt__PTZConfigurationExtension2* soap_new_tt__PTZConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationExtension2* soap_new_req_tt__PTZConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationExtension2* soap_new_set_tt__PTZConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationExtension2(soap*, tt__PTZConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension2(soap*, tt__PTZConfigurationExtension2*) serialize to a stream
/// - tt__PTZConfigurationExtension2* tt__PTZConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__PTZConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationExtension2::soap_del() deep deletes tt__PTZConfigurationExtension2 data members, use only after tt__PTZConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__PTZConfigurationExtension2 or derived type identifier
class tt__PTZConfigurationExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirection is a complexType.
///
/// @note class tt__PTControlDirection operations:
/// - tt__PTControlDirection* soap_new_tt__PTControlDirection(soap*) allocate and default initialize
/// - tt__PTControlDirection* soap_new_tt__PTControlDirection(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirection* soap_new_req_tt__PTControlDirection(soap*, ...) allocate, set required members
/// - tt__PTControlDirection* soap_new_set_tt__PTControlDirection(soap*, ...) allocate, set all public members
/// - tt__PTControlDirection::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirection(soap*, tt__PTControlDirection*) deserialize from a stream
/// - int soap_write_tt__PTControlDirection(soap*, tt__PTControlDirection*) serialize to a stream
/// - tt__PTControlDirection* tt__PTControlDirection::soap_dup(soap*) returns deep copy of tt__PTControlDirection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirection::soap_del() deep deletes tt__PTControlDirection data members, use only after tt__PTControlDirection::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirection::soap_type() returns SOAP_TYPE_tt__PTControlDirection or derived type identifier
class tt__PTControlDirection
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for E-Flip.
/// </BLOCKQUOTE></PRE>
///
/// Element "EFlip" of type "http://www.onvif.org/ver10/schema":EFlip.
    tt__EFlip*                           EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for reversing of PT Control Direction.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reverse" of type "http://www.onvif.org/ver10/schema":Reverse.
    tt__Reverse*                         Reverse                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTControlDirectionExtension.
    tt__PTControlDirectionExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionExtension is a complexType.
///
/// @note class tt__PTControlDirectionExtension operations:
/// - tt__PTControlDirectionExtension* soap_new_tt__PTControlDirectionExtension(soap*) allocate and default initialize
/// - tt__PTControlDirectionExtension* soap_new_tt__PTControlDirectionExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionExtension* soap_new_req_tt__PTControlDirectionExtension(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionExtension* soap_new_set_tt__PTControlDirectionExtension(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionExtension(soap*, tt__PTControlDirectionExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionExtension(soap*, tt__PTControlDirectionExtension*) serialize to a stream
/// - tt__PTControlDirectionExtension* tt__PTControlDirectionExtension::soap_dup(soap*) returns deep copy of tt__PTControlDirectionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionExtension::soap_del() deep deletes tt__PTControlDirectionExtension data members, use only after tt__PTControlDirectionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionExtension::soap_type() returns SOAP_TYPE_tt__PTControlDirectionExtension or derived type identifier
class tt__PTControlDirectionExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EFlip is a complexType.
///
/// @note class tt__EFlip operations:
/// - tt__EFlip* soap_new_tt__EFlip(soap*) allocate and default initialize
/// - tt__EFlip* soap_new_tt__EFlip(soap*, int num) allocate and default initialize an array
/// - tt__EFlip* soap_new_req_tt__EFlip(soap*, ...) allocate, set required members
/// - tt__EFlip* soap_new_set_tt__EFlip(soap*, ...) allocate, set all public members
/// - tt__EFlip::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlip(soap*, tt__EFlip*) deserialize from a stream
/// - int soap_write_tt__EFlip(soap*, tt__EFlip*) serialize to a stream
/// - tt__EFlip* tt__EFlip::soap_dup(soap*) returns deep copy of tt__EFlip, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlip::soap_del() deep deletes tt__EFlip data members, use only after tt__EFlip::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlip::soap_type() returns SOAP_TYPE_tt__EFlip or derived type identifier
class tt__EFlip
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable E-Flip feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":EFlipMode.
    enum tt__EFlipMode                   Mode                           1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Reverse is a complexType.
///
/// @note class tt__Reverse operations:
/// - tt__Reverse* soap_new_tt__Reverse(soap*) allocate and default initialize
/// - tt__Reverse* soap_new_tt__Reverse(soap*, int num) allocate and default initialize an array
/// - tt__Reverse* soap_new_req_tt__Reverse(soap*, ...) allocate, set required members
/// - tt__Reverse* soap_new_set_tt__Reverse(soap*, ...) allocate, set all public members
/// - tt__Reverse::soap_default(soap*) default initialize members
/// - int soap_read_tt__Reverse(soap*, tt__Reverse*) deserialize from a stream
/// - int soap_write_tt__Reverse(soap*, tt__Reverse*) serialize to a stream
/// - tt__Reverse* tt__Reverse::soap_dup(soap*) returns deep copy of tt__Reverse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Reverse::soap_del() deep deletes tt__Reverse data members, use only after tt__Reverse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Reverse::soap_type() returns SOAP_TYPE_tt__Reverse or derived type identifier
class tt__Reverse
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Reverse feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":ReverseMode.
    enum tt__ReverseMode                 Mode                           1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions is a complexType.
///
/// @note class tt__PTZConfigurationOptions operations:
/// - tt__PTZConfigurationOptions* soap_new_tt__PTZConfigurationOptions(soap*) allocate and default initialize
/// - tt__PTZConfigurationOptions* soap_new_tt__PTZConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationOptions* soap_new_req_tt__PTZConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationOptions* soap_new_set_tt__PTZConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationOptions(soap*, tt__PTZConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions(soap*, tt__PTZConfigurationOptions*) serialize to a stream
/// - tt__PTZConfigurationOptions* tt__PTZConfigurationOptions::soap_dup(soap*) returns deep copy of tt__PTZConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationOptions::soap_del() deep deletes tt__PTZConfigurationOptions data members, use only after tt__PTZConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationOptions::soap_type() returns SOAP_TYPE_tt__PTZConfigurationOptions or derived type identifier
class tt__PTZConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of supported coordinate systems including their range limitations.
/// </BLOCKQUOTE></PRE>
///
/// Element "Spaces" of type "http://www.onvif.org/ver10/schema":PTZSpaces.
    tt__PTZSpaces*                       Spaces                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A timeout Range within which Timeouts are accepted by the PTZ Node.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZTimeout" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   PTZTimeout                     1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Supported options for PT Direction Control.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTControlDirection" of type "http://www.onvif.org/ver10/schema":PTControlDirectionOptions.
    tt__PTControlDirectionOptions*       PTControlDirection             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2.
    tt__PTZConfigurationOptions2*        Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The list of acceleration ramps supported by the device. The
///   smallest acceleration value corresponds to the minimal index, the
///   highest acceleration corresponds to the maximum index.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "PTZRamps" of type "http://www.onvif.org/ver10/schema":IntAttrList.
  @ tt__IntAttrList                      PTZRamps                       0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2 is a complexType.
///
/// @note class tt__PTZConfigurationOptions2 operations:
/// - tt__PTZConfigurationOptions2* soap_new_tt__PTZConfigurationOptions2(soap*) allocate and default initialize
/// - tt__PTZConfigurationOptions2* soap_new_tt__PTZConfigurationOptions2(soap*, int num) allocate and default initialize an array
/// - tt__PTZConfigurationOptions2* soap_new_req_tt__PTZConfigurationOptions2(soap*, ...) allocate, set required members
/// - tt__PTZConfigurationOptions2* soap_new_set_tt__PTZConfigurationOptions2(soap*, ...) allocate, set all public members
/// - tt__PTZConfigurationOptions2::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZConfigurationOptions2(soap*, tt__PTZConfigurationOptions2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions2(soap*, tt__PTZConfigurationOptions2*) serialize to a stream
/// - tt__PTZConfigurationOptions2* tt__PTZConfigurationOptions2::soap_dup(soap*) returns deep copy of tt__PTZConfigurationOptions2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZConfigurationOptions2::soap_del() deep deletes tt__PTZConfigurationOptions2 data members, use only after tt__PTZConfigurationOptions2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZConfigurationOptions2::soap_type() returns SOAP_TYPE_tt__PTZConfigurationOptions2 or derived type identifier
class tt__PTZConfigurationOptions2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptions is a complexType.
///
/// @note class tt__PTControlDirectionOptions operations:
/// - tt__PTControlDirectionOptions* soap_new_tt__PTControlDirectionOptions(soap*) allocate and default initialize
/// - tt__PTControlDirectionOptions* soap_new_tt__PTControlDirectionOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionOptions* soap_new_req_tt__PTControlDirectionOptions(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionOptions* soap_new_set_tt__PTControlDirectionOptions(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionOptions(soap*, tt__PTControlDirectionOptions*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptions(soap*, tt__PTControlDirectionOptions*) serialize to a stream
/// - tt__PTControlDirectionOptions* tt__PTControlDirectionOptions::soap_dup(soap*) returns deep copy of tt__PTControlDirectionOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionOptions::soap_del() deep deletes tt__PTControlDirectionOptions data members, use only after tt__PTControlDirectionOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionOptions::soap_type() returns SOAP_TYPE_tt__PTControlDirectionOptions or derived type identifier
class tt__PTControlDirectionOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for EFlip feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "EFlip" of type "http://www.onvif.org/ver10/schema":EFlipOptions.
    tt__EFlipOptions*                    EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Reverse feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reverse" of type "http://www.onvif.org/ver10/schema":ReverseOptions.
    tt__ReverseOptions*                  Reverse                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension.
    tt__PTControlDirectionOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension is a complexType.
///
/// @note class tt__PTControlDirectionOptionsExtension operations:
/// - tt__PTControlDirectionOptionsExtension* soap_new_tt__PTControlDirectionOptionsExtension(soap*) allocate and default initialize
/// - tt__PTControlDirectionOptionsExtension* soap_new_tt__PTControlDirectionOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTControlDirectionOptionsExtension* soap_new_req_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTControlDirectionOptionsExtension* soap_new_set_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTControlDirectionOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTControlDirectionOptionsExtension(soap*, tt__PTControlDirectionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptionsExtension(soap*, tt__PTControlDirectionOptionsExtension*) serialize to a stream
/// - tt__PTControlDirectionOptionsExtension* tt__PTControlDirectionOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTControlDirectionOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTControlDirectionOptionsExtension::soap_del() deep deletes tt__PTControlDirectionOptionsExtension data members, use only after tt__PTControlDirectionOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTControlDirectionOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTControlDirectionOptionsExtension or derived type identifier
class tt__PTControlDirectionOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptions is a complexType.
///
/// @note class tt__EFlipOptions operations:
/// - tt__EFlipOptions* soap_new_tt__EFlipOptions(soap*) allocate and default initialize
/// - tt__EFlipOptions* soap_new_tt__EFlipOptions(soap*, int num) allocate and default initialize an array
/// - tt__EFlipOptions* soap_new_req_tt__EFlipOptions(soap*, ...) allocate, set required members
/// - tt__EFlipOptions* soap_new_set_tt__EFlipOptions(soap*, ...) allocate, set all public members
/// - tt__EFlipOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlipOptions(soap*, tt__EFlipOptions*) deserialize from a stream
/// - int soap_write_tt__EFlipOptions(soap*, tt__EFlipOptions*) serialize to a stream
/// - tt__EFlipOptions* tt__EFlipOptions::soap_dup(soap*) returns deep copy of tt__EFlipOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlipOptions::soap_del() deep deletes tt__EFlipOptions data members, use only after tt__EFlipOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlipOptions::soap_type() returns SOAP_TYPE_tt__EFlipOptions or derived type identifier
class tt__EFlipOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of EFlip mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__EFlipMode is 0..unbounded.
  $ int                                  __sizeMode                     0;
/// Pointer to array enum tt__EFlipMode of size 0..unbounded.
    enum tt__EFlipMode                  *Mode                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":EFlipOptionsExtension.
    tt__EFlipOptionsExtension*           Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptionsExtension is a complexType.
///
/// @note class tt__EFlipOptionsExtension operations:
/// - tt__EFlipOptionsExtension* soap_new_tt__EFlipOptionsExtension(soap*) allocate and default initialize
/// - tt__EFlipOptionsExtension* soap_new_tt__EFlipOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__EFlipOptionsExtension* soap_new_req_tt__EFlipOptionsExtension(soap*, ...) allocate, set required members
/// - tt__EFlipOptionsExtension* soap_new_set_tt__EFlipOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__EFlipOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__EFlipOptionsExtension(soap*, tt__EFlipOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__EFlipOptionsExtension(soap*, tt__EFlipOptionsExtension*) serialize to a stream
/// - tt__EFlipOptionsExtension* tt__EFlipOptionsExtension::soap_dup(soap*) returns deep copy of tt__EFlipOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EFlipOptionsExtension::soap_del() deep deletes tt__EFlipOptionsExtension data members, use only after tt__EFlipOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EFlipOptionsExtension::soap_type() returns SOAP_TYPE_tt__EFlipOptionsExtension or derived type identifier
class tt__EFlipOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptions is a complexType.
///
/// @note class tt__ReverseOptions operations:
/// - tt__ReverseOptions* soap_new_tt__ReverseOptions(soap*) allocate and default initialize
/// - tt__ReverseOptions* soap_new_tt__ReverseOptions(soap*, int num) allocate and default initialize an array
/// - tt__ReverseOptions* soap_new_req_tt__ReverseOptions(soap*, ...) allocate, set required members
/// - tt__ReverseOptions* soap_new_set_tt__ReverseOptions(soap*, ...) allocate, set all public members
/// - tt__ReverseOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReverseOptions(soap*, tt__ReverseOptions*) deserialize from a stream
/// - int soap_write_tt__ReverseOptions(soap*, tt__ReverseOptions*) serialize to a stream
/// - tt__ReverseOptions* tt__ReverseOptions::soap_dup(soap*) returns deep copy of tt__ReverseOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReverseOptions::soap_del() deep deletes tt__ReverseOptions data members, use only after tt__ReverseOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReverseOptions::soap_type() returns SOAP_TYPE_tt__ReverseOptions or derived type identifier
class tt__ReverseOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of Reverse mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__ReverseMode is 0..unbounded.
  $ int                                  __sizeMode                     0;
/// Pointer to array enum tt__ReverseMode of size 0..unbounded.
    enum tt__ReverseMode                *Mode                           0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":ReverseOptionsExtension.
    tt__ReverseOptionsExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptionsExtension is a complexType.
///
/// @note class tt__ReverseOptionsExtension operations:
/// - tt__ReverseOptionsExtension* soap_new_tt__ReverseOptionsExtension(soap*) allocate and default initialize
/// - tt__ReverseOptionsExtension* soap_new_tt__ReverseOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__ReverseOptionsExtension* soap_new_req_tt__ReverseOptionsExtension(soap*, ...) allocate, set required members
/// - tt__ReverseOptionsExtension* soap_new_set_tt__ReverseOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__ReverseOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReverseOptionsExtension(soap*, tt__ReverseOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__ReverseOptionsExtension(soap*, tt__ReverseOptionsExtension*) serialize to a stream
/// - tt__ReverseOptionsExtension* tt__ReverseOptionsExtension::soap_dup(soap*) returns deep copy of tt__ReverseOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReverseOptionsExtension::soap_del() deep deletes tt__ReverseOptionsExtension data members, use only after tt__ReverseOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReverseOptionsExtension::soap_type() returns SOAP_TYPE_tt__ReverseOptionsExtension or derived type identifier
class tt__ReverseOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PanTiltLimits is a complexType.
///
/// @note class tt__PanTiltLimits operations:
/// - tt__PanTiltLimits* soap_new_tt__PanTiltLimits(soap*) allocate and default initialize
/// - tt__PanTiltLimits* soap_new_tt__PanTiltLimits(soap*, int num) allocate and default initialize an array
/// - tt__PanTiltLimits* soap_new_req_tt__PanTiltLimits(soap*, ...) allocate, set required members
/// - tt__PanTiltLimits* soap_new_set_tt__PanTiltLimits(soap*, ...) allocate, set all public members
/// - tt__PanTiltLimits::soap_default(soap*) default initialize members
/// - int soap_read_tt__PanTiltLimits(soap*, tt__PanTiltLimits*) deserialize from a stream
/// - int soap_write_tt__PanTiltLimits(soap*, tt__PanTiltLimits*) serialize to a stream
/// - tt__PanTiltLimits* tt__PanTiltLimits::soap_dup(soap*) returns deep copy of tt__PanTiltLimits, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PanTiltLimits::soap_del() deep deletes tt__PanTiltLimits data members, use only after tt__PanTiltLimits::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PanTiltLimits::soap_type() returns SOAP_TYPE_tt__PanTiltLimits or derived type identifier
class tt__PanTiltLimits
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of pan tilt limits.
/// </BLOCKQUOTE></PRE>
///
/// Element "Range" of type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              Range                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ZoomLimits is a complexType.
///
/// @note class tt__ZoomLimits operations:
/// - tt__ZoomLimits* soap_new_tt__ZoomLimits(soap*) allocate and default initialize
/// - tt__ZoomLimits* soap_new_tt__ZoomLimits(soap*, int num) allocate and default initialize an array
/// - tt__ZoomLimits* soap_new_req_tt__ZoomLimits(soap*, ...) allocate, set required members
/// - tt__ZoomLimits* soap_new_set_tt__ZoomLimits(soap*, ...) allocate, set all public members
/// - tt__ZoomLimits::soap_default(soap*) default initialize members
/// - int soap_read_tt__ZoomLimits(soap*, tt__ZoomLimits*) deserialize from a stream
/// - int soap_write_tt__ZoomLimits(soap*, tt__ZoomLimits*) serialize to a stream
/// - tt__ZoomLimits* tt__ZoomLimits::soap_dup(soap*) returns deep copy of tt__ZoomLimits, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ZoomLimits::soap_del() deep deletes tt__ZoomLimits data members, use only after tt__ZoomLimits::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ZoomLimits::soap_type() returns SOAP_TYPE_tt__ZoomLimits or derived type identifier
class tt__ZoomLimits
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of zoom limit
/// </BLOCKQUOTE></PRE>
///
/// Element "Range" of type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              Range                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpaces is a complexType.
///
/// @note class tt__PTZSpaces operations:
/// - tt__PTZSpaces* soap_new_tt__PTZSpaces(soap*) allocate and default initialize
/// - tt__PTZSpaces* soap_new_tt__PTZSpaces(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpaces* soap_new_req_tt__PTZSpaces(soap*, ...) allocate, set required members
/// - tt__PTZSpaces* soap_new_set_tt__PTZSpaces(soap*, ...) allocate, set all public members
/// - tt__PTZSpaces::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpaces(soap*, tt__PTZSpaces*) deserialize from a stream
/// - int soap_write_tt__PTZSpaces(soap*, tt__PTZSpaces*) serialize to a stream
/// - tt__PTZSpaces* tt__PTZSpaces::soap_dup(soap*) returns deep copy of tt__PTZSpaces, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpaces::soap_del() deep deletes tt__PTZSpaces data members, use only after tt__PTZSpaces::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpaces::soap_type() returns SOAP_TYPE_tt__PTZSpaces or derived type identifier
class tt__PTZSpaces
{ public:
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space2DDescription* is 0..unbounded.
  $ int                                  __sizeAbsolutePanTiltPositionSpace 0;
/// Pointer to array tt__Space2DDescription* of size 0..unbounded.
    tt__Space2DDescription*             *AbsolutePanTiltPositionSpace   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space1DDescription* is 0..unbounded.
  $ int                                  __sizeAbsoluteZoomPositionSpace 0;
/// Pointer to array tt__Space1DDescription* of size 0..unbounded.
    tt__Space1DDescription*             *AbsoluteZoomPositionSpace      0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space2DDescription* is 0..unbounded.
  $ int                                  __sizeRelativePanTiltTranslationSpace 0;
/// Pointer to array tt__Space2DDescription* of size 0..unbounded.
    tt__Space2DDescription*             *RelativePanTiltTranslationSpace 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space1DDescription* is 0..unbounded.
  $ int                                  __sizeRelativeZoomTranslationSpace 0;
/// Pointer to array tt__Space1DDescription* of size 0..unbounded.
    tt__Space1DDescription*             *RelativeZoomTranslationSpace   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. Instead, the range should be defined as a range of the PTZ units speed normalized to the range -1 to 1, where a positive velocity would map to clockwise rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space2DDescription* is 0..unbounded.
  $ int                                  __sizeContinuousPanTiltVelocitySpace 0;
/// Pointer to array tt__Space2DDescription* of size 0..unbounded.
    tt__Space2DDescription*             *ContinuousPanTiltVelocitySpace 0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space1DDescription* is 0..unbounded.
  $ int                                  __sizeContinuousZoomVelocitySpace 0;
/// Pointer to array tt__Space1DDescription* of size 0..unbounded.
    tt__Space1DDescription*             *ContinuousZoomVelocitySpace    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt movement is represented by a single non-negative scalar value.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space1DDescription* is 0..unbounded.
  $ int                                  __sizePanTiltSpeedSpace        0;
/// Pointer to array tt__Space1DDescription* of size 0..unbounded.
    tt__Space1DDescription*             *PanTiltSpeedSpace              0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Space1DDescription* is 0..unbounded.
  $ int                                  __sizeZoomSpeedSpace           0;
/// Pointer to array tt__Space1DDescription* of size 0..unbounded.
    tt__Space1DDescription*             *ZoomSpeedSpace                 0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZSpacesExtension.
    tt__PTZSpacesExtension*              Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpacesExtension is a complexType.
///
/// @note class tt__PTZSpacesExtension operations:
/// - tt__PTZSpacesExtension* soap_new_tt__PTZSpacesExtension(soap*) allocate and default initialize
/// - tt__PTZSpacesExtension* soap_new_tt__PTZSpacesExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpacesExtension* soap_new_req_tt__PTZSpacesExtension(soap*, ...) allocate, set required members
/// - tt__PTZSpacesExtension* soap_new_set_tt__PTZSpacesExtension(soap*, ...) allocate, set all public members
/// - tt__PTZSpacesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpacesExtension(soap*, tt__PTZSpacesExtension*) deserialize from a stream
/// - int soap_write_tt__PTZSpacesExtension(soap*, tt__PTZSpacesExtension*) serialize to a stream
/// - tt__PTZSpacesExtension* tt__PTZSpacesExtension::soap_dup(soap*) returns deep copy of tt__PTZSpacesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpacesExtension::soap_del() deep deletes tt__PTZSpacesExtension data members, use only after tt__PTZSpacesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpacesExtension::soap_type() returns SOAP_TYPE_tt__PTZSpacesExtension or derived type identifier
class tt__PTZSpacesExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Space2DDescription is a complexType.
///
/// @note class tt__Space2DDescription operations:
/// - tt__Space2DDescription* soap_new_tt__Space2DDescription(soap*) allocate and default initialize
/// - tt__Space2DDescription* soap_new_tt__Space2DDescription(soap*, int num) allocate and default initialize an array
/// - tt__Space2DDescription* soap_new_req_tt__Space2DDescription(soap*, ...) allocate, set required members
/// - tt__Space2DDescription* soap_new_set_tt__Space2DDescription(soap*, ...) allocate, set all public members
/// - tt__Space2DDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__Space2DDescription(soap*, tt__Space2DDescription*) deserialize from a stream
/// - int soap_write_tt__Space2DDescription(soap*, tt__Space2DDescription*) serialize to a stream
/// - tt__Space2DDescription* tt__Space2DDescription::soap_dup(soap*) returns deep copy of tt__Space2DDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Space2DDescription::soap_del() deep deletes tt__Space2DDescription data members, use only after tt__Space2DDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Space2DDescription::soap_type() returns SOAP_TYPE_tt__Space2DDescription or derived type identifier
class tt__Space2DDescription
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
///
/// Element "URI" of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "XRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of y-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "YRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YRange                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Space1DDescription is a complexType.
///
/// @note class tt__Space1DDescription operations:
/// - tt__Space1DDescription* soap_new_tt__Space1DDescription(soap*) allocate and default initialize
/// - tt__Space1DDescription* soap_new_tt__Space1DDescription(soap*, int num) allocate and default initialize an array
/// - tt__Space1DDescription* soap_new_req_tt__Space1DDescription(soap*, ...) allocate, set required members
/// - tt__Space1DDescription* soap_new_set_tt__Space1DDescription(soap*, ...) allocate, set all public members
/// - tt__Space1DDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__Space1DDescription(soap*, tt__Space1DDescription*) deserialize from a stream
/// - int soap_write_tt__Space1DDescription(soap*, tt__Space1DDescription*) serialize to a stream
/// - tt__Space1DDescription* tt__Space1DDescription::soap_dup(soap*) returns deep copy of tt__Space1DDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Space1DDescription::soap_del() deep deletes tt__Space1DDescription data members, use only after tt__Space1DDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Space1DDescription::soap_type() returns SOAP_TYPE_tt__Space1DDescription or derived type identifier
class tt__Space1DDescription
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
///
/// Element "URI" of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
///
/// Element "XRange" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpeed is a complexType.
///
/// @note class tt__PTZSpeed operations:
/// - tt__PTZSpeed* soap_new_tt__PTZSpeed(soap*) allocate and default initialize
/// - tt__PTZSpeed* soap_new_tt__PTZSpeed(soap*, int num) allocate and default initialize an array
/// - tt__PTZSpeed* soap_new_req_tt__PTZSpeed(soap*, ...) allocate, set required members
/// - tt__PTZSpeed* soap_new_set_tt__PTZSpeed(soap*, ...) allocate, set all public members
/// - tt__PTZSpeed::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZSpeed(soap*, tt__PTZSpeed*) deserialize from a stream
/// - int soap_write_tt__PTZSpeed(soap*, tt__PTZSpeed*) serialize to a stream
/// - tt__PTZSpeed* tt__PTZSpeed::soap_dup(soap*) returns deep copy of tt__PTZSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZSpeed::soap_del() deep deletes tt__PTZSpeed data members, use only after tt__PTZSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZSpeed::soap_type() returns SOAP_TYPE_tt__PTZSpeed or derived type identifier
class tt__PTZSpeed
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPreset is a complexType.
///
/// @note class tt__PTZPreset operations:
/// - tt__PTZPreset* soap_new_tt__PTZPreset(soap*) allocate and default initialize
/// - tt__PTZPreset* soap_new_tt__PTZPreset(soap*, int num) allocate and default initialize an array
/// - tt__PTZPreset* soap_new_req_tt__PTZPreset(soap*, ...) allocate, set required members
/// - tt__PTZPreset* soap_new_set_tt__PTZPreset(soap*, ...) allocate, set all public members
/// - tt__PTZPreset::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPreset(soap*, tt__PTZPreset*) deserialize from a stream
/// - int soap_write_tt__PTZPreset(soap*, tt__PTZPreset*) serialize to a stream
/// - tt__PTZPreset* tt__PTZPreset::soap_dup(soap*) returns deep copy of tt__PTZPreset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPreset::soap_del() deep deletes tt__PTZPreset data members, use only after tt__PTZPreset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPreset::soap_type() returns SOAP_TYPE_tt__PTZPreset or derived type identifier
class tt__PTZPreset
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of preset position name.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of preset position.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PresetTour is a complexType.
///
/// @note class tt__PresetTour operations:
/// - tt__PresetTour* soap_new_tt__PresetTour(soap*) allocate and default initialize
/// - tt__PresetTour* soap_new_tt__PresetTour(soap*, int num) allocate and default initialize an array
/// - tt__PresetTour* soap_new_req_tt__PresetTour(soap*, ...) allocate, set required members
/// - tt__PresetTour* soap_new_set_tt__PresetTour(soap*, ...) allocate, set all public members
/// - tt__PresetTour::soap_default(soap*) default initialize members
/// - int soap_read_tt__PresetTour(soap*, tt__PresetTour*) deserialize from a stream
/// - int soap_write_tt__PresetTour(soap*, tt__PresetTour*) serialize to a stream
/// - tt__PresetTour* tt__PresetTour::soap_dup(soap*) returns deep copy of tt__PresetTour, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PresetTour::soap_del() deep deletes tt__PresetTour data members, use only after tt__PresetTour::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PresetTour::soap_type() returns SOAP_TYPE_tt__PresetTour or derived type identifier
class tt__PresetTour
{ public:
/// <PRE><BLOCKQUOTE>
///   Readable name of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Read only parameters to indicate the status of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStatus.
    tt__PTZPresetTourStatus*             Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Auto Start flag of the preset tour. True allows the preset tour to be activated always.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameters to specify the detail behavior of the preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Element "StartingCondition" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition.
    tt__PTZPresetTourStartingCondition*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of detail of touring spots including preset positions.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PTZPresetTourSpot* is 0..unbounded.
  $ int                                  __sizeTourSpot                 0;
/// Pointer to array tt__PTZPresetTourSpot* of size 0..unbounded.
    tt__PTZPresetTourSpot*              *TourSpot                       0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourExtension.
    tt__PTZPresetTourExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of this preset tour.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourExtension is a complexType.
///
/// @note class tt__PTZPresetTourExtension operations:
/// - tt__PTZPresetTourExtension* soap_new_tt__PTZPresetTourExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourExtension* soap_new_tt__PTZPresetTourExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourExtension* soap_new_req_tt__PTZPresetTourExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourExtension* soap_new_set_tt__PTZPresetTourExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourExtension(soap*, tt__PTZPresetTourExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourExtension(soap*, tt__PTZPresetTourExtension*) serialize to a stream
/// - tt__PTZPresetTourExtension* tt__PTZPresetTourExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourExtension::soap_del() deep deletes tt__PTZPresetTourExtension data members, use only after tt__PTZPresetTourExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourExtension or derived type identifier
class tt__PTZPresetTourExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpot is a complexType.
///
/// @note class tt__PTZPresetTourSpot operations:
/// - tt__PTZPresetTourSpot* soap_new_tt__PTZPresetTourSpot(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpot* soap_new_tt__PTZPresetTourSpot(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpot* soap_new_req_tt__PTZPresetTourSpot(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpot* soap_new_set_tt__PTZPresetTourSpot(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpot::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpot(soap*, tt__PTZPresetTourSpot*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpot(soap*, tt__PTZPresetTourSpot*) serialize to a stream
/// - tt__PTZPresetTourSpot* tt__PTZPresetTourSpot::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpot::soap_del() deep deletes tt__PTZPresetTourSpot data members, use only after tt__PTZPresetTourSpot::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpot::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpot or derived type identifier
class tt__PTZPresetTourSpot
{ public:
/// <PRE><BLOCKQUOTE>
///   Detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetDetail" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail.
    tt__PTZPresetTourPresetDetail*       PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify Pan/Tilt and Zoom speed on moving toward this tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    tt__PTZSpeed*                        Speed                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify time duration of staying on this tour sport.
/// </BLOCKQUOTE></PRE>
///
/// Element "StayTime" of type xs:duration.
    xsd__duration                        StayTime                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension.
    tt__PTZPresetTourSpotExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension is a complexType.
///
/// @note class tt__PTZPresetTourSpotExtension operations:
/// - tt__PTZPresetTourSpotExtension* soap_new_tt__PTZPresetTourSpotExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpotExtension* soap_new_tt__PTZPresetTourSpotExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpotExtension* soap_new_req_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpotExtension* soap_new_set_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpotExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpotExtension(soap*, tt__PTZPresetTourSpotExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotExtension(soap*, tt__PTZPresetTourSpotExtension*) serialize to a stream
/// - tt__PTZPresetTourSpotExtension* tt__PTZPresetTourSpotExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpotExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpotExtension::soap_del() deep deletes tt__PTZPresetTourSpotExtension data members, use only after tt__PTZPresetTourSpotExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpotExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpotExtension or derived type identifier
class tt__PTZPresetTourSpotExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetail operations:
/// - tt__PTZPresetTourPresetDetail* soap_new_tt__PTZPresetTourPresetDetail(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetail* soap_new_tt__PTZPresetTourPresetDetail(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetail* soap_new_req_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetail* soap_new_set_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetail::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetail(soap*, tt__PTZPresetTourPresetDetail*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetail(soap*, tt__PTZPresetTourPresetDetail*) serialize to a stream
/// - tt__PTZPresetTourPresetDetail* tt__PTZPresetTourPresetDetail::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetail::soap_del() deep deletes tt__PTZPresetTourPresetDetail data members, use only after tt__PTZPresetTourPresetDetail::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetail::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetail or derived type identifier
class tt__PTZPresetTourPresetDetail
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_PTZPresetTourPresetDetail;	///< Union _tt__union_PTZPresetTourPresetDetail selector: set to SOAP_UNION__tt__union_PTZPresetTourPresetDetail_<fieldname>
    union _tt__union_PTZPresetTourPresetDetail
    {
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with Preset Token defined in advance.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   PresetToken                   ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with the home position of this PTZ Node. "False" to this parameter shall be treated as an invalid argument.
/// </BLOCKQUOTE></PRE>
///
/// Element "Home" of type xs:boolean.
    bool                                 Home                          ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with vector of PTZ node directly.
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZPosition" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                   ;	///< Choice of element (one of multiple choices).
/// Element "TypeExtension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension.
    tt__PTZPresetTourTypeExtension*      TypeExtension                 ;	///< Choice of element (one of multiple choices).
    }                                    union_PTZPresetTourPresetDetail;
//  END OF CHOICE
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension is a complexType.
///
/// @note class tt__PTZPresetTourTypeExtension operations:
/// - tt__PTZPresetTourTypeExtension* soap_new_tt__PTZPresetTourTypeExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourTypeExtension* soap_new_tt__PTZPresetTourTypeExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourTypeExtension* soap_new_req_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourTypeExtension* soap_new_set_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourTypeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourTypeExtension(soap*, tt__PTZPresetTourTypeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourTypeExtension(soap*, tt__PTZPresetTourTypeExtension*) serialize to a stream
/// - tt__PTZPresetTourTypeExtension* tt__PTZPresetTourTypeExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourTypeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourTypeExtension::soap_del() deep deletes tt__PTZPresetTourTypeExtension data members, use only after tt__PTZPresetTourTypeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourTypeExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourTypeExtension or derived type identifier
class tt__PTZPresetTourTypeExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatus is a complexType.
///
/// @note class tt__PTZPresetTourStatus operations:
/// - tt__PTZPresetTourStatus* soap_new_tt__PTZPresetTourStatus(soap*) allocate and default initialize
/// - tt__PTZPresetTourStatus* soap_new_tt__PTZPresetTourStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStatus* soap_new_req_tt__PTZPresetTourStatus(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStatus* soap_new_set_tt__PTZPresetTourStatus(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStatus(soap*, tt__PTZPresetTourStatus*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatus(soap*, tt__PTZPresetTourStatus*) serialize to a stream
/// - tt__PTZPresetTourStatus* tt__PTZPresetTourStatus::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStatus::soap_del() deep deletes tt__PTZPresetTourStatus data members, use only after tt__PTZPresetTourStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStatus::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStatus or derived type identifier
class tt__PTZPresetTourStatus
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates state of this preset tour by Idle/Touring/Paused.
/// </BLOCKQUOTE></PRE>
///
/// Element "State" of type "http://www.onvif.org/ver10/schema":PTZPresetTourState.
    enum tt__PTZPresetTourState          State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates a tour spot currently staying.
/// </BLOCKQUOTE></PRE>
///
/// Element "CurrentTourSpot" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpot.
    tt__PTZPresetTourSpot*               CurrentTourSpot                0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension.
    tt__PTZPresetTourStatusExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension is a complexType.
///
/// @note class tt__PTZPresetTourStatusExtension operations:
/// - tt__PTZPresetTourStatusExtension* soap_new_tt__PTZPresetTourStatusExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStatusExtension* soap_new_tt__PTZPresetTourStatusExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStatusExtension* soap_new_req_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStatusExtension* soap_new_set_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStatusExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStatusExtension(soap*, tt__PTZPresetTourStatusExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatusExtension(soap*, tt__PTZPresetTourStatusExtension*) serialize to a stream
/// - tt__PTZPresetTourStatusExtension* tt__PTZPresetTourStatusExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStatusExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStatusExtension::soap_del() deep deletes tt__PTZPresetTourStatusExtension data members, use only after tt__PTZPresetTourStatusExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStatusExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStatusExtension or derived type identifier
class tt__PTZPresetTourStatusExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition is a complexType.
///
/// @note class tt__PTZPresetTourStartingCondition operations:
/// - tt__PTZPresetTourStartingCondition* soap_new_tt__PTZPresetTourStartingCondition(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingCondition* soap_new_tt__PTZPresetTourStartingCondition(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingCondition* soap_new_req_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingCondition* soap_new_set_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingCondition::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingCondition(soap*, tt__PTZPresetTourStartingCondition*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingCondition(soap*, tt__PTZPresetTourStartingCondition*) serialize to a stream
/// - tt__PTZPresetTourStartingCondition* tt__PTZPresetTourStartingCondition::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingCondition::soap_del() deep deletes tt__PTZPresetTourStartingCondition data members, use only after tt__PTZPresetTourStartingCondition::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingCondition::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingCondition or derived type identifier
class tt__PTZPresetTourStartingCondition
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how many times the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringTime" of type xs:int.
    int*                                 RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how long time duration the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringDuration" of type xs:duration.
    xsd__duration                        RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to choose which direction the preset tour goes. Forward shall be chosen in case it is omitted.
/// </BLOCKQUOTE></PRE>
///
/// Element "Direction" of type "http://www.onvif.org/ver10/schema":PTZPresetTourDirection.
    enum tt__PTZPresetTourDirection*     Direction                      0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension.
    tt__PTZPresetTourStartingConditionExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Execute presets in random order. If set to true and Direction is also present, Direction will be ignored and presets of the Tour will be recalled randomly.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RandomPresetOrder" of type xs:boolean.
  @ bool*                                RandomPresetOrder              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionExtension operations:
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_tt__PTZPresetTourStartingConditionExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_tt__PTZPresetTourStartingConditionExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_req_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionExtension* soap_new_set_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionExtension(soap*, tt__PTZPresetTourStartingConditionExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionExtension(soap*, tt__PTZPresetTourStartingConditionExtension*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionExtension* tt__PTZPresetTourStartingConditionExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionExtension::soap_del() deep deletes tt__PTZPresetTourStartingConditionExtension data members, use only after tt__PTZPresetTourStartingConditionExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension or derived type identifier
class tt__PTZPresetTourStartingConditionExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourOptions is a complexType.
///
/// @note class tt__PTZPresetTourOptions operations:
/// - tt__PTZPresetTourOptions* soap_new_tt__PTZPresetTourOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourOptions* soap_new_tt__PTZPresetTourOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourOptions* soap_new_req_tt__PTZPresetTourOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourOptions* soap_new_set_tt__PTZPresetTourOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourOptions(soap*, tt__PTZPresetTourOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourOptions(soap*, tt__PTZPresetTourOptions*) serialize to a stream
/// - tt__PTZPresetTourOptions* tt__PTZPresetTourOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourOptions::soap_del() deep deletes tt__PTZPresetTourOptions data members, use only after tt__PTZPresetTourOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourOptions or derived type identifier
class tt__PTZPresetTourOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not the AutoStart is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Starting Condition.
/// </BLOCKQUOTE></PRE>
///
/// Element "StartingCondition" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions.
    tt__PTZPresetTourStartingConditionOptions*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "TourSpot" of type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions.
    tt__PTZPresetTourSpotOptions*        TourSpot                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions is a complexType.
///
/// @note class tt__PTZPresetTourSpotOptions operations:
/// - tt__PTZPresetTourSpotOptions* soap_new_tt__PTZPresetTourSpotOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourSpotOptions* soap_new_tt__PTZPresetTourSpotOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourSpotOptions* soap_new_req_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourSpotOptions* soap_new_set_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourSpotOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourSpotOptions(soap*, tt__PTZPresetTourSpotOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotOptions(soap*, tt__PTZPresetTourSpotOptions*) serialize to a stream
/// - tt__PTZPresetTourSpotOptions* tt__PTZPresetTourSpotOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourSpotOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourSpotOptions::soap_del() deep deletes tt__PTZPresetTourSpotOptions data members, use only after tt__PTZPresetTourSpotOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourSpotOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourSpotOptions or derived type identifier
class tt__PTZPresetTourSpotOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "PresetDetail" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions.
    tt__PTZPresetTourPresetDetailOptions*  PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported range of stay time for a tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "StayTime" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   StayTime                       1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetailOptions operations:
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_tt__PTZPresetTourPresetDetailOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_tt__PTZPresetTourPresetDetailOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_req_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetailOptions* soap_new_set_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetailOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptions(soap*, tt__PTZPresetTourPresetDetailOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptions(soap*, tt__PTZPresetTourPresetDetailOptions*) serialize to a stream
/// - tt__PTZPresetTourPresetDetailOptions* tt__PTZPresetTourPresetDetailOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetailOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetailOptions::soap_del() deep deletes tt__PTZPresetTourPresetDetailOptions data members, use only after tt__PTZPresetTourPresetDetailOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetailOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions or derived type identifier
class tt__PTZPresetTourPresetDetailOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of available Preset Tokens for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__ReferenceToken is 0..unbounded.
  $ int                                  __sizePresetToken              0;
/// Pointer to array tt__ReferenceToken of size 0..unbounded.
    tt__ReferenceToken                  *PresetToken                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   An option to indicate Home postion for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Element "Home" of type xs:boolean.
    bool*                                Home                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Pan and Tilt for tour spots.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltPositionSpace" of type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              PanTiltPositionSpace           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Zoom for a tour spot.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomPositionSpace" of type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              ZoomPositionSpace              0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension.
    tt__PTZPresetTourPresetDetailOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension is a complexType.
///
/// @note class tt__PTZPresetTourPresetDetailOptionsExtension operations:
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourPresetDetailOptionsExtension* soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, tt__PTZPresetTourPresetDetailOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, tt__PTZPresetTourPresetDetailOptionsExtension*) serialize to a stream
/// - tt__PTZPresetTourPresetDetailOptionsExtension* tt__PTZPresetTourPresetDetailOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourPresetDetailOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourPresetDetailOptionsExtension::soap_del() deep deletes tt__PTZPresetTourPresetDetailOptionsExtension data members, use only after tt__PTZPresetTourPresetDetailOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourPresetDetailOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension or derived type identifier
class tt__PTZPresetTourPresetDetailOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionOptions operations:
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_tt__PTZPresetTourStartingConditionOptions(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_tt__PTZPresetTourStartingConditionOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_req_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionOptions* soap_new_set_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptions(soap*, tt__PTZPresetTourStartingConditionOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptions(soap*, tt__PTZPresetTourStartingConditionOptions*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionOptions* tt__PTZPresetTourStartingConditionOptions::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionOptions::soap_del() deep deletes tt__PTZPresetTourStartingConditionOptions data members, use only after tt__PTZPresetTourStartingConditionOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionOptions::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions or derived type identifier
class tt__PTZPresetTourStartingConditionOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Time.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringTime" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Duration.
/// </BLOCKQUOTE></PRE>
///
/// Element "RecurringDuration" of type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Direction of Preset Tour.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__PTZPresetTourDirection is 0..unbounded.
  $ int                                  __sizeDirection                0;
/// Pointer to array enum tt__PTZPresetTourDirection of size 0..unbounded.
    enum tt__PTZPresetTourDirection     *Direction                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension.
    tt__PTZPresetTourStartingConditionOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension is a complexType.
///
/// @note class tt__PTZPresetTourStartingConditionOptionsExtension operations:
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZPresetTourStartingConditionOptionsExtension* soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, tt__PTZPresetTourStartingConditionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, tt__PTZPresetTourStartingConditionOptionsExtension*) serialize to a stream
/// - tt__PTZPresetTourStartingConditionOptionsExtension* tt__PTZPresetTourStartingConditionOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZPresetTourStartingConditionOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZPresetTourStartingConditionOptionsExtension::soap_del() deep deletes tt__PTZPresetTourStartingConditionOptionsExtension data members, use only after tt__PTZPresetTourStartingConditionOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZPresetTourStartingConditionOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension or derived type identifier
class tt__PTZPresetTourStartingConditionOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ImagingStatus is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":FocusStatus is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration is a complexType.
///
/// @note class tt__FocusConfiguration operations:
/// - tt__FocusConfiguration* soap_new_tt__FocusConfiguration(soap*) allocate and default initialize
/// - tt__FocusConfiguration* soap_new_tt__FocusConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__FocusConfiguration* soap_new_req_tt__FocusConfiguration(soap*, ...) allocate, set required members
/// - tt__FocusConfiguration* soap_new_set_tt__FocusConfiguration(soap*, ...) allocate, set all public members
/// - tt__FocusConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__FocusConfiguration(soap*, tt__FocusConfiguration*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration(soap*, tt__FocusConfiguration*) serialize to a stream
/// - tt__FocusConfiguration* tt__FocusConfiguration::soap_dup(soap*) returns deep copy of tt__FocusConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__FocusConfiguration::soap_del() deep deletes tt__FocusConfiguration data members, use only after tt__FocusConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__FocusConfiguration::soap_type() returns SOAP_TYPE_tt__FocusConfiguration or derived type identifier
class tt__FocusConfiguration
{ public:
/// Element "AutoFocusMode" of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum tt__AutoFocusMode               AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of type xs:float.
    float                                DefaultSpeed                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
///
/// Element "NearLimit" of type xs:float.
    float                                NearLimit                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
///   If set to 0.0, infinity will be used.
/// </BLOCKQUOTE></PRE>
///
/// Element "FarLimit" of type xs:float.
    float                                FarLimit                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings is a complexType.
///
/// @note class tt__ImagingSettings operations:
/// - tt__ImagingSettings* soap_new_tt__ImagingSettings(soap*) allocate and default initialize
/// - tt__ImagingSettings* soap_new_tt__ImagingSettings(soap*, int num) allocate and default initialize an array
/// - tt__ImagingSettings* soap_new_req_tt__ImagingSettings(soap*, ...) allocate, set required members
/// - tt__ImagingSettings* soap_new_set_tt__ImagingSettings(soap*, ...) allocate, set all public members
/// - tt__ImagingSettings::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingSettings(soap*, tt__ImagingSettings*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings(soap*, tt__ImagingSettings*) serialize to a stream
/// - tt__ImagingSettings* tt__ImagingSettings::soap_dup(soap*) returns deep copy of tt__ImagingSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingSettings::s