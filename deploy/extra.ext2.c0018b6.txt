void encodeESC_AddressPacketStructure(void* _pg_pkt, const ESC_Address_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // ESC hardware revision (OTP - not configurable by user)
    // Range of HardwareRevision is 0 to 255.
    uint8ToBytes(_pg_user->HardwareRevision, _pg_data, &_pg_byteindex);

    // ESC model (OTP - not configurable by user)
    // Range of Model is 0 to 255.
    uint8ToBytes(_pg_user->Model, _pg_data, &_pg_byteindex);

    // ESC Serial Number (OTP - not configurable by user)
    // Range of SerialNumber is 0 to 65535.
    uint16ToBeBytes(_pg_user->SerialNumber, _pg_data, &_pg_byteindex);

    // User ID Value A - user can set this value to any value
    // Range of UserIDA is 0 to 65535.
    uint16ToBeBytes(_pg_user->UserIDA, _pg_data, &_pg_byteindex);

    // User ID Value B - user can set this value to any value
    // Range of UserIDB is 0 to 65535.
    uint16ToBeBytes(_pg_user->UserIDB, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_AddressPacketID());

}// encodeESC_AddressPacketStructure

/*!
 * \brief Decode the ESC_Address packet
 *
 * This packet contains the serial number for the ESC. Additionally there are
 * two extra values (each 16-bit) which can be programmed by the user for any
 * purpose.
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_AddressPacketStructure(const void* _pg_pkt, ESC_Address_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_AddressPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_AddressMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // ESC hardware revision (OTP - not configurable by user)
    // Range of HardwareRevision is 0 to 255.
    _pg_user->HardwareRevision = uint8FromBytes(_pg_data, &_pg_byteindex);

    // ESC model (OTP - not configurable by user)
    // Range of Model is 0 to 255.
    _pg_user->Model = uint8FromBytes(_pg_data, &_pg_byteindex);

    // ESC Serial Number (OTP - not configurable by user)
    // Range of SerialNumber is 0 to 65535.
    _pg_user->SerialNumber = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // User ID Value A - user can set this value to any value
    // Range of UserIDA is 0 to 65535.
    _pg_user->UserIDA = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // User ID Value B - user can set this value to any value
    // Range of UserIDB is 0 to 65535.
    _pg_user->UserIDB = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_AddressPacketStructure

/*!
 * \brief Create the ESC_Address packet
 *
 * This packet contains the serial number for the ESC. Additionally there are
 * two extra values (each 16-bit) which can be programmed by the user for any
 * purpose.
 * \param _pg_pkt points to the packet which will be created by this function
 * \param HardwareRevision is ESC hardware revision (OTP - not configurable by user)
 * \param Model is ESC model (OTP - not configurable by user)
 * \param SerialNumber is ESC Serial Number (OTP - not configurable by user)
 * \param UserIDA is User ID Value A - user can set this value to any value
 * \param UserIDB is User ID Value B - user can set this value to any value
 */
void encodeESC_AddressPacket(void* _pg_pkt, uint8_t HardwareRevision, uint8_t Model, uint16_t SerialNumber, uint16_t UserIDA, uint16_t UserIDB)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // ESC hardware revision (OTP - not configurable by user)
    // Range of HardwareRevision is 0 to 255.
    uint8ToBytes(HardwareRevision, _pg_data, &_pg_byteindex);

    // ESC model (OTP - not configurable by user)
    // Range of Model is 0 to 255.
    uint8ToBytes(Model, _pg_data, &_pg_byteindex);

    // ESC Serial Number (OTP - not configurable by user)
    // Range of SerialNumber is 0 to 65535.
    uint16ToBeBytes(SerialNumber, _pg_data, &_pg_byteindex);

    // User ID Value A - user can set this value to any value
    // Range of UserIDA is 0 to 65535.
    uint16ToBeBytes(UserIDA, _pg_data, &_pg_byteindex);

    // User ID Value B - user can set this value to any value
    // Range of UserIDB is 0 to 65535.
    uint16ToBeBytes(UserIDB, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_AddressPacketID());

}// encodeESC_AddressPacket

/*!
 * \brief Decode the ESC_Address packet
 *
 * This packet contains the serial number for the ESC. Additionally there are
 * two extra values (each 16-bit) which can be programmed by the user for any
 * purpose.
 * \param _pg_pkt points to the packet being decoded by this function
 * \param HardwareRevision receives ESC hardware revision (OTP - not configurable by user)
 * \param Model receives ESC model (OTP - not configurable by user)
 * \param SerialNumber receives ESC Serial Number (OTP - not configurable by user)
 * \param UserIDA receives User ID Value A - user can set this value to any value
 * \param UserIDB receives User ID Value B - user can set this value to any value
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_AddressPacket(const void* _pg_pkt, uint8_t* HardwareRevision, uint8_t* Model, uint16_t* SerialNumber, uint16_t* UserIDA, uint16_t* UserIDB)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_AddressPacketID())
        return 0;

    if(_pg_numbytes < getESC_AddressMinDataLength())
        return 0;

    // ESC hardware revision (OTP - not configurable by user)
    // Range of HardwareRevision is 0 to 255.
    (*HardwareRevision) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // ESC model (OTP - not configurable by user)
    // Range of Model is 0 to 255.
    (*Model) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // ESC Serial Number (OTP - not configurable by user)
    // Range of SerialNumber is 0 to 65535.
    (*SerialNumber) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // User ID Value A - user can set this value to any value
    // Range of UserIDA is 0 to 65535.
    (*UserIDA) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // User ID Value B - user can set this value to any value
    // Range of UserIDB is 0 to 65535.
    (*UserIDB) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_AddressPacket

/*!
 * \brief Create the ESC_Title packet
 *
 * This packet contains a zero-terminated string (max-length 8) used to
 * identify the particular ESC.
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_TitlePacketStructure(void* _pg_pkt, const ESC_Title_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;
    unsigned _pg_i = 0;

    // Description of this ESC
    // Range of ESCTitle is 0 to 255.
    for(_pg_i = 0; _pg_i < 8; _pg_i++)
        uint8ToBytes(_pg_user->ESCTitle[_pg_i], _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TitlePacketID());

}// encodeESC_TitlePacketStructure

/*!
 * \brief Decode the ESC_Title packet
 *
 * This packet contains a zero-terminated string (max-length 8) used to
 * identify the particular ESC.
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TitlePacketStructure(const void* _pg_pkt, ESC_Title_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;
    unsigned _pg_i = 0;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TitlePacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_TitleMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Description of this ESC
    // Range of ESCTitle is 0 to 255.
    for(_pg_i = 0; _pg_i < 8; _pg_i++)
        _pg_user->ESCTitle[_pg_i] = uint8FromBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TitlePacketStructure

/*!
 * \brief Create the ESC_Title packet
 *
 * This packet contains a zero-terminated string (max-length 8) used to
 * identify the particular ESC.
 * \param _pg_pkt points to the packet which will be created by this function
 * \param ESCTitle is Description of this ESC
 */
void encodeESC_TitlePacket(void* _pg_pkt, const uint8_t ESCTitle[8])
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;
    unsigned _pg_i = 0;

    // Description of this ESC
    // Range of ESCTitle is 0 to 255.
    for(_pg_i = 0; _pg_i < 8; _pg_i++)
        uint8ToBytes(ESCTitle[_pg_i], _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TitlePacketID());

}// encodeESC_TitlePacket

/*!
 * \brief Decode the ESC_Title packet
 *
 * This packet contains a zero-terminated string (max-length 8) used to
 * identify the particular ESC.
 * \param _pg_pkt points to the packet being decoded by this function
 * \param ESCTitle receives Description of this ESC
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TitlePacket(const void* _pg_pkt, uint8_t ESCTitle[8])
{
    unsigned _pg_i = 0;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TitlePacketID())
        return 0;

    if(_pg_numbytes < getESC_TitleMinDataLength())
        return 0;

    // Description of this ESC
    // Range of ESCTitle is 0 to 255.
    for(_pg_i = 0; _pg_i < 8; _pg_i++)
        ESCTitle[_pg_i] = uint8FromBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TitlePacket

/*!
 * \brief Create the ESC_Firmware packet
 *
 * This packet contains the firmware version of the ESC
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_FirmwarePacketStructure(void* _pg_pkt, const ESC_Firmware_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Major firmware version number
    // Range of versionMajor is 0 to 255.
    uint8ToBytes(_pg_user->versionMajor, _pg_data, &_pg_byteindex);

    // Minor firmware version numner
    // Range of versionMinor is 0 to 255.
    uint8ToBytes(_pg_user->versionMinor, _pg_data, &_pg_byteindex);

    // Firmware release date, day-of-month
    // Range of versionDay is 0 to 255.
    uint8ToBytes(_pg_user->versionDay, _pg_data, &_pg_byteindex);

    // Firmware release data, month-of-year
    // Range of versionMonth is 0 to 255.
    uint8ToBytes(_pg_user->versionMonth, _pg_data, &_pg_byteindex);

    // Firmware release date, year
    // Range of versionYear is 0 to 65535.
    uint16ToBeBytes(_pg_user->versionYear, _pg_data, &_pg_byteindex);

    // Firmware checksum
    // Range of firmwareChecksum is 0 to 65535.
    uint16ToBeBytes(_pg_user->firmwareChecksum, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_FirmwarePacketID());

}// encodeESC_FirmwarePacketStructure

/*!
 * \brief Decode the ESC_Firmware packet
 *
 * This packet contains the firmware version of the ESC
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_FirmwarePacketStructure(const void* _pg_pkt, ESC_Firmware_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_FirmwarePacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_FirmwareMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Major firmware version number
    // Range of versionMajor is 0 to 255.
    _pg_user->versionMajor = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Minor firmware version numner
    // Range of versionMinor is 0 to 255.
    _pg_user->versionMinor = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release date, day-of-month
    // Range of versionDay is 0 to 255.
    _pg_user->versionDay = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release data, month-of-year
    // Range of versionMonth is 0 to 255.
    _pg_user->versionMonth = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release date, year
    // Range of versionYear is 0 to 65535.
    _pg_user->versionYear = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Firmware checksum
    // Range of firmwareChecksum is 0 to 65535.
    _pg_user->firmwareChecksum = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_FirmwarePacketStructure

/*!
 * \brief Create the ESC_Firmware packet
 *
 * This packet contains the firmware version of the ESC
 * \param _pg_pkt points to the packet which will be created by this function
 * \param versionMajor is Major firmware version number
 * \param versionMinor is Minor firmware version numner
 * \param versionDay is Firmware release date, day-of-month
 * \param versionMonth is Firmware release data, month-of-year
 * \param versionYear is Firmware release date, year
 * \param firmwareChecksum is Firmware checksum
 */
void encodeESC_FirmwarePacket(void* _pg_pkt, uint8_t versionMajor, uint8_t versionMinor, uint8_t versionDay, uint8_t versionMonth, uint16_t versionYear, uint16_t firmwareChecksum)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Major firmware version number
    // Range of versionMajor is 0 to 255.
    uint8ToBytes(versionMajor, _pg_data, &_pg_byteindex);

    // Minor firmware version numner
    // Range of versionMinor is 0 to 255.
    uint8ToBytes(versionMinor, _pg_data, &_pg_byteindex);

    // Firmware release date, day-of-month
    // Range of versionDay is 0 to 255.
    uint8ToBytes(versionDay, _pg_data, &_pg_byteindex);

    // Firmware release data, month-of-year
    // Range of versionMonth is 0 to 255.
    uint8ToBytes(versionMonth, _pg_data, &_pg_byteindex);

    // Firmware release date, year
    // Range of versionYear is 0 to 65535.
    uint16ToBeBytes(versionYear, _pg_data, &_pg_byteindex);

    // Firmware checksum
    // Range of firmwareChecksum is 0 to 65535.
    uint16ToBeBytes(firmwareChecksum, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_FirmwarePacketID());

}// encodeESC_FirmwarePacket

/*!
 * \brief Decode the ESC_Firmware packet
 *
 * This packet contains the firmware version of the ESC
 * \param _pg_pkt points to the packet being decoded by this function
 * \param versionMajor receives Major firmware version number
 * \param versionMinor receives Minor firmware version numner
 * \param versionDay receives Firmware release date, day-of-month
 * \param versionMonth receives Firmware release data, month-of-year
 * \param versionYear receives Firmware release date, year
 * \param firmwareChecksum receives Firmware checksum
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_FirmwarePacket(const void* _pg_pkt, uint8_t* versionMajor, uint8_t* versionMinor, uint8_t* versionDay, uint8_t* versionMonth, uint16_t* versionYear, uint16_t* firmwareChecksum)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_FirmwarePacketID())
        return 0;

    if(_pg_numbytes < getESC_FirmwareMinDataLength())
        return 0;

    // Major firmware version number
    // Range of versionMajor is 0 to 255.
    (*versionMajor) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Minor firmware version numner
    // Range of versionMinor is 0 to 255.
    (*versionMinor) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release date, day-of-month
    // Range of versionDay is 0 to 255.
    (*versionDay) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release data, month-of-year
    // Range of versionMonth is 0 to 255.
    (*versionMonth) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Firmware release date, year
    // Range of versionYear is 0 to 65535.
    (*versionYear) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Firmware checksum
    // Range of firmwareChecksum is 0 to 65535.
    (*firmwareChecksum) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_FirmwarePacket

/*!
 * \brief Create the ESC_SystemInfo packet
 *
 * This packet contains system runtime information
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_SystemInfoPacketStructure(void* _pg_pkt, const ESC_SystemInfo_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Number of milliseconds since the ESC last experienced a reset/power-on event
    // Range of millisecondsSinceReset is 0 to 4294967295.
    uint32ToBeBytes(_pg_user->millisecondsSinceReset, _pg_data, &_pg_byteindex);

    // Number of power cycle events that the ESC has experienced
    // Range of powerCycles is 0 to 65535.
    uint16ToBeBytes(_pg_user->powerCycles, _pg_data, &_pg_byteindex);

    // Processor RESET code for debug purposes
    // Range of resetCode is 0 to 255.
    uint8ToBytes(_pg_user->resetCode, _pg_data, &_pg_byteindex);

    // Processor usage
    // Range of cpuOccupancy is 0 to 255.
    uint8ToBytes(_pg_user->cpuOccupancy, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_SystemInfoPacketID());

}// encodeESC_SystemInfoPacketStructure

/*!
 * \brief Decode the ESC_SystemInfo packet
 *
 * This packet contains system runtime information
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_SystemInfoPacketStructure(const void* _pg_pkt, ESC_SystemInfo_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_SystemInfoPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_SystemInfoMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Number of milliseconds since the ESC last experienced a reset/power-on event
    // Range of millisecondsSinceReset is 0 to 4294967295.
    _pg_user->millisecondsSinceReset = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    // Number of power cycle events that the ESC has experienced
    // Range of powerCycles is 0 to 65535.
    _pg_user->powerCycles = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Processor RESET code for debug purposes
    // Range of resetCode is 0 to 255.
    _pg_user->resetCode = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Processor usage
    // Range of cpuOccupancy is 0 to 255.
    _pg_user->cpuOccupancy = uint8FromBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_SystemInfoPacketStructure

/*!
 * \brief Create the ESC_SystemInfo packet
 *
 * This packet contains system runtime information
 * \param _pg_pkt points to the packet which will be created by this function
 * \param millisecondsSinceReset is Number of milliseconds since the ESC last experienced a reset/power-on event
 * \param powerCycles is Number of power cycle events that the ESC has experienced
 * \param resetCode is Processor RESET code for debug purposes
 * \param cpuOccupancy is Processor usage
 */
void encodeESC_SystemInfoPacket(void* _pg_pkt, uint32_t millisecondsSinceReset, uint16_t powerCycles, uint8_t resetCode, uint8_t cpuOccupancy)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Number of milliseconds since the ESC last experienced a reset/power-on event
    // Range of millisecondsSinceReset is 0 to 4294967295.
    uint32ToBeBytes(millisecondsSinceReset, _pg_data, &_pg_byteindex);

    // Number of power cycle events that the ESC has experienced
    // Range of powerCycles is 0 to 65535.
    uint16ToBeBytes(powerCycles, _pg_data, &_pg_byteindex);

    // Processor RESET code for debug purposes
    // Range of resetCode is 0 to 255.
    uint8ToBytes(resetCode, _pg_data, &_pg_byteindex);

    // Processor usage
    // Range of cpuOccupancy is 0 to 255.
    uint8ToBytes(cpuOccupancy, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_SystemInfoPacketID());

}// encodeESC_SystemInfoPacket

/*!
 * \brief Decode the ESC_SystemInfo packet
 *
 * This packet contains system runtime information
 * \param _pg_pkt points to the packet being decoded by this function
 * \param millisecondsSinceReset receives Number of milliseconds since the ESC last experienced a reset/power-on event
 * \param powerCycles receives Number of power cycle events that the ESC has experienced
 * \param resetCode receives Processor RESET code for debug purposes
 * \param cpuOccupancy receives Processor usage
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_SystemInfoPacket(const void* _pg_pkt, uint32_t* millisecondsSinceReset, uint16_t* powerCycles, uint8_t* resetCode, uint8_t* cpuOccupancy)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_SystemInfoPacketID())
        return 0;

    if(_pg_numbytes < getESC_SystemInfoMinDataLength())
        return 0;

    // Number of milliseconds since the ESC last experienced a reset/power-on event
    // Range of millisecondsSinceReset is 0 to 4294967295.
    (*millisecondsSinceReset) = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    // Number of power cycle events that the ESC has experienced
    // Range of powerCycles is 0 to 65535.
    (*powerCycles) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Processor RESET code for debug purposes
    // Range of resetCode is 0 to 255.
    (*resetCode) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Processor usage
    // Range of cpuOccupancy is 0 to 255.
    (*cpuOccupancy) = uint8FromBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_SystemInfoPacket

/*!
 * \brief Create the ESC_TelemetrySettings packet
 *
 * This packet contains the telemetry packet configuration
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_TelemetrySettingsPacketStructure(void* _pg_pkt, const ESC_TelemetrySettings_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Telemetry settings
    encodeESC_TelemetryConfig_t(_pg_data, &_pg_byteindex, &_pg_user->settings);

    // The API version of the ESC
    stringToBytes(getESCVelocityVersion(), _pg_data, &_pg_byteindex, 5, 0);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TelemetrySettingsPacketID());

}// encodeESC_TelemetrySettingsPacketStructure

/*!
 * \brief Decode the ESC_TelemetrySettings packet
 *
 * This packet contains the telemetry packet configuration
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TelemetrySettingsPacketStructure(const void* _pg_pkt, ESC_TelemetrySettings_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TelemetrySettingsPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_TelemetrySettingsMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Telemetry settings
    if(decodeESC_TelemetryConfig_t(_pg_data, &_pg_byteindex, &_pg_user->settings) == 0)
        return 0;

    // The API version of the ESC
    stringFromBytes(_pg_user->apiVersion, _pg_data, &_pg_byteindex, 5, 0);

    return 1;

}// decodeESC_TelemetrySettingsPacketStructure

/*!
 * \brief Create the ESC_TelemetrySettings packet
 *
 * This packet contains the telemetry packet configuration
 * \param _pg_pkt points to the packet which will be created by this function
 * \param settings is Telemetry settings
 */
void encodeESC_TelemetrySettingsPacket(void* _pg_pkt, const ESC_TelemetryConfig_t* settings)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Telemetry settings
    encodeESC_TelemetryConfig_t(_pg_data, &_pg_byteindex, settings);

    // The API version of the ESC
    stringToBytes(getESCVelocityVersion(), _pg_data, &_pg_byteindex, 5, 0);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TelemetrySettingsPacketID());

}// encodeESC_TelemetrySettingsPacket

/*!
 * \brief Decode the ESC_TelemetrySettings packet
 *
 * This packet contains the telemetry packet configuration
 * \param _pg_pkt points to the packet being decoded by this function
 * \param settings receives Telemetry settings
 * \param apiVersion receives The API version of the ESC
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TelemetrySettingsPacket(const void* _pg_pkt, ESC_TelemetryConfig_t* settings, char apiVersion[5])
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TelemetrySettingsPacketID())
        return 0;

    if(_pg_numbytes < getESC_TelemetrySettingsMinDataLength())
        return 0;

    // Telemetry settings
    if(decodeESC_TelemetryConfig_t(_pg_data, &_pg_byteindex, settings) == 0)
        return 0;

    // The API version of the ESC
    stringFromBytes(apiVersion, _pg_data, &_pg_byteindex, 5, 0);

    return 1;

}// decodeESC_TelemetrySettingsPacket

/*!
 * \brief Create the ESC_EEPROMSettings packet
 *
 * This packet contains information on the non-volatile ESC settings
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_EEPROMSettingsPacketStructure(void* _pg_pkt, const ESC_EEPROMSettings_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Set if the ESC settings are locked
    _pg_data[_pg_byteindex] = (uint8_t)((_pg_user->settingsLocked == true) ? 1 : 0) << 7;

    // Version of EEPROM data
    // Range of version is 0 to 127.
    _pg_data[_pg_byteindex] |= (uint8_t)limitMax(_pg_user->version, 127);
    _pg_byteindex += 1; // close bit field


    // Size of settings data
    // Range of size is 0 to 65535.
    uint16ToBeBytes(_pg_user->size, _pg_data, &_pg_byteindex);

    // Settings checksum
    // Range of checksum is 0 to 65535.
    uint16ToBeBytes(_pg_user->checksum, _pg_data, &_pg_byteindex);

    // Validated settings checksum
    // Range of validatedChecksum is 0 to 65535.
    uint16ToBeBytes(_pg_user->validatedChecksum, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_EEPROMSettingsPacketID());

}// encodeESC_EEPROMSettingsPacketStructure

/*!
 * \brief Decode the ESC_EEPROMSettings packet
 *
 * This packet contains information on the non-volatile ESC settings
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_EEPROMSettingsPacketStructure(const void* _pg_pkt, ESC_EEPROMSettings_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_EEPROMSettingsPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_EEPROMSettingsMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // this packet has default fields, make sure they are set
    _pg_user->validatedChecksum = 0;

    // Set if the ESC settings are locked
    _pg_user->settingsLocked = ((_pg_data[_pg_byteindex] >> 7)) ? true : false;

    // Version of EEPROM data
    // Range of version is 0 to 127.
    _pg_user->version = ((_pg_data[_pg_byteindex]) & 0x7F);
    _pg_byteindex += 1; // close bit field

    // Size of settings data
    // Range of size is 0 to 65535.
    _pg_user->size = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Settings checksum
    // Range of checksum is 0 to 65535.
    _pg_user->checksum = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Validated settings checksum
    // Range of validatedChecksum is 0 to 65535.
    _pg_user->validatedChecksum = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_EEPROMSettingsPacketStructure

/*!
 * \brief Create the ESC_EEPROMSettings packet
 *
 * This packet contains information on the non-volatile ESC settings
 * \param _pg_pkt points to the packet which will be created by this function
 * \param settingsLocked is Set if the ESC settings are locked
 * \param version is Version of EEPROM data
 * \param size is Size of settings data
 * \param checksum is Settings checksum
 * \param validatedChecksum is Validated settings checksum
 */
void encodeESC_EEPROMSettingsPacket(void* _pg_pkt, bool settingsLocked, uint8_t version, uint16_t size, uint16_t checksum, uint16_t validatedChecksum)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Set if the ESC settings are locked
    _pg_data[_pg_byteindex] = (uint8_t)((settingsLocked == true) ? 1 : 0) << 7;

    // Version of EEPROM data
    // Range of version is 0 to 127.
    _pg_data[_pg_byteindex] |= (uint8_t)limitMax(version, 127);
    _pg_byteindex += 1; // close bit field

    // Size of settings data
    // Range of size is 0 to 65535.
    uint16ToBeBytes(size, _pg_data, &_pg_byteindex);

    // Settings checksum
    // Range of checksum is 0 to 65535.
    uint16ToBeBytes(checksum, _pg_data, &_pg_byteindex);

    // Validated settings checksum
    // Range of validatedChecksum is 0 to 65535.
    uint16ToBeBytes(validatedChecksum, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_EEPROMSettingsPacketID());

}// encodeESC_EEPROMSettingsPacket

/*!
 * \brief Decode the ESC_EEPROMSettings packet
 *
 * This packet contains information on the non-volatile ESC settings
 * \param _pg_pkt points to the packet being decoded by this function
 * \param settingsLocked receives Set if the ESC settings are locked
 * \param version receives Version of EEPROM data
 * \param size receives Size of settings data
 * \param checksum receives Settings checksum
 * \param validatedChecksum receives Validated settings checksum
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_EEPROMSettingsPacket(const void* _pg_pkt, bool* settingsLocked, uint8_t* version, uint16_t* size, uint16_t* checksum, uint16_t* validatedChecksum)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_EEPROMSettingsPacketID())
        return 0;

    if(_pg_numbytes < getESC_EEPROMSettingsMinDataLength())
        return 0;

    // this packet has default fields, make sure they are set
    (*validatedChecksum) = 0;

    // Set if the ESC settings are locked
    (*settingsLocked) = ((_pg_data[_pg_byteindex] >> 7)) ? true : false;

    // Version of EEPROM data
    // Range of version is 0 to 127.
    (*version) = ((_pg_data[_pg_byteindex]) & 0x7F);
    _pg_byteindex += 1; // close bit field

    // Size of settings data
    // Range of size is 0 to 65535.
    (*size) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // Settings checksum
    // Range of checksum is 0 to 65535.
    (*checksum) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Validated settings checksum
    // Range of validatedChecksum is 0 to 65535.
    (*validatedChecksum) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_EEPROMSettingsPacket

/*!
 * \brief Create the ESC_TempSensorConfig packet
 *
 * Motor temperature sensor settings
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_TempSensorConfigPacketStructure(void* _pg_pkt, const ESC_TempSensorConfig_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;
    unsigned _pg_i = 0;

    // Reference temperature values
    // Range of NTC_T is -32768 to 32767.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        int16ToBeBytes(_pg_user->NTC_T[_pg_i], _pg_data, &_pg_byteindex);

    // Reference resistance values
    // Range of NTC_R is -3.402823466e+38f to 3.402823466e+38f.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        float32ToBeBytes((float)_pg_user->NTC_R[_pg_i], _pg_data, &_pg_byteindex);

    // Beta constant
    // Range of Beta is 0 to 65535.
    uint16ToBeBytes(_pg_user->Beta, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TempSensorConfigPacketID());

}// encodeESC_TempSensorConfigPacketStructure

/*!
 * \brief Decode the ESC_TempSensorConfig packet
 *
 * Motor temperature sensor settings
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TempSensorConfigPacketStructure(const void* _pg_pkt, ESC_TempSensorConfig_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;
    unsigned _pg_i = 0;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TempSensorConfigPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_TempSensorConfigMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Reference temperature values
    // Range of NTC_T is -32768 to 32767.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        _pg_user->NTC_T[_pg_i] = int16FromBeBytes(_pg_data, &_pg_byteindex);

    // Reference resistance values
    // Range of NTC_R is -3.402823466e+38f to 3.402823466e+38f.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        _pg_user->NTC_R[_pg_i] = float32FromBeBytes(_pg_data, &_pg_byteindex);

    // Beta constant
    // Range of Beta is 0 to 65535.
    _pg_user->Beta = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TempSensorConfigPacketStructure

/*!
 * \brief Create the ESC_TempSensorConfig packet
 *
 * Motor temperature sensor settings
 * \param _pg_pkt points to the packet which will be created by this function
 * \param NTC_T is Reference temperature values
 * \param NTC_R is Reference resistance values
 * \param Beta is Beta constant
 */
void encodeESC_TempSensorConfigPacket(void* _pg_pkt, const int16_t NTC_T[3], const float NTC_R[3], uint16_t Beta)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;
    unsigned _pg_i = 0;

    // Reference temperature values
    // Range of NTC_T is -32768 to 32767.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        int16ToBeBytes(NTC_T[_pg_i], _pg_data, &_pg_byteindex);

    // Reference resistance values
    // Range of NTC_R is -3.402823466e+38f to 3.402823466e+38f.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        float32ToBeBytes((float)NTC_R[_pg_i], _pg_data, &_pg_byteindex);

    // Beta constant
    // Range of Beta is 0 to 65535.
    uint16ToBeBytes(Beta, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TempSensorConfigPacketID());

}// encodeESC_TempSensorConfigPacket

/*!
 * \brief Decode the ESC_TempSensorConfig packet
 *
 * Motor temperature sensor settings
 * \param _pg_pkt points to the packet being decoded by this function
 * \param NTC_T receives Reference temperature values
 * \param NTC_R receives Reference resistance values
 * \param Beta receives Beta constant
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TempSensorConfigPacket(const void* _pg_pkt, int16_t NTC_T[3], float NTC_R[3], uint16_t* Beta)
{
    unsigned _pg_i = 0;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TempSensorConfigPacketID())
        return 0;

    if(_pg_numbytes < getESC_TempSensorConfigMinDataLength())
        return 0;

    // Reference temperature values
    // Range of NTC_T is -32768 to 32767.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        NTC_T[_pg_i] = int16FromBeBytes(_pg_data, &_pg_byteindex);

    // Reference resistance values
    // Range of NTC_R is -3.402823466e+38f to 3.402823466e+38f.
    for(_pg_i = 0; _pg_i < 3; _pg_i++)
        NTC_R[_pg_i] = float32FromBeBytes(_pg_data, &_pg_byteindex);

    // Beta constant
    // Range of Beta is 0 to 65535.
    (*Beta) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TempSensorConfigPacket

/*!
 * \brief Create the ESC_TelltaleValues packet
 *
 * ESC telltale values
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_TelltaleValuesPacketStructure(void* _pg_pkt, const ESC_TelltaleValues_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Maximum recorded internal temperature
    // Range of maxTemperature is 0 to 255.
    uint8ToBytes(_pg_user->maxTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded MOSFET temperature
    // Range of maxFetTemperature is 0 to 255.
    uint8ToBytes(_pg_user->maxFetTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded motor temperature
    // Range of maxMotorTemperature is 0 to 255.
    uint8ToBytes(_pg_user->maxMotorTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded battery voltage
    // Range of maxRippleVoltage is 0 to 255.
    uint8ToBytes(_pg_user->maxRippleVoltage, _pg_data, &_pg_byteindex);

    // Maximum recorded battery current
    // Range of maxBatteryCurrent is -3276.7f to 3276.7f.
    float32ScaledTo2SignedBeBytes(_pg_user->maxBatteryCurrent, _pg_data, &_pg_byteindex, 10.0f);

    // Maximum recorded regen current
    // Range of maxRegenCurrent is -3276.7f to 3276.7f.
    float32ScaledTo2SignedBeBytes(_pg_user->maxRegenCurrent, _pg_data, &_pg_byteindex, 10.0f);

    // Number of successful motor start events
    // Range of totalStarts is 0 to 65535.
    uint16ToBeBytes(_pg_user->totalStarts, _pg_data, &_pg_byteindex);

    // Number of failed motor start events
    // Range of failedStarts is 0 to 65535.
    uint16ToBeBytes(_pg_user->failedStarts, _pg_data, &_pg_byteindex);

    // ESC run time
    // Range of escRunTime is 0 to 4294967295.
    uint32ToBeBytes(_pg_user->escRunTime, _pg_data, &_pg_byteindex);

    // Motor run time
    // Range of motorRunTime is 0 to 4294967295.
    uint32ToBeBytes(_pg_user->motorRunTime, _pg_data, &_pg_byteindex);

    // Number of recorded motor desync events
    // Range of desyncEvents is 0 to 4294967295.
    uint32ToBeBytes(_pg_user->desyncEvents, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TelltaleValuesPacketID());

}// encodeESC_TelltaleValuesPacketStructure

/*!
 * \brief Decode the ESC_TelltaleValues packet
 *
 * ESC telltale values
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TelltaleValuesPacketStructure(const void* _pg_pkt, ESC_TelltaleValues_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TelltaleValuesPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_TelltaleValuesMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // this packet has default fields, make sure they are set
    _pg_user->maxRippleVoltage = 0;
    _pg_user->maxBatteryCurrent = 0;
    _pg_user->maxRegenCurrent = 0;
    _pg_user->totalStarts = 0;
    _pg_user->failedStarts = 0;
    _pg_user->escRunTime = 0;
    _pg_user->motorRunTime = 0;
    _pg_user->desyncEvents = 0;

    // Maximum recorded internal temperature
    // Range of maxTemperature is 0 to 255.
    _pg_user->maxTemperature = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Maximum recorded MOSFET temperature
    // Range of maxFetTemperature is 0 to 255.
    _pg_user->maxFetTemperature = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Maximum recorded motor temperature
    // Range of maxMotorTemperature is 0 to 255.
    _pg_user->maxMotorTemperature = uint8FromBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 1 > _pg_numbytes)
        return 1;

    // Maximum recorded battery voltage
    // Range of maxRippleVoltage is 0 to 255.
    _pg_user->maxRippleVoltage = uint8FromBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Maximum recorded battery current
    // Range of maxBatteryCurrent is -3276.7f to 3276.7f.
    _pg_user->maxBatteryCurrent = float32ScaledFrom2SignedBeBytes(_pg_data, &_pg_byteindex, 1.0f/10.0f);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Maximum recorded regen current
    // Range of maxRegenCurrent is -3276.7f to 3276.7f.
    _pg_user->maxRegenCurrent = float32ScaledFrom2SignedBeBytes(_pg_data, &_pg_byteindex, 1.0f/10.0f);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Number of successful motor start events
    // Range of totalStarts is 0 to 65535.
    _pg_user->totalStarts = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Number of failed motor start events
    // Range of failedStarts is 0 to 65535.
    _pg_user->failedStarts = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // ESC run time
    // Range of escRunTime is 0 to 4294967295.
    _pg_user->escRunTime = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // Motor run time
    // Range of motorRunTime is 0 to 4294967295.
    _pg_user->motorRunTime = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // Number of recorded motor desync events
    // Range of desyncEvents is 0 to 4294967295.
    _pg_user->desyncEvents = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TelltaleValuesPacketStructure

/*!
 * \brief Create the ESC_TelltaleValues packet
 *
 * ESC telltale values
 * \param _pg_pkt points to the packet which will be created by this function
 * \param maxTemperature is Maximum recorded internal temperature
 * \param maxFetTemperature is Maximum recorded MOSFET temperature
 * \param maxMotorTemperature is Maximum recorded motor temperature
 * \param maxRippleVoltage is Maximum recorded battery voltage
 * \param maxBatteryCurrent is Maximum recorded battery current
 * \param maxRegenCurrent is Maximum recorded regen current
 * \param totalStarts is Number of successful motor start events
 * \param failedStarts is Number of failed motor start events
 * \param escRunTime is ESC run time
 * \param motorRunTime is Motor run time
 * \param desyncEvents is Number of recorded motor desync events
 */
void encodeESC_TelltaleValuesPacket(void* _pg_pkt, uint8_t maxTemperature, uint8_t maxFetTemperature, uint8_t maxMotorTemperature, uint8_t maxRippleVoltage, float maxBatteryCurrent, float maxRegenCurrent, uint16_t totalStarts, uint16_t failedStarts, uint32_t escRunTime, uint32_t motorRunTime, uint32_t desyncEvents)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Maximum recorded internal temperature
    // Range of maxTemperature is 0 to 255.
    uint8ToBytes(maxTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded MOSFET temperature
    // Range of maxFetTemperature is 0 to 255.
    uint8ToBytes(maxFetTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded motor temperature
    // Range of maxMotorTemperature is 0 to 255.
    uint8ToBytes(maxMotorTemperature, _pg_data, &_pg_byteindex);

    // Maximum recorded battery voltage
    // Range of maxRippleVoltage is 0 to 255.
    uint8ToBytes(maxRippleVoltage, _pg_data, &_pg_byteindex);

    // Maximum recorded battery current
    // Range of maxBatteryCurrent is -3276.7f to 3276.7f.
    float32ScaledTo2SignedBeBytes(maxBatteryCurrent, _pg_data, &_pg_byteindex, 10.0f);

    // Maximum recorded regen current
    // Range of maxRegenCurrent is -3276.7f to 3276.7f.
    float32ScaledTo2SignedBeBytes(maxRegenCurrent, _pg_data, &_pg_byteindex, 10.0f);

    // Number of successful motor start events
    // Range of totalStarts is 0 to 65535.
    uint16ToBeBytes(totalStarts, _pg_data, &_pg_byteindex);

    // Number of failed motor start events
    // Range of failedStarts is 0 to 65535.
    uint16ToBeBytes(failedStarts, _pg_data, &_pg_byteindex);

    // ESC run time
    // Range of escRunTime is 0 to 4294967295.
    uint32ToBeBytes(escRunTime, _pg_data, &_pg_byteindex);

    // Motor run time
    // Range of motorRunTime is 0 to 4294967295.
    uint32ToBeBytes(motorRunTime, _pg_data, &_pg_byteindex);

    // Number of recorded motor desync events
    // Range of desyncEvents is 0 to 4294967295.
    uint32ToBeBytes(desyncEvents, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_TelltaleValuesPacketID());

}// encodeESC_TelltaleValuesPacket

/*!
 * \brief Decode the ESC_TelltaleValues packet
 *
 * ESC telltale values
 * \param _pg_pkt points to the packet being decoded by this function
 * \param maxTemperature receives Maximum recorded internal temperature
 * \param maxFetTemperature receives Maximum recorded MOSFET temperature
 * \param maxMotorTemperature receives Maximum recorded motor temperature
 * \param maxRippleVoltage receives Maximum recorded battery voltage
 * \param maxBatteryCurrent receives Maximum recorded battery current
 * \param maxRegenCurrent receives Maximum recorded regen current
 * \param totalStarts receives Number of successful motor start events
 * \param failedStarts receives Number of failed motor start events
 * \param escRunTime receives ESC run time
 * \param motorRunTime receives Motor run time
 * \param desyncEvents receives Number of recorded motor desync events
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_TelltaleValuesPacket(const void* _pg_pkt, uint8_t* maxTemperature, uint8_t* maxFetTemperature, uint8_t* maxMotorTemperature, uint8_t* maxRippleVoltage, float* maxBatteryCurrent, float* maxRegenCurrent, uint16_t* totalStarts, uint16_t* failedStarts, uint32_t* escRunTime, uint32_t* motorRunTime, uint32_t* desyncEvents)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_TelltaleValuesPacketID())
        return 0;

    if(_pg_numbytes < getESC_TelltaleValuesMinDataLength())
        return 0;

    // this packet has default fields, make sure they are set
    (*maxRippleVoltage) = 0;
    (*maxBatteryCurrent) = 0;
    (*maxRegenCurrent) = 0;
    (*totalStarts) = 0;
    (*failedStarts) = 0;
    (*escRunTime) = 0;
    (*motorRunTime) = 0;
    (*desyncEvents) = 0;

    // Maximum recorded internal temperature
    // Range of maxTemperature is 0 to 255.
    (*maxTemperature) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Maximum recorded MOSFET temperature
    // Range of maxFetTemperature is 0 to 255.
    (*maxFetTemperature) = uint8FromBytes(_pg_data, &_pg_byteindex);

    // Maximum recorded motor temperature
    // Range of maxMotorTemperature is 0 to 255.
    (*maxMotorTemperature) = uint8FromBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 1 > _pg_numbytes)
        return 1;

    // Maximum recorded battery voltage
    // Range of maxRippleVoltage is 0 to 255.
    (*maxRippleVoltage) = uint8FromBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Maximum recorded battery current
    // Range of maxBatteryCurrent is -3276.7f to 3276.7f.
    (*maxBatteryCurrent) = float32ScaledFrom2SignedBeBytes(_pg_data, &_pg_byteindex, 1.0f/10.0f);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Maximum recorded regen current
    // Range of maxRegenCurrent is -3276.7f to 3276.7f.
    (*maxRegenCurrent) = float32ScaledFrom2SignedBeBytes(_pg_data, &_pg_byteindex, 1.0f/10.0f);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Number of successful motor start events
    // Range of totalStarts is 0 to 65535.
    (*totalStarts) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 2 > _pg_numbytes)
        return 1;

    // Number of failed motor start events
    // Range of failedStarts is 0 to 65535.
    (*failedStarts) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // ESC run time
    // Range of escRunTime is 0 to 4294967295.
    (*escRunTime) = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // Motor run time
    // Range of motorRunTime is 0 to 4294967295.
    (*motorRunTime) = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    if(_pg_byteindex + 4 > _pg_numbytes)
        return 1;

    // Number of recorded motor desync events
    // Range of desyncEvents is 0 to 4294967295.
    (*desyncEvents) = uint32FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_TelltaleValuesPacket

/*!
 * \brief Create the ESC_GitHash packet
 *
 * Git commit hash for the ESC firmware
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_GitHashPacketStructure(void* _pg_pkt, const ESC_GitHash_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // git commit hash
    stringToBytes(_pg_user->hash, _pg_data, &_pg_byteindex, 8, 0);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_GitHashPacketID());

}// encodeESC_GitHashPacketStructure

/*!
 * \brief Decode the ESC_GitHash packet
 *
 * Git commit hash for the ESC firmware
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_GitHashPacketStructure(const void* _pg_pkt, ESC_GitHash_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_GitHashPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_GitHashMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // git commit hash
    stringFromBytes(_pg_user->hash, _pg_data, &_pg_byteindex, 8, 0);

    return 1;

}// decodeESC_GitHashPacketStructure

/*!
 * \brief Create the ESC_GitHash packet
 *
 * Git commit hash for the ESC firmware
 * \param _pg_pkt points to the packet which will be created by this function
 * \param hash is git commit hash
 */
void encodeESC_GitHashPacket(void* _pg_pkt, const char hash[8])
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // git commit hash
    stringToBytes(hash, _pg_data, &_pg_byteindex, 8, 0);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_GitHashPacketID());

}// encodeESC_GitHashPacket

/*!
 * \brief Decode the ESC_GitHash packet
 *
 * Git commit hash for the ESC firmware
 * \param _pg_pkt points to the packet being decoded by this function
 * \param hash receives git commit hash
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_GitHashPacket(const void* _pg_pkt, char hash[8])
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_GitHashPacketID())
        return 0;

    if(_pg_numbytes < getESC_GitHashMinDataLength())
        return 0;

    // git commit hash
    stringFromBytes(hash, _pg_data, &_pg_byteindex, 8, 0);

    return 1;

}// decodeESC_GitHashPacket

/*!
 * \brief Create the ESC_PWMInputCalibration packet
 *
 * PWM input calibration
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodeESC_PWMInputCalibrationPacketStructure(void* _pg_pkt, const ESC_PWMInputCalibration_t* _pg_user)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Reserved bits for future use
    _pg_data[_pg_byteindex] = 0;

    // Enable median glitch filter for PWM input
    _pg_data[_pg_byteindex] |= (uint8_t)((_pg_user->glitchFilter == true) ? 1 : 0) << 4;

    // Protocol version (reserved for future use)
    _pg_byteindex += 1; // close bit field


    // PWM offset compensation value
    // Range of pwmOffset is -128 to 127.
    int8ToBytes(_pg_user->pwmOffset, _pg_data, &_pg_byteindex);

    // PWM value corresponding with 0% throttle
    // Range of inputMin is 0 to 65535.
    uint16ToBeBytes(_pg_user->inputMin, _pg_data, &_pg_byteindex);

    // PWM value corresponding with 1000% throttle
    // Range of inputMax is 0 to 65535.
    uint16ToBeBytes(_pg_user->inputMax, _pg_data, &_pg_byteindex);

    // PWM arming threshold
    // Range of armThreshold is 0 to 65535.
    uint16ToBeBytes(_pg_user->armThreshold, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_PWMInputCalibrationPacketID());

}// encodeESC_PWMInputCalibrationPacketStructure

/*!
 * \brief Decode the ESC_PWMInputCalibration packet
 *
 * PWM input calibration
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_PWMInputCalibrationPacketStructure(const void* _pg_pkt, ESC_PWMInputCalibration_t* _pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t* _pg_data;

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_PWMInputCalibrationPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);
    if(_pg_numbytes < getESC_PWMInputCalibrationMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getESCVelocityPacketDataConst(_pg_pkt);

    // Reserved bits for future use

    // Enable median glitch filter for PWM input
    _pg_user->glitchFilter = (((_pg_data[_pg_byteindex] >> 4) & 0x1)) ? true : false;

    // Protocol version (reserved for future use)
    // Range of protocol is 0 to 15.
    _pg_user->protocol = ((_pg_data[_pg_byteindex]) & 0xF);
    _pg_byteindex += 1; // close bit field

    // PWM offset compensation value
    // Range of pwmOffset is -128 to 127.
    _pg_user->pwmOffset = int8FromBytes(_pg_data, &_pg_byteindex);

    // PWM value corresponding with 0% throttle
    // Range of inputMin is 0 to 65535.
    _pg_user->inputMin = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // PWM value corresponding with 1000% throttle
    // Range of inputMax is 0 to 65535.
    _pg_user->inputMax = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // PWM arming threshold
    // Range of armThreshold is 0 to 65535.
    _pg_user->armThreshold = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_PWMInputCalibrationPacketStructure

/*!
 * \brief Create the ESC_PWMInputCalibration packet
 *
 * PWM input calibration
 * \param _pg_pkt points to the packet which will be created by this function
 * \param glitchFilter is Enable median glitch filter for PWM input
 * \param pwmOffset is PWM offset compensation value
 * \param inputMin is PWM value corresponding with 0% throttle
 * \param inputMax is PWM value corresponding with 1000% throttle
 * \param armThreshold is PWM arming threshold
 */
void encodeESC_PWMInputCalibrationPacket(void* _pg_pkt, bool glitchFilter, int8_t pwmOffset, uint16_t inputMin, uint16_t inputMax, uint16_t armThreshold)
{
    uint8_t* _pg_data = getESCVelocityPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    // Reserved bits for future use
    _pg_data[_pg_byteindex] = 0;

    // Enable median glitch filter for PWM input
    _pg_data[_pg_byteindex] |= (uint8_t)((glitchFilter == true) ? 1 : 0) << 4;

    // Protocol version (reserved for future use)
    _pg_byteindex += 1; // close bit field

    // PWM offset compensation value
    // Range of pwmOffset is -128 to 127.
    int8ToBytes(pwmOffset, _pg_data, &_pg_byteindex);

    // PWM value corresponding with 0% throttle
    // Range of inputMin is 0 to 65535.
    uint16ToBeBytes(inputMin, _pg_data, &_pg_byteindex);

    // PWM value corresponding with 1000% throttle
    // Range of inputMax is 0 to 65535.
    uint16ToBeBytes(inputMax, _pg_data, &_pg_byteindex);

    // PWM arming threshold
    // Range of armThreshold is 0 to 65535.
    uint16ToBeBytes(armThreshold, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishESCVelocityPacket(_pg_pkt, _pg_byteindex, getESC_PWMInputCalibrationPacketID());

}// encodeESC_PWMInputCalibrationPacket

/*!
 * \brief Decode the ESC_PWMInputCalibration packet
 *
 * PWM input calibration
 * \param _pg_pkt points to the packet being decoded by this function
 * \param glitchFilter receives Enable median glitch filter for PWM input
 * \param protocol receives Protocol version (reserved for future use)
 * \param pwmOffset receives PWM offset compensation value
 * \param inputMin receives PWM value corresponding with 0% throttle
 * \param inputMax receives PWM value corresponding with 1000% throttle
 * \param armThreshold receives PWM arming threshold
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodeESC_PWMInputCalibrationPacket(const void* _pg_pkt, bool* glitchFilter, uint8_t* protocol, int8_t* pwmOffset, uint16_t* inputMin, uint16_t* inputMax, uint16_t* armThreshold)
{
    int _pg_byteindex = 0;
    const uint8_t* _pg_data = getESCVelocityPacketDataConst(_pg_pkt);
    int _pg_numbytes = getESCVelocityPacketSize(_pg_pkt);

    // Verify the packet identifier
    if(getESCVelocityPacketID(_pg_pkt) != getESC_PWMInputCalibrationPacketID())
        return 0;

    if(_pg_numbytes < getESC_PWMInputCalibrationMinDataLength())
        return 0;

    // Reserved bits for future use

    // Enable median glitch filter for PWM input
    (*glitchFilter) = (((_pg_data[_pg_byteindex] >> 4) & 0x1)) ? true : false;

    // Protocol version (reserved for future use)
    // Range of protocol is 0 to 15.
    (*protocol) = ((_pg_data[_pg_byteindex]) & 0xF);
    _pg_byteindex += 1; // close bit field

    // PWM offset compensation value
    // Range of pwmOffset is -128 to 127.
    (*pwmOffset) = int8FromBytes(_pg_data, &_pg_byteindex);

    // PWM value corresponding with 0% throttle
    // Range of inputMin is 0 to 65535.
    (*inputMin) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // PWM value corresponding with 1000% throttle
    // Range of inputMax is 0 to 65535.
    (*inputMax) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    // PWM arming threshold
    // Range of armThreshold is 0 to 65535.
    (*armThreshold) = uint16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

}// decodeESC_PWMInputCalibrationPacket
// end of ESCPackets.c
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           