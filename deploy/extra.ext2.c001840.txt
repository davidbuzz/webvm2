_read_tt__LensProjection(soap*, tt__LensProjection*) deserialize from a stream
/// - int soap_write_tt__LensProjection(soap*, tt__LensProjection*) serialize to a stream
/// - tt__LensProjection* tt__LensProjection::soap_dup(soap*) returns deep copy of tt__LensProjection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensProjection::soap_del() deep deletes tt__LensProjection data members, use only after tt__LensProjection::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensProjection::soap_type() returns SOAP_TYPE_tt__LensProjection or derived type identifier
class tt__LensProjection
{ public:
/// <PRE><BLOCKQUOTE>
///   Angle of incidence.
/// </BLOCKQUOTE></PRE>
///
/// Element "Angle" of type xs:float.
    float                                Angle                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Mapping radius as a consequence of the emergent angle.
/// </BLOCKQUOTE></PRE>
///
/// Element "Radius" of type xs:float.
    float                                Radius                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional ray absorption at the given angle due to vignetting. A value of one means no absorption.
/// </BLOCKQUOTE></PRE>
///
/// Element "Transmittance" of type xs:float.
    float*                               Transmittance                  0;	///< Optional element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":LensOffset is a complexType.
///
/// @note class tt__LensOffset operations:
/// - tt__LensOffset* soap_new_tt__LensOffset(soap*) allocate and default initialize
/// - tt__LensOffset* soap_new_tt__LensOffset(soap*, int num) allocate and default initialize an array
/// - tt__LensOffset* soap_new_req_tt__LensOffset(soap*, ...) allocate, set required members
/// - tt__LensOffset* soap_new_set_tt__LensOffset(soap*, ...) allocate, set all public members
/// - tt__LensOffset::soap_default(soap*) default initialize members
/// - int soap_read_tt__LensOffset(soap*, tt__LensOffset*) deserialize from a stream
/// - int soap_write_tt__LensOffset(soap*, tt__LensOffset*) serialize to a stream
/// - tt__LensOffset* tt__LensOffset::soap_dup(soap*) returns deep copy of tt__LensOffset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensOffset::soap_del() deep deletes tt__LensOffset data members, use only after tt__LensOffset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensOffset::soap_type() returns SOAP_TYPE_tt__LensOffset or derived type identifier
class tt__LensOffset
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional horizontal offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional vertical offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":LensDescription is a complexType.
///
/// @note class tt__LensDescription operations:
/// - tt__LensDescription* soap_new_tt__LensDescription(soap*) allocate and default initialize
/// - tt__LensDescription* soap_new_tt__LensDescription(soap*, int num) allocate and default initialize an array
/// - tt__LensDescription* soap_new_req_tt__LensDescription(soap*, ...) allocate, set required members
/// - tt__LensDescription* soap_new_set_tt__LensDescription(soap*, ...) allocate, set all public members
/// - tt__LensDescription::soap_default(soap*) default initialize members
/// - int soap_read_tt__LensDescription(soap*, tt__LensDescription*) deserialize from a stream
/// - int soap_write_tt__LensDescription(soap*, tt__LensDescription*) serialize to a stream
/// - tt__LensDescription* tt__LensDescription::soap_dup(soap*) returns deep copy of tt__LensDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LensDescription::soap_del() deep deletes tt__LensDescription data members, use only after tt__LensDescription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LensDescription::soap_type() returns SOAP_TYPE_tt__LensDescription or derived type identifier
class tt__LensDescription
{ public:
/// <PRE><BLOCKQUOTE>
///   Offset of the lens center to the imager center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
///
/// Element "Offset" of type "http://www.onvif.org/ver10/schema":LensOffset.
    tt__LensOffset*                      Offset                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Radial description of the projection characteristics. The resulting curve is defined by the B-Spline interpolation over the given elements. The element for Radius zero shall not be provided. The projection points shall be ordered with ascending Radius. Items outside the last projection Radius shall be assumed to be invisible (black).
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__LensProjection* is 1..unbounded.
  $ int                                  __sizeProjection               1;
/// Pointer to array tt__LensProjection* of size 1..unbounded.
    tt__LensProjection*                 *Projection                     1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Compensation of the x coordinate needed for the ONVIF normalized coordinate system.
/// </BLOCKQUOTE></PRE>
///
/// Element "XFactor" of type xs:float.
    float                                XFactor                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Optional focal length of the optical system.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FocalLength" of type xs:float.
  @ float*                               FocalLength                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptions operations:
/// - tt__VideoSourceConfigurationOptions* soap_new_tt__VideoSourceConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptions* soap_new_tt__VideoSourceConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptions* soap_new_req_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptions* soap_new_set_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptions(soap*, tt__VideoSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptions(soap*, tt__VideoSourceConfigurationOptions*) serialize to a stream
/// - tt__VideoSourceConfigurationOptions* tt__VideoSourceConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptions::soap_del() deep deletes tt__VideoSourceConfigurationOptions data members, use only after tt__VideoSourceConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptions or derived type identifier
class tt__VideoSourceConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range for the capturing area.
///   Device that does not support cropped streaming shall express BoundsRange option as mentioned below
///   BoundsRange->XRange and BoundsRange->YRange with same Min/Max values HeightRange and WidthRange Min/Max values same as VideoSource Height and Width Limits.
/// </BLOCKQUOTE></PRE>
///
/// Element "BoundsRange" of type "http://www.onvif.org/ver10/schema":IntRectangleRange.
    tt__IntRectangleRange*               BoundsRange                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of physical inputs.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__ReferenceToken is 1..unbounded.
  $ int                                  __sizeVideoSourceTokensAvailable 1;
/// Pointer to array tt__ReferenceToken of size 1..unbounded.
    tt__ReferenceToken                  *VideoSourceTokensAvailable     1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension.
    tt__VideoSourceConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaximumNumberOfProfiles" of type xs:int.
  @ int*                                 MaximumNumberOfProfiles        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptionsExtension operations:
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_req_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptionsExtension* soap_new_set_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension(soap*, tt__VideoSourceConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension(soap*, tt__VideoSourceConfigurationOptionsExtension*) serialize to a stream
/// - tt__VideoSourceConfigurationOptionsExtension* tt__VideoSourceConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptionsExtension::soap_del() deep deletes tt__VideoSourceConfigurationOptionsExtension data members, use only after tt__VideoSourceConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension or derived type identifier
class tt__VideoSourceConfigurationOptionsExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Rotation feature.
/// </BLOCKQUOTE></PRE>
///
/// Element "Rotate" of type "http://www.onvif.org/ver10/schema":RotateOptions.
    tt__RotateOptions*                   Rotate                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2.
    tt__VideoSourceConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2 is a complexType.
///
/// @note class tt__VideoSourceConfigurationOptionsExtension2 operations:
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*) allocate and default initialize
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__VideoSourceConfigurationOptionsExtension2* soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoSourceConfigurationOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap*, tt__VideoSourceConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension2(soap*, tt__VideoSourceConfigurationOptionsExtension2*) serialize to a stream
/// - tt__VideoSourceConfigurationOptionsExtension2* tt__VideoSourceConfigurationOptionsExtension2::soap_dup(soap*) returns deep copy of tt__VideoSourceConfigurationOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoSourceConfigurationOptionsExtension2::soap_del() deep deletes tt__VideoSourceConfigurationOptionsExtension2 data members, use only after tt__VideoSourceConfigurationOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoSourceConfigurationOptionsExtension2::soap_type() returns SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 or derived type identifier
class tt__VideoSourceConfigurationOptionsExtension2
{ public:
/// <PRE><BLOCKQUOTE>
///   Scene orientation modes supported by the device for this configuration.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__SceneOrientationMode is 0..unbounded.
  $ int                                  __sizeSceneOrientationMode     0;
/// Pointer to array enum tt__SceneOrientationMode of size 0..unbounded.
    enum tt__SceneOrientationMode       *SceneOrientationMode           0;	///< Multiple elements.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptions is a complexType.
///
/// @note class tt__RotateOptions operations:
/// - tt__RotateOptions* soap_new_tt__RotateOptions(soap*) allocate and default initialize
/// - tt__RotateOptions* soap_new_tt__RotateOptions(soap*, int num) allocate and default initialize an array
/// - tt__RotateOptions* soap_new_req_tt__RotateOptions(soap*, ...) allocate, set required members
/// - tt__RotateOptions* soap_new_set_tt__RotateOptions(soap*, ...) allocate, set all public members
/// - tt__RotateOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__RotateOptions(soap*, tt__RotateOptions*) deserialize from a stream
/// - int soap_write_tt__RotateOptions(soap*, tt__RotateOptions*) serialize to a stream
/// - tt__RotateOptions* tt__RotateOptions::soap_dup(soap*) returns deep copy of tt__RotateOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RotateOptions::soap_del() deep deletes tt__RotateOptions data members, use only after tt__RotateOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RotateOptions::soap_type() returns SOAP_TYPE_tt__RotateOptions or derived type identifier
class tt__RotateOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of Rotate mode parameter.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__RotateMode is 1..unbounded.
  $ int                                  __sizeMode                     1;
/// Pointer to array enum tt__RotateMode of size 1..unbounded.
    enum tt__RotateMode                 *Mode                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported degree value for rotation.
/// </BLOCKQUOTE></PRE>
///
/// Element "DegreeList" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        DegreeList                     0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RotateOptionsExtension.
    tt__RotateOptionsExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   After setting the rotation, if a device starts to reboot this value is true.
///   If a device can handle rotation setting without rebooting this value is false.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Reboot" of type xs:boolean.
  @ bool*                                Reboot                         0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptionsExtension is a complexType.
///
/// @note class tt__RotateOptionsExtension operations:
/// - tt__RotateOptionsExtension* soap_new_tt__RotateOptionsExtension(soap*) allocate and default initialize
/// - tt__RotateOptionsExtension* soap_new_tt__RotateOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__RotateOptionsExtension* soap_new_req_tt__RotateOptionsExtension(soap*, ...) allocate, set required members
/// - tt__RotateOptionsExtension* soap_new_set_tt__RotateOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__RotateOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RotateOptionsExtension(soap*, tt__RotateOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__RotateOptionsExtension(soap*, tt__RotateOptionsExtension*) serialize to a stream
/// - tt__RotateOptionsExtension* tt__RotateOptionsExtension::soap_dup(soap*) returns deep copy of tt__RotateOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RotateOptionsExtension::soap_del() deep deletes tt__RotateOptionsExtension data members, use only after tt__RotateOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RotateOptionsExtension::soap_type() returns SOAP_TYPE_tt__RotateOptionsExtension or derived type identifier
class tt__RotateOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientation is a complexType.
///
/// @note class tt__SceneOrientation operations:
/// - tt__SceneOrientation* soap_new_tt__SceneOrientation(soap*) allocate and default initialize
/// - tt__SceneOrientation* soap_new_tt__SceneOrientation(soap*, int num) allocate and default initialize an array
/// - tt__SceneOrientation* soap_new_req_tt__SceneOrientation(soap*, ...) allocate, set required members
/// - tt__SceneOrientation* soap_new_set_tt__SceneOrientation(soap*, ...) allocate, set all public members
/// - tt__SceneOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__SceneOrientation(soap*, tt__SceneOrientation*) deserialize from a stream
/// - int soap_write_tt__SceneOrientation(soap*, tt__SceneOrientation*) serialize to a stream
/// - tt__SceneOrientation* tt__SceneOrientation::soap_dup(soap*) returns deep copy of tt__SceneOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SceneOrientation::soap_del() deep deletes tt__SceneOrientation data members, use only after tt__SceneOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SceneOrientation::soap_type() returns SOAP_TYPE_tt__SceneOrientation or derived type identifier
class tt__SceneOrientation
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to assign the way the camera determines the scene orientation.
/// </BLOCKQUOTE></PRE>
///
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":SceneOrientationMode.
    enum tt__SceneOrientationMode        Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Assigned or determined scene orientation based on the Mode. When assigning the Mode to AUTO, this field is optional and will be ignored by the device. When assigning the Mode to MANUAL, this field is required and the device will return an InvalidArgs fault if missing.
/// </BLOCKQUOTE></PRE>
///
/// Element "Orientation" of type xs:string.
    char*                                Orientation                    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoResolution is a complexType.
///
/// @note class tt__VideoResolution operations:
/// - tt__VideoResolution* soap_new_tt__VideoResolution(soap*) allocate and default initialize
/// - tt__VideoResolution* soap_new_tt__VideoResolution(soap*, int num) allocate and default initialize an array
/// - tt__VideoResolution* soap_new_req_tt__VideoResolution(soap*, ...) allocate, set required members
/// - tt__VideoResolution* soap_new_set_tt__VideoResolution(soap*, ...) allocate, set all public members
/// - tt__VideoResolution::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoResolution(soap*, tt__VideoResolution*) deserialize from a stream
/// - int soap_write_tt__VideoResolution(soap*, tt__VideoResolution*) serialize to a stream
/// - tt__VideoResolution* tt__VideoResolution::soap_dup(soap*) returns deep copy of tt__VideoResolution, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoResolution::soap_del() deep deletes tt__VideoResolution data members, use only after tt__VideoResolution::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoResolution::soap_type() returns SOAP_TYPE_tt__VideoResolution or derived type identifier
class tt__VideoResolution
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of the columns of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Width" of type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of the lines of the Video image.
/// </BLOCKQUOTE></PRE>
///
/// Element "Height" of type xs:int.
    int                                  Height                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoRateControl is a complexType.
///
/// @note class tt__VideoRateControl operations:
/// - tt__VideoRateControl* soap_new_tt__VideoRateControl(soap*) allocate and default initialize
/// - tt__VideoRateControl* soap_new_tt__VideoRateControl(soap*, int num) allocate and default initialize an array
/// - tt__VideoRateControl* soap_new_req_tt__VideoRateControl(soap*, ...) allocate, set required members
/// - tt__VideoRateControl* soap_new_set_tt__VideoRateControl(soap*, ...) allocate, set all public members
/// - tt__VideoRateControl::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoRateControl(soap*, tt__VideoRateControl*) deserialize from a stream
/// - int soap_write_tt__VideoRateControl(soap*, tt__VideoRateControl*) serialize to a stream
/// - tt__VideoRateControl* tt__VideoRateControl::soap_dup(soap*) returns deep copy of tt__VideoRateControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoRateControl::soap_del() deep deletes tt__VideoRateControl data members, use only after tt__VideoRateControl::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoRateControl::soap_type() returns SOAP_TYPE_tt__VideoRateControl or derived type identifier
class tt__VideoRateControl
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum output framerate in fps. If an EncodingInterval is provided the resulting encoded framerate will be reduced by the given factor.
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateLimit" of type xs:int.
    int                                  FrameRateLimit                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Interval at which images are encoded and transmitted. (A value of 1 means that every frame is encoded, a value of 2 means that every 2nd frame is encoded ...)
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingInterval" of type xs:int.
    int                                  EncodingInterval               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the maximum output bitrate in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateLimit" of type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Configuration is a complexType.
///
/// @note class tt__Mpeg4Configuration operations:
/// - tt__Mpeg4Configuration* soap_new_tt__Mpeg4Configuration(soap*) allocate and default initialize
/// - tt__Mpeg4Configuration* soap_new_tt__Mpeg4Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4Configuration* soap_new_req_tt__Mpeg4Configuration(soap*, ...) allocate, set required members
/// - tt__Mpeg4Configuration* soap_new_set_tt__Mpeg4Configuration(soap*, ...) allocate, set all public members
/// - tt__Mpeg4Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4Configuration(soap*, tt__Mpeg4Configuration*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Configuration(soap*, tt__Mpeg4Configuration*) serialize to a stream
/// - tt__Mpeg4Configuration* tt__Mpeg4Configuration::soap_dup(soap*) returns deep copy of tt__Mpeg4Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4Configuration::soap_del() deep deletes tt__Mpeg4Configuration data members, use only after tt__Mpeg4Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4Configuration::soap_type() returns SOAP_TYPE_tt__Mpeg4Configuration or derived type identifier
class tt__Mpeg4Configuration
{ public:
/// <PRE><BLOCKQUOTE>
///   Determines the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLength" of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the Mpeg4 profile, either simple profile (SP) or advanced simple profile (ASP)
/// </BLOCKQUOTE></PRE>
///
/// Element "Mpeg4Profile" of type "http://www.onvif.org/ver10/schema":Mpeg4Profile.
    enum tt__Mpeg4Profile                Mpeg4Profile                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":H264Configuration is a complexType.
///
/// @note class tt__H264Configuration operations:
/// - tt__H264Configuration* soap_new_tt__H264Configuration(soap*) allocate and default initialize
/// - tt__H264Configuration* soap_new_tt__H264Configuration(soap*, int num) allocate and default initialize an array
/// - tt__H264Configuration* soap_new_req_tt__H264Configuration(soap*, ...) allocate, set required members
/// - tt__H264Configuration* soap_new_set_tt__H264Configuration(soap*, ...) allocate, set all public members
/// - tt__H264Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264Configuration(soap*, tt__H264Configuration*) deserialize from a stream
/// - int soap_write_tt__H264Configuration(soap*, tt__H264Configuration*) serialize to a stream
/// - tt__H264Configuration* tt__H264Configuration::soap_dup(soap*) returns deep copy of tt__H264Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264Configuration::soap_del() deep deletes tt__H264Configuration data members, use only after tt__H264Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264Configuration::soap_type() returns SOAP_TYPE_tt__H264Configuration or derived type identifier
class tt__H264Configuration
{ public:
/// <PRE><BLOCKQUOTE>
///   Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLength" of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the H.264 profile, either baseline, main, extended or high
/// </BLOCKQUOTE></PRE>
///
/// Element "H264Profile" of type "http://www.onvif.org/ver10/schema":H264Profile.
    enum tt__H264Profile                 H264Profile                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderConfigurationOptions is a complexType.
///
/// @note class tt__VideoEncoderConfigurationOptions operations:
/// - tt__VideoEncoderConfigurationOptions* soap_new_tt__VideoEncoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__VideoEncoderConfigurationOptions* soap_new_tt__VideoEncoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderConfigurationOptions* soap_new_req_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__VideoEncoderConfigurationOptions* soap_new_set_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderConfigurationOptions(soap*, tt__VideoEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderConfigurationOptions(soap*, tt__VideoEncoderConfigurationOptions*) serialize to a stream
/// - tt__VideoEncoderConfigurationOptions* tt__VideoEncoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__VideoEncoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderConfigurationOptions::soap_del() deep deletes tt__VideoEncoderConfigurationOptions data members, use only after tt__VideoEncoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__VideoEncoderConfigurationOptions or derived type identifier
class tt__VideoEncoderConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Range of the quality values. A high value means higher quality.
/// </BLOCKQUOTE></PRE>
///
/// Element "QualityRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        QualityRange                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "JPEG" of type "http://www.onvif.org/ver10/schema":JpegOptions.
    tt__JpegOptions*                     JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "MPEG4" of type "http://www.onvif.org/ver10/schema":Mpeg4Options.
    tt__Mpeg4Options*                    MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
///
/// Element "H264" of type "http://www.onvif.org/ver10/schema":H264Options.
    tt__H264Options*                     H264                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension.
    tt__VideoEncoderOptionsExtension*    Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for the GuaranteedFrameRate attribute on the VideoEncoderConfiguration element.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GuaranteedFrameRateSupported" of type xs:boolean.
  @ bool*                                GuaranteedFrameRateSupported   0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension is a complexType.
///
/// @note class tt__VideoEncoderOptionsExtension operations:
/// - tt__VideoEncoderOptionsExtension* soap_new_tt__VideoEncoderOptionsExtension(soap*) allocate and default initialize
/// - tt__VideoEncoderOptionsExtension* soap_new_tt__VideoEncoderOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderOptionsExtension* soap_new_req_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set required members
/// - tt__VideoEncoderOptionsExtension* soap_new_set_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderOptionsExtension(soap*, tt__VideoEncoderOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension(soap*, tt__VideoEncoderOptionsExtension*) serialize to a stream
/// - tt__VideoEncoderOptionsExtension* tt__VideoEncoderOptionsExtension::soap_dup(soap*) returns deep copy of tt__VideoEncoderOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderOptionsExtension::soap_del() deep deletes tt__VideoEncoderOptionsExtension data members, use only after tt__VideoEncoderOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderOptionsExtension::soap_type() returns SOAP_TYPE_tt__VideoEncoderOptionsExtension or derived type identifier
class tt__VideoEncoderOptionsExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "JPEG" of type "http://www.onvif.org/ver10/schema":JpegOptions2.
    tt__JpegOptions2*                    JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "MPEG4" of type "http://www.onvif.org/ver10/schema":Mpeg4Options2.
    tt__Mpeg4Options2*                   MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
///
/// Element "H264" of type "http://www.onvif.org/ver10/schema":H264Options2.
    tt__H264Options2*                    H264                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2.
    tt__VideoEncoderOptionsExtension2*   Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2 is a complexType.
///
/// @note class tt__VideoEncoderOptionsExtension2 operations:
/// - tt__VideoEncoderOptionsExtension2* soap_new_tt__VideoEncoderOptionsExtension2(soap*) allocate and default initialize
/// - tt__VideoEncoderOptionsExtension2* soap_new_tt__VideoEncoderOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__VideoEncoderOptionsExtension2* soap_new_req_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__VideoEncoderOptionsExtension2* soap_new_set_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__VideoEncoderOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__VideoEncoderOptionsExtension2(soap*, tt__VideoEncoderOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension2(soap*, tt__VideoEncoderOptionsExtension2*) serialize to a stream
/// - tt__VideoEncoderOptionsExtension2* tt__VideoEncoderOptionsExtension2::soap_dup(soap*) returns deep copy of tt__VideoEncoderOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__VideoEncoderOptionsExtension2::soap_del() deep deletes tt__VideoEncoderOptionsExtension2 data members, use only after tt__VideoEncoderOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__VideoEncoderOptionsExtension2::soap_type() returns SOAP_TYPE_tt__VideoEncoderOptionsExtension2 or derived type identifier
class tt__VideoEncoderOptionsExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":JpegOptions is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":JpegOptions2 as tt__JpegOptions2
///
/// @note class tt__JpegOptions operations:
/// - tt__JpegOptions* soap_new_tt__JpegOptions(soap*) allocate and default initialize
/// - tt__JpegOptions* soap_new_tt__JpegOptions(soap*, int num) allocate and default initialize an array
/// - tt__JpegOptions* soap_new_req_tt__JpegOptions(soap*, ...) allocate, set required members
/// - tt__JpegOptions* soap_new_set_tt__JpegOptions(soap*, ...) allocate, set all public members
/// - tt__JpegOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__JpegOptions(soap*, tt__JpegOptions*) deserialize from a stream
/// - int soap_write_tt__JpegOptions(soap*, tt__JpegOptions*) serialize to a stream
/// - tt__JpegOptions* tt__JpegOptions::soap_dup(soap*) returns deep copy of tt__JpegOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__JpegOptions::soap_del() deep deletes tt__JpegOptions data members, use only after tt__JpegOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__JpegOptions::soap_type() returns SOAP_TYPE_tt__JpegOptions or derived type identifier
class tt__JpegOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__VideoResolution* is 1..unbounded.
  $ int                                  __sizeResolutionsAvailable     1;
/// Pointer to array tt__VideoResolution* of size 1..unbounded.
    tt__VideoResolution*                *ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Options is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":Mpeg4Options2 as tt__Mpeg4Options2
///
/// @note class tt__Mpeg4Options operations:
/// - tt__Mpeg4Options* soap_new_tt__Mpeg4Options(soap*) allocate and default initialize
/// - tt__Mpeg4Options* soap_new_tt__Mpeg4Options(soap*, int num) allocate and default initialize an array
/// - tt__Mpeg4Options* soap_new_req_tt__Mpeg4Options(soap*, ...) allocate, set required members
/// - tt__Mpeg4Options* soap_new_set_tt__Mpeg4Options(soap*, ...) allocate, set all public members
/// - tt__Mpeg4Options::soap_default(soap*) default initialize members
/// - int soap_read_tt__Mpeg4Options(soap*, tt__Mpeg4Options*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Options(soap*, tt__Mpeg4Options*) serialize to a stream
/// - tt__Mpeg4Options* tt__Mpeg4Options::soap_dup(soap*) returns deep copy of tt__Mpeg4Options, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Mpeg4Options::soap_del() deep deletes tt__Mpeg4Options data members, use only after tt__Mpeg4Options::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Mpeg4Options::soap_type() returns SOAP_TYPE_tt__Mpeg4Options or derived type identifier
class tt__Mpeg4Options
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__VideoResolution* is 1..unbounded.
  $ int                                  __sizeResolutionsAvailable     1;
/// Pointer to array tt__VideoResolution* of size 1..unbounded.
    tt__VideoResolution*                *ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported MPEG-4 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__Mpeg4Profile is 1..unbounded.
  $ int                                  __sizeMpeg4ProfilesSupported   1;
/// Pointer to array enum tt__Mpeg4Profile of size 1..unbounded.
    enum tt__Mpeg4Profile               *Mpeg4ProfilesSupported         1;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":H264Options is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":H264Options2 as tt__H264Options2
///
/// @note class tt__H264Options operations:
/// - tt__H264Options* soap_new_tt__H264Options(soap*) allocate and default initialize
/// - tt__H264Options* soap_new_tt__H264Options(soap*, int num) allocate and default initialize an array
/// - tt__H264Options* soap_new_req_tt__H264Options(soap*, ...) allocate, set required members
/// - tt__H264Options* soap_new_set_tt__H264Options(soap*, ...) allocate, set all public members
/// - tt__H264Options::soap_default(soap*) default initialize members
/// - int soap_read_tt__H264Options(soap*, tt__H264Options*) deserialize from a stream
/// - int soap_write_tt__H264Options(soap*, tt__H264Options*) serialize to a stream
/// - tt__H264Options* tt__H264Options::soap_dup(soap*) returns deep copy of tt__H264Options, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__H264Options::soap_del() deep deletes tt__H264Options data members, use only after tt__H264Options::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__H264Options::soap_type() returns SOAP_TYPE_tt__H264Options or derived type identifier
class tt__H264Options
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__VideoResolution* is 1..unbounded.
  $ int                                  __sizeResolutionsAvailable     1;
/// Pointer to array tt__VideoResolution* of size 1..unbounded.
    tt__VideoResolution*                *ResolutionsAvailable           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
///
/// Element "GovLengthRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
///
/// Element "FrameRateRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
///
/// Element "EncodingIntervalRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 profiles.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__H264Profile is 1..unbounded.
  $ int                                  __sizeH264ProfilesSupported    1;
/// Pointer to array enum tt__H264Profile of size 1..unbounded.
    enum tt__H264Profile                *H264ProfilesSupported          1;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoResolution2 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoRateControl2 is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoEncoder2ConfigurationOptions is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions is a complexType.
///
/// @note class tt__AudioSourceConfigurationOptions operations:
/// - tt__AudioSourceConfigurationOptions* soap_new_tt__AudioSourceConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioSourceConfigurationOptions* soap_new_tt__AudioSourceConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioSourceConfigurationOptions* soap_new_req_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioSourceConfigurationOptions* soap_new_set_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioSourceConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSourceConfigurationOptions(soap*, tt__AudioSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioSourceConfigurationOptions(soap*, tt__AudioSourceConfigurationOptions*) serialize to a stream
/// - tt__AudioSourceConfigurationOptions* tt__AudioSourceConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioSourceConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSourceConfigurationOptions::soap_del() deep deletes tt__AudioSourceConfigurationOptions data members, use only after tt__AudioSourceConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSourceConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioSourceConfigurationOptions or derived type identifier
class tt__AudioSourceConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the audio source the configuration can be used for.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__ReferenceToken is 1..unbounded.
  $ int                                  __sizeInputTokensAvailable     1;
/// Pointer to array tt__ReferenceToken of size 1..unbounded.
    tt__ReferenceToken                  *InputTokensAvailable           1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension.
    tt__AudioSourceOptionsExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension is a complexType.
///
/// @note class tt__AudioSourceOptionsExtension operations:
/// - tt__AudioSourceOptionsExtension* soap_new_tt__AudioSourceOptionsExtension(soap*) allocate and default initialize
/// - tt__AudioSourceOptionsExtension* soap_new_tt__AudioSourceOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__AudioSourceOptionsExtension* soap_new_req_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set required members
/// - tt__AudioSourceOptionsExtension* soap_new_set_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__AudioSourceOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioSourceOptionsExtension(soap*, tt__AudioSourceOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioSourceOptionsExtension(soap*, tt__AudioSourceOptionsExtension*) serialize to a stream
/// - tt__AudioSourceOptionsExtension* tt__AudioSourceOptionsExtension::soap_dup(soap*) returns deep copy of tt__AudioSourceOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioSourceOptionsExtension::soap_del() deep deletes tt__AudioSourceOptionsExtension data members, use only after tt__AudioSourceOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioSourceOptionsExtension::soap_type() returns SOAP_TYPE_tt__AudioSourceOptionsExtension or derived type identifier
class tt__AudioSourceOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions is a complexType.
///
/// @note class tt__AudioEncoderConfigurationOptions operations:
/// - tt__AudioEncoderConfigurationOptions* soap_new_tt__AudioEncoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioEncoderConfigurationOptions* soap_new_tt__AudioEncoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoderConfigurationOptions* soap_new_req_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioEncoderConfigurationOptions* soap_new_set_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioEncoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoderConfigurationOptions(soap*, tt__AudioEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOptions(soap*, tt__AudioEncoderConfigurationOptions*) serialize to a stream
/// - tt__AudioEncoderConfigurationOptions* tt__AudioEncoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioEncoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoderConfigurationOptions::soap_del() deep deletes tt__AudioEncoderConfigurationOptions data members, use only after tt__AudioEncoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioEncoderConfigurationOptions or derived type identifier
class tt__AudioEncoderConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   list of supported AudioEncoderConfigurations
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__AudioEncoderConfigurationOption* is 0..unbounded.
  $ int                                  __sizeOptions                  0;
/// Pointer to array tt__AudioEncoderConfigurationOption* of size 0..unbounded.
    tt__AudioEncoderConfigurationOption* *Options                        0;	///< Multiple elements.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOption is a complexType.
///
/// @note class tt__AudioEncoderConfigurationOption operations:
/// - tt__AudioEncoderConfigurationOption* soap_new_tt__AudioEncoderConfigurationOption(soap*) allocate and default initialize
/// - tt__AudioEncoderConfigurationOption* soap_new_tt__AudioEncoderConfigurationOption(soap*, int num) allocate and default initialize an array
/// - tt__AudioEncoderConfigurationOption* soap_new_req_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set required members
/// - tt__AudioEncoderConfigurationOption* soap_new_set_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set all public members
/// - tt__AudioEncoderConfigurationOption::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioEncoderConfigurationOption(soap*, tt__AudioEncoderConfigurationOption*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOption(soap*, tt__AudioEncoderConfigurationOption*) serialize to a stream
/// - tt__AudioEncoderConfigurationOption* tt__AudioEncoderConfigurationOption::soap_dup(soap*) returns deep copy of tt__AudioEncoderConfigurationOption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioEncoderConfigurationOption::soap_del() deep deletes tt__AudioEncoderConfigurationOption data members, use only after tt__AudioEncoderConfigurationOption::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioEncoderConfigurationOption::soap_type() returns SOAP_TYPE_tt__AudioEncoderConfigurationOption or derived type identifier
class tt__AudioEncoderConfigurationOption
{ public:
/// <PRE><BLOCKQUOTE>
///   The enoding used for audio data (either G.711, G.726 or AAC)
/// </BLOCKQUOTE></PRE>
///
/// Element "Encoding" of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum tt__AudioEncoding               Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "BitrateList" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        BitrateList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported Sample Rates in kHz for the specified Encoding
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateList" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateList                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":AudioEncoder2ConfigurationOptions is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationExtension is a complexType.
///
/// @note class tt__MetadataConfigurationExtension operations:
/// - tt__MetadataConfigurationExtension* soap_new_tt__MetadataConfigurationExtension(soap*) allocate and default initialize
/// - tt__MetadataConfigurationExtension* soap_new_tt__MetadataConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationExtension* soap_new_req_tt__MetadataConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationExtension* soap_new_set_tt__MetadataConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationExtension(soap*, tt__MetadataConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationExtension(soap*, tt__MetadataConfigurationExtension*) serialize to a stream
/// - tt__MetadataConfigurationExtension* tt__MetadataConfigurationExtension::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationExtension::soap_del() deep deletes tt__MetadataConfigurationExtension data members, use only after tt__MetadataConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationExtension::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationExtension or derived type identifier
class tt__MetadataConfigurationExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZFilter is a complexType.
///
/// @note class tt__PTZFilter operations:
/// - tt__PTZFilter* soap_new_tt__PTZFilter(soap*) allocate and default initialize
/// - tt__PTZFilter* soap_new_tt__PTZFilter(soap*, int num) allocate and default initialize an array
/// - tt__PTZFilter* soap_new_req_tt__PTZFilter(soap*, ...) allocate, set required members
/// - tt__PTZFilter* soap_new_set_tt__PTZFilter(soap*, ...) allocate, set all public members
/// - tt__PTZFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZFilter(soap*, tt__PTZFilter*) deserialize from a stream
/// - int soap_write_tt__PTZFilter(soap*, tt__PTZFilter*) serialize to a stream
/// - tt__PTZFilter* tt__PTZFilter::soap_dup(soap*) returns deep copy of tt__PTZFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZFilter::soap_del() deep deletes tt__PTZFilter data members, use only after tt__PTZFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZFilter::soap_type() returns SOAP_TYPE_tt__PTZFilter or derived type identifier
class tt__PTZFilter
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ status (IDLE, MOVING or UNKNOWN)
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ position
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type xs:boolean.
    bool                                 Position                       1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EventSubscription is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Subcription handling in the same way as base notification subscription.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__EventSubscription operations:
/// - tt__EventSubscription* soap_new_tt__EventSubscription(soap*) allocate and default initialize
/// - tt__EventSubscription* soap_new_tt__EventSubscription(soap*, int num) allocate and default initialize an array
/// - tt__EventSubscription* soap_new_req_tt__EventSubscription(soap*, ...) allocate, set required members
/// - tt__EventSubscription* soap_new_set_tt__EventSubscription(soap*, ...) allocate, set all public members
/// - tt__EventSubscription::soap_default(soap*) default initialize members
/// - int soap_read_tt__EventSubscription(soap*, tt__EventSubscription*) deserialize from a stream
/// - int soap_write_tt__EventSubscription(soap*, tt__EventSubscription*) serialize to a stream
/// - tt__EventSubscription* tt__EventSubscription::soap_dup(soap*) returns deep copy of tt__EventSubscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EventSubscription::soap_del() deep deletes tt__EventSubscription data members, use only after tt__EventSubscription::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EventSubscription::soap_type() returns SOAP_TYPE_tt__EventSubscription or derived type identifier
class tt__EventSubscription
{ public:
/// Element "Filter" of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// @note class _tt__EventSubscription_SubscriptionPolicy operations:
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new__tt__EventSubscription_SubscriptionPolicy(soap*) allocate and default initialize
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new__tt__EventSubscription_SubscriptionPolicy(soap*, int num) allocate and default initialize an array
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new_req__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - _tt__EventSubscription_SubscriptionPolicy* soap_new_set__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - _tt__EventSubscription_SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read__tt__EventSubscription_SubscriptionPolicy(soap*, _tt__EventSubscription_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__tt__EventSubscription_SubscriptionPolicy(soap*, _tt__EventSubscription_SubscriptionPolicy*) serialize to a stream
/// - _tt__EventSubscription_SubscriptionPolicy* _tt__EventSubscription_SubscriptionPolicy::soap_dup(soap*) returns deep copy of _tt__EventSubscription_SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tt__EventSubscription_SubscriptionPolicy::soap_del() deep deletes _tt__EventSubscription_SubscriptionPolicy data members, use only after _tt__EventSubscription_SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tt__EventSubscription_SubscriptionPolicy::soap_type() returns SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy or derived type identifier
    class _tt__EventSubscription_SubscriptionPolicy
    { public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptions is a complexType.
///
/// @note class tt__MetadataConfigurationOptions operations:
/// - tt__MetadataConfigurationOptions* soap_new_tt__MetadataConfigurationOptions(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptions* soap_new_tt__MetadataConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptions* soap_new_req_tt__MetadataConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptions* soap_new_set_tt__MetadataConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptions(soap*, tt__MetadataConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptions(soap*, tt__MetadataConfigurationOptions*) serialize to a stream
/// - tt__MetadataConfigurationOptions* tt__MetadataConfigurationOptions::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptions::soap_del() deep deletes tt__MetadataConfigurationOptions data members, use only after tt__MetadataConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptions::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptions or derived type identifier
class tt__MetadataConfigurationOptions
{ public:
/// Element "PTZStatusFilterOptions" of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions.
    tt__PTZStatusFilterOptions*          PTZStatusFilterOptions         1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension.
    tt__MetadataConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the Geo Located positions of each target.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoLocation" of type xs:boolean.
  @ bool*                                GeoLocation                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   A device signalling support for content filtering shall support expressions with the provided expression size.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxContentFilterSize" of type xs:int.
  @ int*                                 MaxContentFilterSize           0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension is a complexType.
///
/// @note class tt__MetadataConfigurationOptionsExtension operations:
/// - tt__MetadataConfigurationOptionsExtension* soap_new_tt__MetadataConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptionsExtension* soap_new_tt__MetadataConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptionsExtension* soap_new_req_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptionsExtension* soap_new_set_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension(soap*, tt__MetadataConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension(soap*, tt__MetadataConfigurationOptionsExtension*) serialize to a stream
/// - tt__MetadataConfigurationOptionsExtension* tt__MetadataConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptionsExtension::soap_del() deep deletes tt__MetadataConfigurationOptionsExtension data members, use only after tt__MetadataConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptionsExtension or derived type identifier
class tt__MetadataConfigurationOptionsExtension
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported metadata compression type. Its options shall be chosen from tt:MetadataCompressionType.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of char* is 0..unbounded.
  $ int                                  __sizeCompressionType          0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *CompressionType                0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2.
    tt__MetadataConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2 is a complexType.
///
/// @note class tt__MetadataConfigurationOptionsExtension2 operations:
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_tt__MetadataConfigurationOptionsExtension2(soap*) allocate and default initialize
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_tt__MetadataConfigurationOptionsExtension2(soap*, int num) allocate and default initialize an array
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_req_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - tt__MetadataConfigurationOptionsExtension2* soap_new_set_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - tt__MetadataConfigurationOptionsExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension2(soap*, tt__MetadataConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension2(soap*, tt__MetadataConfigurationOptionsExtension2*) serialize to a stream
/// - tt__MetadataConfigurationOptionsExtension2* tt__MetadataConfigurationOptionsExtension2::soap_dup(soap*) returns deep copy of tt__MetadataConfigurationOptionsExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MetadataConfigurationOptionsExtension2::soap_del() deep deletes tt__MetadataConfigurationOptionsExtension2 data members, use only after tt__MetadataConfigurationOptionsExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MetadataConfigurationOptionsExtension2::soap_type() returns SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 or derived type identifier
class tt__MetadataConfigurationOptionsExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions is a complexType.
///
/// @note class tt__PTZStatusFilterOptions operations:
/// - tt__PTZStatusFilterOptions* soap_new_tt__PTZStatusFilterOptions(soap*) allocate and default initialize
/// - tt__PTZStatusFilterOptions* soap_new_tt__PTZStatusFilterOptions(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatusFilterOptions* soap_new_req_tt__PTZStatusFilterOptions(soap*, ...) allocate, set required members
/// - tt__PTZStatusFilterOptions* soap_new_set_tt__PTZStatusFilterOptions(soap*, ...) allocate, set all public members
/// - tt__PTZStatusFilterOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatusFilterOptions(soap*, tt__PTZStatusFilterOptions*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptions(soap*, tt__PTZStatusFilterOptions*) serialize to a stream
/// - tt__PTZStatusFilterOptions* tt__PTZStatusFilterOptions::soap_dup(soap*) returns deep copy of tt__PTZStatusFilterOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatusFilterOptions::soap_del() deep deletes tt__PTZStatusFilterOptions data members, use only after tt__PTZStatusFilterOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatusFilterOptions::soap_type() returns SOAP_TYPE_tt__PTZStatusFilterOptions or derived type identifier
class tt__PTZStatusFilterOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream pan or tilt status information.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltStatusSupported" of type xs:boolean.
    bool                                 PanTiltStatusSupported         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom status inforamtion.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomStatusSupported" of type xs:boolean.
    bool                                 ZoomStatusSupported            1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the pan or tilt position.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTiltPositionSupported" of type xs:boolean.
    bool*                                PanTiltPositionSupported       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom position information.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZoomPositionSupported" of type xs:boolean.
    bool*                                ZoomPositionSupported          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension.
    tt__PTZStatusFilterOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension is a complexType.
///
/// @note class tt__PTZStatusFilterOptionsExtension operations:
/// - tt__PTZStatusFilterOptionsExtension* soap_new_tt__PTZStatusFilterOptionsExtension(soap*) allocate and default initialize
/// - tt__PTZStatusFilterOptionsExtension* soap_new_tt__PTZStatusFilterOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatusFilterOptionsExtension* soap_new_req_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set required members
/// - tt__PTZStatusFilterOptionsExtension* soap_new_set_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__PTZStatusFilterOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatusFilterOptionsExtension(soap*, tt__PTZStatusFilterOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptionsExtension(soap*, tt__PTZStatusFilterOptionsExtension*) serialize to a stream
/// - tt__PTZStatusFilterOptionsExtension* tt__PTZStatusFilterOptionsExtension::soap_dup(soap*) returns deep copy of tt__PTZStatusFilterOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatusFilterOptionsExtension::soap_del() deep deletes tt__PTZStatusFilterOptionsExtension data members, use only after tt__PTZStatusFilterOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatusFilterOptionsExtension::soap_type() returns SOAP_TYPE_tt__PTZStatusFilterOptionsExtension or derived type identifier
class tt__PTZStatusFilterOptionsExtension
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoOutputExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoOutputConfigurationOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":H264DecOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":JpegDecOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":Mpeg4DecOptions is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions is a complexType.
///
/// @note class tt__AudioOutputConfigurationOptions operations:
/// - tt__AudioOutputConfigurationOptions* soap_new_tt__AudioOutputConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioOutputConfigurationOptions* soap_new_tt__AudioOutputConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioOutputConfigurationOptions* soap_new_req_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioOutputConfigurationOptions* soap_new_set_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioOutputConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioOutputConfigurationOptions(soap*, tt__AudioOutputConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioOutputConfigurationOptions(soap*, tt__AudioOutputConfigurationOptions*) serialize to a stream
/// - tt__AudioOutputConfigurationOptions* tt__AudioOutputConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioOutputConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioOutputConfigurationOptions::soap_del() deep deletes tt__AudioOutputConfigurationOptions data members, use only after tt__AudioOutputConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioOutputConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioOutputConfigurationOptions or derived type identifier
class tt__AudioOutputConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the physical Audio outputs (typically one).
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__ReferenceToken is 1..unbounded.
  $ int                                  __sizeOutputTokensAvailable    1;
/// Pointer to array tt__ReferenceToken of size 1..unbounded.
    tt__ReferenceToken                  *OutputTokensAvailable          1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   An <b>audio</b> channel MAY support different types of audio transmission. While for full duplex
///   operation no special handling is required, in half duplex operation the transmission direction
///   needs to be switched.
///   The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
///   direction is currently active. An NVC can switch between different modes by setting the
///   AudioOutputConfiguration.<br/>
///   The following modes for the Send-Primacy are defined:<ul>
///   <li>www.onvif.org/ver20/HalfDuplex/Server
///   The server is allowed to send audio data to the client. The client shall not send
///   audio data via the backchannel to the NVT in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Client
///   The client is allowed to send audio data via the backchannel to the server. The
///   NVT shall not send audio data to the client in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Auto
///   It is up to the device how to deal with sending and receiving audio data.</li>
///   </ul>
///   Acoustic echo cancellation is out of ONVIF scope.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of xsd__anyURI is 0..unbounded.
  $ int                                  __sizeSendPrimacyOptions       0;
/// Pointer to array xsd__anyURI of size 0..unbounded.
    xsd__anyURI                         *SendPrimacyOptions             0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Minimum and maximum level range supported for this Output.
/// </BLOCKQUOTE></PRE>
///
/// Element "OutputLevelRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        OutputLevelRange               1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions is a complexType.
///
/// @note class tt__AudioDecoderConfigurationOptions operations:
/// - tt__AudioDecoderConfigurationOptions* soap_new_tt__AudioDecoderConfigurationOptions(soap*) allocate and default initialize
/// - tt__AudioDecoderConfigurationOptions* soap_new_tt__AudioDecoderConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__AudioDecoderConfigurationOptions* soap_new_req_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__AudioDecoderConfigurationOptions* soap_new_set_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__AudioDecoderConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioDecoderConfigurationOptions(soap*, tt__AudioDecoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptions(soap*, tt__AudioDecoderConfigurationOptions*) serialize to a stream
/// - tt__AudioDecoderConfigurationOptions* tt__AudioDecoderConfigurationOptions::soap_dup(soap*) returns deep copy of tt__AudioDecoderConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioDecoderConfigurationOptions::soap_del() deep deletes tt__AudioDecoderConfigurationOptions data members, use only after tt__AudioDecoderConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioDecoderConfigurationOptions::soap_type() returns SOAP_TYPE_tt__AudioDecoderConfigurationOptions or derived type identifier
class tt__AudioDecoderConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode AAC encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "AACDecOptions" of type "http://www.onvif.org/ver10/schema":AACDecOptions.
    tt__AACDecOptions*                   AACDecOptions                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G711 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "G711DecOptions" of type "http://www.onvif.org/ver10/schema":G711DecOptions.
    tt__G711DecOptions*                  G711DecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G726 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
///
/// Element "G726DecOptions" of type "http://www.onvif.org/ver10/schema":G726DecOptions.
    tt__G726DecOptions*                  G726DecOptions                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension.
    tt__AudioDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":G711DecOptions is a complexType.
///
/// @note class tt__G711DecOptions operations:
/// - tt__G711DecOptions* soap_new_tt__G711DecOptions(soap*) allocate and default initialize
/// - tt__G711DecOptions* soap_new_tt__G711DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__G711DecOptions* soap_new_req_tt__G711DecOptions(soap*, ...) allocate, set required members
/// - tt__G711DecOptions* soap_new_set_tt__G711DecOptions(soap*, ...) allocate, set all public members
/// - tt__G711DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__G711DecOptions(soap*, tt__G711DecOptions*) deserialize from a stream
/// - int soap_write_tt__G711DecOptions(soap*, tt__G711DecOptions*) serialize to a stream
/// - tt__G711DecOptions* tt__G711DecOptions::soap_dup(soap*) returns deep copy of tt__G711DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__G711DecOptions::soap_del() deep deletes tt__G711DecOptions data members, use only after tt__G711DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__G711DecOptions::soap_type() returns SOAP_TYPE_tt__G711DecOptions or derived type identifier
class tt__G711DecOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AACDecOptions is a complexType.
///
/// @note class tt__AACDecOptions operations:
/// - tt__AACDecOptions* soap_new_tt__AACDecOptions(soap*) allocate and default initialize
/// - tt__AACDecOptions* soap_new_tt__AACDecOptions(soap*, int num) allocate and default initialize an array
/// - tt__AACDecOptions* soap_new_req_tt__AACDecOptions(soap*, ...) allocate, set required members
/// - tt__AACDecOptions* soap_new_set_tt__AACDecOptions(soap*, ...) allocate, set all public members
/// - tt__AACDecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__AACDecOptions(soap*, tt__AACDecOptions*) deserialize from a stream
/// - int soap_write_tt__AACDecOptions(soap*, tt__AACDecOptions*) serialize to a stream
/// - tt__AACDecOptions* tt__AACDecOptions::soap_dup(soap*) returns deep copy of tt__AACDecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AACDecOptions::soap_del() deep deletes tt__AACDecOptions data members, use only after tt__AACDecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AACDecOptions::soap_type() returns SOAP_TYPE_tt__AACDecOptions or derived type identifier
class tt__AACDecOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":G726DecOptions is a complexType.
///
/// @note class tt__G726DecOptions operations:
/// - tt__G726DecOptions* soap_new_tt__G726DecOptions(soap*) allocate and default initialize
/// - tt__G726DecOptions* soap_new_tt__G726DecOptions(soap*, int num) allocate and default initialize an array
/// - tt__G726DecOptions* soap_new_req_tt__G726DecOptions(soap*, ...) allocate, set required members
/// - tt__G726DecOptions* soap_new_set_tt__G726DecOptions(soap*, ...) allocate, set all public members
/// - tt__G726DecOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__G726DecOptions(soap*, tt__G726DecOptions*) deserialize from a stream
/// - int soap_write_tt__G726DecOptions(soap*, tt__G726DecOptions*) serialize to a stream
/// - tt__G726DecOptions* tt__G726DecOptions::soap_dup(soap*) returns deep copy of tt__G726DecOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__G726DecOptions::soap_del() deep deletes tt__G726DecOptions data members, use only after tt__G726DecOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__G726DecOptions::soap_type() returns SOAP_TYPE_tt__G726DecOptions or derived type identifier
class tt__G726DecOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
///
/// Element "Bitrate" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
///
/// Element "SampleRateRange" of type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension is a complexType.
///
/// @note class tt__AudioDecoderConfigurationOptionsExtension operations:
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__AudioDecoderConfigurationOptionsExtension* soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__AudioDecoderConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap*, tt__AudioDecoderConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptionsExtension(soap*, tt__AudioDecoderConfigurationOptionsExtension*) serialize to a stream
/// - tt__AudioDecoderConfigurationOptionsExtension* tt__AudioDecoderConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__AudioDecoderConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AudioDecoderConfigurationOptionsExtension::soap_del() deep deletes tt__AudioDecoderConfigurationOptionsExtension data members, use only after tt__AudioDecoderConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AudioDecoderConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension or derived type identifier
class tt__AudioDecoderConfigurationOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MulticastConfiguration is a complexType.
///
/// @note class tt__MulticastConfiguration operations:
/// - tt__MulticastConfiguration* soap_new_tt__MulticastConfiguration(soap*) allocate and default initialize
/// - tt__MulticastConfiguration* soap_new_tt__MulticastConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__MulticastConfiguration* soap_new_req_tt__MulticastConfiguration(soap*, ...) allocate, set required members
/// - tt__MulticastConfiguration* soap_new_set_tt__MulticastConfiguration(soap*, ...) allocate, set all public members
/// - tt__MulticastConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__MulticastConfiguration(soap*, tt__MulticastConfiguration*) deserialize from a stream
/// - int soap_write_tt__MulticastConfiguration(soap*, tt__MulticastConfiguration*) serialize to a stream
/// - tt__MulticastConfiguration* tt__MulticastConfiguration::soap_dup(soap*) returns deep copy of tt__MulticastConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MulticastConfiguration::soap_del() deep deletes tt__MulticastConfiguration data members, use only after tt__MulticastConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MulticastConfiguration::soap_type() returns SOAP_TYPE_tt__MulticastConfiguration or derived type identifier
class tt__MulticastConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   The multicast address (if this address is set to 0 no multicast streaming is enaled)
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPAddress.
    tt__IPAddress*                       Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The RTP mutlicast destination port. A device may support RTCP. In this case the port value shall be even to allow the corresponding RTCP stream to be mapped to the next higher (odd) destination port number as defined in the RTSP specification.
/// </BLOCKQUOTE></PRE>
///
/// Element "Port" of type xs:int.
    int                                  Port                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   In case of IPv6 the TTL value is assumed as the hop limit. Note that for IPV6 and administratively scoped IPv4 multicast the primary use for hop limit / TTL is to prevent packets from (endlessly) circulating and not limiting scope. In these cases the address contains the scope.
/// </BLOCKQUOTE></PRE>
///
/// Element "TTL" of type xs:int.
    int                                  TTL                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Read only property signalling that streaming is persistant. Use the methods StartMulticastStreaming and StopMulticastStreaming to switch its state.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoStart" of type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":StreamSetup is a complexType.
///
/// @note class tt__StreamSetup operations:
/// - tt__StreamSetup* soap_new_tt__StreamSetup(soap*) allocate and default initialize
/// - tt__StreamSetup* soap_new_tt__StreamSetup(soap*, int num) allocate and default initialize an array
/// - tt__StreamSetup* soap_new_req_tt__StreamSetup(soap*, ...) allocate, set required members
/// - tt__StreamSetup* soap_new_set_tt__StreamSetup(soap*, ...) allocate, set all public members
/// - tt__StreamSetup::soap_default(soap*) default initialize members
/// - int soap_read_tt__StreamSetup(soap*, tt__StreamSetup*) deserialize from a stream
/// - int soap_write_tt__StreamSetup(soap*, tt__StreamSetup*) serialize to a stream
/// - tt__StreamSetup* tt__StreamSetup::soap_dup(soap*) returns deep copy of tt__StreamSetup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__StreamSetup::soap_del() deep deletes tt__StreamSetup data members, use only after tt__StreamSetup::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__StreamSetup::soap_type() returns SOAP_TYPE_tt__StreamSetup or derived type identifier
class tt__StreamSetup
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines if a multicast or unicast stream is requested
/// </BLOCKQUOTE></PRE>
///
/// Element "Stream" of type "http://www.onvif.org/ver10/schema":StreamType.
    enum tt__StreamType                  Stream                         1;	///< Required element.
/// Element "Transport" of type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Transport                      1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Transport is a complexType.
///
/// @note class tt__Transport operations:
/// - tt__Transport* soap_new_tt__Transport(soap*) allocate and default initialize
/// - tt__Transport* soap_new_tt__Transport(soap*, int num) allocate and default initialize an array
/// - tt__Transport* soap_new_req_tt__Transport(soap*, ...) allocate, set required members
/// - tt__Transport* soap_new_set_tt__Transport(soap*, ...) allocate, set all public members
/// - tt__Transport::soap_default(soap*) default initialize members
/// - int soap_read_tt__Transport(soap*, tt__Transport*) deserialize from a stream
/// - int soap_write_tt__Transport(soap*, tt__Transport*) serialize to a stream
/// - tt__Transport* tt__Transport::soap_dup(soap*) returns deep copy of tt__Transport, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Transport::soap_del() deep deletes tt__Transport data members, use only after tt__Transport::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Transport::soap_type() returns SOAP_TYPE_tt__Transport or derived type identifier
class tt__Transport
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP
/// </BLOCKQUOTE></PRE>
///
/// Element "Protocol" of type "http://www.onvif.org/ver10/schema":TransportProtocol.
    enum tt__TransportProtocol           Protocol                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to describe further tunnel options. This element is normally not needed
/// </BLOCKQUOTE></PRE>
///
/// Element "Tunnel" of type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Tunnel                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MediaUri is a complexType.
///
/// @note class tt__MediaUri operations:
/// - tt__MediaUri* soap_new_tt__MediaUri(soap*) allocate and default initialize
/// - tt__MediaUri* soap_new_tt__MediaUri(soap*, int num) allocate and default initialize an array
/// - tt__MediaUri* soap_new_req_tt__MediaUri(soap*, ...) allocate, set required members
/// - tt__MediaUri* soap_new_set_tt__MediaUri(soap*, ...) allocate, set all public members
/// - tt__MediaUri::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaUri(soap*, tt__MediaUri*) deserialize from a stream
/// - int soap_write_tt__MediaUri(soap*, tt__MediaUri*) serialize to a stream
/// - tt__MediaUri* tt__MediaUri::soap_dup(soap*) returns deep copy of tt__MediaUri, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaUri::soap_del() deep deletes tt__MediaUri data members, use only after tt__MediaUri::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaUri::soap_type() returns SOAP_TYPE_tt__MediaUri or derived type identifier
class tt__MediaUri
{ public:
/// <PRE><BLOCKQUOTE>
///   Stable Uri to be used for requesting the media stream
/// </BLOCKQUOTE></PRE>
///
/// Element "Uri" of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
///
/// Element "InvalidAfterConnect" of type xs:boolean.
    bool                                 InvalidAfterConnect            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
///
/// Element "InvalidAfterReboot" of type xs:boolean.
    bool                                 InvalidAfterReboot             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
/// </BLOCKQUOTE></PRE>
///
/// Element "Timeout" of type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Scope is a complexType.
///
/// @note class tt__Scope operations:
/// - tt__Scope* soap_new_tt__Scope(soap*) allocate and default initialize
/// - tt__Scope* soap_new_tt__Scope(soap*, int num) allocate and default initialize an array
/// - tt__Scope* soap_new_req_tt__Scope(soap*, ...) allocate, set required members
/// - tt__Scope* soap_new_set_tt__Scope(soap*, ...) allocate, set all public members
/// - tt__Scope::soap_default(soap*) default initialize members
/// - int soap_read_tt__Scope(soap*, tt__Scope*) deserialize from a stream
/// - int soap_write_tt__Scope(soap*, tt__Scope*) serialize to a stream
/// - tt__Scope* tt__Scope::soap_dup(soap*) returns deep copy of tt__Scope, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Scope::soap_del() deep deletes tt__Scope data members, use only after tt__Scope::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Scope::soap_type() returns SOAP_TYPE_tt__Scope or derived type identifier
class tt__Scope
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the scope is fixed or configurable.
/// </BLOCKQUOTE></PRE>
///
/// Element "ScopeDef" of type "http://www.onvif.org/ver10/schema":ScopeDefinition.
    enum tt__ScopeDefinition             ScopeDef                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Scope item URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "ScopeItem" of type xs:anyURI.
    xsd__anyURI                          ScopeItem                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension is a complexType.
///
/// @note class tt__NetworkInterfaceExtension operations:
/// - tt__NetworkInterfaceExtension* soap_new_tt__NetworkInterfaceExtension(soap*) allocate and default initialize
/// - tt__NetworkInterfaceExtension* soap_new_tt__NetworkInterfaceExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceExtension* soap_new_req_tt__NetworkInterfaceExtension(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceExtension* soap_new_set_tt__NetworkInterfaceExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceExtension(soap*, tt__NetworkInterfaceExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension(soap*, tt__NetworkInterfaceExtension*) serialize to a stream
/// - tt__NetworkInterfaceExtension* tt__NetworkInterfaceExtension::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceExtension::soap_del() deep deletes tt__NetworkInterfaceExtension data members, use only after tt__NetworkInterfaceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceExtension::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceExtension or derived type identifier
class tt__NetworkInterfaceExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "InterfaceType" of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point prepared for future 802.3 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Dot3Configuration* is 0..unbounded.
  $ int                                  __sizeDot3                     0;
/// Pointer to array tt__Dot3Configuration* of size 0..unbounded.
    tt__Dot3Configuration*              *Dot3                           0;	///< Multiple elements.
/// Size of array of tt__Dot11Configuration* is 0..unbounded.
  $ int                                  __sizeDot11                    0;
/// Pointer to array tt__Dot11Configuration* of size 0..unbounded.
    tt__Dot11Configuration*             *Dot11                          0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2.
    tt__NetworkInterfaceExtension2*      Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot3Configuration is a complexType.
///
/// @note class tt__Dot3Configuration operations:
/// - tt__Dot3Configuration* soap_new_tt__Dot3Configuration(soap*) allocate and default initialize
/// - tt__Dot3Configuration* soap_new_tt__Dot3Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Dot3Configuration* soap_new_req_tt__Dot3Configuration(soap*, ...) allocate, set required members
/// - tt__Dot3Configuration* soap_new_set_tt__Dot3Configuration(soap*, ...) allocate, set all public members
/// - tt__Dot3Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot3Configuration(soap*, tt__Dot3Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot3Configuration(soap*, tt__Dot3Configuration*) serialize to a stream
/// - tt__Dot3Configuration* tt__Dot3Configuration::soap_dup(soap*) returns deep copy of tt__Dot3Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot3Configuration::soap_del() deep deletes tt__Dot3Configuration data members, use only after tt__Dot3Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot3Configuration::soap_type() returns SOAP_TYPE_tt__Dot3Configuration or derived type identifier
class tt__Dot3Configuration
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2 is a complexType.
///
/// @note class tt__NetworkInterfaceExtension2 operations:
/// - tt__NetworkInterfaceExtension2* soap_new_tt__NetworkInterfaceExtension2(soap*) allocate and default initialize
/// - tt__NetworkInterfaceExtension2* soap_new_tt__NetworkInterfaceExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceExtension2* soap_new_req_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceExtension2* soap_new_set_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceExtension2(soap*, tt__NetworkInterfaceExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension2(soap*, tt__NetworkInterfaceExtension2*) serialize to a stream
/// - tt__NetworkInterfaceExtension2* tt__NetworkInterfaceExtension2::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceExtension2::soap_del() deep deletes tt__NetworkInterfaceExtension2 data members, use only after tt__NetworkInterfaceExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceExtension2::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceExtension2 or derived type identifier
class tt__NetworkInterfaceExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceLink is a complexType.
///
/// @note class tt__NetworkInterfaceLink operations:
/// - tt__NetworkInterfaceLink* soap_new_tt__NetworkInterfaceLink(soap*) allocate and default initialize
/// - tt__NetworkInterfaceLink* soap_new_tt__NetworkInterfaceLink(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceLink* soap_new_req_tt__NetworkInterfaceLink(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceLink* soap_new_set_tt__NetworkInterfaceLink(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceLink::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceLink(soap*, tt__NetworkInterfaceLink*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceLink(soap*, tt__NetworkInterfaceLink*) serialize to a stream
/// - tt__NetworkInterfaceLink* tt__NetworkInterfaceLink::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceLink, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceLink::soap_del() deep deletes tt__NetworkInterfaceLink data members, use only after tt__NetworkInterfaceLink::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceLink::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceLink or derived type identifier
class tt__NetworkInterfaceLink
{ public:
/// <PRE><BLOCKQUOTE>
///   Configured link settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "AdminSettings" of type "http://www.onvif.org/ver10/sche