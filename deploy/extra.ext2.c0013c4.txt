 <friction>
          <ode>
            <mu>100.0</mu>
            <mu2>100.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
  </link>

  <joint name="rf_lowerleg_joint" type="revolute">
    <origin xyz="-0.0194699194772098 -0.3449998 0.0989375976332662" rpy="-1.05391222064566 1.11022302462516E-16 4.44089209850063E-16" />
    <parent link="rf_upperleg" />
    <child link="rf_lowerleg" />
    <axis xyz="1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

  <link name="lb_hip">
    <inertial>
      <origin xyz="-0.1388606089949 0.0113727026302812 -0.0186282798249506" rpy="0 0 0" />
      <mass value="1.2940727989479" />
      <inertia
        ixx="0.00300672363731876"
        ixy="0.000279956457431885"
        ixz="0.00219380954241839"
        iyy="0.00473624583534201"
        iyz="-0.000278492304808429"
        izz="0.00444577133007972" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_hip.STL" />
      </geometry>
      <material name="dred">
        <color rgba="0.2 0.0 0.0 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_hip.STL" />
      </geometry>
    </collision>
  </link>

  <joint name="lb_hip_joint" type="revolute">
    <origin xyz="-0.09275 0.11015 -0.04025" rpy="-0.013144 -2.3119E-16 0" />
    <parent link="base_link" />
    <child link="lb_hip" />
    <axis xyz="1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

  <link name="lb_upperleg">
    <inertial>
      <origin xyz="-0.155362482214265 -0.162561779303306 -0.0486234661189762" rpy="0 0 0" />
      <mass value="1.99709298565448" />
      <inertia
        ixx="0.0178522818686579"
        ixy="-0.000447434633476266"
        ixz="-6.8250948714299E-05"
        iyy="0.00800967976641392"
        iyz="0.00225765032495757"
        izz="0.0132665280240321" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_upperleg.STL" />
      </geometry>
      <material name="dgreen">
        <color rgba="0.0 0.4 0.0 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_upperleg.STL" />
      </geometry>
    </collision>
  </link>

  <joint name="lb_upperleg_joint" type="revolute">
    <origin xyz="-0.1575 -0.0218860343925495 0" rpy="0.853532347704987 1.69309011255336E-15 -1.5707963267949" />
    <parent link="lb_hip" />
    <child link="lb_upperleg" />
    <axis xyz="-1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>
  
  <link name="lb_lowerleg">
    <inertial>
      <origin xyz="-0.0929078835580175 -0.122424353782922 -0.0909838234681657" rpy="0 0 0" />
      <mass value="0.51787240839959" />
      <inertia
        ixx="0.00480929178404235"
        ixy="3.51469446486784E-05"
        ixz="2.45137702500061E-05"
        iyy="0.00178682948739438"
        iyz="-0.00230130305704765"
        izz="0.00302365388096736" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_lowerleg.STL" />
      </geometry>
      <material name="dblue">
        <color rgba="0.0 0.0 0.7 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/lb_lowerleg.STL" />
      </geometry>
       <surface>
        <friction>
          <ode>
            <mu>100.0</mu>
            <mu2>100.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
  </link>

  <joint name="lb_lowerleg_joint" type="revolute">
    <origin xyz="-0.0427168001472368 -0.3449998 -0.0989375976332639" rpy="1.02808696809058 1.17961196366423E-15 0" />
    <parent link="lb_upperleg" />
    <child link="lb_lowerleg" />
    <axis xyz="-1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

  <link name="rb_hip">
    <inertial>
      <origin xyz="-0.197951848727426 -0.011789428219475 -0.0186949790745794" rpy="0 0 0" />
      <mass value="1.31260778161674" />
      <inertia
        ixx="0.00297889838847175"
        ixy="0.000632756156394369"
        ixz="-0.00237042295242676"
        iyy="0.0052868288763741"
        iyz="0.000270072183992474"
        izz="0.00504189542537898" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh
          filename="meshes/rb_hip.STL" />
      </geometry>
      <material name="dred">
        <color rgba="0.2 0.0 0.0 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/rb_hip.STL" />
      </geometry>
    </collision>
  </link>

  <joint name="rb_hip_joint" type="revolute">
    <origin xyz="-0.09275 -0.11015 -0.0402500002980231" rpy="0.0264641395628229 -2.31194431024223E-16 0" />
    <parent link="base_link" />
    <child link="rb_hip" />
    <axis xyz="1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

  <link name="rb_upperleg">
    <inertial>
      <origin xyz="-0.133628467244866 -0.162488031755644 0.0486169350227676" rpy="0 0 0" />
      <mass value="1.97849425051924" />
      <inertia
        ixx="0.0177862553816508"
        ixy="-0.000449816152751435"
        ixz="6.84610936050734E-05"
        iyy="0.00798872258305596"
        iyz="-0.00227974318574354"
        izz="0.0131967612321745" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/rb_upperleg.STL" />
      </geometry>
      <material name="dgreen">
        <color rgba="0.0 0.4 0.0 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/rb_upperleg.STL" />
      </geometry>
    </collision>
  </link>

  <joint name="rb_upperleg_joint" type="revolute">
    <origin xyz="-0.1575 0 0" rpy="2.21660126749357 1.97064586870965E-15 1.5707963267949" />
    <parent link="rb_hip" />
    <child link="rb_upperleg" />
    <axis xyz="1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

  <link name="rb_lowerleg">
    <inertial>
      <origin xyz="-0.106105013771209 -0.121605431885754 0.092129655679019" rpy="0 0 0" />
      <mass value="0.517767043602124" />
      <inertia
        ixx="0.00480685478586608"
        ixy="3.48785418068089E-05"
        ixz="-2.47987883971276E-05"
        iyy="0.00182797294270112"
        iyz="0.00231097886469285"
        izz="0.00298007124712522" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/rb_lowerleg.STL" />
      </geometry>
      <material name="dblue">
        <color rgba="0.0 0.0 0.7 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="meshes/rb_lowerleg.STL" />
      </geometry>
       <surface>
        <friction>
          <ode>
            <mu>100.0</mu>
            <mu2>100.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
  </link>

  <joint name="rb_lowerleg_joint" type="revolute">
    <origin xyz="-0.00763273689589838 -0.344999799999999 0.0989375976332641" rpy="-0.978531986560699 -1.70696790036118E-15 -1.22124532708767E-15" />
    <parent link="rb_upperleg" />
    <child link="rb_lowerleg" />
    <axis xyz="1 0 0" />
    <limit effort="30" velocity="1.0" lower="-0.2" upper="0.2" />
    <dynamics damping="0.7" friction="1.0" />
  </joint>

<!-- Transmissions for gazebo implementation -->
<transmission name="lb_hip_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lb_hip_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lb_hip_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="lb_upperleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lb_upperleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lb_upperleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="lb_lowerleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lb_lowerleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lb_lowerleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>

<transmission name="lf_hip_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lf_hip_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lf_hip_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="lf_upperleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lf_upperleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lf_upperleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="lf_lowerleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="lf_lowerleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="lf_lowerleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>

<transmission name="rb_hip_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rb_hip_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rb_hip_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="rb_upperleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rb_upperleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rb_upperleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="rb_lowerleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rb_lowerleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rb_lowerleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>

<transmission name="rf_hip_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rf_hip_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rf_hip_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="rf_upperleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rf_upperleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rf_upperleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>
<transmission name="rf_lowerleg_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="rf_lowerleg_joint">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="rf_lowerleg_motor">
    <mechanicalReduction>1</mechanicalReduction>
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </actuator>
</transmission>



</robot>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?xml version="1.0"?>
<robot name="materials">

  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>

  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>

  <material name="red">
    <color rgba="0.8 0 0 1"/>
  </material>

  <link name="base_link">
    <collision>
        <geometry>
          <box size="1.5 0.8 0.08"/>
        </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="100.843" />
      <inertia ixx="0.002480" ixy="9.381E-19" ixz="-3.172E-18"
                              iyy="1.060E-02" iyz="1002.754E-09"
                                              izz="1.243E-02" />
    </inertial>
    <visual>
      <geometry>
        <box size="1.5 0.8 0.08"/>
      </geometry>
      <material name="blue"/>
    </visual>
  </link>


#FRONT RIGHT
  <link name="coxa_FR">
 
    <visual>
      <geometry>
        <cylinder length="0.3" radius="0.1"/>
      </geometry>
      <origin rpy="1.57 0 0" xyz="0.0 -0.15 0"/>
      <material name="red"/>
    </visual>
  </link>

  <link name="femur_FR">
    
    <visual>
      <geometry>
         <cylinder length="0.85" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.425"/>
      <material name="white"/>
    </visual>
  </link>

  <link name="tibia_FR">

    <visual>
      <geometry>
       <cylinder length="1.25" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.625"/>
      <material name="blue"/>
    </visual>
  </link>

  <link name="foot_FR">
    <collision>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
    </collision>
   <mass value="200.843" />
    <visual>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>
  
  <joint name="coxaF_FR" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="base_link"/>
    <child link="coxa_FR"/>
    <origin rpy="0 0 0.785398" xyz="0.75 -0.4 0"/>
  </joint>

  <joint name="femurF_FR" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="coxa_FR"/>
    <child link="femur_FR"/>
    <origin rpy="4.71239 0 0" xyz="0 -0.3 0"/>
  </joint>

  <joint name="tibiaF_FR" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="femur_FR"/>
    <child link="tibia_FR"/>
    <origin rpy="1.5708 0 0" xyz="0 0 -0.85"/>
  </joint>

  <joint name="footF_FR" type="fixed">
    <parent link="tibia_FR"/>
    <child link="foot_FR"/>
    <origin xyz="0 0 -1.25"/>
  </joint>




#FRONT LEFT



  <link name="coxa_FL">

    <visual>
      <geometry>
        <cylinder length="0.3" radius="0.1"/>
      </geometry>
      <origin rpy="1.57 0 0" xyz="0 -0.15 0"/>
      <material name="red"/>
    </visual>
  </link>

  <link name="femur_FL">
  
    <visual>
      <geometry>
        <cylinder length="0.85" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.425"/>
      <material name="white"/>
    </visual>
  </link>

  <link name="tibia_FL">

    <visual>
      <geometry>
        <cylinder length="1.25" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.625"/>
      <material name="blue"/>
    </visual>
  </link>

  <link name="foot_FL">
    <collision>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
    </collision>
  <mass value="200.843" />
    <visual>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>
  
  <joint name="coxaF_FL" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="base_link"/>
    <child link="coxa_FL"/>
    <origin rpy="0 0 2.35619" xyz="0.74 0.4 0"/>
  </joint>

  <joint name="femurF_FL" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="coxa_FL"/>
    <child link="femur_FL"/>
    <origin rpy="4.71239 0 0" xyz="0 -0.3 0"/>
  </joint>

  <joint name="tibiaF_FL" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="femur_FL"/>
    <child link="tibia_FL"/>
    <origin rpy="1.5708 0 0" xyz="0 0 -0.85"/>
  </joint>

  <joint name="footF_FL" type="fixed">
    <parent link="tibia_FL"/>
    <child link="foot_FL"/>
    <origin xyz="0 0 -1.25"/>
  </joint>







#BACK RIGHT



<link name="coxa_BR">
 
    <visual>
      <geometry>
        <cylinder length="0.3" radius="0.1"/>
      </geometry>
      <origin rpy="1.57 0 0" xyz="0.0 -0.15 0"/>
      <material name="red"/>
    </visual>
  </link>

  <link name="femur_BR">
 
    <visual>
      <geometry>
         <cylinder length="0.85" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.425"/>
      <material name="white"/>
    </visual>
  </link>

  <link name="tibia_BR">

    <visual>
      <geometry>
       <cylinder length="1.25" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.625"/>
      <material name="blue"/>
    </visual>
  </link>

  <link name="foot_BR">
    <collision>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
    </collision>
   <mass value="200.843" />
    <visual>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>
  
  <joint name="coxaF_BR" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="base_link"/>
    <child link="coxa_BR"/>
    <origin rpy="0 0 3.92699" xyz="-0.75 0.4 0"/>
  </joint>

  <joint name="femurF_BR" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="coxa_BR"/>
    <child link="femur_BR"/>
    <origin rpy="4.71239 0 0" xyz="0 -0.3 0"/>
  </joint>

  <joint name="tibiaF_BR" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="femur_BR"/>
    <child link="tibia_BR"/>
    <origin rpy="1.5708 0 0" xyz="0 0 -0.85"/>
  </joint>

  <joint name="footF_BR" type="fixed">
    <parent link="tibia_BR"/>
    <child link="foot_BR"/>
    <origin xyz="0 0 -1.25"/>
  </joint>




#BACK LEFT



<link name="coxa_BL">
 
    <visual>
      <geometry>
        <cylinder length="0.3" radius="0.1"/>
      </geometry>
      <origin rpy="1.57 0 0" xyz="0.0 -0.15 0"/>
      <material name="red"/>
    </visual>
  </link>

  <link name="femur_BL">
  
    <visual>
      <geometry>
         <cylinder length="0.85" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.425"/>
      <material name="white"/>
    </visual>
  </link>

  <link name="tibia_BL">
  
    <visual>
      <geometry>
       <cylinder length="1.25" radius="0.1"/>
      </geometry>
      <origin xyz="0 0 -0.625"/>
      <material name="blue"/>
    </visual>
  </link>

  <link name="foot_BL">
    <collision>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
    </collision>
   <mass value="200.843" />
    <visual>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>
  
  <joint name="coxaF_BL" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="base_link"/>
    <child link="coxa_BL"/>
    <origin rpy="0 0 5.48033" xyz="-0.75 -0.4 0"/>
  </joint>

  <joint name="femurF_BL" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="coxa_BL"/>
    <child link="femur_BL"/>
    <origin rpy="4.71239 0 0" xyz="0 -0.3 0"/>
  </joint>

  <joint name="tibiaF_BL" type="revolute">
    <axis xyz="1 0 0"/>
    <limit effort="1000.0" velocity="0.5"/>
    <parent link="femur_BL"/>
    <child link="tibia_BL"/>
    <origin rpy="1.5708 0 0" xyz="0 0 -0.85"/>
  </joint>

  <joint name="footF_BL" type="fixed">
    <parent link="tibia_BL"/>
    <child link="foot_BL"/>
    <origin xyz="0 0 -1.25"/>
  </joint>

</robot>
                                                                                                                                                                                                                                                                                     #!/usr/bin/env python3
'''
example rover for JSON backend using pybullet
based on racecar example from pybullet
'''

import os, inspect, sys

import socket
import struct
import json
import math

from pyrobolearn.simulators import Bullet
import pybullet_data

# use pymavlink for ArduPilot convention transformations
from pymavlink.rotmat import Vector3, Matrix3
from pymavlink.quaternion import Quaternion
from pyrobolearn.utils.transformation import get_rpy_from_quaternion
import pyrobolearn as prl

import time

import argparse
from math import degrees, radians

parser = argparse.ArgumentParser(description="pybullet robot")
parser.add_argument("--vehicle", required=True, choices=['quad', 'racecar', 'iris', 'opendog', 'all'], default='iris', help="vehicle type")
parser.add_argument("--fps", type=float, default=1000.0, help="physics frame rate")
parser.add_argument("--stadium", default=False, action='store_true', help="use stadium for world")

args = parser.parse_args()

RATE_HZ = args.fps
TIME_STEP = 1.0 / RATE_HZ
GRAVITY_MSS = 9.80665

# Create simulator
sim = Bullet()

# create world
from pyrobolearn.worlds import BasicWorld
world = BasicWorld(sim)

if args.stadium:
    world.sim.remove_body(world.floor_id)
    world.floor_id = world.sim.load_sdf(os.path.join(pybullet_data.getDataPath(), "stadium.sdf"), position=[0,0,0])

# setup keyboard interface
interface = prl.tools.interfaces.MouseKeyboardInterface()

def control_quad(pwm):
    '''control quadcopter'''
    motor_dir = [ 1, 1, -1, -1 ]
    motor_order = [ 0, 1, 2, 3 ]

    motors = pwm[0:4]
    motor_speed = [ 0 ] * 4
    for m in range(len(motors)):
        motor_speed[motor_order[m]] = constrain(motors[m] - 1000.0, 0, 1000) * motor_dir[motor_order[m]]

    robot.set_propeller_velocities(motor_speed)

def control_racecar(pwm):
    '''control racecar'''
    steer_max = 45.0
    throttle_max = 200.0
    steering = constrain((pwm[0] - 1500.0)/500.0, -1, 1) * math.radians(steer_max) * -1
    throttle = constrain((pwm[2] - 1500.0)/500.0, -1, 1) * throttle_max

    robot.steer(steering)
    robot.drive(throttle)

last_angles = [0.0] * 12

def control_joints(pwm):
    '''control a joint based bot'''
    global last_angles
    max_angle = radians(90)
    joint_speed = radians(30)
    pwm = pwm[0:len(robot.joints)]
    angles = [ constrain((v-1500.0)/500.0, -1, 1) * max_angle for v in pwm ]
    current = last_angles
    max_change = joint_speed * TIME_STEP
    for i in range(len(angles)):
        angles[i] = constrain(angles[i], current[i]-max_change, current[i]+max_change)
    robot.set_joint_positions(angles, robot.joints)
    last_angles = angles


if args.vehicle == 'iris':
    from pyrobolearn.robots import Quadcopter
    robot = Quadcopter(sim, urdf="models/iris/iris.urdf")
    control_pwm = control_quad
elif args.vehicle == 'racecar':
    from pyrobolearn.robots import F10Racecar
    robot = F10Racecar(sim)
    control_pwm = control_racecar
elif args.vehicle == 'opendog':
    from pyrobolearn.robots import OpenDog
    robot = OpenDog(sim, urdf="models/opendog/opendog.urdf")
    control_pwm = control_joints
elif args.vehicle == 'all':
    from pyrobolearn.robots import OpenDog, Aibo, Ant, ANYmal, HyQ, HyQ2Max, Laikago, LittleDog, Minitaur, Pleurobot, Crab, Morphex, Rhex, SEAHexapod
    bots = [Crab, Morphex, Rhex, SEAHexapod, Aibo, Ant, ANYmal, HyQ, HyQ2Max, Laikago, LittleDog, Minitaur, Pleurobot ]
    for i in range(len(bots)):
        r = bots[i](sim)
        r.position = [0, i*2, 2]
    control_pwm = control_joints
    robot = OpenDog(sim, urdf="models/opendog/opendog.urdf")
else:
    raise Exception("Bad vehicle")


sim.set_time_step(TIME_STEP)

time_now = 0
last_velocity = None

def quaternion_to_AP(quaternion):
    '''convert pybullet quaternion to ArduPilot quaternion'''
    return Quaternion([quaternion[3], quaternion[0], -quaternion[1], -quaternion[2]])

def vector_to_AP(vec):
    '''convert pybullet vector tuple to ArduPilot Vector3'''
    return Vector3(vec[0], -vec[1], -vec[2])

def quaternion_from_AP(q):
    '''convert ArduPilot quaternion to pybullet quaternion'''
    return [q.q[1], -q.q[2], -q.q[3], q.q[0]]

def to_tuple(vec3):
    '''convert a Vector3 to a tuple'''
    return (vec3.x, vec3.y, vec3.z)

def init():
  global time_now
  time_now = 0
  robot.position = [0,0,0]
  robot.orientation = [0,0,0,1]

def constrain(v,min_v,max_v):
    '''constrain a value'''
    if v < min_v:
        v = min_v
    if v > max_v:
        v = max_v
    return v

#robot.position = [ 0, 0, 2]
#robot.orientation = quaternion_from_AP(Quaternion([math.radians(0), math.radians(0), math.radians(50)]))

def physics_step(pwm_in):

  control_pwm(pwm_in)

  world.step(sleep_dt=0)

  global time_now
  time_now += TIME_STEP

  # get the position orientation and velocity
  quaternion = quaternion_to_AP(robot.orientation)
  roll, pitch, yaw = quaternion.euler
  velocity = vector_to_AP(robot.linear_velocity)
  position = vector_to_AP(robot.position)

  # get ArduPilot DCM matrix (rotation matrix)
  dcm = quaternion.dcm

  # get gyro vector in body frame
  gyro = dcm.transposed() * vector_to_AP(robot.angular_velocity)
  
  # calculate acceleration
  global last_velocity
  if last_velocity is None:
      last_velocity = velocity

  accel = (velocity - last_velocity) * (1.0 / TIME_STEP)
  last_velocity = velocity

  # add in gravity in earth frame
  accel.z -= GRAVITY_MSS

  # convert accel to body frame
  accel = dcm.transposed() * accel

  # convert to tuples
  accel = to_tuple(accel)
  gyro = to_tuple(gyro)
  position = to_tuple(position)
  velocity = to_tuple(velocity)
  euler = (roll, pitch, yaw)

  return time_now,gyro,accel,position,euler,velocity

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(('', 9002))
sock.settimeout(0.1)

last_SITL_frame = -1
connected = False
frame_count = 0
frame_time = time.time()
print_frame_count = 1000

move_accel = 0.0
last_move = time.time()

def move_view(keys):
    '''move camera target based on arrow keys'''
    global last_move, move_accel
    now = time.time()
    if now - last_move < 0.1:
        return
    last_move = now
    KEY_LEFT = 65295
    KEY_RIGHT = 65296
    KEY_UP = 65297
    KEY_DOWN = 65298
    global move_accel
    angle = None
    if KEY_LEFT in keys:
        angle = 90
    elif KEY_RIGHT in keys:
        angle = -90
    elif KEY_UP in keys:
        angle = 180
    elif KEY_DOWN in keys:
        angle = 0
    else:
        move_accel = 0
        return

    caminfo = list(sim.sim.getDebugVisualizerCamera())
    target = caminfo[-1]
    dist = caminfo[-2]
    pitch = caminfo[-3]
    yaw = caminfo[-4]
    look = 90.0-yaw
    step = 0.3 + move_accel
    move_accel += 0.1
    move_accel = min(move_accel, 5)
    target = (target[0] + step*math.cos(radians(look+angle)),
              target[1] - step*math.sin(radians(look+angle)),
              target[2])
    sim.reset_debug_visualizer(dist, radians(yaw), radians(pitch), target)

while True:

  py_time = time.time()

  interface.step()
  move_view(interface.key_down)

  try:
      data,address = sock.recvfrom(100)
  except Exception as ex:
      time.sleep(0.01)
      continue

  parse_format = 'HHI16H'
  magic = 18458

  if len(data) != struct.calcsize(parse_format):
    print("got packet of len %u, expected %u" % (len(data), struct.calcsize(parse_format)))
    continue


  decoded = struct.unpack(parse_format,data)

  if magic != decoded[0]:
      print("Incorrect protocol magic %u should be %u" % (decoded[0], magic))
      continue

  frame_rate_hz = decoded[1]
  frame_count = decoded[2]
  pwm = decoded[3:]

  if frame_rate_hz != RATE_HZ:
      print("New frame rate %u" % frame_rate_hz)
      RATE_HZ = frame_rate_hz
      TIME_STEP = 1.0 / RATE_HZ
      sim.set_time_step(TIME_STEP)

  # Check if the fame is in expected order
  if frame_count < last_SITL_frame:
    # Controller has reset, reset physics also
    init()
    print('Controller reset')
  elif frame_count == last_SITL_frame:
    # duplicate frame, skip
    print('Duplicate input frame')
    continue
  elif frame_count != last_SITL_frame + 1 and connected:
    print('Missed {0} input frames'.format(frame_count - last_SITL_frame - 1))
  last_SITL_frame = frame_count

  if not connected:
    connected = True
    print('Connected to {0}'.format(str(address)))
  frame_count += 1

  # physics time step
  phys_time,gyro,accel,pos,euler,velo = physics_step(pwm)

  # build JSON format
  IMU_fmt = {
    "gyro" : gyro,
    "accel_body" : accel
  }
  JSON_fmt = {
    "timestamp" : phys_time,
    "imu" : IMU_fmt,
    "position" : pos,
    "attitude" : euler,
    "velocity" : velo
  }
  JSON_string = "\n" + json.dumps(JSON_fmt,separators=(',', ':')) + "\n"

  # Send to AP
  sock.sendto(bytes(JSON_string,"ascii"), address)

  # Track frame rate
  if frame_count % print_frame_count == 0:
    now = time.time()
    total_time = now - frame_time
    print("%.2f fps T=%.3f dt=%.3f" % (print_frame_count/total_time, phys_time, total_time))
    frame_time = now
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #!/usr/bin/env python3

import os, inspect, sys

import socket
import struct
import json
import math
import pybullet_data
import pybullet as p
# use pymavlink for ArduPilot convention transformations
from pymavlink.rotmat import Vector3, Matrix3
from pymavlink.quaternion import Quaternion

import time

import argparse
from math import degrees, radians

parser = argparse.ArgumentParser(description="pybullet robot")
parser.add_argument("--fps", type=float, default=1000.0, help="physics frame rate")

args = parser.parse_args()

RATE_HZ = args.fps
TIME_STEP = 1.0 / RATE_HZ
GRAVITY_MSS = 9.80665

# Create simulator
physicsClient = p.connect(p.GUI)#or p.DIRECT for non-graphical version
p.setAdditionalSearchPath(pybullet_data.getDataPath()) #optionally
p.setGravity(0,0,-10)
FixedBase = False #if fixed no plane is imported
if (FixedBase == False):
    p.loadURDF("plane.urdf")
p.changeDynamics(FixedBase,-1,lateralFriction=1.,
                 spinningFriction=0., rollingFriction=0., contactStiffness=-1, contactDamping=-1)

last_angles = [0.0] * 12
force = [500] * 12
servo_direction = [1,-1, 1,
                   1, 1,-1,
                   1,-1, 1,
                   1, 1,-1]
def control_joints(pwm):
    '''control a joint based bot'''
    global last_angles
    joint_speed = radians(250)
    joints = [0,1,2,4,5,6,8,9,10,12,13,14]
    pwm = pwm[0:len(joints)]
    angles = [radians(((v-1500.0)*90)/1000) for v in pwm ]
    for i in range(len(angles)):
      angles[i] = angles[i] * servo_direction[i]
    current = last_angles
    max_change = joint_speed * TIME_STEP
    for i in range(len(angles)):
        angles[i] = constrain(angles[i], current[i]-max_change, current[i]+max_change)
    p.setJointMotorControlArray(robot, joints, p.POSITION_CONTROL, angles,forces = force)
    last_angles = angles

#spawn robot
position = [0, 0, 1.6]
robot = p.loadURDF("models/quadruped/quadruped.urdf",position, useFixedBase=FixedBase)
control_pwm = control_joints

p.setTimeStep(TIME_STEP)
time_now = 0
last_velocity = None

def quaternion_to_AP(quaternion):
    '''convert pybullet quaternion to ArduPilot quaternion'''
    return Quaternion([quaternion[3], quaternion[0], -quaternion[1], -quaternion[2]])

def vector_to_AP(vec):
    '''convert pybullet vector tuple to ArduPilot Vector3'''
    return Vector3(vec[0], -vec[1], -vec[2])

def quaternion_from_AP(q):
    '''convert ArduPilot quaternion to pybullet quaternion'''
    return [q.q[1], -q.q[2], -q.q[3], q.q[0]]

def to_tuple(vec3):
    '''convert a Vector3 to a tuple'''
    return (vec3.x, vec3.y, vec3.z)

def init():
  global time_now
  time_now = 0
  position = [0,0,0]
  orientation = [0,0,0,1]
  p.reset_Base_Position_And_Orientations(robot,position,orientation)


def constrain(v,min_v,max_v):
    '''constrain a value'''
    if v < min_v:
        v = min_v
    if v > max_v:
        v = max_v
    return v

#robot.position = [ 0, 0, 2]
#robot.orientation = quaternion_from_AP(Quaternion([math.radians(0), math.radians(0), math.radians(50)]))
def step(sleep_dt=None):
    # # call the step method for each body
    # for body in self.bodies.values():
    #     if isinstance(body, Body):
    #         body.step()

    # call simulation step
    p.stepSimulation()

    # sleep
    if sleep_dt is not None:
        time.sleep(sleep_dt)

def physics_step(pwm_in):

  control_pwm(pwm_in)
  
  step(sleep_dt=0)
  # p.setRealTimeSimulation(1)
  global time_now
  time_now += TIME_STEP

  # get the position orientation and velocity
  pos,ori = p.getBasePositionAndOrientation(robot)
  quaternion = quaternion_to_AP(ori)
  roll, pitch, yaw = quaternion.euler
  linear,angular = p.getBaseVelocity(robot)
  velocity = vector_to_AP(linear)
  position = vector_to_AP(pos)

  # get ArduPilot DCM matrix (rotation matrix)
  dcm = quaternion.dcm

  # get gyro vector in body frame
  gyro = dcm.transposed() * vector_to_AP(angular)
  
  # calculate acceleration
  global last_velocity
  if last_velocity is None:
      last_velocity = velocity

  accel = (velocity - last_velocity) * (1.0 / TIME_STEP)
  last_velocity = velocity

  # add in gravity in earth frame
  accel.z -= GRAVITY_MSS

  # convert accel to body frame
  accel = dcm.transposed() * accel

  # convert to tuples
  accel = to_tuple(accel)
  gyro = to_tuple(gyro)
  position = to_tuple(position)
  velocity = to_tuple(velocity)
  euler = (roll, pitch, yaw)

  return time_now,gyro,accel,position,euler,velocity

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(('', 9002))
sock.settimeout(0.1)

last_SITL_frame = -1
connected = False
frame_count = 0
frame_time = time.time()
print_frame_count = 1000

move_accel = 0.0
last_move = time.time()

while True:

  py_time = time.time()

  try:
      data,address = sock.recvfrom(100)
  except Exception as ex:
      time.sleep(0.01)
      continue

  parse_format = 'HHI16H'
  magic = 18458

  if len(data) != struct.calcsize(parse_format):
    print("got packet of len %u, expected %u" % (len(data), struct.calcsize(parse_format)))
    continue


  decoded = struct.unpack(parse_format,data)

  if magic != decoded[0]:
      print("Incorrect protocol magic %u should be %u" % (decoded[0], magic))
      continue

  frame_rate_hz = decoded[1]
  frame_count = decoded[2]
  pwm = decoded[3:]

  if frame_rate_hz != RATE_HZ:
      print("New frame rate %u" % frame_rate_hz)
      RATE_HZ = frame_rate_hz
      TIME_STEP = 1.0 / RATE_HZ
      p.setTimeStep(TIME_STEP)

  # Check if the fame is in expected order
  if frame_count < last_SITL_frame:
    # Controller has reset, reset physics also
    init()
    print('Controller reset')
  elif frame_count == last_SITL_frame:
    # duplicate frame, skip
    print('Duplicate input frame')
    continue
  elif frame_count != last_SITL_frame + 1 and connected:
    print('Missed {0} input frames'.format(frame_count - last_SITL_frame - 1))
  last_SITL_frame = frame_count

  if not connected:
    connected = True
    print('Connected to {0}'.format(str(address)))
  frame_count += 1

  # physics time step
  phys_time,gyro,accel,pos,euler,velo = physics_step(pwm)

  # build JSON format
  IMU_fmt = {
    "gyro" : gyro,
    "accel_body" : accel
  }
  JSON_fmt = {
    "timestamp" : phys_time,
    "imu" : IMU_fmt,
    "position" : pos,
    "attitude" : euler,
    "velocity" : velo
  }
  JSON_string = "\n" + json.dumps(JSON_fmt,separators=(',', ':')) + "\n"

  # Send to AP
  sock.sendto(bytes(JSON_string,"ascii"), address)

  # Track frame rate
  if frame_count % print_frame_count == 0:
    now = time.time()
    total_time = now - frame_time
    print("%.2f fps T=%.3f dt=%.3f" % (print_frame_count/total_time, phys_time, total_time))
    frame_time = now
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           The JSON SITL backend allows software to easily interface with ArduPilot using a standard JSON interface.

To launch the JSON backend run SITL with ```-f json:127.0.0.1``` where 127.0.0.1 is replaced with the IP the physics backend is running at.

Connection to SITL is made via a UDP link. The physics backend should listen for incoming messages on port 9002 it should then reply to the IP and port the messages were received from. This removes the need to configure the a target
IP and port for SITL in the physics backend. SITL will send a output message every 10 seconds allowing the physics backend to auto detect.

SITL output
Data is output from SITL in a binary format:
```
    uint16 magic = 18458
    uint16 frame_rate
    uint32 frame_count
    uint16 pwm[16]
```

The magic value is a constant of 18458, this is used to confirm the packet is from ArduPilot and is used for protocol versioning.

The number of output channels may be increased to 32 by setting the parameter
SERVO_32_ENABLE = 1. The SITL output packet is then

```
    uint16 magic = 29569
    uint16 frame_rate
    uint32 frame_count
    uint16 pwm[32]
```

and uses a magic value 29569.  


The frame rate represents the time step the simulation should take, this can be changed with the SIM_RATE_HZ ArduPilot parameter. The physics backend is free to ignore this value, a maximum time step size would typically be set. The SIM_RATE_HZ should value be kept above the vehicle loop rate, by default this 400hz on copter and quadplanes and 50 hz on plane and rover.

The frame_count will increment for each output frame sent by ArduPilot, this count can be used to detect lost or duplicate frames. This count will be reset when SITL is re-started allowing the physics backend to reset the vehicle. If not input data is received after 10 seconds ArduPilot will re-send the output frame without incrementing the counter. This allows the physics model to be restarted and re-connect. Note that this may fill up the input buffer of the physics backend after some time. 

PWM is a array of 16 (or 32) servo values in micro seconds, typically in the 1000 to 2000 range as set by the servo output functions.

SITL input
Data is received from the physics backend in a plain text JSON format. The data must contain the following fields:
```
    timestamp (s) physics time
    imu:
        gyro(roll, pitch, yaw) (radians/sec) body frame
        accel_body(x, y, z) (m/s^2) body frame
    position(north, east, down) (m) earth frame
    velocity(north, east, down) (m/s) earth frame
```

It is possible to send the attitude in a euler format using ```attitude``` or as a quaternion with ```quaternion```, one of these fields must be received. If both are received the quaternion attitude will be used.

```
    attitude(roll, pitch yaw) (radians)
    quaternion(q1, q2, q3, q4)
```

This is a example input frame, it should be preceded by and terminated with a carriage return ("\n") :
```
{"timestamp":2500,"imu":{"gyro":[0,0,0],"accel_body":[0,0,0]},"position":[0,0,0],"attitude":[0,0,0],"velocity":[0,0,0]}
```
The order of fields is not important.

It is possible to send optional fields to provide data for additional sensors, in most cases this will require setting the relevant sensor type param to the SITL driver.

rangefinder distances corresponding to driver instances:
```
    rng_1 (m)
    rng_2 (m)
    rng_3 (m)
    rng_4 (m)
    rng_5 (m)
    rng_6 (m)
```

Apparent wind:
```
    windvane:
        direction (radians) clockwise relative to the front, i.e. 0 = head to wind
        speed (m/s)
```
for example:```"windvane":{"direction":0,"speed":0}```

Airspeed:

```
    airspeed (m/s)
```

When first connecting you will see a message reporting what fields were successfully received. If any of the mandatory fields are missing SITL will stop, however it will run without the optional fields. This message can be used to double check SITL is receiving everything being sent by the physics backend.

For example:
```
JSON received:
        timestamp
        gyro
        accel_body
        position
        attitude
        velocity
        rng_1
```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         QGC WPL 110
0	1	0	16	0	0	0	0	-35.363261	149.165230	584.099976	1
1	0	3	16	0.00000000	0.00000000	0.00000000	0.00000000	-35.36338840	149.16519640	0.000000	1
2	0	3	16	0.00000000	0.00000000	0.00000000	0.00000000	-35.36328010	149.16527290	0.000000	1
3	0	3	16	0.00000000	0.00000000	0.00000000	0.00000000	-35.36319320	149.16520510	0.000000	1
4	0	3	177	1.00000000	-1.00000000	0.00000000	0.00000000	0.00000000	0.00000000	0.000000	1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FRAME_CLASS      1.000000
FRAME_TYPE       6.000000
ATC_ACCEL_P_MAX  36397.976562
ATC_ACCEL_R_MAX  33111.574219
ATC_ACCEL_Y_MAX  36397.976562
ATC_ANG_PIT_P    6.496104
ATC_ANG_RLL_P    6.125903
ATC_ANG_YAW_P    3.144684
ATC_RAT_PIT_D    0.006864
ATC_RAT_PIT_FF   0.000000
ATC_RAT_PIT_FLTD 20.000000
ATC_RAT_PIT_I    0.292808
ATC_RAT_PIT_IMAX 0.500000
ATC_RAT_PIT_P    0.292808
ATC_RAT_RLL_D    0.007893
ATC_RAT_RLL_FF   0.000000
ATC_RAT_RLL_FLTD 20.000000
ATC_RAT_RLL_I    0.255515
ATC_RAT_RLL_IMAX 0.500000
ATC_RAT_RLL_P    0.255515
ATC_RAT_YAW_D    0.000000
ATC_RAT_YAW_FF   0.000000
ATC_RAT_YAW_FLTE 5.000000
ATC_RAT_YAW_I    0.093384
ATC_RAT_YAW_IMAX 0.500000
ATC_RAT_YAW_P    0.933841


# setup laser scanner
PRX1_TYPE 2
AVOID_ENABLE 7
AVOID_MARGIN 1.0
OA_MARGIN_MAX 0.6
OA_TYPE 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              '''
This is an example builder script that sets up a quadcopter in Morse to
be driven by ArduPilot.

The quadcopter has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run quad_scanner.py

Then connect with ArduPilot like this:

  sim_vehicle.py --model morse --console --map

This model assumes an X frame quadcopter, so you will need:

  FRAME_CLASS 1
  FRAME_TYPE 1
'''
from morse.builder import *

# use the ATRV rover
vehicle = Quadrotor()
vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
vehicle.translate(x=0.0, z=1.0)

# add a camera
camera = SemanticCamera(name="Camera")
camera.translate(x=0.2, y=0.3, z=0.9)
vehicle.append(camera)
camera.properties(cam_far=800)
camera.properties(Vertical_Flip=True)

# we could optionally stream the video to a port
#camera.add_stream('socket')

# add sensors needed for ArduPilot operation to a vehicle
pose = Pose()
vehicle.append(pose)

imu = IMU()
vehicle.append(imu)

gps = GPS()
gps.alter('UTM')
vehicle.append(gps)

velocity = Velocity()
vehicle.append(velocity)

# add a 360 degree laser scanner, sitting 1m above the quadcopter
scan = Hokuyo()
scan.translate(x=0.0, z=1)
vehicle.append(scan)
scan.properties(Visible_arc = True)
scan.properties(laser_range = 18.0)
scan.properties(resolution = 5.0)
scan.properties(scan_window = 360.0)
scan.create_laser_arc()


# create a compound sensor of all of the individual sensors and stream it
all_sensors = CompoundSensor([imu, gps, velocity, pose,scan])
all_sensors.add_stream('socket')

vehicle.append(all_sensors)

# make the vehicle controllable via force and torque
# this will be available on port 4000 by default
engines = QuadrotorDynamicControl()
vehicle.append(engines)
engines.add_stream('socket')

# this would allow us to control the vehicle with a keyboard
# we don't enable it as it causes issues with sensor consistency
#keyboard = Keyboard()
#keyboard.properties(Speed=3.0)
#vehicle.append(keyboard)

# Environment. Run in fast mode which gives wire-frame view, but lowers
# CPU load a lot
env = Environment('land-1/trees', fastmode=False)

env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.select_display_camera(camera)
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            FRAME_CLASS      1.000000
FRAME_TYPE       6.000000
ATC_ACCEL_P_MAX  36397.976562
ATC_ACCEL_R_MAX  33111.574219
ATC_ACCEL_Y_MAX  36397.976562
ATC_ANG_PIT_P    6.496104
ATC_ANG_RLL_P    6.125903
ATC_ANG_YAW_P    3.144684
ATC_RAT_PIT_D    0.006864
ATC_RAT_PIT_FF   0.000000
ATC_RAT_PIT_FLTD 20.000000
ATC_RAT_PIT_I    0.292808
ATC_RAT_PIT_IMAX 0.500000
ATC_RAT_PIT_P    0.292808
ATC_RAT_RLL_D    0.007893
ATC_RAT_RLL_FF   0.000000
ATC_RAT_RLL_FLTD 20.000000
ATC_RAT_RLL_I    0.255515
ATC_RAT_RLL_IMAX 0.500000
ATC_RAT_RLL_P    0.255515
ATC_RAT_YAW_D    0.000000
ATC_RAT_YAW_FF   0.000000
ATC_RAT_YAW_FLTE 5.000000
ATC_RAT_YAW_I    0.093384
ATC_RAT_YAW_IMAX 0.500000
ATC_RAT_YAW_P    0.933841


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            '''
This is an example builder script that sets up a quadcopter in Morse to
be driven by ArduPilot.

The quadcopter has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run quadcopter.py

Then connect with ArduPilot like this:

  sim_vehicle.py --model morse --console --map

This model assumes an X frame quadcopter, so you will need:

  FRAME_CLASS 1
  FRAME_TYPE 1
'''
from morse.builder import *

# use the ATRV rover
vehicle = Quadrotor()
vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
vehicle.translate(x=0.0, z=1.0)

# add a camera
camera = SemanticCamera(name="Camera")
camera.translate(x=0.2, y=0.3, z=0.9)
vehicle.append(camera)
camera.properties(cam_far=800)
camera.properties(Vertical_Flip=True)

# we could optionally stream the video to a port
#camera.add_stream('socket')

# add sensors needed for ArduPilot operation to a vehicle
pose = Pose()
vehicle.append(pose)

imu = IMU()
vehicle.append(imu)

gps = GPS()
gps.alter('UTM')
vehicle.append(gps)

velocity = Velocity()
vehicle.append(velocity)

# create a compound sensor of all of the individual sensors and stream it
all_sensors = CompoundSensor([imu, gps, velocity, pose])
all_sensors.add_stream('socket')

vehicle.append(all_sensors)

# make the vehicle controllable via force and torque
# this will be available on port 4000 by default
engines = QuadrotorDynamicControl()
vehicle.append(engines)
engines.add_stream('socket')

# this would allow us to control the vehicle with a keyboard
# we don't enable it as it causes issues with sensor consistency
#keyboard = Keyboard()
#keyboard.properties(Speed=3.0)
#vehicle.append(keyboard)

# Environment. Run in fast mode which gives wire-frame view, but lowers
# CPU load a lot
env = Environment('land-1/trees', fastmode=True)

env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.select_display_camera(camera)
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
# Setup rover for steering/throttle 
SERVO1_FUNCTION 26
SERVO1_REVERSED 1
SERVO3_FUNCTION 70
ATC_BRAKE 1
AHRS_ORIENTATION 2
COMPASS_ORIENT 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  '''
This is an example builder script that sets up a rover in Morse to
be driven by ArduPilot.

The rover has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run rover.py

Then connect with ArduPilot like this:

  sim_vehicle.py --model morse --console --map

This model assumes you will setup a steering/throttle rover 

  SERVO1_FUNCTION 26
  SERVO3_FUNCTION 70
'''
from morse.builder import *

# use the Hummer
vehicle = Hummer()
vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
vehicle.translate(x=0.0, z=0.0)

# add a camera
camera = SemanticCamera(name="Camera")
camera.translate(x=0.2, y=0.3, z=0.9)
vehicle.append(camera)
camera.properties(cam_far=800)
camera.properties(Vertical_Flip=True)

# we could optionally stream the video to a port
#camera.add_stream('socket')

# add sensors needed for ArduPilot operation to a vehicle
pose = Pose()
vehicle.append(pose)

imu = IMU()
vehicle.append(imu)

gps = GPS()
gps.alter('UTM')
vehicle.append(gps)

velocity = Velocity()
vehicle.append(velocity)

# create a compound sensor of all of the individual sensors and stream it
all_sensors = CompoundSensor([imu, gps, velocity, pose])
all_sensors.add_stream('socket')

vehicle.append(all_sensors)

# make the vehicle controllable with steer and force 
# this will be available on port 60001 by default
motion = SteerForce()
vehicle.append(motion)
motion.add_stream('socket')

# this would allow us to control the vehicle with a keyboard
# we don't enable it as it causes issues with sensor consistency
#keyboard = Keyboard()
#keyboard.properties(Speed=3.0)
#vehicle.append(keyboard)

# Environment
env = Environment('land-1/trees')
env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.select_display_camera(camera)
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   '''
This is an example builder script that sets up a a set of rovers to
be driven by ArduPilot for demonstrating follow mode

The rover has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run rover_follow.py
'''
from morse.builder import *

num_vehicles = 3

for i in range(num_vehicles):
    vehicle = ATRV('Vehicle%u' % i)
    vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
    # set rovers 3 meters apart
    vehicle.translate(x=0.0, y=3*i, z=0.0)

    # add sensors needed for ArduPilot operation to a vehicle
    pose = Pose()
    vehicle.append(pose)

    imu = IMU()
    vehicle.append(imu)

    gps = GPS()
    gps.alter('UTM')
    vehicle.append(gps)

    velocity = Velocity()
    vehicle.append(velocity)

    # create a compound sensor of all of the individual sensors and stream it
    all_sensors = CompoundSensor([imu, gps, velocity, pose])
    all_sensors.add_stream('socket')

    vehicle.append(all_sensors)

    # make the vehicle controllable with speed and angular velocity
    motion = MotionVW()
    vehicle.append(motion)
    motion.add_stream('socket')

# Environment
env = Environment('land-1/trees', fastmode=False)
env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
# setup rover for skid steering
SERVO1_FUNCTION 73
SERVO3_FUNCTION 74

# setup laser scanner
PRX1_TYPE 2
AVOID_ENABLE 7
AVOID_MARGIN 0.5
OA_MARGIN_MAX 0.6
OA_TYPE 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          '''
This is an example builder script that sets up a rover in Morse to
be driven by ArduPilot.

The rover has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run rover.py

Then connect with ArduPilot like this:

  sim_vehicle.py --model morse --console --map

This model assumes you will setup a skid-steering rover with left throttle on
channel 1 and right throttle on channel 2, which means you need to set:

  SERVO1_FUNCTION 73
  SERVO3_FUNCTION 74
'''
from morse.builder import *

# use the ATRV rover
vehicle = ATRV()
vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
vehicle.translate(x=0.0, z=0.0)
vehicle.rotate(z=math.pi)

# add a camera
camera = SemanticCamera(name="Camera")
camera.translate(x=0.2, y=0.3, z=0.9)
vehicle.append(camera)
camera.properties(cam_far=800)
camera.properties(Vertical_Flip=False)
camera.rotate(z=math.pi)

# we could optionally stream the video to a port
#camera.add_stream('socket')

# add sensors needed for ArduPilot operation to a vehicle
pose = Pose()
vehicle.append(pose)

imu = IMU()
vehicle.append(imu)

gps = GPS()
gps.alter('UTM')
vehicle.append(gps)

velocity = Velocity()
vehicle.append(velocity)

# add a 360 degree laser scanner, sitting 1m above the rover
# this is setup to be similar to the RPLidarA2
scan = Hokuyo()
scan.translate(x=0.0, z=1.0)
vehicle.append(scan)
scan.properties(Visible_arc = True)
scan.properties(laser_range = 18.0)
scan.properties(resolution = 5.0)
scan.properties(scan_window = 360.0)
scan.create_laser_arc()


# create a compound sensor of all of the individual sensors and stream it
all_sensors = CompoundSensor([imu, gps, velocity, pose, scan])
all_sensors.add_stream('socket')

vehicle.append(all_sensors)

# make the vehicle controllable with speed and angular velocity
# this will be available on port 60001 by default
# an example command is:
# {"v":2, "w":1}
# which is 2m/s fwd, and rotating left at 1 radian/second
motion = MotionVW()
vehicle.append(motion)
motion.add_stream('socket')

# this would allow us to control the vehicle with a keyboard
# we don't enable it as it causes issues with sensor consistency
#keyboard = Keyboard()
#keyboard.properties(Speed=3.0)
#vehicle.append(keyboard)

# Environment
env = Environment('indoors-1/boxes', fastmode=False)
env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.select_display_camera(camera)
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
# Setup rover for skid setup
SERVO1_FUNCTION 73
SERVO3_FUNCTION 74                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             '''
This is an example builder script that sets up a rover in Morse to
be driven by ArduPilot.

The rover has the basic set of sensors that ArduPilot needs

To start the simulation use this:

  morse run rover_skid.py

Then connect with ArduPilot like this:

  sim_vehicle.py --model morse --console --map

This model assumes you will setup a skid-steering rover with left throttle on
channel 1 and right throttle on channel 2, which means you need to set:

  SERVO1_FUNCTION 73
  SERVO3_FUNCTION 74
'''
from morse.builder import *

# use the ATRV rover
vehicle = ATRV()
vehicle.properties(Object = True, Graspable = False, Label = "Vehicle")
vehicle.translate(x=0.0, z=0.0)

# add a camera
camera = SemanticCamera(name="Camera")
camera.translate(x=0.2, y=0.3, z=0.9)
vehicle.append(camera)
camera.properties(cam_far=800)
camera.properties(Vertical_Flip=True)

# we could optionally stream the video to a port
#camera.add_stream('socket')

# add sensors needed for ArduPilot operation to a vehicle
pose = Pose()
vehicle.append(pose)

imu = IMU()
vehicle.append(imu)

gps = GPS()
gps.alter('UTM')
vehicle.append(gps)

velocity = Velocity()
vehicle.append(velocity)

# create a compound sensor of all of the individual sensors and stream it
all_sensors = CompoundSensor([imu, gps, velocity, pose])
all_sensors.add_stream('socket')

vehicle.append(all_sensors)

# make the vehicle controllable with speed and angular velocity
# this will be available on port 60001 by default
# an example command is:
# {"v":2, "w":1}
# which is 2m/s fwd, and rotating left at 1 radian/second
motion = MotionVW()
vehicle.append(motion)
motion.add_stream('socket')

# this would allow us to control the vehicle with a keyboard
# we don't enable it as it causes issues with sensor consistency
#keyboard = Keyboard()
#keyboard.properties(Speed=3.0)
#vehicle.append(keyboard)

# Environment
env = Environment('land-1/trees')
env.set_camera_location([10.0, -10.0, 10.0])
env.set_camera_rotation([1.0470, 0, 0.7854])
env.select_display_camera(camera)
env.set_camera_clip(clip_end=1000)

# startup at CMAC. A location is needed for the magnetometer
env.properties(longitude = 149.165230, latitude = -35.363261, altitude = 584.0)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #!/usr/bin/env bash

# assume we start the script from the root directory
ROOTDIR=$PWD
ROVER=$ROOTDIR/build/sitl/bin/ardurover

GCS_IP=192.168.2.48

BASE_DEFAULTS="$ROOTDIR/Tools/autotest/default_params/rover.parm,$ROOTDIR/Tools/autotest/default_params/rover-skid.parm"

# start up main rover in the current directory
$ROVER --model morse-skid --serial0 udpclient:$GCS_IP --serial1 mcast: --defaults $BASE_DEFAULTS &

# now start 2 rovers to follow the first, using
# a separate directory for each to keep the eeprom.bin
# and logs separate
for i in $(seq 2); do
    echo "Starting rover $i"
    port1=$(expr 60000 + $i \* 2)
    port2=$(expr 60001 + $i \* 2)
    mkdir -p rov$i

    SYSID=$(expr $i + 1)
    FOLL_SYSID=$(expr $SYSID - 1)

    # create default parameter file for the follower
    cat <<EOF > rov$i/follow.parm
SYSID_THISMAV $SYSID
SERVO1_FUNCTION 73
SERVO3_FUNCTION 74
INITIAL_MODE 6
MODE6 6
FOLL_ENABLE 1
FOLL_OFS_X -5
FOLL_OFS_TYPE 1
FOLL_SYSID $FOLL_SYSID
FOLL_DIST_MAX 1000
EOF
    pushd rov$i
    $ROVER --model "morse-skid:127.0.0.1:$port1:$port2" --serial0 tcp:0 --serial1 mcast: --instance $i --defaults $BASE_DEFAULTS,follow.parm &
    popd
done
wait
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       QGC WPL 110
0	1	0	16	0	0	0	0	57.331965	-5.673923	20.115164	1
1	0	3	16	0.000000	0.000000	0.000000	0.000000	57.405393	-5.583801	400.000000	1
2	0	3	16	0.000000	0.000000	0.000000	0.000000	57.425731	-5.423813	400.000000	1
3	0	3	16	0.000000	0.000000	0.000000	0.000000	57.369496	-5.469818	400.000000	1
4	0	3	177	1.000000	-1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1
5	0	3	16	0.000000	0.000000	0.000000	0.000000	57.319848	-5.715637	0.000000	1
6	0	3	16	0.000000	0.000000	0.000000	0.000000	57.359498	-5.710831	100.000000	1
7	0	3	16	0.000000	0.000000	0.000000	0.000000	57.392444	-5.684738	100.000000	1
8	0	3	16	0.000000	0.000000	0.000000	0.000000	57.441624	-5.598221	100.000000	1
9	0	3	16	0.000000	0.000000	0.000000	0.000000	57.458987	-5.359955	100.000000	1
10	0	3	16	0.000000	0.000000	0.000000	0.000000	57.365052	-5.364075	100.000000	1
11	0	3	16	0.000000	0.000000	0.000000	0.000000	57.298338	-5.642853	0.000000	1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                QGC WPL 110
0	1	0	16	0	0	0	0	60.8805696600	11.6695970300	216.55	1
1	0	3	16	0.000000	0.000000	0.000000	0.000000	60.95399766	11.75971903	400.000000	1
2	0	3	16	0.000000	0.000000	0.000000	0.000000	60.97433566	11.91970703	400.000000	1
3	0	3	16	0.000000	0.000000	0.000000	0.000000	60.91810066	11.87370203	400.000000	1
4	0	3	177	1.000000	-1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1
5	0	3	16	0.000000	0.000000	0.000000	0.000000	60.86845266	11.62788303	0.000000	1
6	0	3	16	0.000000	0.000000	0.000000	0.000000	60.90810266	11.63268903	100.000000	1
7	0	3	16	0.000000	0.000000	0.000000	0.000000	60.94104866	11.65878203	100.000000	1
8	0	3	16	0.000000	0.000000	0.000000	0.000000	60.99022866	11.74529903	100.000000	1
9	0	3	16	0.000000	0.000000	0.000000	0.000000	61.00759166	11.98356503	100.000000	1
10	0	3	16	0.000000	0.000000	0.000000	0.000000	60.91365666	11.97944503	100.000000	1
11	0	3	16	0.000000	0.000000	0.000000	0.000000	60.84694266	11.70066703	0.000000	1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #NOTE: 5/5/2019 2:01:38 AM Plane: LS-8b
ACRO_LOCKING,0
ACRO_PITCH_RATE,180
ACRO_ROLL_RATE,180
AFS_ENABLE,0
AHRS_COMP_BETA,0.1
AHRS_CUSTOM_PIT,0
AHRS_CUSTOM_ROLL,0
AHRS_CUSTOM_YAW,0
AHRS_EKF_TYPE,10
AHRS_GPS_GAIN,1
AHRS_GPS_MINSATS,6
AHRS_GPS_USE,1
AHRS_ORIENTATION,0
AHRS_RP_P,0.2
AHRS_TRIM_X,0
AHRS_TRIM_Y,0
AHRS_TRIM_Z,0
AHRS_WIND_MAX,0
AHRS_YAW_P,0.2
CRUISE_ALT_FLOOR,0.00
RTL_ALTITUDE,100.00
ALT_OFFSET,0
ARMING_ACCTHRESH,0.75
ARMING_CHECK,0
ARMING_REQUIRE,0
ARMING_RUDDER,1
ARMING_VOLT_MIN,0
ARMING_VOLT2_MIN,0
ARSPD_AUTOCAL,0
ARSPD_BUS,1
AIRSPEED_MAX,40
AIRSPEED_MIN,23
ARSPD_OFFSET,2013.475
ARSPD_PIN,1
ARSPD_PRIMARY,0
ARSPD_PSI_RANGE,1
ARSPD_RATIO,1.9936
ARSPD_SKIP_CAL,0
ARSPD_TUBE_ORDR,2
ARSPD_TYPE,2
ARSPD_USE,1
ARSPD2_TYPE,0
AUTOTUNE_LEVEL,6
AVD_ENABLE,0
BATT_MONITOR,0
BATT2_MONITOR,0
BRD_PWM_COUNT,8
BRD_RTC_TYPES,1
BRD_SERIAL_NUM,0
BTN_ENABLE,0
CAM_AUTO_ONLY,0
CAM_DURATION,10
CAM_FEEDBACK_PIN,-1
CAM_FEEDBACK_POL,1
CAM_MAX_ROLL,0
CAM_MIN_INTERVAL,0
CAM_RELAY_ON,1
CAM_SERVO_OFF,1100
CAM_SERVO_ON,1300
CAM_TRIGG_DIST,0
CAM_TRIGG_TYPE,0
CHUTE_CHAN,0
CHUTE_ENABLED,0
COMPASS_AUTO_ROT,2
COMPASS_AUTODEC,1
COMPASS_CAL_FIT,16
COMPASS_DEC,0.06623807
COMPASS_DEV_ID,983044
COMPASS_DEV_ID2,983052
COMPASS_DEV_ID3,0
COMPASS_DIA_X,1
COMPASS_DIA_Y,1
COMPASS_DIA_Z,1
COMPASS_DIA2_X,1
COMPASS_DIA2_Y,1
COMPASS_DIA2_Z,1
COMPASS_DIA3_X,0
COMPASS_DIA3_Y,0
COMPASS_DIA3_Z,0
COMPASS_EXTERN2,0
COMPASS_EXTERN3,0
COMPASS_EXTERNAL,1
COMPASS_FLTR_RNG,0
COMPASS_LEARN,1
COMPASS_MOT_X,0
COMPASS_MOT_Y,0
COMPASS_MOT_Z,0
COMPASS_MOT2_X,0
COMPASS_MOT2_Y,0
COMPASS_MOT2_Z,0
COMPASS_MOT3_X,0
COMPASS_MOT3_Y,0
COMPASS_MOT3_Z,0
COMPASS_MOTCT,0
COMPASS_ODI_X,0
COMPASS_ODI_Y,0
COMPASS_ODI_Z,0
COMPASS_ODI2_X,0
COMPASS_ODI2_Y,0
COMPASS_ODI2_Z,0
COMPASS_ODI3_X,0
COMPASS_ODI3_Y,0
COMPASS_ODI3_Z,0
COMPASS_OFFS_MAX,850
COMPASS_OFS_X,5
COMPASS_OFS_Y,13
COMPASS_OFS_Z,-18
COMPASS_OFS2_X,5
COMPASS_OFS2_Y,13
COMPASS_OFS2_Z,-18
COMPASS_OFS3_X,0
COMPASS_OFS3_Y,0
COMPASS_OFS3_Z,0
COMPASS_ORIENT,0
COMPASS_ORIENT2,0
COMPASS_ORIENT3,0
COMPASS_PMOT_EN,0
COMPASS_PRIMARY,0
COMPASS_DISBLMSK,0
COMPASS_USE,0
COMPASS_USE2,0
COMPASS_USE3,0
CRASH_ACC_THRESH,0
CRASH_DETECT,0
DSPOILR_RUD_RATE,100
EK2_ENABLE,0
EK3_ENABLE,0
FBWA_TDRAG_CHAN,0
FBWB_CLIMB_RATE,2
FBWB_ELEV_REV,0
FENCE_ACTION,0
FENCE_AUTOENABLE,0
FENCE_CHANNEL,0
FENCE_MAXALT,0
FENCE_MINALT,0
FENCE_RET_RALLY,0
FENCE_RETALT,0
FENCE_TOTAL,0
FLAP_1_PERCNT,0
FLAP_1_SPEED,0
FLAP_2_PERCNT,0
FLAP_2_SPEED,0
FLAP_IN_CHANNEL,0
FLAP_SLEWRATE,75
FLOW_ADDR,0
FLOW_ENABLE,0
FLOW_FXSCALER,0
FLOW_FYSCALER,0
FLOW_ORIENT_YAW,0
FLOW_POS_X,0
FLOW_POS_Y,0
FLOW_POS_Z,0
FLTMODE_CH,8
FLTMODE1,11
FLTMODE2,11
FLTMODE3,5
FLTMODE4,5
FLTMODE5,0
FLTMODE6,0
FORMAT_VERSION,13
FS_GCS_ENABL,0
FS_LONG_ACTN,0
FS_LONG_TIMEOUT,5
FS_SHORT_ACTN,0
FS_SHORT_TIMEOUT,1.5
GCS_PID_MASK,0
GLIDE_SLOPE_MIN,15
GLIDE_SLOPE_THR,5
GPS_AUTO_CONFIG,1
GPS_AUTO_SWITCH,1
GPS_BLEND_MASK,5
GPS_BLEND_TC,10
GPS1_DELAY_MS,0
GPS2_DELAY_MS,0
GPS1_GNSS_MODE,0
GPS2_GNSS_MODE,0
GPS_INJECT_TO,127
GPS_MIN_ELEV,-100
GPS_NAVFILTER,8
GPS1_POS_X,0
GPS1_POS_Y,0
GPS1_POS_Z,0
GPS2_POS_X,0
GPS2_POS_Y,0
GPS2_POS_Z,0
GPS_RATE_MS,200
GPS2_RATE_MS,200
GPS_RAW_DATA,0
GPS_SAVE_CFG,0
GPS_SBAS_MODE,2
GPS_SBP_LOGMASK,-32768
GPS1_TYPE,1
GPS2_TYPE,0
GRIP_ENABLE,0
GROUND_STEER_ALT,0
GROUND_STEER_DPS,90
HIL_ERR_LIMIT,5
HIL_SERVOS,0
HOME_RESET_ALT,0
ICE_ENABLE,0
INITIAL_MODE,0
INS_ACC_BODYFIX,2
INS_ACC_ID,2753028
INS_ACC2_ID,2753036
INS_ACC2OFFS_X,0
INS_ACC2OFFS_Y,0
INS_ACC2OFFS_Z,0
INS_ACC2SCAL_X,1
INS_ACC2SCAL_Y,1
INS_ACC2SCAL_Z,1
INS_ACC3_ID,0
INS_ACC3OFFS_X,0
INS_ACC3OFFS_Y,0
INS_ACC3OFFS_Z,0
INS_ACC3SCAL_X,0
INS_ACC3SCAL_Y,0
INS_ACC3SCAL_Z,0
INS_ACCEL_FILTER,20
INS_ACCOFFS_X,0
INS_ACCOFFS_Y,0
INS_ACCOFFS_Z,0
INS_ACCSCAL_X,1
INS_ACCSCAL_Y,1
INS_ACCSCAL_Z,1
INS_ENABLE_MASK,1
INS_FAST_SAMPLE,0
INS_GYR_CAL,0
INS_GYR_ID,2752772
INS_GYR2_ID,2752780
INS_GYR2OFFS_X,0.00406
INS_GYR2OFFS_Y,0.013341
INS_GYR2OFFS_Z,-0.071742
INS_GYR3_ID,0
INS_GYR3OFFS_X,0
INS_GYR3OFFS_Y,0
INS_GYR3OFFS_Z,0
INS_GYRO_FILTER,20
INS_GYROFFS_X,0.004127
INS_GYROFFS_Y,0.013363
INS_GYROFFS_Z,-0.071777
INS_LOG_BAT_CNT,1024
INS_LOG_BAT_LGCT,32
INS_LOG_BAT_LGIN,20
INS_LOG_BAT_MASK,0
INS_LOG_BAT_OPT,0
INS_HNTC2_ENABLE,0
INS_POS1_X,0
INS_POS1_Y,0
INS_POS1_Z,0
INS_POS2_X,0
INS_POS2_Y,0
INS_POS2_Z,0
INS_POS3_X,0
INS_POS3_Y,0
INS_POS3_Z,0
INS_PRODUCT_ID,0
INS_STILL_THRESH,0.1
INS_TRIM_OPTION,1
INS_USE,1
INS_USE2,1
INS_USE3,0
INVERTEDFLT_CH,0
KFF_RDDRMIX,0.7
KFF_THR2PTCH,0
LAND_ABORT_DEG,0
LAND_ABORT_THR,0
LAND_DISARMDELAY,20
LAND_DS_ABORTALT,0
LAND_DS_AIL_SCL,1
LAND_DS_APP_EXT,50
LAND_DS_ARSP_MAX,15
LAND_DS_ARSP_MIN,10
LAND_DS_D,0
LAND_DS_ELEV_PWM,1500
LAND_DS_I,0
LAND_DS_IMAX,0
LAND_DS_L1,30
LAND_DS_L1_I,0
LAND_DS_L1_TCON,0.4
LAND_DS_P,0
LAND_DS_SLEW_SPD,0.5
LAND_DS_SLOPE_A,1
LAND_DS_SLOPE_B,1
LAND_DS_V_DWN,2
LAND_DS_V_FWD,1
LAND_DS_YAW_LIM,10
LAND_FLAP_PERCNT,0
LAND_FLARE_ALT,12
LAND_FLARE_SEC,2
LAND_PF_ALT,10
LAND_PF_ARSPD,0
LAND_PF_SEC,6
LAND_PITCH_DEG,0.00
LAND_SLOPE_RCALC,2
LAND_THEN_NEUTRL,0
LAND_THR_SLEW,0
LAND_TYPE,0
LEVEL_ROLL_LIMIT,5
PTCH_LIM_MAX_DEG,20.00
PTCH_LIM_MIN_DEG,-25.00
ROLL_LIMIT_DEG,50.00
LOG_BACKEND_TYPE,1
LOG_BITMASK,65535
LOG_DISARMED,0
LOG_FILE_BUFSIZE,16
LOG_FILE_DSRMROT,0
LOG_MAV_BUFSIZE,8
LOG_REPLAY,0
MAG_ENABLE,1
MANUAL_RCMASK,0
MIN_GROUNDSPEED,0
MIS_OPTIONS,0
MIS_RESTART,0
MIS_TOTAL,12
MIXING_GAIN,0.5
MIXING_OFFSET,0
MNT_ANGMAX_PAN,4500
MNT_ANGMAX_ROL,4500
MNT_ANGMAX_TIL,4500
MNT_ANGMIN_PAN,-4500
MNT_ANGMIN_ROL,-4500
MNT_ANGMIN_TIL,-4500
MNT_DEFLT_MODE,3
MNT_JSTICK_SPD,0
MNT_LEAD_PTCH,0
MNT_LEAD_RLL,0
MNT_NEUTRAL_X,0
MNT_NEUTRAL_Y,0
MNT_NEUTRAL_Z,0
MNT_RETRACT_X,0
MNT_RETRACT_Y,0
MNT_RETRACT_Z,0
MNT_TYPE,0
NAV_CONTROLLER,1
NAVL1_DAMPING,1
NAVL1_LIM_BANK,60
NAVL1_PERIOD,20
NAVL1_XTRACK_I,0.02
NTF_BUZZ_ENABLE,1
NTF_BUZZ_PIN,0
NTF_DISPLAY_TYPE,0
NTF_LED_BRIGHT,3
NTF_LED_OVERRIDE,0
NTF_LED_TYPES,199
PTCH_RATE_D,0.000000
PTCH_RATE_FF,1.432500
PTCH_RATE_I,0.150000
PTCH_RATE_IMAX,0.888889
PTCH_RATE_P,0.300000
PTCH2SRV_RLL,1
PTCH2SRV_RMAX_DN,75
PTCH2SRV_RMAX_UP,75
PTCH2SRV_TCONST,0.45
Q_ENABLE,0
RALLY_INCL_HOME,0
RALLY_LIMIT_KM,5
RALLY_TOTAL,0
RC_OVERRIDE_TIME,3
RC1_DZ,30
RC1_MAX,1900
RC1_MIN,1100
RC1_REVERSED,0
RC1_TRIM,1500
RC10_DZ,0
RC10_MAX,1900
RC10_MIN,1100
RC10_REVERSED,0
RC10_TRIM,1500
RC11_DZ,0
RC11_MAX,1900
RC11_MIN,1100
RC11_REVERSED,0
RC11_TRIM,1500
RC12_DZ,0
RC12_MAX,1900
RC12_MIN,1100
RC12_REVERSED,0
RC12_TRIM,1500
RC13_DZ,0
RC13_MAX,1900
RC13_MIN,1100
RC13_REVERSED,0
RC13_TRIM,1500
RC14_DZ,0
RC14_MAX,1900
RC14_MIN,1100
RC14_REVERSED,0
RC14_TRIM,1500
RC15_DZ,0
RC15_MAX,1900
RC15_MIN,1100
RC15_REVERSED,0
RC15_TRIM,1500
RC16_DZ,0
RC16_MAX,1900
RC16_MIN,1100
RC16_REVERSED,0
RC16_TRIM,1500
RC2_DZ,30
RC2_MAX,1900
RC2_MIN,1100
RC2_REVERSED,0
RC2_TRIM,1500
RC3_DZ,30
RC3_MAX,1900
RC3_MIN,1100
RC3_REVERSED,0
RC3_TRIM,1500
RC4_DZ,30
RC4_MAX,1900
RC4_MIN,1100
RC4_REVERSED,0
RC4_TRIM,1500
RC5_DZ,0
RC5_MAX,1900
RC5_MIN,1100
RC5_REVERSED,0
RC5_TRIM,1500
RC6_DZ,0
RC6_MAX,1900
RC6_MIN,1100
RC6_REVERSED,0
RC6_TRIM,1500
RC7_DZ,0
RC7_MAX,1900
RC7_MIN,1100
RC7_REVERSED,0
RC7_TRIM,1500
RC8_DZ,0
RC8_MAX,1900
RC8_MIN,1100
RC8_REVERSED,0
RC8_TRIM,1500
RC9_DZ,0
RC9_MAX,1900
RC9_MIN,1100
RC9_REVERSED,0
RC9_TRIM,1500
RELAY_DEFAULT,0
RELAY_PIN,13
RELAY_PIN2,-1
RELAY_PIN3,-1
RELAY_PIN4,-1
RLL_RATE_D,0.000000
RLL_RATE_FF,1.002750
RLL_RATE_I,0.105000
RLL_RATE_IMAX,0.666667
RLL_RATE_P,0.210000
RLL2SRV_RMAX,75
RLL2SRV_TCONST,0.45
RNGFND_ADDR,0
RNGFND_FUNCTION,0
RNGFND_GNDCLEAR,10
RNGFND_LANDING,0
RNGFND_MAX_CM,700
RNGFND_MIN_CM,20
RNGFND_OFFSET,0
RNGFND_ORIENT,25
RNGFND_PIN,-1
RNGFND_POS_X,0
RNGFND_POS_Y,0
RNGFND_POS_Z,0
RNGFND_PWRRNG,0
RNGFND_RMETRIC,1
RNGFND_SCALING,3
RNGFND_SETTLE,0
RNGFND_STOP_PIN,-1
RNGFND_TYPE,0
RNGFND2_ADDR,0
RNGFND2_FUNCTION,0
RNGFND2_GNDCLEAR,10
RNGFND2_MAX_CM,700
RNGFND2_MIN_CM,20
RNGFND2_OFFSET,0
RNGFND2_ORIENT,25
RNGFND2_PIN,-1
RNGFND2_POS_X,0
RNGFND2_POS_Y,0
RNGFND2_POS_Z,0
RNGFND2_RMETRIC,1
RNGFND2_SCALING,3
RNGFND2_SETTLE,0
RNGFND2_STOP_PIN,-1
RNGFND2_TYPE,0
RSSI_TYPE,0
RST_MISSION_CH,0
RST_SWITCH_CH,0
RTL_AUTOLAND,0
RTL_RADIUS,0
RUDD_DT_GAIN,10
RUDDER_ONLY,0
SCALING_SPEED,15
SCHED_DEBUG,0
SCHED_LOOP_RATE,50
SERIAL0_BAUD,115
SERIAL0_PROTOCOL,1
SERIAL1_BAUD,57
SERIAL1_PROTOCOL,1
SERIAL2_BAUD,57
SERIAL2_PROTOCOL,1
SERIAL3_BAUD,38
SERIAL3_PROTOCOL,5
SERIAL4_BAUD,38
SERIAL4_PROTOCOL,5
SERIAL5_BAUD,57
SERIAL5_PROTOCOL,-1
SERIAL6_BAUD,57
SERIAL6_PROTOCOL,-1
SERVO_AUTO_TRIM,0
SERVO_RATE,50
SERVO_SBUS_RATE,50
SERVO_VOLZ_MASK,0
SERVO1_FUNCTION,4
SERVO1_MAX,1900
SERVO1_MIN,1100
SERVO1_REVERSED,0
SERVO1_TRIM,1500
SERVO10_FUNCTION,0
SERVO10_MAX,1900
SERVO10_MIN,1100
SERVO10_REVERSED,0
SERVO10_TRIM,1500
SERVO11_FUNCTION,0
SERVO11_MAX,1900
SERVO11_MIN,1100
SERVO11_REVERSED,0
SERVO11_TRIM,1500
SERVO12_FUNCTION,0
SERVO12_MAX,1900
SERVO12_MIN,1100
SERVO12_REVERSED,0
SERVO12_TRIM,1500
SERVO13_FUNCTION,0
SERVO13_MAX,1900
SERVO13_MIN,1100
SERVO13_REVERSED,0
SERVO13_TRIM,1500
SERVO14_FUNCTION,0
SERVO14_MAX,1900
SERVO14_MIN,1100
SERVO14_REVERSED,0
SERVO14_TRIM,1500
SERVO15_FUNCTION,0
SERVO15_MAX,1900
SERVO15_MIN,1100
SERVO15_REVERSED,0
SERVO15_TRIM,1500
SERVO16_FUNCTION,0
SERVO16_MAX,1900
SERVO16_MIN,1100
SERVO16_REVERSED,0
SERVO16_TRIM,1500
SERVO2_FUNCTION,19
SERVO2_MAX,1900
SERVO2_MIN,1100
SERVO2_REVERSED,0
SERVO2_TRIM,1500
SERVO3_FUNCTION,70
SERVO3_MAX,1900
SERVO3_MIN,1100
SERVO3_REVERSED,0
SERVO3_TRIM,1500
SERVO4_FUNCTION,21
SERVO4_MAX,1900
SERVO4_MIN,1100
SERVO4_REVERSED,0
SERVO4_TRIM,1500
SERVO5_FUNCTION,1
SERVO5_MAX,1900
SERVO5_MIN,1100
SERVO5_REVERSED,0
SERVO5_TRIM,1500
SERVO6_FUNCTION,110
SERVO6_MAX,2000
SERVO6_MIN,1000
SERVO6_REVERSED,0
SERVO6_TRIM,1500
SERVO7_FUNCTION,0
SERVO7_MAX,1900
SERVO7_MIN,1100
SERVO7_REVERSED,0
SERVO7_TRIM,1500
SERVO8_FUNCTION,0
SERVO8_MAX,1900
SERVO8_MIN,1100
SERVO8_REVERSED,0
SERVO8_TRIM,1500
SERVO9_FUNCTION,0
SERVO9_MAX,1900
SERVO9_MIN,1100
SERVO9_REVERSED,0
SERVO9_TRIM,1500
SIM_ADSB_ALT,1000
SIM_ADSB_COUNT,-1
SIM_ADSB_RADIUS,10000
SIM_ADSB_TX,0
SIM_ARSPD_FAIL,0
SIM_ARSPD_FAIL_P,0
SIM_ARSPD_PITOT,0
SIM_ARSPD_RND,0.5
SIM_ARSPD_SIGN,0
SIM_ARSPD2_FAIL,0
SIM_ARSPD2_FAILP,0
SIM_ARSPD2_PITOT,0
SIM_BARO_DELAY,0
SIM_BARO_DISABLE,0
SIM_BARO_DRIFT,0
SIM_BARO_GLITCH,0
SIM_BARO_RND,0.2
SIM_BATT_VOLTAGE,12.6
SIM_DRIFT_SPEED,0.05
SIM_DRIFT_TIME,5
SIM_ENGINE_FAIL,0
SIM_ENGINE_MUL,1
SIM_FLOAT_EXCEPT,1
SIM_FLOW_DELAY,0
SIM_FLOW_ENABLE,0
SIM_FLOW_POS_X,0
SIM_FLOW_POS_Y,0
SIM_FLOW_POS_Z,0
SIM_FLOW_RATE,10
SIM_GP2_GLITCH_X,0
SIM_GP2_GLITCH_Y,0
SIM_GP2_GLITCH_Z,0
SIM_GPS_ALT_OFS,0
SIM_GPS_BYTELOSS,0
SIM_GPS_DISABLE,0
SIM_GPS_DRIFTALT,0
SIM_GPS_GLITCH_X,0
SIM_GPS_GLITCH_Y,0
SIM_GPS_GLITCH_Z,0
SIM_GPS_HZ,20
SIM_GPS_LOCKTIME,0
SIM_GPS_NOISE,0
SIM_GPS_NUMSATS,10
SIM_GPS_TYPE,1
SIM_GPS2_ENABLE,0
SIM_GPS2_TYPE,1
SIM_IMU_POS_X,0
SIM_IMU_POS_Y,0
SIM_IMU_POS_Z,0
SIM_MAG_ALY_HGT,1
SIM_MAG_ALY_X,0
SIM_MAG_ALY_Y,0
SIM_MAG_ALY_Z,0
SIM_MAG_DELAY,0
SIM_MAG_DIA_X,0
SIM_MAG_DIA_Y,0
SIM_MAG_DIA_Z,0
SIM_MAG_ERROR,0
SIM_MAG_MOT_X,0
SIM_MAG_MOT_Y,0
SIM_MAG_MOT_Z,0
SIM_MAG_ODI_X,0
SIM_MAG_ODI_Y,0
SIM_MAG_ODI_Z,0
SIM_MAG_OFS_X,5
SIM_MAG_OFS_Y,13
SIM_MAG_OFS_Z,-18
SIM_MAG_ORIENT,0
SIM_MAG_RND,0
SIM_ODOM_ENABLE,0
SIM_PIN_MASK,0
SIM_RC_FAIL,0
SIM_SERVO_SPEED,0.14
SIM_SONAR_GLITCH,0
SIM_SONAR_POS_X,0
SIM_SONAR_POS_Y,0
SIM_SONAR_POS_Z,0
SIM_SONAR_RND,0
SIM_SONAR_SCALE,12.1212
SIM_SPEEDUP,-1
SIM_TEMP_BFACTOR,0
SIM_TEMP_BRD_OFF,20
SIM_TEMP_START,25
SIM_TEMP_TCONST,30
SIM_TERRAIN,1
SIM_VICON_HSTLEN,0
SIM_WIND_DIR,180
SIM_WIND_DIR_Z,0
SIM_WIND_SPD,0
SIM_WIND_T,0
SIM_WIND_T_ALT,60
SIM_WIND_T_COEF,0.01
SIM_WIND_TURB,0
SOAR_ALT_CUTOFF,2000
SOAR_ALT_MAX,5000
SOAR_ALT_MIN,0
SOAR_ARSP_CMD,9
SOAR_ASPD_SRC,1
SOAR_DEBUG,0
SOAR_DELTA_MODE,0
SOAR_DIST_AHEAD,5
SOAR_ENABLE,1
SOAR_ENABLE_CH,0
SOAR_EXIT_MODE,0
SOAR_GEOFENCE,0
SOAR_GPS_SYNC,1
SOAR_I_MOMENT,0.00257482
SOAR_K_AILERON,1.448331
SOAR_K_ROLLDAMP,0.4107359
SOAR_MCCREADY,0.7
SOAR_MIN_CRSE_S,20
SOAR_MIN_THML_S,20
SOAR_NO_STALLPRV,1
SOAR_POLAR_B,0.0156
SOAR_POLAR_CD0,0.00859
SOAR_POLAR_K,489
SOAR_POLY_A,-0.03099261
SOAR_POLY_B,0.4473186
SOAR_POLY_C,-2.30293
SOAR_POMDP_EXT,0
SOAR_POMDP_HORI,4
SOAR_POMDP_K,5
SOAR_POMDP_LOOP,1
SOAR_POMDP_N,10
SOAR_POMDP_N_ACT,2
SOAR_POMDP_NORM,0
SOAR_POMDP_ON,0
SOAR_POMDP_PLN,0
SOAR_POMDP_PTH,50
SOAR_POMDP_ROLL1,15
SOAR_POMDP_ROLL2,45
SOAR_POMDP_RRATE,75
SOAR_POMDP_STEP,1
SOAR_Q1,0.001
SOAR_Q2,0.03
SOAR_R,0.45
SOAR_ROLL_CLP,-1.128087
SOAR_RUN_TEST,0
SOAR_SG_FILTER,1
SOAR_TEST_DIST,20
SOAR_TEST_OFFSET,10
SOAR_TEST_RADIUS,20
SOAR_TEST_W,2.5
SOAR_VARIO_TYPE,1
SOAR_VSPEED,1000
SR0_ADSB,5
SR0_EXT_STAT,2
SR0_EXTRA1,10
SR0_EXTRA2,10
SR0_EXTRA3,2
SR0_PARAMS,10
SR0_POSITION,2
SR0_RAW_CTRL,4
SR0_RAW_SENS,2
SR0_RC_CHAN,2
SR1_ADSB,5
SR1_EXT_STAT,1
SR1_EXTRA1,1
SR1_EXTRA2,1
SR1_EXTRA3,1
SR1_PARAMS,10
SR1_POSITION,1
SR1_RAW_CTRL,1
SR1_RAW_SENS,1
SR1_RC_CHAN,1
SR2_ADSB,5
SR2_EXT_STAT,1
SR2_EXTRA1,1
SR2_EXTRA2,1
SR2_EXTRA3,1
SR2_PARAMS,10
SR2_POSITION,1
SR2_RAW_CTRL,1
SR2_RAW_SENS,1
SR2_RC_CHAN,1
SR3_ADSB,5
SR3_EXT_STAT,1
SR3_EXTRA1,1
SR3_EXTRA2,1
SR3_EXTRA3,1
SR3_PARAMS,10
SR3_POSITION,1
SR3_RAW_CTRL,1
SR3_RAW_SENS,1
SR3_RC_CHAN,1
STAB_PITCH_DOWN,2
STALL_PREVENTION,1
STAT_BOOTCNT,36
STAT_FLTTIME,13767
STAT_RESET,100133200
STAT_RUNTIME,26146
STEER2SRV_D,0.005
STEER2SRV_DRTFCT,10
STEER2SRV_DRTMIN,4500
STEER2SRV_DRTSPD,0
STEER2SRV_FF,0
STEER2SRV_I,0.2
STEER2SRV_IMAX,1500
STEER2SRV_MINSPD,1
STEER2SRV_P,1.8
STEER2SRV_TCONST,0.75
STICK_MIXING,1
SYS_NUM_RESETS,37
SYSID_ENFORCE,0
SYSID_MYGCS,255
SYSID_THISMAV,1
TECS_APPR_SMAX,0
TECS_CLMB_MAX,5
TECS_HGT_OMEGA,3
TECS_INTEG_GAIN,0.5
TECS_LAND_ARSPD,-1
TECS_LAND_DAMP,0.5
TECS_LAND_IGAIN,0
TECS_LAND_PDAMP,0
TECS_LAND_PMAX,10
TECS_LAND_SINK,0.25
TECS_LAND_SPDWGT,-1
TECS_LAND_SRC,0
TECS_LAND_TCONST,12
TECS_LAND_TDAMP,0
TECS_LAND_THR,-1
TECS_PITCH_MAX,0
TECS_PITCH_MIN,0
TECS_PTCH_DAMP,0.2
TECS_RLL2THR,10
TECS_SINK_MAX,5.5
TECS_SINK_MIN,2
TECS_SPD_OMEGA,2
TECS_SPDWEIGHT,2
TECS_SYNAIRSPEED,0
TECS_THR_DAMP,0.5
TECS_TIME_CONST,12
TECS_TKOFF_IGAIN,0
TECS_VERT_ACC,7
TELEM_DELAY,0
TERRAIN_ENABLE,0
TERRAIN_FOLLOW,0
TERRAIN_LOOKAHD,2000
TERRAIN_SPACING,100
THR_FAILSAFE,1
THR_FS_VALUE,950
THR_MAX,100
THR_MIN,-100
THR_PASS_STAB,0
THR_SLEWRATE,100
THR_SUPP_MAN,0
THROTTLE_NUDGE,1
TKOFF_FLAP_PCNT,0
TKOFF_PLIM_SEC,2
TKOFF_ROTATE_SPD,0
TKOFF_TDRAG_ELEV,0
TKOFF_TDRAG_SPD1,0
TKOFF_THR_DELAY,2
TKOFF_THR_MAX,0
TKOFF_THR_MINACC,0
TKOFF_THR_MINSPD,0
TKOFF_THR_SLEW,0
AIRSPEED_CRUISE,30.00
TRIM_AUTO,0
PTCH_TRIM_DEG,0.00
TRIM_THROTTLE,45
TUNE_CHAN,0
TUNE_CHAN_MAX,2000
TUNE_CHAN_MIN,1000
TUNE_ERR_THRESH,0.15
TUNE_MODE_REVERT,1
TUNE_PARAM,0
TUNE_RANGE,2
TUNE_SELECTOR,0
USE_REV_THRUST,2
WP_LOITER_RAD,90
WP_MAX_RADIUS,0
WP_RADIUS,130
YAW2SRV_DAMP,1.7
YAW2SRV_IMAX,1500
YAW2SRV_INT,0
YAW2SRV_RLL,1.1
YAW2SRV_SLIP,0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 