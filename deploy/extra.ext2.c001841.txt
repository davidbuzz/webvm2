ma":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  AdminSettings                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Current active link settings.
/// </BLOCKQUOTE></PRE>
///
/// Element "OperSettings" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  OperSettings                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Integer indicating interface type, for example: 6 is ethernet.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceType" of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting is a complexType.
///
/// @note class tt__NetworkInterfaceConnectionSetting operations:
/// - tt__NetworkInterfaceConnectionSetting* soap_new_tt__NetworkInterfaceConnectionSetting(soap*) allocate and default initialize
/// - tt__NetworkInterfaceConnectionSetting* soap_new_tt__NetworkInterfaceConnectionSetting(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceConnectionSetting* soap_new_req_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceConnectionSetting* soap_new_set_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceConnectionSetting::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceConnectionSetting(soap*, tt__NetworkInterfaceConnectionSetting*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceConnectionSetting(soap*, tt__NetworkInterfaceConnectionSetting*) serialize to a stream
/// - tt__NetworkInterfaceConnectionSetting* tt__NetworkInterfaceConnectionSetting::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceConnectionSetting, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceConnectionSetting::soap_del() deep deletes tt__NetworkInterfaceConnectionSetting data members, use only after tt__NetworkInterfaceConnectionSetting::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceConnectionSetting::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceConnectionSetting or derived type identifier
class tt__NetworkInterfaceConnectionSetting
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto negotiation on/off.
/// </BLOCKQUOTE></PRE>
///
/// Element "AutoNegotiation" of type xs:boolean.
    bool                                 AutoNegotiation                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed.
/// </BLOCKQUOTE></PRE>
///
/// Element "Speed" of type xs:int.
    int                                  Speed                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duplex type, Half or Full.
/// </BLOCKQUOTE></PRE>
///
/// Element "Duplex" of type "http://www.onvif.org/ver10/schema":Duplex.
    enum tt__Duplex                      Duplex                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo is a complexType.
///
/// @note class tt__NetworkInterfaceInfo operations:
/// - tt__NetworkInterfaceInfo* soap_new_tt__NetworkInterfaceInfo(soap*) allocate and default initialize
/// - tt__NetworkInterfaceInfo* soap_new_tt__NetworkInterfaceInfo(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceInfo* soap_new_req_tt__NetworkInterfaceInfo(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceInfo* soap_new_set_tt__NetworkInterfaceInfo(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceInfo::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceInfo(soap*, tt__NetworkInterfaceInfo*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceInfo(soap*, tt__NetworkInterfaceInfo*) serialize to a stream
/// - tt__NetworkInterfaceInfo* tt__NetworkInterfaceInfo::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceInfo::soap_del() deep deletes tt__NetworkInterfaceInfo data members, use only after tt__NetworkInterfaceInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceInfo::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceInfo or derived type identifier
class tt__NetworkInterfaceInfo
{ public:
/// <PRE><BLOCKQUOTE>
///   Network interface name, for example eth0.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type xs:string.
    char*                                Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Network interface MAC address.
/// </BLOCKQUOTE></PRE>
///
/// Element "HwAddress" of type "http://www.onvif.org/ver10/schema":HwAddress.
    tt__HwAddress                        HwAddress                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
///
/// Element "MTU" of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterface is a complexType.
///
/// @note class tt__IPv6NetworkInterface operations:
/// - tt__IPv6NetworkInterface* soap_new_tt__IPv6NetworkInterface(soap*) allocate and default initialize
/// - tt__IPv6NetworkInterface* soap_new_tt__IPv6NetworkInterface(soap*, int num) allocate and default initialize an array
/// - tt__IPv6NetworkInterface* soap_new_req_tt__IPv6NetworkInterface(soap*, ...) allocate, set required members
/// - tt__IPv6NetworkInterface* soap_new_set_tt__IPv6NetworkInterface(soap*, ...) allocate, set all public members
/// - tt__IPv6NetworkInterface::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6NetworkInterface(soap*, tt__IPv6NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterface(soap*, tt__IPv6NetworkInterface*) serialize to a stream
/// - tt__IPv6NetworkInterface* tt__IPv6NetworkInterface::soap_dup(soap*) returns deep copy of tt__IPv6NetworkInterface, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6NetworkInterface::soap_del() deep deletes tt__IPv6NetworkInterface data members, use only after tt__IPv6NetworkInterface::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6NetworkInterface::soap_type() returns SOAP_TYPE_tt__IPv6NetworkInterface or derived type identifier
class tt__IPv6NetworkInterface
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv6 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Config" of type "http://www.onvif.org/ver10/schema":IPv6Configuration.
    tt__IPv6Configuration*               Config                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterface is a complexType.
///
/// @note class tt__IPv4NetworkInterface operations:
/// - tt__IPv4NetworkInterface* soap_new_tt__IPv4NetworkInterface(soap*) allocate and default initialize
/// - tt__IPv4NetworkInterface* soap_new_tt__IPv4NetworkInterface(soap*, int num) allocate and default initialize an array
/// - tt__IPv4NetworkInterface* soap_new_req_tt__IPv4NetworkInterface(soap*, ...) allocate, set required members
/// - tt__IPv4NetworkInterface* soap_new_set_tt__IPv4NetworkInterface(soap*, ...) allocate, set all public members
/// - tt__IPv4NetworkInterface::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4NetworkInterface(soap*, tt__IPv4NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterface(soap*, tt__IPv4NetworkInterface*) serialize to a stream
/// - tt__IPv4NetworkInterface* tt__IPv4NetworkInterface::soap_dup(soap*) returns deep copy of tt__IPv4NetworkInterface, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4NetworkInterface::soap_del() deep deletes tt__IPv4NetworkInterface data members, use only after tt__IPv4NetworkInterface::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4NetworkInterface::soap_type() returns SOAP_TYPE_tt__IPv4NetworkInterface or derived type identifier
class tt__IPv4NetworkInterface
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Config" of type "http://www.onvif.org/ver10/schema":IPv4Configuration.
    tt__IPv4Configuration*               Config                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4Configuration is a complexType.
///
/// @note class tt__IPv4Configuration operations:
/// - tt__IPv4Configuration* soap_new_tt__IPv4Configuration(soap*) allocate and default initialize
/// - tt__IPv4Configuration* soap_new_tt__IPv4Configuration(soap*, int num) allocate and default initialize an array
/// - tt__IPv4Configuration* soap_new_req_tt__IPv4Configuration(soap*, ...) allocate, set required members
/// - tt__IPv4Configuration* soap_new_set_tt__IPv4Configuration(soap*, ...) allocate, set all public members
/// - tt__IPv4Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4Configuration(soap*, tt__IPv4Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv4Configuration(soap*, tt__IPv4Configuration*) serialize to a stream
/// - tt__IPv4Configuration* tt__IPv4Configuration::soap_dup(soap*) returns deep copy of tt__IPv4Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4Configuration::soap_del() deep deletes tt__IPv4Configuration data members, use only after tt__IPv4Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4Configuration::soap_type() returns SOAP_TYPE_tt__IPv4Configuration or derived type identifier
class tt__IPv4Configuration
{ public:
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv4Address* is 0..unbounded.
  $ int                                  __sizeManual                   0;
/// Pointer to array tt__PrefixedIPv4Address* of size 0..unbounded.
    tt__PrefixedIPv4Address*            *Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Link local address.
/// </BLOCKQUOTE></PRE>
///
/// Element "LinkLocal" of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             LinkLocal                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address configured by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             FromDHCP                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type xs:boolean.
    bool                                 DHCP                           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6Configuration is a complexType.
///
/// @note class tt__IPv6Configuration operations:
/// - tt__IPv6Configuration* soap_new_tt__IPv6Configuration(soap*) allocate and default initialize
/// - tt__IPv6Configuration* soap_new_tt__IPv6Configuration(soap*, int num) allocate and default initialize an array
/// - tt__IPv6Configuration* soap_new_req_tt__IPv6Configuration(soap*, ...) allocate, set required members
/// - tt__IPv6Configuration* soap_new_set_tt__IPv6Configuration(soap*, ...) allocate, set all public members
/// - tt__IPv6Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6Configuration(soap*, tt__IPv6Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv6Configuration(soap*, tt__IPv6Configuration*) serialize to a stream
/// - tt__IPv6Configuration* tt__IPv6Configuration::soap_dup(soap*) returns deep copy of tt__IPv6Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6Configuration::soap_del() deep deletes tt__IPv6Configuration data members, use only after tt__IPv6Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6Configuration::soap_type() returns SOAP_TYPE_tt__IPv6Configuration or derived type identifier
class tt__IPv6Configuration
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "AcceptRouterAdvert" of type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum tt__IPv6DHCPConfiguration       DHCP                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of manually entered IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeManual                   0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of link local IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeLinkLocal                0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *LinkLocal                      0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeFromDHCP                 0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *FromDHCP                       0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using router advertisment.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeFromRA                   0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *FromRA                         0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension.
    tt__IPv6ConfigurationExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension is a complexType.
///
/// @note class tt__IPv6ConfigurationExtension operations:
/// - tt__IPv6ConfigurationExtension* soap_new_tt__IPv6ConfigurationExtension(soap*) allocate and default initialize
/// - tt__IPv6ConfigurationExtension* soap_new_tt__IPv6ConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__IPv6ConfigurationExtension* soap_new_req_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__IPv6ConfigurationExtension* soap_new_set_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__IPv6ConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6ConfigurationExtension(soap*, tt__IPv6ConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__IPv6ConfigurationExtension(soap*, tt__IPv6ConfigurationExtension*) serialize to a stream
/// - tt__IPv6ConfigurationExtension* tt__IPv6ConfigurationExtension::soap_dup(soap*) returns deep copy of tt__IPv6ConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6ConfigurationExtension::soap_del() deep deletes tt__IPv6ConfigurationExtension data members, use only after tt__IPv6ConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6ConfigurationExtension::soap_type() returns SOAP_TYPE_tt__IPv6ConfigurationExtension or derived type identifier
class tt__IPv6ConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocol is a complexType.
///
/// @note class tt__NetworkProtocol operations:
/// - tt__NetworkProtocol* soap_new_tt__NetworkProtocol(soap*) allocate and default initialize
/// - tt__NetworkProtocol* soap_new_tt__NetworkProtocol(soap*, int num) allocate and default initialize an array
/// - tt__NetworkProtocol* soap_new_req_tt__NetworkProtocol(soap*, ...) allocate, set required members
/// - tt__NetworkProtocol* soap_new_set_tt__NetworkProtocol(soap*, ...) allocate, set all public members
/// - tt__NetworkProtocol::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkProtocol(soap*, tt__NetworkProtocol*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocol(soap*, tt__NetworkProtocol*) serialize to a stream
/// - tt__NetworkProtocol* tt__NetworkProtocol::soap_dup(soap*) returns deep copy of tt__NetworkProtocol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkProtocol::soap_del() deep deletes tt__NetworkProtocol data members, use only after tt__NetworkProtocol::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkProtocol::soap_type() returns SOAP_TYPE_tt__NetworkProtocol or derived type identifier
class tt__NetworkProtocol
{ public:
/// <PRE><BLOCKQUOTE>
///   Network protocol type string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":NetworkProtocolType.
    enum tt__NetworkProtocolType         Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the protocol is enabled or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The port that is used by the protocol.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of int is 1..unbounded.
  $ int                                  __sizePort                     1;
/// Pointer to array int of size 1..unbounded.
    int                                 *Port                           1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkProtocolExtension.
    tt__NetworkProtocolExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocolExtension is a complexType.
///
/// @note class tt__NetworkProtocolExtension operations:
/// - tt__NetworkProtocolExtension* soap_new_tt__NetworkProtocolExtension(soap*) allocate and default initialize
/// - tt__NetworkProtocolExtension* soap_new_tt__NetworkProtocolExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkProtocolExtension* soap_new_req_tt__NetworkProtocolExtension(soap*, ...) allocate, set required members
/// - tt__NetworkProtocolExtension* soap_new_set_tt__NetworkProtocolExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkProtocolExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkProtocolExtension(soap*, tt__NetworkProtocolExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocolExtension(soap*, tt__NetworkProtocolExtension*) serialize to a stream
/// - tt__NetworkProtocolExtension* tt__NetworkProtocolExtension::soap_dup(soap*) returns deep copy of tt__NetworkProtocolExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkProtocolExtension::soap_del() deep deletes tt__NetworkProtocolExtension data members, use only after tt__NetworkProtocolExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkProtocolExtension::soap_type() returns SOAP_TYPE_tt__NetworkProtocolExtension or derived type identifier
class tt__NetworkProtocolExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHost is a complexType.
///
/// @note class tt__NetworkHost operations:
/// - tt__NetworkHost* soap_new_tt__NetworkHost(soap*) allocate and default initialize
/// - tt__NetworkHost* soap_new_tt__NetworkHost(soap*, int num) allocate and default initialize an array
/// - tt__NetworkHost* soap_new_req_tt__NetworkHost(soap*, ...) allocate, set required members
/// - tt__NetworkHost* soap_new_set_tt__NetworkHost(soap*, ...) allocate, set all public members
/// - tt__NetworkHost::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkHost(soap*, tt__NetworkHost*) deserialize from a stream
/// - int soap_write_tt__NetworkHost(soap*, tt__NetworkHost*) serialize to a stream
/// - tt__NetworkHost* tt__NetworkHost::soap_dup(soap*) returns deep copy of tt__NetworkHost, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkHost::soap_del() deep deletes tt__NetworkHost data members, use only after tt__NetworkHost::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkHost::soap_type() returns SOAP_TYPE_tt__NetworkHost or derived type identifier
class tt__NetworkHost
{ public:
/// <PRE><BLOCKQUOTE>
///   Network host type: IPv4, IPv6 or DNS.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":NetworkHostType.
    enum tt__NetworkHostType             Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address                      IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address                      IPv6Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
///
/// Element "DNSname" of type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName                          DNSname                        0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkHostExtension.
    tt__NetworkHostExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHostExtension is a complexType.
///
/// @note class tt__NetworkHostExtension operations:
/// - tt__NetworkHostExtension* soap_new_tt__NetworkHostExtension(soap*) allocate and default initialize
/// - tt__NetworkHostExtension* soap_new_tt__NetworkHostExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkHostExtension* soap_new_req_tt__NetworkHostExtension(soap*, ...) allocate, set required members
/// - tt__NetworkHostExtension* soap_new_set_tt__NetworkHostExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkHostExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkHostExtension(soap*, tt__NetworkHostExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkHostExtension(soap*, tt__NetworkHostExtension*) serialize to a stream
/// - tt__NetworkHostExtension* tt__NetworkHostExtension::soap_dup(soap*) returns deep copy of tt__NetworkHostExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkHostExtension::soap_del() deep deletes tt__NetworkHostExtension data members, use only after tt__NetworkHostExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkHostExtension::soap_type() returns SOAP_TYPE_tt__NetworkHostExtension or derived type identifier
class tt__NetworkHostExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddress is a complexType.
///
/// @note class tt__IPAddress operations:
/// - tt__IPAddress* soap_new_tt__IPAddress(soap*) allocate and default initialize
/// - tt__IPAddress* soap_new_tt__IPAddress(soap*, int num) allocate and default initialize an array
/// - tt__IPAddress* soap_new_req_tt__IPAddress(soap*, ...) allocate, set required members
/// - tt__IPAddress* soap_new_set_tt__IPAddress(soap*, ...) allocate, set all public members
/// - tt__IPAddress::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddress(soap*, tt__IPAddress*) deserialize from a stream
/// - int soap_write_tt__IPAddress(soap*, tt__IPAddress*) serialize to a stream
/// - tt__IPAddress* tt__IPAddress::soap_dup(soap*) returns deep copy of tt__IPAddress, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddress::soap_del() deep deletes tt__IPAddress data members, use only after tt__IPAddress::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddress::soap_type() returns SOAP_TYPE_tt__IPAddress or derived type identifier
class tt__IPAddress
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the address is an IPv4 or IPv6 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":IPType.
    enum tt__IPType                      Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address                      IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address                      IPv6Address                    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv4Address is a complexType.
///
/// @note class tt__PrefixedIPv4Address operations:
/// - tt__PrefixedIPv4Address* soap_new_tt__PrefixedIPv4Address(soap*) allocate and default initialize
/// - tt__PrefixedIPv4Address* soap_new_tt__PrefixedIPv4Address(soap*, int num) allocate and default initialize an array
/// - tt__PrefixedIPv4Address* soap_new_req_tt__PrefixedIPv4Address(soap*, ...) allocate, set required members
/// - tt__PrefixedIPv4Address* soap_new_set_tt__PrefixedIPv4Address(soap*, ...) allocate, set all public members
/// - tt__PrefixedIPv4Address::soap_default(soap*) default initialize members
/// - int soap_read_tt__PrefixedIPv4Address(soap*, tt__PrefixedIPv4Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv4Address(soap*, tt__PrefixedIPv4Address*) serialize to a stream
/// - tt__PrefixedIPv4Address* tt__PrefixedIPv4Address::soap_dup(soap*) returns deep copy of tt__PrefixedIPv4Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PrefixedIPv4Address::soap_del() deep deletes tt__PrefixedIPv4Address data members, use only after tt__PrefixedIPv4Address::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PrefixedIPv4Address::soap_type() returns SOAP_TYPE_tt__PrefixedIPv4Address or derived type identifier
class tt__PrefixedIPv4Address
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
///
/// Element "PrefixLength" of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv6Address is a complexType.
///
/// @note class tt__PrefixedIPv6Address operations:
/// - tt__PrefixedIPv6Address* soap_new_tt__PrefixedIPv6Address(soap*) allocate and default initialize
/// - tt__PrefixedIPv6Address* soap_new_tt__PrefixedIPv6Address(soap*, int num) allocate and default initialize an array
/// - tt__PrefixedIPv6Address* soap_new_req_tt__PrefixedIPv6Address(soap*, ...) allocate, set required members
/// - tt__PrefixedIPv6Address* soap_new_set_tt__PrefixedIPv6Address(soap*, ...) allocate, set all public members
/// - tt__PrefixedIPv6Address::soap_default(soap*) default initialize members
/// - int soap_read_tt__PrefixedIPv6Address(soap*, tt__PrefixedIPv6Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv6Address(soap*, tt__PrefixedIPv6Address*) serialize to a stream
/// - tt__PrefixedIPv6Address* tt__PrefixedIPv6Address::soap_dup(soap*) returns deep copy of tt__PrefixedIPv6Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PrefixedIPv6Address::soap_del() deep deletes tt__PrefixedIPv6Address data members, use only after tt__PrefixedIPv6Address::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PrefixedIPv6Address::soap_type() returns SOAP_TYPE_tt__PrefixedIPv6Address or derived type identifier
class tt__PrefixedIPv6Address
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
///
/// Element "Address" of type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
///
/// Element "PrefixLength" of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformation is a complexType.
///
/// @note class tt__HostnameInformation operations:
/// - tt__HostnameInformation* soap_new_tt__HostnameInformation(soap*) allocate and default initialize
/// - tt__HostnameInformation* soap_new_tt__HostnameInformation(soap*, int num) allocate and default initialize an array
/// - tt__HostnameInformation* soap_new_req_tt__HostnameInformation(soap*, ...) allocate, set required members
/// - tt__HostnameInformation* soap_new_set_tt__HostnameInformation(soap*, ...) allocate, set all public members
/// - tt__HostnameInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__HostnameInformation(soap*, tt__HostnameInformation*) deserialize from a stream
/// - int soap_write_tt__HostnameInformation(soap*, tt__HostnameInformation*) serialize to a stream
/// - tt__HostnameInformation* tt__HostnameInformation::soap_dup(soap*) returns deep copy of tt__HostnameInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__HostnameInformation::soap_del() deep deletes tt__HostnameInformation data members, use only after tt__HostnameInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__HostnameInformation::soap_type() returns SOAP_TYPE_tt__HostnameInformation or derived type identifier
class tt__HostnameInformation
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether the hostname is obtained from DHCP or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the hostname.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type xs:token.
    xsd__token                           Name                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":HostnameInformationExtension.
    tt__HostnameInformationExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformationExtension is a complexType.
///
/// @note class tt__HostnameInformationExtension operations:
/// - tt__HostnameInformationExtension* soap_new_tt__HostnameInformationExtension(soap*) allocate and default initialize
/// - tt__HostnameInformationExtension* soap_new_tt__HostnameInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__HostnameInformationExtension* soap_new_req_tt__HostnameInformationExtension(soap*, ...) allocate, set required members
/// - tt__HostnameInformationExtension* soap_new_set_tt__HostnameInformationExtension(soap*, ...) allocate, set all public members
/// - tt__HostnameInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__HostnameInformationExtension(soap*, tt__HostnameInformationExtension*) deserialize from a stream
/// - int soap_write_tt__HostnameInformationExtension(soap*, tt__HostnameInformationExtension*) serialize to a stream
/// - tt__HostnameInformationExtension* tt__HostnameInformationExtension::soap_dup(soap*) returns deep copy of tt__HostnameInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__HostnameInformationExtension::soap_del() deep deletes tt__HostnameInformationExtension data members, use only after tt__HostnameInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__HostnameInformationExtension::soap_type() returns SOAP_TYPE_tt__HostnameInformationExtension or derived type identifier
class tt__HostnameInformationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformation is a complexType.
///
/// @note class tt__DNSInformation operations:
/// - tt__DNSInformation* soap_new_tt__DNSInformation(soap*) allocate and default initialize
/// - tt__DNSInformation* soap_new_tt__DNSInformation(soap*, int num) allocate and default initialize an array
/// - tt__DNSInformation* soap_new_req_tt__DNSInformation(soap*, ...) allocate, set required members
/// - tt__DNSInformation* soap_new_set_tt__DNSInformation(soap*, ...) allocate, set all public members
/// - tt__DNSInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__DNSInformation(soap*, tt__DNSInformation*) deserialize from a stream
/// - int soap_write_tt__DNSInformation(soap*, tt__DNSInformation*) serialize to a stream
/// - tt__DNSInformation* tt__DNSInformation::soap_dup(soap*) returns deep copy of tt__DNSInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DNSInformation::soap_del() deep deletes tt__DNSInformation data members, use only after tt__DNSInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DNSInformation::soap_type() returns SOAP_TYPE_tt__DNSInformation or derived type identifier
class tt__DNSInformation
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DNS information is retrieved from DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Search domain.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of xsd__token is 0..unbounded.
  $ int                                  __sizeSearchDomain             0;
/// Pointer to array xsd__token of size 0..unbounded.
    xsd__token                          *SearchDomain                   0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of DNS addresses received from DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IPAddress* is 0..unbounded.
  $ int                                  __sizeDNSFromDHCP              0;
/// Pointer to array tt__IPAddress* of size 0..unbounded.
    tt__IPAddress*                      *DNSFromDHCP                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of manually entered DNS addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IPAddress* is 0..unbounded.
  $ int                                  __sizeDNSManual                0;
/// Pointer to array tt__IPAddress* of size 0..unbounded.
    tt__IPAddress*                      *DNSManual                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DNSInformationExtension.
    tt__DNSInformationExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformationExtension is a complexType.
///
/// @note class tt__DNSInformationExtension operations:
/// - tt__DNSInformationExtension* soap_new_tt__DNSInformationExtension(soap*) allocate and default initialize
/// - tt__DNSInformationExtension* soap_new_tt__DNSInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__DNSInformationExtension* soap_new_req_tt__DNSInformationExtension(soap*, ...) allocate, set required members
/// - tt__DNSInformationExtension* soap_new_set_tt__DNSInformationExtension(soap*, ...) allocate, set all public members
/// - tt__DNSInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DNSInformationExtension(soap*, tt__DNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DNSInformationExtension(soap*, tt__DNSInformationExtension*) serialize to a stream
/// - tt__DNSInformationExtension* tt__DNSInformationExtension::soap_dup(soap*) returns deep copy of tt__DNSInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DNSInformationExtension::soap_del() deep deletes tt__DNSInformationExtension data members, use only after tt__DNSInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DNSInformationExtension::soap_type() returns SOAP_TYPE_tt__DNSInformationExtension or derived type identifier
class tt__DNSInformationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformation is a complexType.
///
/// @note class tt__NTPInformation operations:
/// - tt__NTPInformation* soap_new_tt__NTPInformation(soap*) allocate and default initialize
/// - tt__NTPInformation* soap_new_tt__NTPInformation(soap*, int num) allocate and default initialize an array
/// - tt__NTPInformation* soap_new_req_tt__NTPInformation(soap*, ...) allocate, set required members
/// - tt__NTPInformation* soap_new_set_tt__NTPInformation(soap*, ...) allocate, set all public members
/// - tt__NTPInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__NTPInformation(soap*, tt__NTPInformation*) deserialize from a stream
/// - int soap_write_tt__NTPInformation(soap*, tt__NTPInformation*) serialize to a stream
/// - tt__NTPInformation* tt__NTPInformation::soap_dup(soap*) returns deep copy of tt__NTPInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NTPInformation::soap_del() deep deletes tt__NTPInformation data members, use only after tt__NTPInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NTPInformation::soap_type() returns SOAP_TYPE_tt__NTPInformation or derived type identifier
class tt__NTPInformation
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if NTP information is to be retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Element "FromDHCP" of type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of NTP addresses retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__NetworkHost* is 0..unbounded.
  $ int                                  __sizeNTPFromDHCP              0;
/// Pointer to array tt__NetworkHost* of size 0..unbounded.
    tt__NetworkHost*                    *NTPFromDHCP                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of manually entered NTP addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__NetworkHost* is 0..unbounded.
  $ int                                  __sizeNTPManual                0;
/// Pointer to array tt__NetworkHost* of size 0..unbounded.
    tt__NetworkHost*                    *NTPManual                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NTPInformationExtension.
    tt__NTPInformationExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformationExtension is a complexType.
///
/// @note class tt__NTPInformationExtension operations:
/// - tt__NTPInformationExtension* soap_new_tt__NTPInformationExtension(soap*) allocate and default initialize
/// - tt__NTPInformationExtension* soap_new_tt__NTPInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NTPInformationExtension* soap_new_req_tt__NTPInformationExtension(soap*, ...) allocate, set required members
/// - tt__NTPInformationExtension* soap_new_set_tt__NTPInformationExtension(soap*, ...) allocate, set all public members
/// - tt__NTPInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NTPInformationExtension(soap*, tt__NTPInformationExtension*) deserialize from a stream
/// - int soap_write_tt__NTPInformationExtension(soap*, tt__NTPInformationExtension*) serialize to a stream
/// - tt__NTPInformationExtension* tt__NTPInformationExtension::soap_dup(soap*) returns deep copy of tt__NTPInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NTPInformationExtension::soap_del() deep deletes tt__NTPInformationExtension data members, use only after tt__NTPInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NTPInformationExtension::soap_type() returns SOAP_TYPE_tt__NTPInformationExtension or derived type identifier
class tt__NTPInformationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformation is a complexType.
///
/// @note class tt__DynamicDNSInformation operations:
/// - tt__DynamicDNSInformation* soap_new_tt__DynamicDNSInformation(soap*) allocate and default initialize
/// - tt__DynamicDNSInformation* soap_new_tt__DynamicDNSInformation(soap*, int num) allocate and default initialize an array
/// - tt__DynamicDNSInformation* soap_new_req_tt__DynamicDNSInformation(soap*, ...) allocate, set required members
/// - tt__DynamicDNSInformation* soap_new_set_tt__DynamicDNSInformation(soap*, ...) allocate, set all public members
/// - tt__DynamicDNSInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__DynamicDNSInformation(soap*, tt__DynamicDNSInformation*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformation(soap*, tt__DynamicDNSInformation*) serialize to a stream
/// - tt__DynamicDNSInformation* tt__DynamicDNSInformation::soap_dup(soap*) returns deep copy of tt__DynamicDNSInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DynamicDNSInformation::soap_del() deep deletes tt__DynamicDNSInformation data members, use only after tt__DynamicDNSInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DynamicDNSInformation::soap_type() returns SOAP_TYPE_tt__DynamicDNSInformation or derived type identifier
class tt__DynamicDNSInformation
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS type.
/// </BLOCKQUOTE></PRE>
///
/// Element "Type" of type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    enum tt__DynamicDNSType              Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName                          Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time to live.
/// </BLOCKQUOTE></PRE>
///
/// Element "TTL" of type xs:duration.
    xsd__duration                        TTL                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension.
    tt__DynamicDNSInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension is a complexType.
///
/// @note class tt__DynamicDNSInformationExtension operations:
/// - tt__DynamicDNSInformationExtension* soap_new_tt__DynamicDNSInformationExtension(soap*) allocate and default initialize
/// - tt__DynamicDNSInformationExtension* soap_new_tt__DynamicDNSInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__DynamicDNSInformationExtension* soap_new_req_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set required members
/// - tt__DynamicDNSInformationExtension* soap_new_set_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set all public members
/// - tt__DynamicDNSInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DynamicDNSInformationExtension(soap*, tt__DynamicDNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformationExtension(soap*, tt__DynamicDNSInformationExtension*) serialize to a stream
/// - tt__DynamicDNSInformationExtension* tt__DynamicDNSInformationExtension::soap_dup(soap*) returns deep copy of tt__DynamicDNSInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DynamicDNSInformationExtension::soap_del() deep deletes tt__DynamicDNSInformationExtension data members, use only after tt__DynamicDNSInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DynamicDNSInformationExtension::soap_type() returns SOAP_TYPE_tt__DynamicDNSInformationExtension or derived type identifier
class tt__DynamicDNSInformationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfiguration operations:
/// - tt__NetworkInterfaceSetConfiguration* soap_new_tt__NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfiguration* soap_new_tt__NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfiguration* soap_new_req_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfiguration* soap_new_set_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfiguration(soap*, tt__NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfiguration(soap*, tt__NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__NetworkInterfaceSetConfiguration* tt__NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__NetworkInterfaceSetConfiguration data members, use only after tt__NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfiguration or derived type identifier
class tt__NetworkInterfaceSetConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not an interface is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Link configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Link" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  Link                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
///
/// Element "MTU" of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv4" of type "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration.
    tt__IPv4NetworkInterfaceSetConfiguration*  IPv4                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 network interface configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPv6" of type "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration.
    tt__IPv6NetworkInterfaceSetConfiguration*  IPv6                           0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension.
    tt__NetworkInterfaceSetConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfigurationExtension operations:
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfigurationExtension* soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap*, tt__NetworkInterfaceSetConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension(soap*, tt__NetworkInterfaceSetConfigurationExtension*) serialize to a stream
/// - tt__NetworkInterfaceSetConfigurationExtension* tt__NetworkInterfaceSetConfigurationExtension::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfigurationExtension::soap_del() deep deletes tt__NetworkInterfaceSetConfigurationExtension data members, use only after tt__NetworkInterfaceSetConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfigurationExtension::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension or derived type identifier
class tt__NetworkInterfaceSetConfigurationExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of array of tt__Dot3Configuration* is 0..unbounded.
  $ int                                  __sizeDot3                     0;
/// Pointer to array tt__Dot3Configuration* of size 0..unbounded.
    tt__Dot3Configuration*              *Dot3                           0;	///< Multiple elements.
/// Size of array of tt__Dot11Configuration* is 0..unbounded.
  $ int                                  __sizeDot11                    0;
/// Pointer to array tt__Dot11Configuration* of size 0..unbounded.
    tt__Dot11Configuration*             *Dot11                          0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2.
    tt__NetworkInterfaceSetConfigurationExtension2*  Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__IPv6NetworkInterfaceSetConfiguration operations:
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__IPv6NetworkInterfaceSetConfiguration* soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__IPv6NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap*, tt__IPv6NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterfaceSetConfiguration(soap*, tt__IPv6NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__IPv6NetworkInterfaceSetConfiguration* tt__IPv6NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__IPv6NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv6NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__IPv6NetworkInterfaceSetConfiguration data members, use only after tt__IPv6NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv6NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration or derived type identifier
class tt__IPv6NetworkInterfaceSetConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "AcceptRouterAdvert" of type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv6 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeManual                   0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum tt__IPv6DHCPConfiguration*      DHCP                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration is a complexType.
///
/// @note class tt__IPv4NetworkInterfaceSetConfiguration operations:
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*) allocate and default initialize
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - tt__IPv4NetworkInterfaceSetConfiguration* soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - tt__IPv4NetworkInterfaceSetConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap*, tt__IPv4NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterfaceSetConfiguration(soap*, tt__IPv4NetworkInterfaceSetConfiguration*) serialize to a stream
/// - tt__IPv4NetworkInterfaceSetConfiguration* tt__IPv4NetworkInterfaceSetConfiguration::soap_dup(soap*) returns deep copy of tt__IPv4NetworkInterfaceSetConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPv4NetworkInterfaceSetConfiguration::soap_del() deep deletes tt__IPv4NetworkInterfaceSetConfiguration data members, use only after tt__IPv4NetworkInterfaceSetConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPv4NetworkInterfaceSetConfiguration::soap_type() returns SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration or derived type identifier
class tt__IPv4NetworkInterfaceSetConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__PrefixedIPv4Address* is 0..unbounded.
  $ int                                  __sizeManual                   0;
/// Pointer to array tt__PrefixedIPv4Address* of size 0..unbounded.
    tt__PrefixedIPv4Address*            *Manual                         0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
///
/// Element "DHCP" of type xs:boolean.
    bool*                                DHCP                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkGateway is a complexType.
///
/// @note class tt__NetworkGateway operations:
/// - tt__NetworkGateway* soap_new_tt__NetworkGateway(soap*) allocate and default initialize
/// - tt__NetworkGateway* soap_new_tt__NetworkGateway(soap*, int num) allocate and default initialize an array
/// - tt__NetworkGateway* soap_new_req_tt__NetworkGateway(soap*, ...) allocate, set required members
/// - tt__NetworkGateway* soap_new_set_tt__NetworkGateway(soap*, ...) allocate, set all public members
/// - tt__NetworkGateway::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkGateway(soap*, tt__NetworkGateway*) deserialize from a stream
/// - int soap_write_tt__NetworkGateway(soap*, tt__NetworkGateway*) serialize to a stream
/// - tt__NetworkGateway* tt__NetworkGateway::soap_dup(soap*) returns deep copy of tt__NetworkGateway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkGateway::soap_del() deep deletes tt__NetworkGateway data members, use only after tt__NetworkGateway::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkGateway::soap_type() returns SOAP_TYPE_tt__NetworkGateway or derived type identifier
class tt__NetworkGateway
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address string.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IPv4Address is 0..unbounded.
  $ int                                  __sizeIPv4Address              0;
/// Pointer to array tt__IPv4Address of size 0..unbounded.
    tt__IPv4Address                     *IPv4Address                    0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   IPv6 address string.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IPv6Address is 0..unbounded.
  $ int                                  __sizeIPv6Address              0;
/// Pointer to array tt__IPv6Address of size 0..unbounded.
    tt__IPv6Address                     *IPv6Address                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration is a complexType.
///
/// @note class tt__NetworkZeroConfiguration operations:
/// - tt__NetworkZeroConfiguration* soap_new_tt__NetworkZeroConfiguration(soap*) allocate and default initialize
/// - tt__NetworkZeroConfiguration* soap_new_tt__NetworkZeroConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfiguration* soap_new_req_tt__NetworkZeroConfiguration(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfiguration* soap_new_set_tt__NetworkZeroConfiguration(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfiguration(soap*, tt__NetworkZeroConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfiguration(soap*, tt__NetworkZeroConfiguration*) serialize to a stream
/// - tt__NetworkZeroConfiguration* tt__NetworkZeroConfiguration::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfiguration::soap_del() deep deletes tt__NetworkZeroConfiguration data members, use only after tt__NetworkZeroConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfiguration::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfiguration or derived type identifier
class tt__NetworkZeroConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier of network interface.
/// </BLOCKQUOTE></PRE>
///
/// Element "InterfaceToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the zero-configuration is enabled or not.
/// </BLOCKQUOTE></PRE>
///
/// Element "Enabled" of type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The zero-configuration IPv4 address(es)
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__IPv4Address is 0..unbounded.
  $ int                                  __sizeAddresses                0;
/// Pointer to array tt__IPv4Address of size 0..unbounded.
    tt__IPv4Address                     *Addresses                      0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension.
    tt__NetworkZeroConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension is a complexType.
///
/// @note class tt__NetworkZeroConfigurationExtension operations:
/// - tt__NetworkZeroConfigurationExtension* soap_new_tt__NetworkZeroConfigurationExtension(soap*) allocate and default initialize
/// - tt__NetworkZeroConfigurationExtension* soap_new_tt__NetworkZeroConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfigurationExtension* soap_new_req_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfigurationExtension* soap_new_set_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfigurationExtension(soap*, tt__NetworkZeroConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension(soap*, tt__NetworkZeroConfigurationExtension*) serialize to a stream
/// - tt__NetworkZeroConfigurationExtension* tt__NetworkZeroConfigurationExtension::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfigurationExtension::soap_del() deep deletes tt__NetworkZeroConfigurationExtension data members, use only after tt__NetworkZeroConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfigurationExtension::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfigurationExtension or derived type identifier
class tt__NetworkZeroConfigurationExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Optional array holding the configuration for the second and possibly further interfaces.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__NetworkZeroConfiguration* is 0..unbounded.
  $ int                                  __sizeAdditional               0;
/// Pointer to array tt__NetworkZeroConfiguration* of size 0..unbounded.
    tt__NetworkZeroConfiguration*       *Additional                     0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2.
    tt__NetworkZeroConfigurationExtension2*  Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2 is a complexType.
///
/// @note class tt__NetworkZeroConfigurationExtension2 operations:
/// - tt__NetworkZeroConfigurationExtension2* soap_new_tt__NetworkZeroConfigurationExtension2(soap*) allocate and default initialize
/// - tt__NetworkZeroConfigurationExtension2* soap_new_tt__NetworkZeroConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkZeroConfigurationExtension2* soap_new_req_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkZeroConfigurationExtension2* soap_new_set_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkZeroConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkZeroConfigurationExtension2(soap*, tt__NetworkZeroConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension2(soap*, tt__NetworkZeroConfigurationExtension2*) serialize to a stream
/// - tt__NetworkZeroConfigurationExtension2* tt__NetworkZeroConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__NetworkZeroConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkZeroConfigurationExtension2::soap_del() deep deletes tt__NetworkZeroConfigurationExtension2 data members, use only after tt__NetworkZeroConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkZeroConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 or derived type identifier
class tt__NetworkZeroConfigurationExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilter is a complexType.
///
/// @note class tt__IPAddressFilter operations:
/// - tt__IPAddressFilter* soap_new_tt__IPAddressFilter(soap*) allocate and default initialize
/// - tt__IPAddressFilter* soap_new_tt__IPAddressFilter(soap*, int num) allocate and default initialize an array
/// - tt__IPAddressFilter* soap_new_req_tt__IPAddressFilter(soap*, ...) allocate, set required members
/// - tt__IPAddressFilter* soap_new_set_tt__IPAddressFilter(soap*, ...) allocate, set all public members
/// - tt__IPAddressFilter::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddressFilter(soap*, tt__IPAddressFilter*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilter(soap*, tt__IPAddressFilter*) serialize to a stream
/// - tt__IPAddressFilter* tt__IPAddressFilter::soap_dup(soap*) returns deep copy of tt__IPAddressFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddressFilter::soap_del() deep deletes tt__IPAddressFilter data members, use only after tt__IPAddressFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddressFilter::soap_type() returns SOAP_TYPE_tt__IPAddressFilter or derived type identifier
class tt__IPAddressFilter
{ public:
/// Element "Type" of type "http://www.onvif.org/ver10/schema":IPAddressFilterType.
    enum tt__IPAddressFilterType         Type                           1;	///< Required element.
/// Size of array of tt__PrefixedIPv4Address* is 0..unbounded.
  $ int                                  __sizeIPv4Address              0;
/// Pointer to array tt__PrefixedIPv4Address* of size 0..unbounded.
    tt__PrefixedIPv4Address*            *IPv4Address                    0;	///< Multiple elements.
/// Size of array of tt__PrefixedIPv6Address* is 0..unbounded.
  $ int                                  __sizeIPv6Address              0;
/// Pointer to array tt__PrefixedIPv6Address* of size 0..unbounded.
    tt__PrefixedIPv6Address*            *IPv6Address                    0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IPAddressFilterExtension.
    tt__IPAddressFilterExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilterExtension is a complexType.
///
/// @note class tt__IPAddressFilterExtension operations:
/// - tt__IPAddressFilterExtension* soap_new_tt__IPAddressFilterExtension(soap*) allocate and default initialize
/// - tt__IPAddressFilterExtension* soap_new_tt__IPAddressFilterExtension(soap*, int num) allocate and default initialize an array
/// - tt__IPAddressFilterExtension* soap_new_req_tt__IPAddressFilterExtension(soap*, ...) allocate, set required members
/// - tt__IPAddressFilterExtension* soap_new_set_tt__IPAddressFilterExtension(soap*, ...) allocate, set all public members
/// - tt__IPAddressFilterExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IPAddressFilterExtension(soap*, tt__IPAddressFilterExtension*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilterExtension(soap*, tt__IPAddressFilterExtension*) serialize to a stream
/// - tt__IPAddressFilterExtension* tt__IPAddressFilterExtension::soap_dup(soap*) returns deep copy of tt__IPAddressFilterExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IPAddressFilterExtension::soap_del() deep deletes tt__IPAddressFilterExtension data members, use only after tt__IPAddressFilterExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IPAddressFilterExtension::soap_type() returns SOAP_TYPE_tt__IPAddressFilterExtension or derived type identifier
class tt__IPAddressFilterExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Configuration is a complexType.
///
/// @note class tt__Dot11Configuration operations:
/// - tt__Dot11Configuration* soap_new_tt__Dot11Configuration(soap*) allocate and default initialize
/// - tt__Dot11Configuration* soap_new_tt__Dot11Configuration(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Configuration* soap_new_req_tt__Dot11Configuration(soap*, ...) allocate, set required members
/// - tt__Dot11Configuration* soap_new_set_tt__Dot11Configuration(soap*, ...) allocate, set all public members
/// - tt__Dot11Configuration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Configuration(soap*, tt__Dot11Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot11Configuration(soap*, tt__Dot11Configuration*) serialize to a stream
/// - tt__Dot11Configuration* tt__Dot11Configuration::soap_dup(soap*) returns deep copy of tt__Dot11Configuration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Configuration::soap_del() deep deletes tt__Dot11Configuration data members, use only after tt__Dot11Configuration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Configuration::soap_type() returns SOAP_TYPE_tt__Dot11Configuration or derived type identifier
class tt__Dot11Configuration
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":Dot11StationMode.
    enum tt__Dot11StationMode            Mode                           1;	///< Required element.
/// Element "Alias" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Alias                          1;	///< Required element.
/// Element "Priority" of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority.
    tt__NetworkInterfaceConfigPriority   Priority                       1;	///< Required element.
/// Element "Security" of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration.
    tt__Dot11SecurityConfiguration*      Security                       1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration is a complexType.
///
/// @note class tt__Dot11SecurityConfiguration operations:
/// - tt__Dot11SecurityConfiguration* soap_new_tt__Dot11SecurityConfiguration(soap*) allocate and default initialize
/// - tt__Dot11SecurityConfiguration* soap_new_tt__Dot11SecurityConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__Dot11SecurityConfiguration* soap_new_req_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set required members
/// - tt__Dot11SecurityConfiguration* soap_new_set_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set all public members
/// - tt__Dot11SecurityConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11SecurityConfiguration(soap*, tt__Dot11SecurityConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfiguration(soap*, tt__Dot11SecurityConfiguration*) serialize to a stream
/// - tt__Dot11SecurityConfiguration* tt__Dot11SecurityConfiguration::soap_dup(soap*) returns deep copy of tt__Dot11SecurityConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11SecurityConfiguration::soap_del() deep deletes tt__Dot11SecurityConfiguration data members, use only after tt__Dot11SecurityConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11SecurityConfiguration::soap_type() returns SOAP_TYPE_tt__Dot11SecurityConfiguration or derived type identifier
class tt__Dot11SecurityConfiguration
{ public:
/// Element "Mode" of type "http://www.onvif.org/ver10/schema":Dot11SecurityMode.
    enum tt__Dot11SecurityMode           Mode                           1;	///< Required element.
/// Element "Algorithm" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                Algorithm                      0;	///< Optional element.
/// Element "PSK" of type "http://www.onvif.org/ver10/schema":Dot11PSKSet.
    tt__Dot11PSKSet*                     PSK                            0;	///< Optional element.
/// Element "Dot1X" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1X                          0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension.
    tt__Dot11SecurityConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension is a complexType.
///
/// @note class tt__Dot11SecurityConfigurationExtension operations:
/// - tt__Dot11SecurityConfigurationExtension* soap_new_tt__Dot11SecurityConfigurationExtension(soap*) allocate and default initialize
/// - tt__Dot11SecurityConfigurationExtension* soap_new_tt__Dot11SecurityConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11SecurityConfigurationExtension* soap_new_req_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__Dot11SecurityConfigurationExtension* soap_new_set_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11SecurityConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11SecurityConfigurationExtension(soap*, tt__Dot11SecurityConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfigurationExtension(soap*, tt__Dot11SecurityConfigurationExtension*) serialize to a stream
/// - tt__Dot11SecurityConfigurationExtension* tt__Dot11SecurityConfigurationExtension::soap_dup(soap*) returns deep copy of tt__Dot11SecurityConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11SecurityConfigurationExtension::soap_del() deep deletes tt__Dot11SecurityConfigurationExtension data members, use only after tt__Dot11SecurityConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11SecurityConfigurationExtension::soap_type() returns SOAP_TYPE_tt__Dot11SecurityConfigurationExtension or derived type identifier
class tt__Dot11SecurityConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSet is a complexType.
///
/// @note class tt__Dot11PSKSet operations:
/// - tt__Dot11PSKSet* soap_new_tt__Dot11PSKSet(soap*) allocate and default initialize
/// - tt__Dot11PSKSet* soap_new_tt__Dot11PSKSet(soap*, int num) allocate and default initialize an array
/// - tt__Dot11PSKSet* soap_new_req_tt__Dot11PSKSet(soap*, ...) allocate, set required members
/// - tt__Dot11PSKSet* soap_new_set_tt__Dot11PSKSet(soap*, ...) allocate, set all public members
/// - tt__Dot11PSKSet::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11PSKSet(soap*, tt__Dot11PSKSet*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSet(soap*, tt__Dot11PSKSet*) serialize to a stream
/// - tt__Dot11PSKSet* tt__Dot11PSKSet::soap_dup(soap*) returns deep copy of tt__Dot11PSKSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11PSKSet::soap_del() deep deletes tt__Dot11PSKSet data members, use only after tt__Dot11PSKSet::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11PSKSet::soap_type() returns SOAP_TYPE_tt__Dot11PSKSet or derived type identifier
class tt__Dot11PSKSet
{ public:
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 the RSNA PSK consists of 256 bits, or 64 octets when represented in hex<br/>
///   Either Key or Passphrase shall be given, if both are supplied Key shall be used by the device and Passphrase ignored.
/// </BLOCKQUOTE></PRE>
///
/// Element "Key" of type "http://www.onvif.org/ver10/schema":Dot11PSK.
    tt__Dot11PSK*                        Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 a pass-phrase is a sequence of between 8 and 63 ASCII-encoded characters and
///   each character in the pass-phrase must have an encoding in the range of 32 to 126 (decimal),inclusive.<br/>
///   If only Passpharse is supplied the Key shall be derived using the algorithm described in IEEE802.11-2007 section H.4
/// </BLOCKQUOTE></PRE>
///
/// Element "Passphrase" of type "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase.
    tt__Dot11PSKPassphrase               Passphrase                     0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension.
    tt__Dot11PSKSetExtension*            Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension is a complexType.
///
/// @note class tt__Dot11PSKSetExtension operations:
/// - tt__Dot11PSKSetExtension* soap_new_tt__Dot11PSKSetExtension(soap*) allocate and default initialize
/// - tt__Dot11PSKSetExtension* soap_new_tt__Dot11PSKSetExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11PSKSetExtension* soap_new_req_tt__Dot11PSKSetExtension(soap*, ...) allocate, set required members
/// - tt__Dot11PSKSetExtension* soap_new_set_tt__Dot11PSKSetExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11PSKSetExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11PSKSetExtension(soap*, tt__Dot11PSKSetExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSetExtension(soap*, tt__Dot11PSKSetExtension*) serialize to a stream
/// - tt__Dot11PSKSetExtension* tt__Dot11PSKSetExtension::soap_dup(soap*) returns deep copy of tt__Dot11PSKSetExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11PSKSetExtension::soap_del() deep deletes tt__Dot11PSKSetExtension data members, use only after tt__Dot11PSKSetExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11PSKSetExtension::soap_type() returns SOAP_TYPE_tt__Dot11PSKSetExtension or derived type identifier
class tt__Dot11PSKSetExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2 is a complexType.
///
/// @note class tt__NetworkInterfaceSetConfigurationExtension2 operations:
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*) allocate and default initialize
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkInterfaceSetConfigurationExtension2* soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkInterfaceSetConfigurationExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap*, tt__NetworkInterfaceSetConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension2(soap*, tt__NetworkInterfaceSetConfigurationExtension2*) serialize to a stream
/// - tt__NetworkInterfaceSetConfigurationExtension2* tt__NetworkInterfaceSetConfigurationExtension2::soap_dup(soap*) returns deep copy of tt__NetworkInterfaceSetConfigurationExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkInterfaceSetConfigurationExtension2::soap_del() deep deletes tt__NetworkInterfaceSetConfigurationExtension2 data members, use only after tt__NetworkInterfaceSetConfigurationExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkInterfaceSetConfigurationExtension2::soap_type() returns SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 or derived type identifier
class tt__NetworkInterfaceSetConfigurationExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Capabilities is a complexType.
///
/// @note class tt__Dot11Capabilities operations:
/// - tt__Dot11Capabilities* soap_new_tt__Dot11Capabilities(soap*) allocate and default initialize
/// - tt__Dot11Capabilities* soap_new_tt__Dot11Capabilities(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Capabilities* soap_new_req_tt__Dot11Capabilities(soap*, ...) allocate, set required members
/// - tt__Dot11Capabilities* soap_new_set_tt__Dot11Capabilities(soap*, ...) allocate, set all public members
/// - tt__Dot11Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Capabilities(soap*, tt__Dot11Capabilities*) deserialize from a stream
/// - int soap_write_tt__Dot11Capabilities(soap*, tt__Dot11Capabilities*) serialize to a stream
/// - tt__Dot11Capabilities* tt__Dot11Capabilities::soap_dup(soap*) returns deep copy of tt__Dot11Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Capabilities::soap_del() deep deletes tt__Dot11Capabilities data members, use only after tt__Dot11Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Capabilities::soap_type() returns SOAP_TYPE_tt__Dot11Capabilities or derived type identifier
class tt__Dot11Capabilities
{ public:
/// Element "TKIP" of type xs:boolean.
    bool                                 TKIP                           1;	///< Required element.
/// Element "ScanAvailableNetworks" of type xs:boolean.
    bool                                 ScanAvailableNetworks          1;	///< Required element.
/// Element "MultipleConfiguration" of type xs:boolean.
    bool                                 MultipleConfiguration          1;	///< Required element.
/// Element "AdHocStationMode" of type xs:boolean.
    bool                                 AdHocStationMode               1;	///< Required element.
/// Element "WEP" of type xs:boolean.
    bool                                 WEP                            1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Status is a complexType.
///
/// @note class tt__Dot11Status operations:
/// - tt__Dot11Status* soap_new_tt__Dot11Status(soap*) allocate and default initialize
/// - tt__Dot11Status* soap_new_tt__Dot11Status(soap*, int num) allocate and default initialize an array
/// - tt__Dot11Status* soap_new_req_tt__Dot11Status(soap*, ...) allocate, set required members
/// - tt__Dot11Status* soap_new_set_tt__Dot11Status(soap*, ...) allocate, set all public members
/// - tt__Dot11Status::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11Status(soap*, tt__Dot11Status*) deserialize from a stream
/// - int soap_write_tt__Dot11Status(soap*, tt__Dot11Status*) serialize to a stream
/// - tt__Dot11Status* tt__Dot11Status::soap_dup(soap*) returns deep copy of tt__Dot11Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11Status::soap_del() deep deletes tt__Dot11Status data members, use only after tt__Dot11Status::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11Status::soap_type() returns SOAP_TYPE_tt__Dot11Status or derived type identifier
class tt__Dot11Status
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of type xs:string.
    char*                                BSSID                          0;	///< Optional element.
/// Element "PairCipher" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                PairCipher                     0;	///< Optional element.
/// Element "GroupCipher" of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                GroupCipher                    0;	///< Optional element.
/// Element "SignalStrength" of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum tt__Dot11SignalStrength*        SignalStrength                 0;	///< Optional element.
/// Element "ActiveConfigAlias" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ActiveConfigAlias              1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworks is a complexType.
///
/// @note class tt__Dot11AvailableNetworks operations:
/// - tt__Dot11AvailableNetworks* soap_new_tt__Dot11AvailableNetworks(soap*) allocate and default initialize
/// - tt__Dot11AvailableNetworks* soap_new_tt__Dot11AvailableNetworks(soap*, int num) allocate and default initialize an array
/// - tt__Dot11AvailableNetworks* soap_new_req_tt__Dot11AvailableNetworks(soap*, ...) allocate, set required members
/// - tt__Dot11AvailableNetworks* soap_new_set_tt__Dot11AvailableNetworks(soap*, ...) allocate, set all public members
/// - tt__Dot11AvailableNetworks::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11AvailableNetworks(soap*, tt__Dot11AvailableNetworks*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworks(soap*, tt__Dot11AvailableNetworks*) serialize to a stream
/// - tt__Dot11AvailableNetworks* tt__Dot11AvailableNetworks::soap_dup(soap*) returns deep copy of tt__Dot11AvailableNetworks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11AvailableNetworks::soap_del() deep deletes tt__Dot11AvailableNetworks data members, use only after tt__Dot11AvailableNetworks::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11AvailableNetworks::soap_type() returns SOAP_TYPE_tt__Dot11AvailableNetworks or derived type identifier
class tt__Dot11AvailableNetworks
{ public:
/// Element "SSID" of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of type xs:string.
    char*                                BSSID                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   See IEEE802.11 7.3.2.25.2 for details.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__Dot11AuthAndMangementSuite is 0..unbounded.
  $ int                                  __sizeAuthAndMangementSuite    0;
/// Pointer to array enum tt__Dot11AuthAndMangementSuite of size 0..unbounded.
    enum tt__Dot11AuthAndMangementSuite *AuthAndMangementSuite          0;	///< Multiple elements.
/// Size of array of enum tt__Dot11Cipher is 0..unbounded.
  $ int                                  __sizePairCipher               0;
/// Pointer to array enum tt__Dot11Cipher of size 0..unbounded.
    enum tt__Dot11Cipher                *PairCipher                     0;	///< Multiple elements.
/// Size of array of enum tt__Dot11Cipher is 0..unbounded.
  $ int                                  __sizeGroupCipher              0;
/// Pointer to array enum tt__Dot11Cipher of size 0..unbounded.
    enum tt__Dot11Cipher                *GroupCipher                    0;	///< Multiple elements.
/// Element "SignalStrength" of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum tt__Dot11SignalStrength*        SignalStrength                 0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension.
    tt__Dot11AvailableNetworksExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension is a complexType.
///
/// @note class tt__Dot11AvailableNetworksExtension operations:
/// - tt__Dot11AvailableNetworksExtension* soap_new_tt__Dot11AvailableNetworksExtension(soap*) allocate and default initialize
/// - tt__Dot11AvailableNetworksExtension* soap_new_tt__Dot11AvailableNetworksExtension(soap*, int num) allocate and default initialize an array
/// - tt__Dot11AvailableNetworksExtension* soap_new_req_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set required members
/// - tt__Dot11AvailableNetworksExtension* soap_new_set_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set all public members
/// - tt__Dot11AvailableNetworksExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot11AvailableNetworksExtension(soap*, tt__Dot11AvailableNetworksExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworksExtension(soap*, tt__Dot11AvailableNetworksExtension*) serialize to a stream
/// - tt__Dot11AvailableNetworksExtension* tt__Dot11AvailableNetworksExtension::soap_dup(soap*) returns deep copy of tt__Dot11AvailableNetworksExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot11AvailableNetworksExtension::soap_del() deep deletes tt__Dot11AvailableNetworksExtension data members, use only after tt__Dot11AvailableNetworksExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot11AvailableNetworksExtension::soap_type() returns SOAP_TYPE_tt__Dot11AvailableNetworksExtension or derived type identifier
class tt__Dot11AvailableNetworksExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Capabilities is a complexType.
///
/// @note class tt__Capabilities operations:
/// - tt__Capabilities* soap_new_tt__Capabilities(soap*) allocate and default initialize
/// - tt__Capabilities* soap_new_tt__Capabilities(soap*, int num) allocate and default initialize an array
/// - tt__Capabilities* soap_new_req_tt__Capabilities(soap*, ...) allocate, set required members
/// - tt__Capabilities* soap_new_set_tt__Capabilities(soap*, ...) allocate, set all public members
/// - tt__Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__Capabilities(soap*, tt__Capabilities*) deserialize from a stream
/// - int soap_write_tt__Capabilities(soap*, tt__Capabilities*) serialize to a stream
/// - tt__Capabilities* tt__Capabilities::soap_dup(soap*) returns deep copy of tt__Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Capabilities::soap_del() deep deletes tt__Capabilities data members, use only after tt__Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Capabilities::soap_type() returns SOAP_TYPE_tt__Capabilities or derived type identifier
class tt__Capabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Analytics" of type "http://www.onvif.org/ver10/schema":AnalyticsCapabilities.
    tt__AnalyticsCapabilities*           Analytics                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Device capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Device" of type "http://www.onvif.org/ver10/schema":DeviceCapabilities.
    tt__DeviceCapabilities*              Device                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Event capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Events" of type "http://www.onvif.org/ver10/schema":EventCapabilities.
    tt__EventCapabilities*               Events                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Imaging capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Imaging" of type "http://www.onvif.org/ver10/schema":ImagingCapabilities.
    tt__ImagingCapabilities*             Imaging                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Media capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "Media" of type "http://www.onvif.org/ver10/schema":MediaCapabilities.
    tt__MediaCapabilities*               Media                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PTZ capabilities
/// </BLOCKQUOTE></PRE>
///
/// Element "PTZ" of type "http://www.onvif.org/ver10/schema":PTZCapabilities.
    tt__PTZCapabilities*                 PTZ                            0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension.
    tt__CapabilitiesExtension*           Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension is a complexType.
///
/// @note class tt__CapabilitiesExtension operations:
/// - tt__CapabilitiesExtension* soap_new_tt__CapabilitiesExtension(soap*) allocate and default initialize
/// - tt__CapabilitiesExtension* soap_new_tt__CapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__CapabilitiesExtension* soap_new_req_tt__CapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__CapabilitiesExtension* soap_new_set_tt__CapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__CapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__CapabilitiesExtension(soap*, tt__CapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension(soap*, tt__CapabilitiesExtension*) serialize to a stream
/// - tt__CapabilitiesExtension* tt__CapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__CapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CapabilitiesExtension::soap_del() deep deletes tt__CapabilitiesExtension data members, use only after tt__CapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__CapabilitiesExtension or derived type identifier
class tt__CapabilitiesExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "DeviceIO" of type "http://www.onvif.org/ver10/schema":DeviceIOCapabilities.
    tt__DeviceIOCapabilities*            DeviceIO                       0;	///< Optional element.
/// Element "Display" of type "http://www.onvif.org/ver10/schema":DisplayCapabilities.
    tt__DisplayCapabilities*             Display                        0;	///< Optional element.
/// Element "Recording" of type "http://www.onvif.org/ver10/schema":RecordingCapabilities.
    tt__RecordingCapabilities*           Recording                      0;	///< Optional element.
/// Element "Search" of type "http://www.onvif.org/ver10/schema":SearchCapabilities.
    tt__SearchCapabilities*              Search                         0;	///< Optional element.
/// Element "Replay" of type "http://www.onvif.org/ver10/schema":ReplayCapabilities.
    tt__ReplayCapabilities*              Replay                         0;	///< Optional element.
/// Element "Receiver" of type "http://www.onvif.org/ver10/schema":ReceiverCapabilities.
    tt__ReceiverCapabilities*            Receiver                       0;	///< Optional element.
/// Element "AnalyticsDevice" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities.
    tt__AnalyticsDeviceCapabilities*     AnalyticsDevice                0;	///< Optional element.
/// Element "Extensions" of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension2.
    tt__CapabilitiesExtension2*          Extensions                     0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension2 is a complexType.
///
/// @note class tt__CapabilitiesExtension2 operations:
/// - tt__CapabilitiesExtension2* soap_new_tt__CapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__CapabilitiesExtension2* soap_new_tt__CapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__CapabilitiesExtension2* soap_new_req_tt__CapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__CapabilitiesExtension2* soap_new_set_tt__CapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__CapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__CapabilitiesExtension2(soap*, tt__CapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension2(soap*, tt__CapabilitiesExtension2*) serialize to a stream
/// - tt__CapabilitiesExtension2* tt__CapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__CapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CapabilitiesExtension2::soap_del() deep deletes tt__CapabilitiesExtension2 data members, use only after tt__CapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__CapabilitiesExtension2 or derived type identifier
class tt__CapabilitiesExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsCapabilities is a complexType.
///
/// @note class tt__AnalyticsCapabilities operations:
/// - tt__AnalyticsCapabilities* soap_new_tt__AnalyticsCapabilities(soap*) allocate and default initialize
/// - tt__AnalyticsCapabilities* soap_new_tt__AnalyticsCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsCapabilities* soap_new_req_tt__AnalyticsCapabilities(soap*, ...) allocate, set required members
/// - tt__AnalyticsCapabilities* soap_new_set_tt__AnalyticsCapabilities(soap*, ...) allocate, set all public members
/// - tt__AnalyticsCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsCapabilities(soap*, tt__AnalyticsCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsCapabilities(soap*, tt__AnalyticsCapabilities*) serialize to a stream
/// - tt__AnalyticsCapabilities* tt__AnalyticsCapabilities::soap_dup(soap*) returns deep copy of tt__AnalyticsCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsCapabilities::soap_del() deep deletes tt__AnalyticsCapabilities data members, use only after tt__AnalyticsCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsCapabilities::soap_type() returns SOAP_TYPE_tt__AnalyticsCapabilities or derived type identifier
class tt__AnalyticsCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not rules are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RuleSupport" of type xs:boolean.
    bool                                 RuleSupport                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not modules are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AnalyticsModuleSupport" of type xs:boolean.
    bool                                 AnalyticsModuleSupport         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilities is a complexType.
///
/// @note class tt__DeviceCapabilities operations:
/// - tt__DeviceCapabilities* soap_new_tt__DeviceCapabilities(soap*) allocate and default initialize
/// - tt__DeviceCapabilities* soap_new_tt__DeviceCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DeviceCapabilities* soap_new_req_tt__DeviceCapabilities(soap*, ...) allocate, set required members
/// - tt__DeviceCapabilities* soap_new_set_tt__DeviceCapabilities(soap*, ...) allocate, set all public members
/// - tt__DeviceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceCapabilities(soap*, tt__DeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilities(soap*, tt__DeviceCapabilities*) serialize to a stream
/// - tt__DeviceCapabilities* tt__DeviceCapabilities::soap_dup(soap*) returns deep copy of tt__DeviceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceCapabilities::soap_del() deep deletes tt__DeviceCapabilities data members, use only after tt__DeviceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceCapabilities::soap_type() returns SOAP_TYPE_tt__DeviceCapabilities or derived type identifier
class tt__DeviceCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Device service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Network" of type "http://www.onvif.org/ver10/schema":NetworkCapabilities.
    tt__NetworkCapabilities*             Network                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "System" of type "http://www.onvif.org/ver10/schema":SystemCapabilities.
    tt__SystemCapabilities*              System                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   I/O capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "IO" of type "http://www.onvif.org/ver10/schema":IOCapabilities.
    tt__IOCapabilities*                  IO                             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Security capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "Security" of type "http://www.onvif.org/ver10/schema":SecurityCapabilities.
    tt__SecurityCapabilities*            Security                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension.
    tt__DeviceCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension is a complexType.
///
/// @note class tt__DeviceCapabilitiesExtension operations:
/// - tt__DeviceCapabilitiesExtension* soap_new_tt__DeviceCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__DeviceCapabilitiesExtension* soap_new_tt__DeviceCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__DeviceCapabilitiesExtension* soap_new_req_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__DeviceCapabilitiesExtension* soap_new_set_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__DeviceCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceCapabilitiesExtension(soap*, tt__DeviceCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilitiesExtension(soap*, tt__DeviceCapabilitiesExtension*) serialize to a stream
/// - tt__DeviceCapabilitiesExtension* tt__DeviceCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__DeviceCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceCapabilitiesExtension::soap_del() deep deletes tt__DeviceCapabilitiesExtension data members, use only after tt__DeviceCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__DeviceCapabilitiesExtension or derived type identifier
class tt__DeviceCapabilitiesExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use w