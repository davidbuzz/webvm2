sdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":EventCapabilities is a complexType.
///
/// @note class tt__EventCapabilities operations:
/// - tt__EventCapabilities* soap_new_tt__EventCapabilities(soap*) allocate and default initialize
/// - tt__EventCapabilities* soap_new_tt__EventCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__EventCapabilities* soap_new_req_tt__EventCapabilities(soap*, ...) allocate, set required members
/// - tt__EventCapabilities* soap_new_set_tt__EventCapabilities(soap*, ...) allocate, set all public members
/// - tt__EventCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__EventCapabilities(soap*, tt__EventCapabilities*) deserialize from a stream
/// - int soap_write_tt__EventCapabilities(soap*, tt__EventCapabilities*) serialize to a stream
/// - tt__EventCapabilities* tt__EventCapabilities::soap_dup(soap*) returns deep copy of tt__EventCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__EventCapabilities::soap_del() deep deletes tt__EventCapabilities data members, use only after tt__EventCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__EventCapabilities::soap_type() returns SOAP_TYPE_tt__EventCapabilities or derived type identifier
class tt__EventCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Event service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Subscription policy is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSSubscriptionPolicySupport" of type xs:boolean.
    bool                                 WSSubscriptionPolicySupport    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pull Point is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSPullPointSupport" of type xs:boolean.
    bool                                 WSPullPointSupport             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pausable Subscription Manager Interface is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "WSPausableSubscriptionManagerInterfaceSupport" of type xs:boolean.
    bool                                 WSPausableSubscriptionManagerInterfaceSupport 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilities is a complexType.
///
/// @note class tt__IOCapabilities operations:
/// - tt__IOCapabilities* soap_new_tt__IOCapabilities(soap*) allocate and default initialize
/// - tt__IOCapabilities* soap_new_tt__IOCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilities* soap_new_req_tt__IOCapabilities(soap*, ...) allocate, set required members
/// - tt__IOCapabilities* soap_new_set_tt__IOCapabilities(soap*, ...) allocate, set all public members
/// - tt__IOCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilities(soap*, tt__IOCapabilities*) deserialize from a stream
/// - int soap_write_tt__IOCapabilities(soap*, tt__IOCapabilities*) serialize to a stream
/// - tt__IOCapabilities* tt__IOCapabilities::soap_dup(soap*) returns deep copy of tt__IOCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilities::soap_del() deep deletes tt__IOCapabilities data members, use only after tt__IOCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilities::soap_type() returns SOAP_TYPE_tt__IOCapabilities or derived type identifier
class tt__IOCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of input connectors.
/// </BLOCKQUOTE></PRE>
///
/// Element "InputConnectors" of type xs:int.
    int*                                 InputConnectors                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of relay outputs.
/// </BLOCKQUOTE></PRE>
///
/// Element "RelayOutputs" of type xs:int.
    int*                                 RelayOutputs                   0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension.
    tt__IOCapabilitiesExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension is a complexType.
///
/// @note class tt__IOCapabilitiesExtension operations:
/// - tt__IOCapabilitiesExtension* soap_new_tt__IOCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__IOCapabilitiesExtension* soap_new_tt__IOCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilitiesExtension* soap_new_req_tt__IOCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__IOCapabilitiesExtension* soap_new_set_tt__IOCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__IOCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilitiesExtension(soap*, tt__IOCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension(soap*, tt__IOCapabilitiesExtension*) serialize to a stream
/// - tt__IOCapabilitiesExtension* tt__IOCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__IOCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilitiesExtension::soap_del() deep deletes tt__IOCapabilitiesExtension data members, use only after tt__IOCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__IOCapabilitiesExtension or derived type identifier
class tt__IOCapabilitiesExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "Auxiliary" of type xs:boolean.
    bool*                                Auxiliary                      0;	///< Optional element.
/// Size of array of tt__AuxiliaryData is 0..unbounded.
  $ int                                  __sizeAuxiliaryCommands        0;
/// Pointer to array tt__AuxiliaryData of size 0..unbounded.
    tt__AuxiliaryData                   *AuxiliaryCommands              0;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2.
    tt__IOCapabilitiesExtension2*        Extension                      1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2 is a complexType.
///
/// @note class tt__IOCapabilitiesExtension2 operations:
/// - tt__IOCapabilitiesExtension2* soap_new_tt__IOCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__IOCapabilitiesExtension2* soap_new_tt__IOCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__IOCapabilitiesExtension2* soap_new_req_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__IOCapabilitiesExtension2* soap_new_set_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__IOCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__IOCapabilitiesExtension2(soap*, tt__IOCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension2(soap*, tt__IOCapabilitiesExtension2*) serialize to a stream
/// - tt__IOCapabilitiesExtension2* tt__IOCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__IOCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IOCapabilitiesExtension2::soap_del() deep deletes tt__IOCapabilitiesExtension2 data members, use only after tt__IOCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IOCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__IOCapabilitiesExtension2 or derived type identifier
class tt__IOCapabilitiesExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilities is a complexType.
///
/// @note class tt__MediaCapabilities operations:
/// - tt__MediaCapabilities* soap_new_tt__MediaCapabilities(soap*) allocate and default initialize
/// - tt__MediaCapabilities* soap_new_tt__MediaCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__MediaCapabilities* soap_new_req_tt__MediaCapabilities(soap*, ...) allocate, set required members
/// - tt__MediaCapabilities* soap_new_set_tt__MediaCapabilities(soap*, ...) allocate, set all public members
/// - tt__MediaCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaCapabilities(soap*, tt__MediaCapabilities*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilities(soap*, tt__MediaCapabilities*) serialize to a stream
/// - tt__MediaCapabilities* tt__MediaCapabilities::soap_dup(soap*) returns deep copy of tt__MediaCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaCapabilities::soap_del() deep deletes tt__MediaCapabilities data members, use only after tt__MediaCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaCapabilities::soap_type() returns SOAP_TYPE_tt__MediaCapabilities or derived type identifier
class tt__MediaCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Media service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Streaming capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "StreamingCapabilities" of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities.
    tt__RealTimeStreamingCapabilities*   StreamingCapabilities          1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension.
    tt__MediaCapabilitiesExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension is a complexType.
///
/// @note class tt__MediaCapabilitiesExtension operations:
/// - tt__MediaCapabilitiesExtension* soap_new_tt__MediaCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__MediaCapabilitiesExtension* soap_new_tt__MediaCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__MediaCapabilitiesExtension* soap_new_req_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__MediaCapabilitiesExtension* soap_new_set_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__MediaCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__MediaCapabilitiesExtension(soap*, tt__MediaCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilitiesExtension(soap*, tt__MediaCapabilitiesExtension*) serialize to a stream
/// - tt__MediaCapabilitiesExtension* tt__MediaCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__MediaCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MediaCapabilitiesExtension::soap_del() deep deletes tt__MediaCapabilitiesExtension data members, use only after tt__MediaCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MediaCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__MediaCapabilitiesExtension or derived type identifier
class tt__MediaCapabilitiesExtension
{ public:
/// Element "ProfileCapabilities" of type "http://www.onvif.org/ver10/schema":ProfileCapabilities.
    tt__ProfileCapabilities*             ProfileCapabilities            1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities is a complexType.
///
/// @note class tt__RealTimeStreamingCapabilities operations:
/// - tt__RealTimeStreamingCapabilities* soap_new_tt__RealTimeStreamingCapabilities(soap*) allocate and default initialize
/// - tt__RealTimeStreamingCapabilities* soap_new_tt__RealTimeStreamingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__RealTimeStreamingCapabilities* soap_new_req_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set required members
/// - tt__RealTimeStreamingCapabilities* soap_new_set_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set all public members
/// - tt__RealTimeStreamingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__RealTimeStreamingCapabilities(soap*, tt__RealTimeStreamingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilities(soap*, tt__RealTimeStreamingCapabilities*) serialize to a stream
/// - tt__RealTimeStreamingCapabilities* tt__RealTimeStreamingCapabilities::soap_dup(soap*) returns deep copy of tt__RealTimeStreamingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RealTimeStreamingCapabilities::soap_del() deep deletes tt__RealTimeStreamingCapabilities data members, use only after tt__RealTimeStreamingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RealTimeStreamingCapabilities::soap_type() returns SOAP_TYPE_tt__RealTimeStreamingCapabilities or derived type identifier
class tt__RealTimeStreamingCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP multicast is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTPMulticast" of type xs:boolean.
    bool*                                RTPMulticast                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP over TCP is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_TCP" of type xs:boolean.
    bool*                                RTP_USCORETCP                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP/RTSP/TCP is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_RTSP_TCP" of type xs:boolean.
    bool*                                RTP_USCORERTSP_USCORETCP       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension.
    tt__RealTimeStreamingCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension is a complexType.
///
/// @note class tt__RealTimeStreamingCapabilitiesExtension operations:
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__RealTimeStreamingCapabilitiesExtension* soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__RealTimeStreamingCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap*, tt__RealTimeStreamingCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilitiesExtension(soap*, tt__RealTimeStreamingCapabilitiesExtension*) serialize to a stream
/// - tt__RealTimeStreamingCapabilitiesExtension* tt__RealTimeStreamingCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__RealTimeStreamingCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RealTimeStreamingCapabilitiesExtension::soap_del() deep deletes tt__RealTimeStreamingCapabilitiesExtension data members, use only after tt__RealTimeStreamingCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RealTimeStreamingCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension or derived type identifier
class tt__RealTimeStreamingCapabilitiesExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileCapabilities is a complexType.
///
/// @note class tt__ProfileCapabilities operations:
/// - tt__ProfileCapabilities* soap_new_tt__ProfileCapabilities(soap*) allocate and default initialize
/// - tt__ProfileCapabilities* soap_new_tt__ProfileCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ProfileCapabilities* soap_new_req_tt__ProfileCapabilities(soap*, ...) allocate, set required members
/// - tt__ProfileCapabilities* soap_new_set_tt__ProfileCapabilities(soap*, ...) allocate, set all public members
/// - tt__ProfileCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ProfileCapabilities(soap*, tt__ProfileCapabilities*) deserialize from a stream
/// - int soap_write_tt__ProfileCapabilities(soap*, tt__ProfileCapabilities*) serialize to a stream
/// - tt__ProfileCapabilities* tt__ProfileCapabilities::soap_dup(soap*) returns deep copy of tt__ProfileCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ProfileCapabilities::soap_del() deep deletes tt__ProfileCapabilities data members, use only after tt__ProfileCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ProfileCapabilities::soap_type() returns SOAP_TYPE_tt__ProfileCapabilities or derived type identifier
class tt__ProfileCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfProfiles" of type xs:int.
    int                                  MaximumNumberOfProfiles        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilities is a complexType.
///
/// @note class tt__NetworkCapabilities operations:
/// - tt__NetworkCapabilities* soap_new_tt__NetworkCapabilities(soap*) allocate and default initialize
/// - tt__NetworkCapabilities* soap_new_tt__NetworkCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilities* soap_new_req_tt__NetworkCapabilities(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilities* soap_new_set_tt__NetworkCapabilities(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilities(soap*, tt__NetworkCapabilities*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilities(soap*, tt__NetworkCapabilities*) serialize to a stream
/// - tt__NetworkCapabilities* tt__NetworkCapabilities::soap_dup(soap*) returns deep copy of tt__NetworkCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilities::soap_del() deep deletes tt__NetworkCapabilities data members, use only after tt__NetworkCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilities::soap_type() returns SOAP_TYPE_tt__NetworkCapabilities or derived type identifier
class tt__NetworkCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IP filtering is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPFilter" of type xs:boolean.
    bool*                                IPFilter                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not zeroconf is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "ZeroConfiguration" of type xs:boolean.
    bool*                                ZeroConfiguration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "IPVersion6" of type xs:boolean.
    bool*                                IPVersion6                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DynDNS" of type xs:boolean.
    bool*                                DynDNS                         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension.
    tt__NetworkCapabilitiesExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension is a complexType.
///
/// @note class tt__NetworkCapabilitiesExtension operations:
/// - tt__NetworkCapabilitiesExtension* soap_new_tt__NetworkCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__NetworkCapabilitiesExtension* soap_new_tt__NetworkCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilitiesExtension* soap_new_req_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilitiesExtension* soap_new_set_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilitiesExtension(soap*, tt__NetworkCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension(soap*, tt__NetworkCapabilitiesExtension*) serialize to a stream
/// - tt__NetworkCapabilitiesExtension* tt__NetworkCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__NetworkCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilitiesExtension::soap_del() deep deletes tt__NetworkCapabilitiesExtension data members, use only after tt__NetworkCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__NetworkCapabilitiesExtension or derived type identifier
class tt__NetworkCapabilitiesExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "Dot11Configuration" of type xs:boolean.
    bool*                                Dot11Configuration             0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2.
    tt__NetworkCapabilitiesExtension2*   Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2 is a complexType.
///
/// @note class tt__NetworkCapabilitiesExtension2 operations:
/// - tt__NetworkCapabilitiesExtension2* soap_new_tt__NetworkCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__NetworkCapabilitiesExtension2* soap_new_tt__NetworkCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__NetworkCapabilitiesExtension2* soap_new_req_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__NetworkCapabilitiesExtension2* soap_new_set_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__NetworkCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__NetworkCapabilitiesExtension2(soap*, tt__NetworkCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension2(soap*, tt__NetworkCapabilitiesExtension2*) serialize to a stream
/// - tt__NetworkCapabilitiesExtension2* tt__NetworkCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__NetworkCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__NetworkCapabilitiesExtension2::soap_del() deep deletes tt__NetworkCapabilitiesExtension2 data members, use only after tt__NetworkCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__NetworkCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__NetworkCapabilitiesExtension2 or derived type identifier
class tt__NetworkCapabilitiesExtension2
{ public:
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilities is a complexType.
///
/// @note class tt__SecurityCapabilities operations:
/// - tt__SecurityCapabilities* soap_new_tt__SecurityCapabilities(soap*) allocate and default initialize
/// - tt__SecurityCapabilities* soap_new_tt__SecurityCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilities* soap_new_req_tt__SecurityCapabilities(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilities* soap_new_set_tt__SecurityCapabilities(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilities(soap*, tt__SecurityCapabilities*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilities(soap*, tt__SecurityCapabilities*) serialize to a stream
/// - tt__SecurityCapabilities* tt__SecurityCapabilities::soap_dup(soap*) returns deep copy of tt__SecurityCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilities::soap_del() deep deletes tt__SecurityCapabilities data members, use only after tt__SecurityCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilities::soap_type() returns SOAP_TYPE_tt__SecurityCapabilities or derived type identifier
class tt__SecurityCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.1 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLS1.1" of type xs:boolean.
    bool                                 TLS1_x002e1                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.2 is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "TLS1.2" of type xs:boolean.
    bool                                 TLS1_x002e2                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not onboard key generation is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "OnboardKeyGeneration" of type xs:boolean.
    bool                                 OnboardKeyGeneration           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not access policy configuration is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "AccessPolicyConfig" of type xs:boolean.
    bool                                 AccessPolicyConfig             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security X.509 token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "X.509Token" of type xs:boolean.
    bool                                 X_x002e509Token                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security SAML token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SAMLToken" of type xs:boolean.
    bool                                 SAMLToken                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security Kerberos token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "KerberosToken" of type xs:boolean.
    bool                                 KerberosToken                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security REL token is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RELToken" of type xs:boolean.
    bool                                 RELToken                       1;	///< Required element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension.
    tt__SecurityCapabilitiesExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension is a complexType.
///
/// @note class tt__SecurityCapabilitiesExtension operations:
/// - tt__SecurityCapabilitiesExtension* soap_new_tt__SecurityCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__SecurityCapabilitiesExtension* soap_new_tt__SecurityCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilitiesExtension* soap_new_req_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilitiesExtension* soap_new_set_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilitiesExtension(soap*, tt__SecurityCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension(soap*, tt__SecurityCapabilitiesExtension*) serialize to a stream
/// - tt__SecurityCapabilitiesExtension* tt__SecurityCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__SecurityCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilitiesExtension::soap_del() deep deletes tt__SecurityCapabilitiesExtension data members, use only after tt__SecurityCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__SecurityCapabilitiesExtension or derived type identifier
class tt__SecurityCapabilitiesExtension
{ public:
/// Element "TLS1.0" of type xs:boolean.
    bool                                 TLS1_x002e0                    1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2.
    tt__SecurityCapabilitiesExtension2*  Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2 is a complexType.
///
/// @note class tt__SecurityCapabilitiesExtension2 operations:
/// - tt__SecurityCapabilitiesExtension2* soap_new_tt__SecurityCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__SecurityCapabilitiesExtension2* soap_new_tt__SecurityCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__SecurityCapabilitiesExtension2* soap_new_req_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__SecurityCapabilitiesExtension2* soap_new_set_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__SecurityCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__SecurityCapabilitiesExtension2(soap*, tt__SecurityCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension2(soap*, tt__SecurityCapabilitiesExtension2*) serialize to a stream
/// - tt__SecurityCapabilitiesExtension2* tt__SecurityCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__SecurityCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SecurityCapabilitiesExtension2::soap_del() deep deletes tt__SecurityCapabilitiesExtension2 data members, use only after tt__SecurityCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SecurityCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__SecurityCapabilitiesExtension2 or derived type identifier
class tt__SecurityCapabilitiesExtension2
{ public:
/// Element "Dot1X" of type xs:boolean.
    bool                                 Dot1X                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of int is 0..unbounded.
  $ int                                  __sizeSupportedEAPMethod       0;
/// Pointer to array int of size 0..unbounded.
    int                                 *SupportedEAPMethod             0;	///< Multiple elements.
/// Element "RemoteUserHandling" of type xs:boolean.
    bool                                 RemoteUserHandling             1;	///< Required element.
/// <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilities is a complexType.
///
/// @note class tt__SystemCapabilities operations:
/// - tt__SystemCapabilities* soap_new_tt__SystemCapabilities(soap*) allocate and default initialize
/// - tt__SystemCapabilities* soap_new_tt__SystemCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilities* soap_new_req_tt__SystemCapabilities(soap*, ...) allocate, set required members
/// - tt__SystemCapabilities* soap_new_set_tt__SystemCapabilities(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilities(soap*, tt__SystemCapabilities*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilities(soap*, tt__SystemCapabilities*) serialize to a stream
/// - tt__SystemCapabilities* tt__SystemCapabilities::soap_dup(soap*) returns deep copy of tt__SystemCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilities::soap_del() deep deletes tt__SystemCapabilities data members, use only after tt__SystemCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilities::soap_type() returns SOAP_TYPE_tt__SystemCapabilities or derived type identifier
class tt__SystemCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Discovery resolve requests are supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryResolve" of type xs:boolean.
    bool                                 DiscoveryResolve               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Discovery Bye is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "DiscoveryBye" of type xs:boolean.
    bool                                 DiscoveryBye                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not remote discovery is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "RemoteDiscovery" of type xs:boolean.
    bool                                 RemoteDiscovery                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system backup is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemBackup" of type xs:boolean.
    bool                                 SystemBackup                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system logging is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "SystemLogging" of type xs:boolean.
    bool                                 SystemLogging                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not firmware upgrade is supported.
/// </BLOCKQUOTE></PRE>
///
/// Element "FirmwareUpgrade" of type xs:boolean.
    bool                                 FirmwareUpgrade                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates supported ONVIF version(s).
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__OnvifVersion* is 1..unbounded.
  $ int                                  __sizeSupportedVersions        1;
/// Pointer to array tt__OnvifVersion* of size 1..unbounded.
    tt__OnvifVersion*                   *SupportedVersions              1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension.
    tt__SystemCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension is a complexType.
///
/// @note class tt__SystemCapabilitiesExtension operations:
/// - tt__SystemCapabilitiesExtension* soap_new_tt__SystemCapabilitiesExtension(soap*) allocate and default initialize
/// - tt__SystemCapabilitiesExtension* soap_new_tt__SystemCapabilitiesExtension(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilitiesExtension* soap_new_req_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set required members
/// - tt__SystemCapabilitiesExtension* soap_new_set_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilitiesExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilitiesExtension(soap*, tt__SystemCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension(soap*, tt__SystemCapabilitiesExtension*) serialize to a stream
/// - tt__SystemCapabilitiesExtension* tt__SystemCapabilitiesExtension::soap_dup(soap*) returns deep copy of tt__SystemCapabilitiesExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilitiesExtension::soap_del() deep deletes tt__SystemCapabilitiesExtension data members, use only after tt__SystemCapabilitiesExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilitiesExtension::soap_type() returns SOAP_TYPE_tt__SystemCapabilitiesExtension or derived type identifier
class tt__SystemCapabilitiesExtension
{ public:
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Element "HttpFirmwareUpgrade" of type xs:boolean.
    bool*                                HttpFirmwareUpgrade            0;	///< Optional element.
/// Element "HttpSystemBackup" of type xs:boolean.
    bool*                                HttpSystemBackup               0;	///< Optional element.
/// Element "HttpSystemLogging" of type xs:boolean.
    bool*                                HttpSystemLogging              0;	///< Optional element.
/// Element "HttpSupportInformation" of type xs:boolean.
    bool*                                HttpSupportInformation         0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2.
    tt__SystemCapabilitiesExtension2*    Extension                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2 is a complexType.
///
/// @note class tt__SystemCapabilitiesExtension2 operations:
/// - tt__SystemCapabilitiesExtension2* soap_new_tt__SystemCapabilitiesExtension2(soap*) allocate and default initialize
/// - tt__SystemCapabilitiesExtension2* soap_new_tt__SystemCapabilitiesExtension2(soap*, int num) allocate and default initialize an array
/// - tt__SystemCapabilitiesExtension2* soap_new_req_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - tt__SystemCapabilitiesExtension2* soap_new_set_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - tt__SystemCapabilitiesExtension2::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemCapabilitiesExtension2(soap*, tt__SystemCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension2(soap*, tt__SystemCapabilitiesExtension2*) serialize to a stream
/// - tt__SystemCapabilitiesExtension2* tt__SystemCapabilitiesExtension2::soap_dup(soap*) returns deep copy of tt__SystemCapabilitiesExtension2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemCapabilitiesExtension2::soap_del() deep deletes tt__SystemCapabilitiesExtension2 data members, use only after tt__SystemCapabilitiesExtension2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemCapabilitiesExtension2::soap_type() returns SOAP_TYPE_tt__SystemCapabilitiesExtension2 or derived type identifier
class tt__SystemCapabilitiesExtension2
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OnvifVersion is a complexType.
///
/// @note class tt__OnvifVersion operations:
/// - tt__OnvifVersion* soap_new_tt__OnvifVersion(soap*) allocate and default initialize
/// - tt__OnvifVersion* soap_new_tt__OnvifVersion(soap*, int num) allocate and default initialize an array
/// - tt__OnvifVersion* soap_new_req_tt__OnvifVersion(soap*, ...) allocate, set required members
/// - tt__OnvifVersion* soap_new_set_tt__OnvifVersion(soap*, ...) allocate, set all public members
/// - tt__OnvifVersion::soap_default(soap*) default initialize members
/// - int soap_read_tt__OnvifVersion(soap*, tt__OnvifVersion*) deserialize from a stream
/// - int soap_write_tt__OnvifVersion(soap*, tt__OnvifVersion*) serialize to a stream
/// - tt__OnvifVersion* tt__OnvifVersion::soap_dup(soap*) returns deep copy of tt__OnvifVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OnvifVersion::soap_del() deep deletes tt__OnvifVersion data members, use only after tt__OnvifVersion::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OnvifVersion::soap_type() returns SOAP_TYPE_tt__OnvifVersion or derived type identifier
class tt__OnvifVersion
{ public:
/// <PRE><BLOCKQUOTE>
///   Major version number.
/// </BLOCKQUOTE></PRE>
///
/// Element "Major" of type xs:int.
    int                                  Major                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Two digit minor version number.
///   If major version number is less than "16", X.0.1 maps to "01" and X.2.1 maps to "21" where X stands for Major version number.
///   Otherwise, minor number is month of release, such as "06" for June.
/// </BLOCKQUOTE></PRE>
///
/// Element "Minor" of type xs:int.
    int                                  Minor                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingCapabilities is a complexType.
///
/// @note class tt__ImagingCapabilities operations:
/// - tt__ImagingCapabilities* soap_new_tt__ImagingCapabilities(soap*) allocate and default initialize
/// - tt__ImagingCapabilities* soap_new_tt__ImagingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ImagingCapabilities* soap_new_req_tt__ImagingCapabilities(soap*, ...) allocate, set required members
/// - tt__ImagingCapabilities* soap_new_set_tt__ImagingCapabilities(soap*, ...) allocate, set all public members
/// - tt__ImagingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ImagingCapabilities(soap*, tt__ImagingCapabilities*) deserialize from a stream
/// - int soap_write_tt__ImagingCapabilities(soap*, tt__ImagingCapabilities*) serialize to a stream
/// - tt__ImagingCapabilities* tt__ImagingCapabilities::soap_dup(soap*) returns deep copy of tt__ImagingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ImagingCapabilities::soap_del() deep deletes tt__ImagingCapabilities data members, use only after tt__ImagingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ImagingCapabilities::soap_type() returns SOAP_TYPE_tt__ImagingCapabilities or derived type identifier
class tt__ImagingCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Imaging service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZCapabilities is a complexType.
///
/// @note class tt__PTZCapabilities operations:
/// - tt__PTZCapabilities* soap_new_tt__PTZCapabilities(soap*) allocate and default initialize
/// - tt__PTZCapabilities* soap_new_tt__PTZCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__PTZCapabilities* soap_new_req_tt__PTZCapabilities(soap*, ...) allocate, set required members
/// - tt__PTZCapabilities* soap_new_set_tt__PTZCapabilities(soap*, ...) allocate, set all public members
/// - tt__PTZCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZCapabilities(soap*, tt__PTZCapabilities*) deserialize from a stream
/// - int soap_write_tt__PTZCapabilities(soap*, tt__PTZCapabilities*) serialize to a stream
/// - tt__PTZCapabilities* tt__PTZCapabilities::soap_dup(soap*) returns deep copy of tt__PTZCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZCapabilities::soap_del() deep deletes tt__PTZCapabilities data members, use only after tt__PTZCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZCapabilities::soap_type() returns SOAP_TYPE_tt__PTZCapabilities or derived type identifier
class tt__PTZCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   PTZ service URI.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceIOCapabilities is a complexType.
///
/// @note class tt__DeviceIOCapabilities operations:
/// - tt__DeviceIOCapabilities* soap_new_tt__DeviceIOCapabilities(soap*) allocate and default initialize
/// - tt__DeviceIOCapabilities* soap_new_tt__DeviceIOCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DeviceIOCapabilities* soap_new_req_tt__DeviceIOCapabilities(soap*, ...) allocate, set required members
/// - tt__DeviceIOCapabilities* soap_new_set_tt__DeviceIOCapabilities(soap*, ...) allocate, set all public members
/// - tt__DeviceIOCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DeviceIOCapabilities(soap*, tt__DeviceIOCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceIOCapabilities(soap*, tt__DeviceIOCapabilities*) serialize to a stream
/// - tt__DeviceIOCapabilities* tt__DeviceIOCapabilities::soap_dup(soap*) returns deep copy of tt__DeviceIOCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DeviceIOCapabilities::soap_del() deep deletes tt__DeviceIOCapabilities data members, use only after tt__DeviceIOCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DeviceIOCapabilities::soap_type() returns SOAP_TYPE_tt__DeviceIOCapabilities or derived type identifier
class tt__DeviceIOCapabilities
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "VideoSources" of type xs:int.
    int                                  VideoSources                   1;	///< Required element.
/// Element "VideoOutputs" of type xs:int.
    int                                  VideoOutputs                   1;	///< Required element.
/// Element "AudioSources" of type xs:int.
    int                                  AudioSources                   1;	///< Required element.
/// Element "AudioOutputs" of type xs:int.
    int                                  AudioOutputs                   1;	///< Required element.
/// Element "RelayOutputs" of type xs:int.
    int                                  RelayOutputs                   1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DisplayCapabilities is a complexType.
///
/// @note class tt__DisplayCapabilities operations:
/// - tt__DisplayCapabilities* soap_new_tt__DisplayCapabilities(soap*) allocate and default initialize
/// - tt__DisplayCapabilities* soap_new_tt__DisplayCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__DisplayCapabilities* soap_new_req_tt__DisplayCapabilities(soap*, ...) allocate, set required members
/// - tt__DisplayCapabilities* soap_new_set_tt__DisplayCapabilities(soap*, ...) allocate, set all public members
/// - tt__DisplayCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__DisplayCapabilities(soap*, tt__DisplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__DisplayCapabilities(soap*, tt__DisplayCapabilities*) serialize to a stream
/// - tt__DisplayCapabilities* tt__DisplayCapabilities::soap_dup(soap*) returns deep copy of tt__DisplayCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DisplayCapabilities::soap_del() deep deletes tt__DisplayCapabilities data members, use only after tt__DisplayCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DisplayCapabilities::soap_type() returns SOAP_TYPE_tt__DisplayCapabilities or derived type identifier
class tt__DisplayCapabilities
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indication that the SetLayout command supports only predefined layouts.
/// </BLOCKQUOTE></PRE>
///
/// Element "FixedLayout" of type xs:boolean.
    bool                                 FixedLayout                    1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingCapabilities is a complexType.
///
/// @note class tt__RecordingCapabilities operations:
/// - tt__RecordingCapabilities* soap_new_tt__RecordingCapabilities(soap*) allocate and default initialize
/// - tt__RecordingCapabilities* soap_new_tt__RecordingCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__RecordingCapabilities* soap_new_req_tt__RecordingCapabilities(soap*, ...) allocate, set required members
/// - tt__RecordingCapabilities* soap_new_set_tt__RecordingCapabilities(soap*, ...) allocate, set all public members
/// - tt__RecordingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__RecordingCapabilities(soap*, tt__RecordingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RecordingCapabilities(soap*, tt__RecordingCapabilities*) serialize to a stream
/// - tt__RecordingCapabilities* tt__RecordingCapabilities::soap_dup(soap*) returns deep copy of tt__RecordingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RecordingCapabilities::soap_del() deep deletes tt__RecordingCapabilities data members, use only after tt__RecordingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RecordingCapabilities::soap_type() returns SOAP_TYPE_tt__RecordingCapabilities or derived type identifier
class tt__RecordingCapabilities
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "ReceiverSource" of type xs:boolean.
    bool                                 ReceiverSource                 1;	///< Required element.
/// Element "MediaProfileSource" of type xs:boolean.
    bool                                 MediaProfileSource             1;	///< Required element.
/// Element "DynamicRecordings" of type xs:boolean.
    bool                                 DynamicRecordings              1;	///< Required element.
/// Element "DynamicTracks" of type xs:boolean.
    bool                                 DynamicTracks                  1;	///< Required element.
/// Element "MaxStringLength" of type xs:int.
    int                                  MaxStringLength                1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SearchCapabilities is a complexType.
///
/// @note class tt__SearchCapabilities operations:
/// - tt__SearchCapabilities* soap_new_tt__SearchCapabilities(soap*) allocate and default initialize
/// - tt__SearchCapabilities* soap_new_tt__SearchCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__SearchCapabilities* soap_new_req_tt__SearchCapabilities(soap*, ...) allocate, set required members
/// - tt__SearchCapabilities* soap_new_set_tt__SearchCapabilities(soap*, ...) allocate, set all public members
/// - tt__SearchCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__SearchCapabilities(soap*, tt__SearchCapabilities*) deserialize from a stream
/// - int soap_write_tt__SearchCapabilities(soap*, tt__SearchCapabilities*) serialize to a stream
/// - tt__SearchCapabilities* tt__SearchCapabilities::soap_dup(soap*) returns deep copy of tt__SearchCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SearchCapabilities::soap_del() deep deletes tt__SearchCapabilities data members, use only after tt__SearchCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SearchCapabilities::soap_type() returns SOAP_TYPE_tt__SearchCapabilities or derived type identifier
class tt__SearchCapabilities
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "MetadataSearch" of type xs:boolean.
    bool                                 MetadataSearch                 1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ReplayCapabilities is a complexType.
///
/// @note class tt__ReplayCapabilities operations:
/// - tt__ReplayCapabilities* soap_new_tt__ReplayCapabilities(soap*) allocate and default initialize
/// - tt__ReplayCapabilities* soap_new_tt__ReplayCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ReplayCapabilities* soap_new_req_tt__ReplayCapabilities(soap*, ...) allocate, set required members
/// - tt__ReplayCapabilities* soap_new_set_tt__ReplayCapabilities(soap*, ...) allocate, set all public members
/// - tt__ReplayCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReplayCapabilities(soap*, tt__ReplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReplayCapabilities(soap*, tt__ReplayCapabilities*) serialize to a stream
/// - tt__ReplayCapabilities* tt__ReplayCapabilities::soap_dup(soap*) returns deep copy of tt__ReplayCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReplayCapabilities::soap_del() deep deletes tt__ReplayCapabilities data members, use only after tt__ReplayCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReplayCapabilities::soap_type() returns SOAP_TYPE_tt__ReplayCapabilities or derived type identifier
class tt__ReplayCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the replay service.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverCapabilities is a complexType.
///
/// @note class tt__ReceiverCapabilities operations:
/// - tt__ReceiverCapabilities* soap_new_tt__ReceiverCapabilities(soap*) allocate and default initialize
/// - tt__ReceiverCapabilities* soap_new_tt__ReceiverCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__ReceiverCapabilities* soap_new_req_tt__ReceiverCapabilities(soap*, ...) allocate, set required members
/// - tt__ReceiverCapabilities* soap_new_set_tt__ReceiverCapabilities(soap*, ...) allocate, set all public members
/// - tt__ReceiverCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__ReceiverCapabilities(soap*, tt__ReceiverCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReceiverCapabilities(soap*, tt__ReceiverCapabilities*) serialize to a stream
/// - tt__ReceiverCapabilities* tt__ReceiverCapabilities::soap_dup(soap*) returns deep copy of tt__ReceiverCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ReceiverCapabilities::soap_del() deep deletes tt__ReceiverCapabilities data members, use only after tt__ReceiverCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ReceiverCapabilities::soap_type() returns SOAP_TYPE_tt__ReceiverCapabilities or derived type identifier
class tt__ReceiverCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the receiver service.
/// </BLOCKQUOTE></PRE>
///
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP multicast streams.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_Multicast" of type xs:boolean.
    bool                                 RTP_USCOREMulticast            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/TCP streams
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_TCP" of type xs:boolean.
    bool                                 RTP_USCORETCP                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/RTSP/TCP streams.
/// </BLOCKQUOTE></PRE>
///
/// Element "RTP_RTSP_TCP" of type xs:boolean.
    bool                                 RTP_USCORERTSP_USCORETCP       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of receivers supported by the device.
/// </BLOCKQUOTE></PRE>
///
/// Element "SupportedReceivers" of type xs:int.
    int                                  SupportedReceivers             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum allowed length for RTSP URIs.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumRTSPURILength" of type xs:int.
    int                                  MaximumRTSPURILength           1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities is a complexType.
///
/// @note class tt__AnalyticsDeviceCapabilities operations:
/// - tt__AnalyticsDeviceCapabilities* soap_new_tt__AnalyticsDeviceCapabilities(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceCapabilities* soap_new_tt__AnalyticsDeviceCapabilities(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceCapabilities* soap_new_req_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceCapabilities* soap_new_set_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceCapabilities(soap*, tt__AnalyticsDeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceCapabilities(soap*, tt__AnalyticsDeviceCapabilities*) serialize to a stream
/// - tt__AnalyticsDeviceCapabilities* tt__AnalyticsDeviceCapabilities::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceCapabilities::soap_del() deep deletes tt__AnalyticsDeviceCapabilities data members, use only after tt__AnalyticsDeviceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceCapabilities::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceCapabilities or derived type identifier
class tt__AnalyticsDeviceCapabilities
{ public:
/// Element "XAddr" of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Obsolete property.
/// </BLOCKQUOTE></PRE>
///
/// Element "RuleSupport" of type xs:boolean.
    bool*                                RuleSupport                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension.
    tt__AnalyticsDeviceExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension is a complexType.
///
/// @note class tt__AnalyticsDeviceExtension operations:
/// - tt__AnalyticsDeviceExtension* soap_new_tt__AnalyticsDeviceExtension(soap*) allocate and default initialize
/// - tt__AnalyticsDeviceExtension* soap_new_tt__AnalyticsDeviceExtension(soap*, int num) allocate and default initialize an array
/// - tt__AnalyticsDeviceExtension* soap_new_req_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set required members
/// - tt__AnalyticsDeviceExtension* soap_new_set_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set all public members
/// - tt__AnalyticsDeviceExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__AnalyticsDeviceExtension(soap*, tt__AnalyticsDeviceExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceExtension(soap*, tt__AnalyticsDeviceExtension*) serialize to a stream
/// - tt__AnalyticsDeviceExtension* tt__AnalyticsDeviceExtension::soap_dup(soap*) returns deep copy of tt__AnalyticsDeviceExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AnalyticsDeviceExtension::soap_del() deep deletes tt__AnalyticsDeviceExtension data members, use only after tt__AnalyticsDeviceExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AnalyticsDeviceExtension::soap_type() returns SOAP_TYPE_tt__AnalyticsDeviceExtension or derived type identifier
class tt__AnalyticsDeviceExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLog is a complexType.
///
/// @note class tt__SystemLog operations:
/// - tt__SystemLog* soap_new_tt__SystemLog(soap*) allocate and default initialize
/// - tt__SystemLog* soap_new_tt__SystemLog(soap*, int num) allocate and default initialize an array
/// - tt__SystemLog* soap_new_req_tt__SystemLog(soap*, ...) allocate, set required members
/// - tt__SystemLog* soap_new_set_tt__SystemLog(soap*, ...) allocate, set all public members
/// - tt__SystemLog::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLog(soap*, tt__SystemLog*) deserialize from a stream
/// - int soap_write_tt__SystemLog(soap*, tt__SystemLog*) serialize to a stream
/// - tt__SystemLog* tt__SystemLog::soap_dup(soap*) returns deep copy of tt__SystemLog, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLog::soap_del() deep deletes tt__SystemLog data members, use only after tt__SystemLog::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLog::soap_type() returns SOAP_TYPE_tt__SystemLog or derived type identifier
class tt__SystemLog
{ public:
/// <PRE><BLOCKQUOTE>
///   The log information as attachment data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Binary" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The log information as character data.
/// </BLOCKQUOTE></PRE>
///
/// Element "String" of type xs:string.
    char*                                String                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SupportInformation is a complexType.
///
/// @note class tt__SupportInformation operations:
/// - tt__SupportInformation* soap_new_tt__SupportInformation(soap*) allocate and default initialize
/// - tt__SupportInformation* soap_new_tt__SupportInformation(soap*, int num) allocate and default initialize an array
/// - tt__SupportInformation* soap_new_req_tt__SupportInformation(soap*, ...) allocate, set required members
/// - tt__SupportInformation* soap_new_set_tt__SupportInformation(soap*, ...) allocate, set all public members
/// - tt__SupportInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__SupportInformation(soap*, tt__SupportInformation*) deserialize from a stream
/// - int soap_write_tt__SupportInformation(soap*, tt__SupportInformation*) serialize to a stream
/// - tt__SupportInformation* tt__SupportInformation::soap_dup(soap*) returns deep copy of tt__SupportInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SupportInformation::soap_del() deep deletes tt__SupportInformation data members, use only after tt__SupportInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SupportInformation::soap_type() returns SOAP_TYPE_tt__SupportInformation or derived type identifier
class tt__SupportInformation
{ public:
/// <PRE><BLOCKQUOTE>
///   The support information as attachment data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Binary" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The support information as character data.
/// </BLOCKQUOTE></PRE>
///
/// Element "String" of type xs:string.
    char*                                String                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":BinaryData is a complexType.
///
/// @note class tt__BinaryData operations:
/// - tt__BinaryData* soap_new_tt__BinaryData(soap*) allocate and default initialize
/// - tt__BinaryData* soap_new_tt__BinaryData(soap*, int num) allocate and default initialize an array
/// - tt__BinaryData* soap_new_req_tt__BinaryData(soap*, ...) allocate, set required members
/// - tt__BinaryData* soap_new_set_tt__BinaryData(soap*, ...) allocate, set all public members
/// - tt__BinaryData::soap_default(soap*) default initialize members
/// - int soap_read_tt__BinaryData(soap*, tt__BinaryData*) deserialize from a stream
/// - int soap_write_tt__BinaryData(soap*, tt__BinaryData*) serialize to a stream
/// - tt__BinaryData* tt__BinaryData::soap_dup(soap*) returns deep copy of tt__BinaryData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BinaryData::soap_del() deep deletes tt__BinaryData data members, use only after tt__BinaryData::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BinaryData::soap_type() returns SOAP_TYPE_tt__BinaryData or derived type identifier
class tt__BinaryData
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded binary data.
/// </BLOCKQUOTE></PRE>
///
/// Element "Data" of type xs:base64Binary.
    xsd__base64Binary                    Data                           1;	///< Required element.
/// Imported attribute reference xmime:contentType.
  @ char*                                xmime__contentType             0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":AttachmentData is a complexType.
///
/// @note class tt__AttachmentData operations:
/// - tt__AttachmentData* soap_new_tt__AttachmentData(soap*) allocate and default initialize
/// - tt__AttachmentData* soap_new_tt__AttachmentData(soap*, int num) allocate and default initialize an array
/// - tt__AttachmentData* soap_new_req_tt__AttachmentData(soap*, ...) allocate, set required members
/// - tt__AttachmentData* soap_new_set_tt__AttachmentData(soap*, ...) allocate, set all public members
/// - tt__AttachmentData::soap_default(soap*) default initialize members
/// - int soap_read_tt__AttachmentData(soap*, tt__AttachmentData*) deserialize from a stream
/// - int soap_write_tt__AttachmentData(soap*, tt__AttachmentData*) serialize to a stream
/// - tt__AttachmentData* tt__AttachmentData::soap_dup(soap*) returns deep copy of tt__AttachmentData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__AttachmentData::soap_del() deep deletes tt__AttachmentData data members, use only after tt__AttachmentData::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__AttachmentData::soap_type() returns SOAP_TYPE_tt__AttachmentData or derived type identifier
class tt__AttachmentData
{ public:
/// Imported element reference "http://www.w3.org/2004/08/xop/include":Include.
    _xop__Include                        xop__Include                   1;	///< Required element.
/// Imported attribute reference xmime:contentType.
  @ char*                                xmime__contentType             0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":BackupFile is a complexType.
///
/// @note class tt__BackupFile operations:
/// - tt__BackupFile* soap_new_tt__BackupFile(soap*) allocate and default initialize
/// - tt__BackupFile* soap_new_tt__BackupFile(soap*, int num) allocate and default initialize an array
/// - tt__BackupFile* soap_new_req_tt__BackupFile(soap*, ...) allocate, set required members
/// - tt__BackupFile* soap_new_set_tt__BackupFile(soap*, ...) allocate, set all public members
/// - tt__BackupFile::soap_default(soap*) default initialize members
/// - int soap_read_tt__BackupFile(soap*, tt__BackupFile*) deserialize from a stream
/// - int soap_write_tt__BackupFile(soap*, tt__BackupFile*) serialize to a stream
/// - tt__BackupFile* tt__BackupFile::soap_dup(soap*) returns deep copy of tt__BackupFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__BackupFile::soap_del() deep deletes tt__BackupFile data members, use only after tt__BackupFile::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__BackupFile::soap_type() returns SOAP_TYPE_tt__BackupFile or derived type identifier
class tt__BackupFile
{ public:
/// Element "Name" of type xs:string.
    char*                                Name                           1;	///< Required element.
/// Element "Data" of type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Data                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUriList is a complexType.
///
/// @note class tt__SystemLogUriList operations:
/// - tt__SystemLogUriList* soap_new_tt__SystemLogUriList(soap*) allocate and default initialize
/// - tt__SystemLogUriList* soap_new_tt__SystemLogUriList(soap*, int num) allocate and default initialize an array
/// - tt__SystemLogUriList* soap_new_req_tt__SystemLogUriList(soap*, ...) allocate, set required members
/// - tt__SystemLogUriList* soap_new_set_tt__SystemLogUriList(soap*, ...) allocate, set all public members
/// - tt__SystemLogUriList::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLogUriList(soap*, tt__SystemLogUriList*) deserialize from a stream
/// - int soap_write_tt__SystemLogUriList(soap*, tt__SystemLogUriList*) serialize to a stream
/// - tt__SystemLogUriList* tt__SystemLogUriList::soap_dup(soap*) returns deep copy of tt__SystemLogUriList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLogUriList::soap_del() deep deletes tt__SystemLogUriList data members, use only after tt__SystemLogUriList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLogUriList::soap_type() returns SOAP_TYPE_tt__SystemLogUriList or derived type identifier
class tt__SystemLogUriList
{ public:
/// Size of array of tt__SystemLogUri* is 0..unbounded.
  $ int                                  __sizeSystemLog                0;
/// Pointer to array tt__SystemLogUri* of size 0..unbounded.
    tt__SystemLogUri*                   *SystemLog                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUri is a complexType.
///
/// @note class tt__SystemLogUri operations:
/// - tt__SystemLogUri* soap_new_tt__SystemLogUri(soap*) allocate and default initialize
/// - tt__SystemLogUri* soap_new_tt__SystemLogUri(soap*, int num) allocate and default initialize an array
/// - tt__SystemLogUri* soap_new_req_tt__SystemLogUri(soap*, ...) allocate, set required members
/// - tt__SystemLogUri* soap_new_set_tt__SystemLogUri(soap*, ...) allocate, set all public members
/// - tt__SystemLogUri::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemLogUri(soap*, tt__SystemLogUri*) deserialize from a stream
/// - int soap_write_tt__SystemLogUri(soap*, tt__SystemLogUri*) serialize to a stream
/// - tt__SystemLogUri* tt__SystemLogUri::soap_dup(soap*) returns deep copy of tt__SystemLogUri, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemLogUri::soap_del() deep deletes tt__SystemLogUri data members, use only after tt__SystemLogUri::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemLogUri::soap_type() returns SOAP_TYPE_tt__SystemLogUri or derived type identifier
class tt__SystemLogUri
{ public:
/// Element "Type" of type "http://www.onvif.org/ver10/schema":SystemLogType.
    enum tt__SystemLogType               Type                           1;	///< Required element.
/// Element "Uri" of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTime is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   General date time inforamtion returned by the GetSystemDateTime method.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__SystemDateTime operations:
/// - tt__SystemDateTime* soap_new_tt__SystemDateTime(soap*) allocate and default initialize
/// - tt__SystemDateTime* soap_new_tt__SystemDateTime(soap*, int num) allocate and default initialize an array
/// - tt__SystemDateTime* soap_new_req_tt__SystemDateTime(soap*, ...) allocate, set required members
/// - tt__SystemDateTime* soap_new_set_tt__SystemDateTime(soap*, ...) allocate, set all public members
/// - tt__SystemDateTime::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemDateTime(soap*, tt__SystemDateTime*) deserialize from a stream
/// - int soap_write_tt__SystemDateTime(soap*, tt__SystemDateTime*) serialize to a stream
/// - tt__SystemDateTime* tt__SystemDateTime::soap_dup(soap*) returns deep copy of tt__SystemDateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemDateTime::soap_del() deep deletes tt__SystemDateTime data members, use only after tt__SystemDateTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemDateTime::soap_type() returns SOAP_TYPE_tt__SystemDateTime or derived type identifier
class tt__SystemDateTime
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the time is set manully or through NTP.
/// </BLOCKQUOTE></PRE>
///
/// Element "DateTimeType" of type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    enum tt__SetDateTimeType             DateTimeType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative indicator whether daylight savings is currently on/off.
/// </BLOCKQUOTE></PRE>
///
/// Element "DaylightSavings" of type xs:boolean.
    bool                                 DaylightSavings                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Timezone information in Posix format.
/// </BLOCKQUOTE></PRE>
///
/// Element "TimeZone" of type "http://www.onvif.org/ver10/schema":TimeZone.
    tt__TimeZone*                        TimeZone                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Current system date and time in UTC format. This field is mandatory since version 2.0.
/// </BLOCKQUOTE></PRE>
///
/// Element "UTCDateTime" of type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        UTCDateTime                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time in local format.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalDateTime" of type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        LocalDateTime                  0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":SystemDateTimeExtension.
    tt__SystemDateTimeExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTimeExtension is a complexType.
///
/// @note class tt__SystemDateTimeExtension operations:
/// - tt__SystemDateTimeExtension* soap_new_tt__SystemDateTimeExtension(soap*) allocate and default initialize
/// - tt__SystemDateTimeExtension* soap_new_tt__SystemDateTimeExtension(soap*, int num) allocate and default initialize an array
/// - tt__SystemDateTimeExtension* soap_new_req_tt__SystemDateTimeExtension(soap*, ...) allocate, set required members
/// - tt__SystemDateTimeExtension* soap_new_set_tt__SystemDateTimeExtension(soap*, ...) allocate, set all public members
/// - tt__SystemDateTimeExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__SystemDateTimeExtension(soap*, tt__SystemDateTimeExtension*) deserialize from a stream
/// - int soap_write_tt__SystemDateTimeExtension(soap*, tt__SystemDateTimeExtension*) serialize to a stream
/// - tt__SystemDateTimeExtension* tt__SystemDateTimeExtension::soap_dup(soap*) returns deep copy of tt__SystemDateTimeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__SystemDateTimeExtension::soap_del() deep deletes tt__SystemDateTimeExtension data members, use only after tt__SystemDateTimeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__SystemDateTimeExtension::soap_type() returns SOAP_TYPE_tt__SystemDateTimeExtension or derived type identifier
class tt__SystemDateTimeExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":DateTime is a complexType.
///
/// @note class tt__DateTime operations:
/// - tt__DateTime* soap_new_tt__DateTime(soap*) allocate and default initialize
/// - tt__DateTime* soap_new_tt__DateTime(soap*, int num) allocate and default initialize an array
/// - tt__DateTime* soap_new_req_tt__DateTime(soap*, ...) allocate, set required members
/// - tt__DateTime* soap_new_set_tt__DateTime(soap*, ...) allocate, set all public members
/// - tt__DateTime::soap_default(soap*) default initialize members
/// - int soap_read_tt__DateTime(soap*, tt__DateTime*) deserialize from a stream
/// - int soap_write_tt__DateTime(soap*, tt__DateTime*) serialize to a stream
/// - tt__DateTime* tt__DateTime::soap_dup(soap*) returns deep copy of tt__DateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__DateTime::soap_del() deep deletes tt__DateTime data members, use only after tt__DateTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__DateTime::soap_type() returns SOAP_TYPE_tt__DateTime or derived type identifier
class tt__DateTime
{ public:
/// Element "Time" of type "http://www.onvif.org/ver10/schema":Time.
    tt__Time*                            Time                           1;	///< Required element.
/// Element "Date" of type "http://www.onvif.org/ver10/schema":Date.
    tt__Date*                            Date                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Date is a complexType.
///
/// @note class tt__Date operations:
/// - tt__Date* soap_new_tt__Date(soap*) allocate and default initialize
/// - tt__Date* soap_new_tt__Date(soap*, int num) allocate and default initialize an array
/// - tt__Date* soap_new_req_tt__Date(soap*, ...) allocate, set required members
/// - tt__Date* soap_new_set_tt__Date(soap*, ...) allocate, set all public members
/// - tt__Date::soap_default(soap*) default initialize members
/// - int soap_read_tt__Date(soap*, tt__Date*) deserialize from a stream
/// - int soap_write_tt__Date(soap*, tt__Date*) serialize to a stream
/// - tt__Date* tt__Date::soap_dup(soap*) returns deep copy of tt__Date, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Date::soap_del() deep deletes tt__Date data members, use only after tt__Date::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Date::soap_type() returns SOAP_TYPE_tt__Date or derived type identifier
class tt__Date
{ public:
/// Element "Year" of type xs:int.
    int                                  Year                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 12.
/// </BLOCKQUOTE></PRE>
///
/// Element "Month" of type xs:int.
    int                                  Month                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 31.
/// </BLOCKQUOTE></PRE>
///
/// Element "Day" of type xs:int.
    int                                  Day                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Time is a complexType.
///
/// @note class tt__Time operations:
/// - tt__Time* soap_new_tt__Time(soap*) allocate and default initialize
/// - tt__Time* soap_new_tt__Time(soap*, int num) allocate and default initialize an array
/// - tt__Time* soap_new_req_tt__Time(soap*, ...) allocate, set required members
/// - tt__Time* soap_new_set_tt__Time(soap*, ...) allocate, set all public members
/// - tt__Time::soap_default(soap*) default initialize members
/// - int soap_read_tt__Time(soap*, tt__Time*) deserialize from a stream
/// - int soap_write_tt__Time(soap*, tt__Time*) serialize to a stream
/// - tt__Time* tt__Time::soap_dup(soap*) returns deep copy of tt__Time, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Time::soap_del() deep deletes tt__Time data members, use only after tt__Time::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Time::soap_type() returns SOAP_TYPE_tt__Time or derived type identifier
class tt__Time
{ public:
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 23.
/// </BLOCKQUOTE></PRE>
///
/// Element "Hour" of type xs:int.
    int                                  Hour                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 59.
/// </BLOCKQUOTE></PRE>
///
/// Element "Minute" of type xs:int.
    int                                  Minute                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 61 (typically 59).
/// </BLOCKQUOTE></PRE>
///
/// Element "Second" of type xs:int.
    int                                  Second                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":TimeZone is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3<br/>
///   Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3<br/>
///   CET = designation for standard time when daylight saving is not in force<br/>
///   -1 = offset in hours = negative so 1 hour east of Greenwich meridian<br/>
///   CEST = designation when daylight saving is in force ("Central European Summer Time")<br/>
///   , = no offset number between code and comma, so default to one hour ahead for daylight saving<br/>
///   M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)<br/>
///   /2, = the local time when the switch occurs = 2 a.m. in this case<br/>
///   M10.5.0 = when daylight saving ends = the last Sunday in October.<br/>
///   /3, = the local time when the switch occurs = 3 a.m. in this case<br/>
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__TimeZone operations:
/// - tt__TimeZone* soap_new_tt__TimeZone(soap*) allocate and default initialize
/// - tt__TimeZone* soap_new_tt__TimeZone(soap*, int num) allocate and default initialize an array
/// - tt__TimeZone* soap_new_req_tt__TimeZone(soap*, ...) allocate, set required members
/// - tt__TimeZone* soap_new_set_tt__TimeZone(soap*, ...) allocate, set all public members
/// - tt__TimeZone::soap_default(soap*) default initialize members
/// - int soap_read_tt__TimeZone(soap*, tt__TimeZone*) deserialize from a stream
/// - int soap_write_tt__TimeZone(soap*, tt__TimeZone*) serialize to a stream
/// - tt__TimeZone* tt__TimeZone::soap_dup(soap*) returns deep copy of tt__TimeZone, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__TimeZone::soap_del() deep deletes tt__TimeZone data members, use only after tt__TimeZone::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__TimeZone::soap_type() returns SOAP_TYPE_tt__TimeZone or derived type identifier
class tt__TimeZone
{ public:
/// <PRE><BLOCKQUOTE>
///   Posix timezone string.
/// </BLOCKQUOTE></PRE>
///
/// Element "TZ" of type xs:token.
    xsd__token                           TZ                             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":RemoteUser is a complexType.
///
/// @note class tt__RemoteUser operations:
/// - tt__RemoteUser* soap_new_tt__RemoteUser(soap*) allocate and default initialize
/// - tt__RemoteUser* soap_new_tt__RemoteUser(soap*, int num) allocate and default initialize an array
/// - tt__RemoteUser* soap_new_req_tt__RemoteUser(soap*, ...) allocate, set required members
/// - tt__RemoteUser* soap_new_set_tt__RemoteUser(soap*, ...) allocate, set all public members
/// - tt__RemoteUser::soap_default(soap*) default initialize members
/// - int soap_read_tt__RemoteUser(soap*, tt__RemoteUser*) deserialize from a stream
/// - int soap_write_tt__RemoteUser(soap*, tt__RemoteUser*) serialize to a stream
/// - tt__RemoteUser* tt__RemoteUser::soap_dup(soap*) returns deep copy of tt__RemoteUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__RemoteUser::soap_del() deep deletes tt__RemoteUser data members, use only after tt__RemoteUser::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__RemoteUser::soap_type() returns SOAP_TYPE_tt__RemoteUser or derived type identifier
class tt__RemoteUser
{ public:
/// Element "Username" of type xs:string.
    char*                                Username                       1;	///< Required element.
/// Element "Password" of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// Element "UseDerivedPassword" of type xs:boolean.
    bool                                 UseDerivedPassword             1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":User is a complexType.
///
/// @note class tt__User operations:
/// - tt__User* soap_new_tt__User(soap*) allocate and default initialize
/// - tt__User* soap_new_tt__User(soap*, int num) allocate and default initialize an array
/// - tt__User* soap_new_req_tt__User(soap*, ...) allocate, set required members
/// - tt__User* soap_new_set_tt__User(soap*, ...) allocate, set all public members
/// - tt__User::soap_default(soap*) default initialize members
/// - int soap_read_tt__User(soap*, tt__User*) deserialize from a stream
/// - int soap_write_tt__User(soap*, tt__User*) serialize to a stream
/// - tt__User* tt__User::soap_dup(soap*) returns deep copy of tt__User, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__User::soap_del() deep deletes tt__User data members, use only after tt__User::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__User::soap_type() returns SOAP_TYPE_tt__User or derived type identifier
class tt__User
{ public:
/// <PRE><BLOCKQUOTE>
///   Username string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Username" of type xs:string.
    char*                                Username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Password string.
/// </BLOCKQUOTE></PRE>
///
/// Element "Password" of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User level string.
/// </BLOCKQUOTE></PRE>
///
/// Element "UserLevel" of type "http://www.onvif.org/ver10/schema":UserLevel.
    enum tt__UserLevel                   UserLevel                      1;	///< Required element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":UserExtension.
    tt__UserExtension*                   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":UserExtension is a complexType.
///
/// @note class tt__UserExtension operations:
/// - tt__UserExtension* soap_new_tt__UserExtension(soap*) allocate and default initialize
/// - tt__UserExtension* soap_new_tt__UserExtension(soap*, int num) allocate and default initialize an array
/// - tt__UserExtension* soap_new_req_tt__UserExtension(soap*, ...) allocate, set required members
/// - tt__UserExtension* soap_new_set_tt__UserExtension(soap*, ...) allocate, set all public members
/// - tt__UserExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__UserExtension(soap*, tt__UserExtension*) deserialize from a stream
/// - int soap_write_tt__UserExtension(soap*, tt__UserExtension*) serialize to a stream
/// - tt__UserExtension* tt__UserExtension::soap_dup(soap*) returns deep copy of tt__UserExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__UserExtension::soap_del() deep deletes tt__UserExtension data members, use only after tt__UserExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__UserExtension::soap_type() returns SOAP_TYPE_tt__UserExtension or derived type identifier
class tt__UserExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":CertificateGenerationParameters is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":Certificate is a complexType.
///
/// @note class tt__Certificate operations:
/// - tt__Certificate* soap_new_tt__Certificate(soap*) allocate and default initialize
/// - tt__Certificate* soap_new_tt__Certificate(soap*, int num) allocate and default initialize an array
/// - tt__Certificate* soap_new_req_tt__Certificate(soap*, ...) allocate, set required members
/// - tt__Certificate* soap_new_set_tt__Certificate(soap*, ...) allocate, set all public members
/// - tt__Certificate::soap_default(soap*) default initialize members
/// - int soap_read_tt__Certificate(soap*, tt__Certificate*) deserialize from a stream
/// - int soap_write_tt__Certificate(soap*, tt__Certificate*) serialize to a stream
/// - tt__Certificate* tt__Certificate::soap_dup(soap*) returns deep copy of tt__Certificate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Certificate::soap_del() deep deletes tt__Certificate data members, use only after tt__Certificate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Certificate::soap_type() returns SOAP_TYPE_tt__Certificate or derived type identifier
class tt__Certificate
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
///
/// Element "Certificate" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateStatus is a complexType.
///
/// @note class tt__CertificateStatus operations:
/// - tt__CertificateStatus* soap_new_tt__CertificateStatus(soap*) allocate and default initialize
/// - tt__CertificateStatus* soap_new_tt__CertificateStatus(soap*, int num) allocate and default initialize an array
/// - tt__CertificateStatus* soap_new_req_tt__CertificateStatus(soap*, ...) allocate, set required members
/// - tt__CertificateStatus* soap_new_set_tt__CertificateStatus(soap*, ...) allocate, set all public members
/// - tt__CertificateStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateStatus(soap*, tt__CertificateStatus*) deserialize from a stream
/// - int soap_write_tt__CertificateStatus(soap*, tt__CertificateStatus*) serialize to a stream
/// - tt__CertificateStatus* tt__CertificateStatus::soap_dup(soap*) returns deep copy of tt__CertificateStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateStatus::soap_del() deep deletes tt__CertificateStatus data members, use only after tt__CertificateStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateStatus::soap_type() returns SOAP_TYPE_tt__CertificateStatus or derived type identifier
class tt__CertificateStatus
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
///
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a certificate is used in a HTTPS configuration.
/// </BLOCKQUOTE></PRE>
///
/// Element "Status" of type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateWithPrivateKey is a complexType.
///
/// @note class tt__CertificateWithPrivateKey operations:
/// - tt__CertificateWithPrivateKey* soap_new_tt__CertificateWithPrivateKey(soap*) allocate and default initialize
/// - tt__CertificateWithPrivateKey* soap_new_tt__CertificateWithPrivateKey(soap*, int num) allocate and default initialize an array
/// - tt__CertificateWithPrivateKey* soap_new_req_tt__CertificateWithPrivateKey(soap*, ...) allocate, set required members
/// - tt__CertificateWithPrivateKey* soap_new_set_tt__CertificateWithPrivateKey(soap*, ...) allocate, set all public members
/// - tt__CertificateWithPrivateKey::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateWithPrivateKey(soap*, tt__CertificateWithPrivateKey*) deserialize from a stream
/// - int soap_write_tt__CertificateWithPrivateKey(soap*, tt__CertificateWithPrivateKey*) serialize to a stream
/// - tt__CertificateWithPrivateKey* tt__CertificateWithPrivateKey::soap_dup(soap*) returns deep copy of tt__CertificateWithPrivateKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateWithPrivateKey::soap_del() deep deletes tt__CertificateWithPrivateKey data members, use only after tt__CertificateWithPrivateKey::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateWithPrivateKey::soap_type() returns SOAP_TYPE_tt__CertificateWithPrivateKey or derived type identifier
class tt__CertificateWithPrivateKey
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  0;	///< Optional element.
/// Element "Certificate" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
/// Element "PrivateKey" of type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PrivateKey                     1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformation is a complexType.
///
/// @note class tt__CertificateInformation operations:
/// - tt__CertificateInformation* soap_new_tt__CertificateInformation(soap*) allocate and default initialize
/// - tt__CertificateInformation* soap_new_tt__CertificateInformation(soap*, int num) allocate and default initialize an array
/// - tt__CertificateInformation* soap_new_req_tt__CertificateInformation(soap*, ...) allocate, set required members
/// - tt__CertificateInformation* soap_new_set_tt__CertificateInformation(soap*, ...) allocate, set all public members
/// - tt__CertificateInformation::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateInformation(soap*, tt__CertificateInformation*) deserialize from a stream
/// - int soap_write_tt__CertificateInformation(soap*, tt__CertificateInformation*) serialize to a stream
/// - tt__CertificateInformation* tt__CertificateInformation::soap_dup(soap*) returns deep copy of tt__CertificateInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateInformation::soap_del() deep deletes tt__CertificateInformation data members, use only after tt__CertificateInformation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateInformation::soap_type() returns SOAP_TYPE_tt__CertificateInformation or derived type identifier
class tt__CertificateInformation
{ public:
/// Element "CertificateID" of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// Element "IssuerDN" of type xs:string.
    char*                                IssuerDN                       0;	///< Optional element.
/// Element "SubjectDN" of type xs:string.
    char*                                SubjectDN                      0;	///< Optional element.
/// Element "KeyUsage" of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                KeyUsage                       0;	///< Optional element.
/// Element "ExtendedKeyUsage" of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                ExtendedKeyUsage               0;	///< Optional element.
/// Element "KeyLength" of type xs:int.
    int*                                 KeyLength                      0;	///< Optional element.
/// Element "Version" of type xs:string.
    char*                                Version                        0;	///< Optional element.
/// Element "SerialNum" of type xs:string.
    char*                                SerialNum                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Validity Range is from "NotBefore" to "NotAfter"; the corresponding DateTimeRange is from "From" to "Until"
/// </BLOCKQUOTE></PRE>
///
/// Element "SignatureAlgorithm" of type xs:string.
    char*                                SignatureAlgorithm             0;	///< Optional element.
/// Element "Validity" of type "http://www.onvif.org/ver10/schema":DateTimeRange.
    tt__DateTimeRange*                   Validity                       0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":CertificateInformationExtension.
    tt__CertificateInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformationExtension is a complexType.
///
/// @note class tt__CertificateInformationExtension operations:
/// - tt__CertificateInformationExtension* soap_new_tt__CertificateInformationExtension(soap*) allocate and default initialize
/// - tt__CertificateInformationExtension* soap_new_tt__CertificateInformationExtension(soap*, int num) allocate and default initialize an array
/// - tt__CertificateInformationExtension* soap_new_req_tt__CertificateInformationExtension(soap*, ...) allocate, set required members
/// - tt__CertificateInformationExtension* soap_new_set_tt__CertificateInformationExtension(soap*, ...) allocate, set all public members
/// - tt__CertificateInformationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__CertificateInformationExtension(soap*, tt__CertificateInformationExtension*) deserialize from a stream
/// - int soap_write_tt__CertificateInformationExtension(soap*, tt__CertificateInformationExtension*) serialize to a stream
/// - tt__CertificateInformationExtension* tt__CertificateInformationExtension::soap_dup(soap*) returns deep copy of tt__CertificateInformationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__CertificateInformationExtension::soap_del() deep deletes tt__CertificateInformationExtension data members, use only after tt__CertificateInformationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__CertificateInformationExtension::soap_type() returns SOAP_TYPE_tt__CertificateInformationExtension or derived type identifier
class tt__CertificateInformationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfiguration is a complexType.
///
/// @note class tt__Dot1XConfiguration operations:
/// - tt__Dot1XConfiguration* soap_new_tt__Dot1XConfiguration(soap*) allocate and default initialize
/// - tt__Dot1XConfiguration* soap_new_tt__Dot1XConfiguration(soap*, int num) allocate and default initialize an array
/// - tt__Dot1XConfiguration* soap_new_req_tt__Dot1XConfiguration(soap*, ...) allocate, set required members
/// - tt__Dot1XConfiguration* soap_new_set_tt__Dot1XConfiguration(soap*, ...) allocate, set all public members
/// - tt__Dot1XConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_tt__Dot1XConfiguration(soap*, tt__Dot1XConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfiguration(soap*, tt__Dot1XConfiguration*) serialize to a stream
/// - tt__Dot1XConfiguration* tt__Dot1XConfiguration::soap_dup(soap*) returns deep copy of tt__Dot1XConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Dot1XConfiguration::soap_del() deep deletes tt__Dot1XConfiguration data members, use only after tt__Dot1XConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Dot1XConfiguration::soap_type() returns SOAP_TYPE_tt__Dot1XConfiguration or derived type identifier
class tt__Dot1XConfiguration
{ public:
/// Element "Dot1XConfigurationToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1XConfigurationToken        1;	///< Required element.
/// Element "Identity" of type xs:string.
    char*                                Identity                       1;	///< Required element.
/// Element "AnonymousID" of type xs:string.
    char*                                AnonymousID                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   EAP Method type as defined in <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
///
/// Element "EAPMethod" of type xs:int.
    int                                  EAPMethod                     