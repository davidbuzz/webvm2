ension::soap_dup(soap*) returns deep copy of tt__OSDImgConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgConfigurationExtension::soap_del() deep deletes tt__OSDImgConfigurationExtension data members, use only after tt__OSDImgConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDImgConfigurationExtension or derived type identifier
class tt__OSDImgConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ColorspaceRange is a complexType.
///
/// @note class tt__ColorspaceRange operations:
/// - tt__ColorspaceRange* soap_new_tt__ColorspaceRange(soap*) allocate and default initialize
/// - tt__ColorspaceRange* soap_new_tt__ColorspaceRange(soap*, int num) allocate and default initialize an array
/// - tt__ColorspaceRange* soap_new_req_tt__ColorspaceRange(soap*, ...) allocate, set required members
/// - tt__ColorspaceRange* soap_new_set_tt__ColorspaceRange(soap*, ...) allocate, set all public members
/// - tt__ColorspaceRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__ColorspaceRange(soap*, tt__ColorspaceRange*) deserialize from a stream
/// - int soap_write_tt__ColorspaceRange(soap*, tt__ColorspaceRange*) serialize to a stream
/// - tt__ColorspaceRange* tt__ColorspaceRange::soap_dup(soap*) returns deep copy of tt__ColorspaceRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ColorspaceRange::soap_del() deep deletes tt__ColorspaceRange data members, use only after tt__ColorspaceRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ColorspaceRange::soap_type() returns SOAP_TYPE_tt__ColorspaceRange or derived type identifier
class tt__ColorspaceRange
{ public:
/// Element "X" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      X                              1;	///< Required element.
/// Element "Y" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Y                              1;	///< Required element.
/// Element "Z" of type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Z                              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Acceptable values are the same as in tt:Color.
/// </BLOCKQUOTE></PRE>
///
/// Element "Colorspace" of type xs:anyURI.
    xsd__anyURI                          Colorspace                     1;	///< Required element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":ColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the colors supported. Either list each color or define the range of color values.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__ColorOptions operations:
/// - tt__ColorOptions* soap_new_tt__ColorOptions(soap*) allocate and default initialize
/// - tt__ColorOptions* soap_new_tt__ColorOptions(soap*, int num) allocate and default initialize an array
/// - tt__ColorOptions* soap_new_req_tt__ColorOptions(soap*, ...) allocate, set required members
/// - tt__ColorOptions* soap_new_set_tt__ColorOptions(soap*, ...) allocate, set all public members
/// - tt__ColorOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__ColorOptions(soap*, tt__ColorOptions*) deserialize from a stream
/// - int soap_write_tt__ColorOptions(soap*, tt__ColorOptions*) serialize to a stream
/// - tt__ColorOptions* tt__ColorOptions::soap_dup(soap*) returns deep copy of tt__ColorOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__ColorOptions::soap_del() deep deletes tt__ColorOptions data members, use only after tt__ColorOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__ColorOptions::soap_type() returns SOAP_TYPE_tt__ColorOptions or derived type identifier
class tt__ColorOptions
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with one ore more elements with maxOccurs>1 prevents the use of a union. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   List the supported color.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Color* is 1..unbounded.
  $ int                                  __sizeColorList                0;
/// Pointer to array tt__Color* of size 1..unbounded.
    tt__Color*                          *ColorList                     ;	///< Choice of element (one of multiple choices).
/// <PRE><BLOCKQUOTE>
///   Define the range of color supported.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__ColorspaceRange* is 1..unbounded.
  $ int                                  __sizeColorspaceRange          0;
/// Pointer to array tt__ColorspaceRange* of size 1..unbounded.
    tt__ColorspaceRange*                *ColorspaceRange               ;	///< Choice of element (one of multiple choices).
//  END OF CHOICE
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the option of the color and its transparency.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__OSDColorOptions operations:
/// - tt__OSDColorOptions* soap_new_tt__OSDColorOptions(soap*) allocate and default initialize
/// - tt__OSDColorOptions* soap_new_tt__OSDColorOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDColorOptions* soap_new_req_tt__OSDColorOptions(soap*, ...) allocate, set required members
/// - tt__OSDColorOptions* soap_new_set_tt__OSDColorOptions(soap*, ...) allocate, set all public members
/// - tt__OSDColorOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColorOptions(soap*, tt__OSDColorOptions*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptions(soap*, tt__OSDColorOptions*) serialize to a stream
/// - tt__OSDColorOptions* tt__OSDColorOptions::soap_dup(soap*) returns deep copy of tt__OSDColorOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColorOptions::soap_del() deep deletes tt__OSDColorOptions data members, use only after tt__OSDColorOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColorOptions::soap_type() returns SOAP_TYPE_tt__OSDColorOptions or derived type identifier
class tt__OSDColorOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional list of supported colors.
/// </BLOCKQUOTE></PRE>
///
/// Element "Color" of type "http://www.onvif.org/ver10/schema":ColorOptions.
    tt__ColorOptions*                    Color                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Range of the transparent level. Larger means more tranparent.
/// </BLOCKQUOTE></PRE>
///
/// Element "Transparent" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        Transparent                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension.
    tt__OSDColorOptionsExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension is a complexType.
///
/// @note class tt__OSDColorOptionsExtension operations:
/// - tt__OSDColorOptionsExtension* soap_new_tt__OSDColorOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDColorOptionsExtension* soap_new_tt__OSDColorOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDColorOptionsExtension* soap_new_req_tt__OSDColorOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDColorOptionsExtension* soap_new_set_tt__OSDColorOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDColorOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDColorOptionsExtension(soap*, tt__OSDColorOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptionsExtension(soap*, tt__OSDColorOptionsExtension*) serialize to a stream
/// - tt__OSDColorOptionsExtension* tt__OSDColorOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDColorOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDColorOptionsExtension::soap_del() deep deletes tt__OSDColorOptionsExtension data members, use only after tt__OSDColorOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDColorOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDColorOptionsExtension or derived type identifier
class tt__OSDColorOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptions is a complexType.
///
/// @note class tt__OSDTextOptions operations:
/// - tt__OSDTextOptions* soap_new_tt__OSDTextOptions(soap*) allocate and default initialize
/// - tt__OSDTextOptions* soap_new_tt__OSDTextOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextOptions* soap_new_req_tt__OSDTextOptions(soap*, ...) allocate, set required members
/// - tt__OSDTextOptions* soap_new_set_tt__OSDTextOptions(soap*, ...) allocate, set all public members
/// - tt__OSDTextOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextOptions(soap*, tt__OSDTextOptions*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptions(soap*, tt__OSDTextOptions*) serialize to a stream
/// - tt__OSDTextOptions* tt__OSDTextOptions::soap_dup(soap*) returns deep copy of tt__OSDTextOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextOptions::soap_del() deep deletes tt__OSDTextOptions data members, use only after tt__OSDTextOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextOptions::soap_type() returns SOAP_TYPE_tt__OSDTextOptions or derived type identifier
class tt__OSDTextOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported OSD text type. When a device indicates the supported number relating to Text type in MaximumNumberOfOSDs, the type shall be presented.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of char* is 1..unbounded.
  $ int                                  __sizeType                     1;
/// Pointer to array char* of size 1..unbounded.
    char*                               *Type                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Range of the font size value.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontSizeRange" of type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FontSizeRange                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported date format.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of char* is 0..unbounded.
  $ int                                  __sizeDateFormat               0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *DateFormat                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported time format.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of char* is 0..unbounded.
  $ int                                  __sizeTimeFormat               0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *TimeFormat                     0;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List of supported font color.
/// </BLOCKQUOTE></PRE>
///
/// Element "FontColor" of type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported background color.
/// </BLOCKQUOTE></PRE>
///
/// Element "BackgroundColor" of type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 BackgroundColor                0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension.
    tt__OSDTextOptionsExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension is a complexType.
///
/// @note class tt__OSDTextOptionsExtension operations:
/// - tt__OSDTextOptionsExtension* soap_new_tt__OSDTextOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDTextOptionsExtension* soap_new_tt__OSDTextOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDTextOptionsExtension* soap_new_req_tt__OSDTextOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDTextOptionsExtension* soap_new_set_tt__OSDTextOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDTextOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDTextOptionsExtension(soap*, tt__OSDTextOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptionsExtension(soap*, tt__OSDTextOptionsExtension*) serialize to a stream
/// - tt__OSDTextOptionsExtension* tt__OSDTextOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDTextOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDTextOptionsExtension::soap_del() deep deletes tt__OSDTextOptionsExtension data members, use only after tt__OSDTextOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDTextOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDTextOptionsExtension or derived type identifier
class tt__OSDTextOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptions is a complexType.
///
/// @note class tt__OSDImgOptions operations:
/// - tt__OSDImgOptions* soap_new_tt__OSDImgOptions(soap*) allocate and default initialize
/// - tt__OSDImgOptions* soap_new_tt__OSDImgOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgOptions* soap_new_req_tt__OSDImgOptions(soap*, ...) allocate, set required members
/// - tt__OSDImgOptions* soap_new_set_tt__OSDImgOptions(soap*, ...) allocate, set all public members
/// - tt__OSDImgOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgOptions(soap*, tt__OSDImgOptions*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptions(soap*, tt__OSDImgOptions*) serialize to a stream
/// - tt__OSDImgOptions* tt__OSDImgOptions::soap_dup(soap*) returns deep copy of tt__OSDImgOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgOptions::soap_del() deep deletes tt__OSDImgOptions data members, use only after tt__OSDImgOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgOptions::soap_type() returns SOAP_TYPE_tt__OSDImgOptions or derived type identifier
class tt__OSDImgOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   List of available image URIs.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of xsd__anyURI is 1..unbounded.
  $ int                                  __sizeImagePath                1;
/// Pointer to array xsd__anyURI of size 1..unbounded.
    xsd__anyURI                         *ImagePath                      1;	///< Multiple elements.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension.
    tt__OSDImgOptionsExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported image MIME types, such as "image/png".
/// </BLOCKQUOTE></PRE>
///
/// Attribute "FormatsSupported" of type "http://www.onvif.org/ver10/schema":StringAttrList.
  @ tt__StringAttrList                   FormatsSupported               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum size (in bytes) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxSize" of type xs:int.
  @ int*                                 MaxSize                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum width (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxWidth" of type xs:int.
  @ int*                                 MaxWidth                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum height (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaxHeight" of type xs:int.
  @ int*                                 MaxHeight                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension is a complexType.
///
/// @note class tt__OSDImgOptionsExtension operations:
/// - tt__OSDImgOptionsExtension* soap_new_tt__OSDImgOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDImgOptionsExtension* soap_new_tt__OSDImgOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDImgOptionsExtension* soap_new_req_tt__OSDImgOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDImgOptionsExtension* soap_new_set_tt__OSDImgOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDImgOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDImgOptionsExtension(soap*, tt__OSDImgOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptionsExtension(soap*, tt__OSDImgOptionsExtension*) serialize to a stream
/// - tt__OSDImgOptionsExtension* tt__OSDImgOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDImgOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDImgOptionsExtension::soap_del() deep deletes tt__OSDImgOptionsExtension data members, use only after tt__OSDImgOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDImgOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDImgOptionsExtension or derived type identifier
class tt__OSDImgOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationExtension is a complexType.
///
/// @note class tt__OSDConfigurationExtension operations:
/// - tt__OSDConfigurationExtension* soap_new_tt__OSDConfigurationExtension(soap*) allocate and default initialize
/// - tt__OSDConfigurationExtension* soap_new_tt__OSDConfigurationExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationExtension* soap_new_req_tt__OSDConfigurationExtension(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationExtension* soap_new_set_tt__OSDConfigurationExtension(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationExtension(soap*, tt__OSDConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationExtension(soap*, tt__OSDConfigurationExtension*) serialize to a stream
/// - tt__OSDConfigurationExtension* tt__OSDConfigurationExtension::soap_dup(soap*) returns deep copy of tt__OSDConfigurationExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationExtension::soap_del() deep deletes tt__OSDConfigurationExtension data members, use only after tt__OSDConfigurationExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationExtension::soap_type() returns SOAP_TYPE_tt__OSDConfigurationExtension or derived type identifier
class tt__OSDConfigurationExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs is a complexType.
///
/// @note class tt__MaximumNumberOfOSDs operations:
/// - tt__MaximumNumberOfOSDs* soap_new_tt__MaximumNumberOfOSDs(soap*) allocate and default initialize
/// - tt__MaximumNumberOfOSDs* soap_new_tt__MaximumNumberOfOSDs(soap*, int num) allocate and default initialize an array
/// - tt__MaximumNumberOfOSDs* soap_new_req_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set required members
/// - tt__MaximumNumberOfOSDs* soap_new_set_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set all public members
/// - tt__MaximumNumberOfOSDs::soap_default(soap*) default initialize members
/// - int soap_read_tt__MaximumNumberOfOSDs(soap*, tt__MaximumNumberOfOSDs*) deserialize from a stream
/// - int soap_write_tt__MaximumNumberOfOSDs(soap*, tt__MaximumNumberOfOSDs*) serialize to a stream
/// - tt__MaximumNumberOfOSDs* tt__MaximumNumberOfOSDs::soap_dup(soap*) returns deep copy of tt__MaximumNumberOfOSDs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__MaximumNumberOfOSDs::soap_del() deep deletes tt__MaximumNumberOfOSDs data members, use only after tt__MaximumNumberOfOSDs::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__MaximumNumberOfOSDs::soap_type() returns SOAP_TYPE_tt__MaximumNumberOfOSDs or derived type identifier
class tt__MaximumNumberOfOSDs
{ public:
/// Attribute "Total" of type xs:int.
  @ int                                  Total                          1;	///< Required attribute.
/// Attribute "Image" of type xs:int.
  @ int*                                 Image                          0;	///< Optional attribute.
/// Attribute "PlainText" of type xs:int.
  @ int*                                 PlainText                      0;	///< Optional attribute.
/// Attribute "Date" of type xs:int.
  @ int*                                 Date                           0;	///< Optional attribute.
/// Attribute "Time" of type xs:int.
  @ int*                                 Time                           0;	///< Optional attribute.
/// Attribute "DateAndTime" of type xs:int.
  @ int*                                 DateAndTime                    0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptions is a complexType.
///
/// @note class tt__OSDConfigurationOptions operations:
/// - tt__OSDConfigurationOptions* soap_new_tt__OSDConfigurationOptions(soap*) allocate and default initialize
/// - tt__OSDConfigurationOptions* soap_new_tt__OSDConfigurationOptions(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationOptions* soap_new_req_tt__OSDConfigurationOptions(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationOptions* soap_new_set_tt__OSDConfigurationOptions(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationOptions::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationOptions(soap*, tt__OSDConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptions(soap*, tt__OSDConfigurationOptions*) serialize to a stream
/// - tt__OSDConfigurationOptions* tt__OSDConfigurationOptions::soap_dup(soap*) returns deep copy of tt__OSDConfigurationOptions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationOptions::soap_del() deep deletes tt__OSDConfigurationOptions data members, use only after tt__OSDConfigurationOptions::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationOptions::soap_type() returns SOAP_TYPE_tt__OSDConfigurationOptions or derived type identifier
class tt__OSDConfigurationOptions
{ public:
/// <PRE><BLOCKQUOTE>
///   The maximum number of OSD configurations supported for the specified video source configuration. If the configuration does not support OSDs, this value shall be zero and the Type and PositionOption elements are ignored. If a device limits the number of instances by OSDType, it shall indicate the supported number for each type via the related attribute.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaximumNumberOfOSDs" of type "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs.
    tt__MaximumNumberOfOSDs*             MaximumNumberOfOSDs            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List supported type of OSD configuration. When a device indicates the supported number for each types in MaximumNumberOfOSDs, related type shall be presented. A device shall return Option element relating to listed type.
/// </BLOCKQUOTE></PRE>
///
/// Size of array of enum tt__OSDType is 1..unbounded.
  $ int                                  __sizeType                     1;
/// Pointer to array enum tt__OSDType of size 1..unbounded.
    enum tt__OSDType                    *Type                           1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   List available OSD position type. Following are the pre-defined:<ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
///
/// Size of array of char* is 1..unbounded.
  $ int                                  __sizePositionOption           1;
/// Pointer to array char* of size 1..unbounded.
    char*                               *PositionOption                 1;	///< Multiple elements.
/// <PRE><BLOCKQUOTE>
///   Option of the OSD text configuration. This element shall be returned if the device is signaling the support for Text.
/// </BLOCKQUOTE></PRE>
///
/// Element "TextOption" of type "http://www.onvif.org/ver10/schema":OSDTextOptions.
    tt__OSDTextOptions*                  TextOption                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option of the OSD image configuration. This element shall be returned if the device is signaling the support for Image.
/// </BLOCKQUOTE></PRE>
///
/// Element "ImageOption" of type "http://www.onvif.org/ver10/schema":OSDImgOptions.
    tt__OSDImgOptions*                   ImageOption                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension.
    tt__OSDConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension is a complexType.
///
/// @note class tt__OSDConfigurationOptionsExtension operations:
/// - tt__OSDConfigurationOptionsExtension* soap_new_tt__OSDConfigurationOptionsExtension(soap*) allocate and default initialize
/// - tt__OSDConfigurationOptionsExtension* soap_new_tt__OSDConfigurationOptionsExtension(soap*, int num) allocate and default initialize an array
/// - tt__OSDConfigurationOptionsExtension* soap_new_req_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - tt__OSDConfigurationOptionsExtension* soap_new_set_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - tt__OSDConfigurationOptionsExtension::soap_default(soap*) default initialize members
/// - int soap_read_tt__OSDConfigurationOptionsExtension(soap*, tt__OSDConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptionsExtension(soap*, tt__OSDConfigurationOptionsExtension*) serialize to a stream
/// - tt__OSDConfigurationOptionsExtension* tt__OSDConfigurationOptionsExtension::soap_dup(soap*) returns deep copy of tt__OSDConfigurationOptionsExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__OSDConfigurationOptionsExtension::soap_del() deep deletes tt__OSDConfigurationOptionsExtension data members, use only after tt__OSDConfigurationOptionsExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__OSDConfigurationOptionsExtension::soap_type() returns SOAP_TYPE_tt__OSDConfigurationOptionsExtension or derived type identifier
class tt__OSDConfigurationOptionsExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":FileProgress is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ArrayOfFileProgress is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ArrayOfFileProgressExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":StorageReferencePath is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":StorageReferencePathExtension is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":PolygonOptions is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":IntRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of values greater equal Min value and less equal Max value.
/// </BLOCKQUOTE></PRE>
///
/// @note class tt__IntRange operations:
/// - tt__IntRange* soap_new_tt__IntRange(soap*) allocate and default initialize
/// - tt__IntRange* soap_new_tt__IntRange(soap*, int num) allocate and default initialize an array
/// - tt__IntRange* soap_new_req_tt__IntRange(soap*, ...) allocate, set required members
/// - tt__IntRange* soap_new_set_tt__IntRange(soap*, ...) allocate, set all public members
/// - tt__IntRange::soap_default(soap*) default initialize members
/// - int soap_read_tt__IntRange(soap*, tt__IntRange*) deserialize from a stream
/// - int soap_write_tt__IntRange(soap*, tt__IntRange*) serialize to a stream
/// - tt__IntRange* tt__IntRange::soap_dup(soap*) returns deep copy of tt__IntRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__IntRange::soap_del() deep deletes tt__IntRange data members, use only after tt__IntRange::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__IntRange::soap_type() returns SOAP_TYPE_tt__IntRange or derived type identifier
class tt__IntRange
{ public:
/// Element "Min" of type xs:int.
    int                                  Min                            1;	///< Required element.
/// Element "Max" of type xs:int.
    int                                  Max                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Vector2D is a complexType.
///
/// @note class tt__Vector2D operations:
/// - tt__Vector2D* soap_new_tt__Vector2D(soap*) allocate and default initialize
/// - tt__Vector2D* soap_new_tt__Vector2D(soap*, int num) allocate and default initialize an array
/// - tt__Vector2D* soap_new_req_tt__Vector2D(soap*, ...) allocate, set required members
/// - tt__Vector2D* soap_new_set_tt__Vector2D(soap*, ...) allocate, set all public members
/// - tt__Vector2D::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector2D(soap*, tt__Vector2D*) deserialize from a stream
/// - int soap_write_tt__Vector2D(soap*, tt__Vector2D*) serialize to a stream
/// - tt__Vector2D* tt__Vector2D::soap_dup(soap*) returns deep copy of tt__Vector2D, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector2D::soap_del() deep deletes tt__Vector2D data members, use only after tt__Vector2D::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector2D::soap_type() returns SOAP_TYPE_tt__Vector2D or derived type identifier
class tt__Vector2D
{ public:
/// Attribute "x" of type xs:float.
  @ float                                x                              1;	///< Required attribute.
/// Attribute "y" of type xs:float.
  @ float                                y                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Pan/tilt coordinate space selector. The following options are defined:<ul>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Attribute "space" of type xs:anyURI.
  @ xsd__anyURI                          space                          0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Vector1D is a complexType.
///
/// @note class tt__Vector1D operations:
/// - tt__Vector1D* soap_new_tt__Vector1D(soap*) allocate and default initialize
/// - tt__Vector1D* soap_new_tt__Vector1D(soap*, int num) allocate and default initialize an array
/// - tt__Vector1D* soap_new_req_tt__Vector1D(soap*, ...) allocate, set required members
/// - tt__Vector1D* soap_new_set_tt__Vector1D(soap*, ...) allocate, set all public members
/// - tt__Vector1D::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector1D(soap*, tt__Vector1D*) deserialize from a stream
/// - int soap_write_tt__Vector1D(soap*, tt__Vector1D*) serialize to a stream
/// - tt__Vector1D* tt__Vector1D::soap_dup(soap*) returns deep copy of tt__Vector1D, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector1D::soap_del() deep deletes tt__Vector1D data members, use only after tt__Vector1D::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector1D::soap_type() returns SOAP_TYPE_tt__Vector1D or derived type identifier
class tt__Vector1D
{ public:
/// Attribute "x" of type xs:float.
  @ float                                x                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Zoom coordinate space selector. The following options are defined:<ul style="">
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/ZoomGenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Attribute "space" of type xs:anyURI.
  @ xsd__anyURI                          space                          0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZVector is a complexType.
///
/// @note class tt__PTZVector operations:
/// - tt__PTZVector* soap_new_tt__PTZVector(soap*) allocate and default initialize
/// - tt__PTZVector* soap_new_tt__PTZVector(soap*, int num) allocate and default initialize an array
/// - tt__PTZVector* soap_new_req_tt__PTZVector(soap*, ...) allocate, set required members
/// - tt__PTZVector* soap_new_set_tt__PTZVector(soap*, ...) allocate, set all public members
/// - tt__PTZVector::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZVector(soap*, tt__PTZVector*) deserialize from a stream
/// - int soap_write_tt__PTZVector(soap*, tt__PTZVector*) serialize to a stream
/// - tt__PTZVector* tt__PTZVector::soap_dup(soap*) returns deep copy of tt__PTZVector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZVector::soap_del() deep deletes tt__PTZVector data members, use only after tt__PTZVector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZVector::soap_type() returns SOAP_TYPE_tt__PTZVector or derived type identifier
class tt__PTZVector
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt position. The x component corresponds to pan and the y component to tilt.
/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom position.
/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatus is a complexType.
///
/// @note class tt__PTZStatus operations:
/// - tt__PTZStatus* soap_new_tt__PTZStatus(soap*) allocate and default initialize
/// - tt__PTZStatus* soap_new_tt__PTZStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZStatus* soap_new_req_tt__PTZStatus(soap*, ...) allocate, set required members
/// - tt__PTZStatus* soap_new_set_tt__PTZStatus(soap*, ...) allocate, set all public members
/// - tt__PTZStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZStatus(soap*, tt__PTZStatus*) deserialize from a stream
/// - int soap_write_tt__PTZStatus(soap*, tt__PTZStatus*) serialize to a stream
/// - tt__PTZStatus* tt__PTZStatus::soap_dup(soap*) returns deep copy of tt__PTZStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZStatus::soap_del() deep deletes tt__PTZStatus data members, use only after tt__PTZStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZStatus::soap_type() returns SOAP_TYPE_tt__PTZStatus or derived type identifier
class tt__PTZStatus
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
/// </BLOCKQUOTE></PRE>
///
/// Element "Position" of type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       Position                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
/// </BLOCKQUOTE></PRE>
///
/// Element "MoveStatus" of type "http://www.onvif.org/ver10/schema":PTZMoveStatus.
    tt__PTZMoveStatus*                   MoveStatus                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   States a current PTZ error.
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type xs:string.
    char*                                Error                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies the UTC time when this status was generated.
/// </BLOCKQUOTE></PRE>
///
/// Element "UtcTime" of type xs:dateTime.
    time_t                               UtcTime                        1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":PTZMoveStatus is a complexType.
///
/// @note class tt__PTZMoveStatus operations:
/// - tt__PTZMoveStatus* soap_new_tt__PTZMoveStatus(soap*) allocate and default initialize
/// - tt__PTZMoveStatus* soap_new_tt__PTZMoveStatus(soap*, int num) allocate and default initialize an array
/// - tt__PTZMoveStatus* soap_new_req_tt__PTZMoveStatus(soap*, ...) allocate, set required members
/// - tt__PTZMoveStatus* soap_new_set_tt__PTZMoveStatus(soap*, ...) allocate, set all public members
/// - tt__PTZMoveStatus::soap_default(soap*) default initialize members
/// - int soap_read_tt__PTZMoveStatus(soap*, tt__PTZMoveStatus*) deserialize from a stream
/// - int soap_write_tt__PTZMoveStatus(soap*, tt__PTZMoveStatus*) serialize to a stream
/// - tt__PTZMoveStatus* tt__PTZMoveStatus::soap_dup(soap*) returns deep copy of tt__PTZMoveStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__PTZMoveStatus::soap_del() deep deletes tt__PTZMoveStatus data members, use only after tt__PTZMoveStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__PTZMoveStatus::soap_type() returns SOAP_TYPE_tt__PTZMoveStatus or derived type identifier
class tt__PTZMoveStatus
{ public:

/// </BLOCKQUOTE></PRE>
///
/// Element "PanTilt" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus*                 PanTilt                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
///
/// Element "Zoom" of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus*                 Zoom                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Vector is a complexType.
///
/// @note class tt__Vector operations:
/// - tt__Vector* soap_new_tt__Vector(soap*) allocate and default initialize
/// - tt__Vector* soap_new_tt__Vector(soap*, int num) allocate and default initialize an array
/// - tt__Vector* soap_new_req_tt__Vector(soap*, ...) allocate, set required members
/// - tt__Vector* soap_new_set_tt__Vector(soap*, ...) allocate, set all public members
/// - tt__Vector::soap_default(soap*) default initialize members
/// - int soap_read_tt__Vector(soap*, tt__Vector*) deserialize from a stream
/// - int soap_write_tt__Vector(soap*, tt__Vector*) serialize to a stream
/// - tt__Vector* tt__Vector::soap_dup(soap*) returns deep copy of tt__Vector, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Vector::soap_del() deep deletes tt__Vector data members, use only after tt__Vector::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Vector::soap_type() returns SOAP_TYPE_tt__Vector or derived type identifier
class tt__Vector
{ public:
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":Rectangle is a complexType.
///
/// @note class tt__Rectangle operations:
/// - tt__Rectangle* soap_new_tt__Rectangle(soap*) allocate and default initialize
/// - tt__Rectangle* soap_new_tt__Rectangle(soap*, int num) allocate and default initialize an array
/// - tt__Rectangle* soap_new_req_tt__Rectangle(soap*, ...) allocate, set required members
/// - tt__Rectangle* soap_new_set_tt__Rectangle(soap*, ...) allocate, set all public members
/// - tt__Rectangle::soap_default(soap*) default initialize members
/// - int soap_read_tt__Rectangle(soap*, tt__Rectangle*) deserialize from a stream
/// - int soap_write_tt__Rectangle(soap*, tt__Rectangle*) serialize to a stream
/// - tt__Rectangle* tt__Rectangle::soap_dup(soap*) returns deep copy of tt__Rectangle, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Rectangle::soap_del() deep deletes tt__Rectangle data members, use only after tt__Rectangle::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Rectangle::soap_type() returns SOAP_TYPE_tt__Rectangle or derived type identifier
class tt__Rectangle
{ public:
/// Attribute "bottom" of type xs:float.
  @ float*                               bottom                         0;	///< Optional attribute.
/// Attribute "top" of type xs:float.
  @ float*                               top                            0;	///< Optional attribute.
/// Attribute "right" of type xs:float.
  @ float*                               right                          0;	///< Optional attribute.
/// Attribute "left" of type xs:float.
  @ float*                               left                           0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":Polygon is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":Color is a complexType.
///
/// @note class tt__Color operations:
/// - tt__Color* soap_new_tt__Color(soap*) allocate and default initialize
/// - tt__Color* soap_new_tt__Color(soap*, int num) allocate and default initialize an array
/// - tt__Color* soap_new_req_tt__Color(soap*, ...) allocate, set required members
/// - tt__Color* soap_new_set_tt__Color(soap*, ...) allocate, set all public members
/// - tt__Color::soap_default(soap*) default initialize members
/// - int soap_read_tt__Color(soap*, tt__Color*) deserialize from a stream
/// - int soap_write_tt__Color(soap*, tt__Color*) serialize to a stream
/// - tt__Color* tt__Color::soap_dup(soap*) returns deep copy of tt__Color, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__Color::soap_del() deep deletes tt__Color data members, use only after tt__Color::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__Color::soap_type() returns SOAP_TYPE_tt__Color or derived type identifier
class tt__Color
{ public:
/// Attribute "X" of type xs:float.
  @ float                                X                              1;	///< Required attribute.
/// Attribute "Y" of type xs:float.
  @ float                                Y                              1;	///< Required attribute.
/// Attribute "Z" of type xs:float.
  @ float                                Z                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Acceptable values:
///   <ul>
///   <li>http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr
///   <ul><li>X attribute = Y value</li>
///   <li>Y attribute = Cb value</li>
///   <li>Z attribute = Cr value</li></ul>
///   </li>
///   <li>http://www.onvif.org/ver10/colorspace/RGB - RGB
///   <ul><li>X attribute = R value</li>
///   <li>Y attribute = G value</li>
///   <li>Z attribute = B value</li></ul>
///   </li>
///   </ul>
///   If the Colorspace attribute is absent, YCbCr is implied.
///   Deprecated values:
///   <ul>
///   <li>http://www.onvif.org/ver10/colorspace/CIELUV - CIE LUV</li>
///   <li>http://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)</li>
///   <li>http://www.onvif.org/ver10/colorspace/HSV - HSV</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Colorspace" of type xs:anyURI.
  @ xsd__anyURI                          Colorspace                     0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://www.onvif.org/ver10/schema":ColorCovariance is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":ColorDescriptor is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":Transformation is not used and was removed

// Optimization: complexType "http://www.onvif.org/ver10/schema":TransformationExtension is not used and was removed

/// @brief "http://www.onvif.org/ver10/schema":GeoLocation is a complexType.
///
/// @note class tt__GeoLocation operations:
/// - tt__GeoLocation* soap_new_tt__GeoLocation(soap*) allocate and default initialize
/// - tt__GeoLocation* soap_new_tt__GeoLocation(soap*, int num) allocate and default initialize an array
/// - tt__GeoLocation* soap_new_req_tt__GeoLocation(soap*, ...) allocate, set required members
/// - tt__GeoLocation* soap_new_set_tt__GeoLocation(soap*, ...) allocate, set all public members
/// - tt__GeoLocation::soap_default(soap*) default initialize members
/// - int soap_read_tt__GeoLocation(soap*, tt__GeoLocation*) deserialize from a stream
/// - int soap_write_tt__GeoLocation(soap*, tt__GeoLocation*) serialize to a stream
/// - tt__GeoLocation* tt__GeoLocation::soap_dup(soap*) returns deep copy of tt__GeoLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GeoLocation::soap_del() deep deletes tt__GeoLocation data members, use only after tt__GeoLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GeoLocation::soap_type() returns SOAP_TYPE_tt__GeoLocation or derived type identifier
class tt__GeoLocation
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "lon" of type xs:double.
  @ double*                              lon                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "lat" of type xs:double.
  @ double*                              lat                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Hight in meters above sea level.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "elevation" of type xs:float.
  @ float*                               elevation                      0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":GeoOrientation is a complexType.
///
/// @note class tt__GeoOrientation operations:
/// - tt__GeoOrientation* soap_new_tt__GeoOrientation(soap*) allocate and default initialize
/// - tt__GeoOrientation* soap_new_tt__GeoOrientation(soap*, int num) allocate and default initialize an array
/// - tt__GeoOrientation* soap_new_req_tt__GeoOrientation(soap*, ...) allocate, set required members
/// - tt__GeoOrientation* soap_new_set_tt__GeoOrientation(soap*, ...) allocate, set all public members
/// - tt__GeoOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__GeoOrientation(soap*, tt__GeoOrientation*) deserialize from a stream
/// - int soap_write_tt__GeoOrientation(soap*, tt__GeoOrientation*) serialize to a stream
/// - tt__GeoOrientation* tt__GeoOrientation::soap_dup(soap*) returns deep copy of tt__GeoOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__GeoOrientation::soap_del() deep deletes tt__GeoOrientation data members, use only after tt__GeoOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__GeoOrientation::soap_type() returns SOAP_TYPE_tt__GeoOrientation or derived type identifier
class tt__GeoOrientation
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "roll" of type xs:float.
  @ float*                               roll                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "pitch" of type xs:float.
  @ float*                               pitch                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "yaw" of type xs:float.
  @ float*                               yaw                            0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":LocalLocation is a complexType.
///
/// @note class tt__LocalLocation operations:
/// - tt__LocalLocation* soap_new_tt__LocalLocation(soap*) allocate and default initialize
/// - tt__LocalLocation* soap_new_tt__LocalLocation(soap*, int num) allocate and default initialize an array
/// - tt__LocalLocation* soap_new_req_tt__LocalLocation(soap*, ...) allocate, set required members
/// - tt__LocalLocation* soap_new_set_tt__LocalLocation(soap*, ...) allocate, set all public members
/// - tt__LocalLocation::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocalLocation(soap*, tt__LocalLocation*) deserialize from a stream
/// - int soap_write_tt__LocalLocation(soap*, tt__LocalLocation*) serialize to a stream
/// - tt__LocalLocation* tt__LocalLocation::soap_dup(soap*) returns deep copy of tt__LocalLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocalLocation::soap_del() deep deletes tt__LocalLocation data members, use only after tt__LocalLocation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocalLocation::soap_type() returns SOAP_TYPE_tt__LocalLocation or derived type identifier
class tt__LocalLocation
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "x" of type xs:float.
  @ float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "y" of type xs:float.
  @ float*                               y                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Offset in meters from the sea level.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "z" of type xs:float.
  @ float*                               z                              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":LocalOrientation is a complexType.
///
/// @note class tt__LocalOrientation operations:
/// - tt__LocalOrientation* soap_new_tt__LocalOrientation(soap*) allocate and default initialize
/// - tt__LocalOrientation* soap_new_tt__LocalOrientation(soap*, int num) allocate and default initialize an array
/// - tt__LocalOrientation* soap_new_req_tt__LocalOrientation(soap*, ...) allocate, set required members
/// - tt__LocalOrientation* soap_new_set_tt__LocalOrientation(soap*, ...) allocate, set all public members
/// - tt__LocalOrientation::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocalOrientation(soap*, tt__LocalOrientation*) deserialize from a stream
/// - int soap_write_tt__LocalOrientation(soap*, tt__LocalOrientation*) serialize to a stream
/// - tt__LocalOrientation* tt__LocalOrientation::soap_dup(soap*) returns deep copy of tt__LocalOrientation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocalOrientation::soap_del() deep deletes tt__LocalOrientation data members, use only after tt__LocalOrientation::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocalOrientation::soap_type() returns SOAP_TYPE_tt__LocalOrientation or derived type identifier
class tt__LocalOrientation
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "pan" of type xs:float.
  @ float*                               pan                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "tilt" of type xs:float.
  @ float*                               tilt                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "roll" of type xs:float.
  @ float*                               roll                           0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":LocationEntity is a complexType.
///
/// @note class tt__LocationEntity operations:
/// - tt__LocationEntity* soap_new_tt__LocationEntity(soap*) allocate and default initialize
/// - tt__LocationEntity* soap_new_tt__LocationEntity(soap*, int num) allocate and default initialize an array
/// - tt__LocationEntity* soap_new_req_tt__LocationEntity(soap*, ...) allocate, set required members
/// - tt__LocationEntity* soap_new_set_tt__LocationEntity(soap*, ...) allocate, set all public members
/// - tt__LocationEntity::soap_default(soap*) default initialize members
/// - int soap_read_tt__LocationEntity(soap*, tt__LocationEntity*) deserialize from a stream
/// - int soap_write_tt__LocationEntity(soap*, tt__LocationEntity*) serialize to a stream
/// - tt__LocationEntity* tt__LocationEntity::soap_dup(soap*) returns deep copy of tt__LocationEntity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - tt__LocationEntity::soap_del() deep deletes tt__LocationEntity data members, use only after tt__LocationEntity::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int tt__LocationEntity::soap_type() returns SOAP_TYPE_tt__LocationEntity or derived type identifier
class tt__LocationEntity
{ public:
/// <PRE><BLOCKQUOTE>
///   Location on earth.
/// </BLOCKQUOTE></PRE>
///
/// Element "GeoLocation" of type "http://www.onvif.org/ver10/schema":GeoLocation.
    tt__GeoLocation*                     GeoLocation                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Orientation relative to earth.
/// </BLOCKQUOTE></PRE>
///
/// Element "GeoOrientation" of type "http://www.onvif.org/ver10/schema":GeoOrientation.
    tt__GeoOrientation*                  GeoOrientation                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor location offset.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalLocation" of type "http://www.onvif.org/ver10/schema":LocalLocation.
    tt__LocalLocation*                   LocalLocation                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor orientation offset.
/// </BLOCKQUOTE></PRE>
///
/// Element "LocalOrientation" of type "http://www.onvif.org/ver10/schema":LocalOrientation.
    tt__LocalOrientation*                LocalOrientation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Entity type the entry refers to, use a value from the tt:Entity enumeration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Entity" of type xs:string.
  @ char*                                Entity                         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional entity token.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   Token                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If this value is true the entity cannot be deleted.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Fixed" of type xs:boolean.
  @ bool*                                Fixed                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional reference to the XAddr of another devices DeviceManagement service.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "GeoSource" of type xs:anyURI.
  @ xsd__anyURI                          GeoSource                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If set the geo location is obtained internally.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "AutoGeo" of type xs:boolean.
  @ bool*                                AutoGeo                        0;	///< Optional attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":StringItems
// Optimization: complexType "http://www.onvif.org/ver10/schema":StringItems is not used and was removed

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Message
// Optimization: complexType "http://www.onvif.org/ver10/schema":Message is not used and was removed


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType is not used and was removed

// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType is not used and was removed

/// @brief "http://docs.oasis-open.org/wsn/b-2":FilterType is a complexType.
///
/// This type is extended by:
/// - "http://www.onvif.org/ver10/schema":EventFilter (not used and removed, retain with option -Ow4)
///
/// @note class wsnt__FilterType operations:
/// - wsnt__FilterType* soap_new_wsnt__FilterType(soap*) allocate and default initialize
/// - wsnt__FilterType* soap_new_wsnt__FilterType(soap*, int num) allocate and default initialize an array
/// - wsnt__FilterType* soap_new_req_wsnt__FilterType(soap*, ...) allocate, set required members
/// - wsnt__FilterType* soap_new_set_wsnt__FilterType(soap*, ...) allocate, set all public members
/// - wsnt__FilterType::soap_default(soap*) default initialize members
/// - int soap_read_wsnt__FilterType(soap*, wsnt__FilterType*) deserialize from a stream
/// - int soap_write_wsnt__FilterType(soap*, wsnt__FilterType*) serialize to a stream
/// - wsnt__FilterType* wsnt__FilterType::soap_dup(soap*) returns deep copy of wsnt__FilterType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - wsnt__FilterType::soap_del() deep deletes wsnt__FilterType data members, use only after wsnt__FilterType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int wsnt__FilterType::soap_type() returns SOAP_TYPE_wsnt__FilterType or derived type identifier
class wsnt__FilterType
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType is not used and was removed

// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Notify
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":Notify is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UseRaw
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":UseRaw is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Subscribe
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":Subscribe is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessages
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":GetMessages is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Renew
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":Renew is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":RenewResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":RenewResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Unsubscribe
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":Unsubscribe is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscription
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":PauseSubscription is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription is not used and was removed

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse
// Optimization: complexType "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse is not used and was removed


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/

// Optimization: complexType "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType is not used and was removed


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

// Optimization: complexType "http://docs.oasis-open.org/wsn/t-1":Documentation is not used and was removed

// Optimization: complexType "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented is not used and was removed

// Optimization: complexType "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType is not used and was removed


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/media/wsdl                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/media/wsdl":Capabilities is a complexType.
///
/// @note class trt__Capabilities operations:
/// - trt__Capabilities* soap_new_trt__Capabilities(soap*) allocate and default initialize
/// - trt__Capabilities* soap_new_trt__Capabilities(soap*, int num) allocate and default initialize an array
/// - trt__Capabilities* soap_new_req_trt__Capabilities(soap*, ...) allocate, set required members
/// - trt__Capabilities* soap_new_set_trt__Capabilities(soap*, ...) allocate, set all public members
/// - trt__Capabilities::soap_default(soap*) default initialize members
/// - int soap_read_trt__Capabilities(soap*, trt__Capabilities*) deserialize from a stream
/// - int soap_write_trt__Capabilities(soap*, trt__Capabilities*) serialize to a stream
/// - trt__Capabilities* trt__Capabilities::soap_dup(soap*) returns deep copy of trt__Capabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - trt__Capabilities::soap_del() deep deletes trt__Capabilities data members, use only after trt__Capabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int trt__Capabilities::soap_type() returns SOAP_TYPE_trt__Capabilities or derived type identifier
class trt__Capabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   Media profile capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "ProfileCapabilities" of type "http://www.onvif.org/ver10/media/wsdl":ProfileCapabilities.
    trt__ProfileCapabilities*            ProfileCapabilities            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Streaming capabilities.
/// </BLOCKQUOTE></PRE>
///
/// Element "StreamingCapabilities" of type "http://www.onvif.org/ver10/media/wsdl":StreamingCapabilities.
    trt__StreamingCapabilities*          StreamingCapabilities          1;	///< Required element.
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Indicates if GetSnapshotUri is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "SnapshotUri" of type xs:boolean.
  @ bool*                                SnapshotUri                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not Rotation feature is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Rotation" of type xs:boolean.
  @ bool*                                Rotation                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for changing video source mode.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "VideoSourceMode" of type xs:boolean.
  @ bool*                                VideoSourceMode                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates if OSD is supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "OSD" of type xs:boolean.
  @ bool*                                OSD                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for temporary osd text configuration.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "TemporaryOSDText" of type xs:boolean.
  @ bool*                                TemporaryOSDText               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for the Efficient XML Interchange (EXI) binary XML format.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "EXICompression" of type xs:boolean.
  @ bool*                                EXICompression                 0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/media/wsdl":ProfileCapabilities is a complexType.
///
/// @note class trt__ProfileCapabilities operations:
/// - trt__ProfileCapabilities* soap_new_trt__ProfileCapabilities(soap*) allocate and default initialize
/// - trt__ProfileCapabilities* soap_new_trt__ProfileCapabilities(soap*, int num) allocate and default initialize an array
/// - trt__ProfileCapabilities* soap_new_req_trt__ProfileCapabilities(soap*, ...) allocate, set required members
/// - trt__ProfileCapabilities* soap_new_set_trt__ProfileCapabilities(soap*, ...) allocate, set all public members
/// - trt__ProfileCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_trt__ProfileCapabilities(soap*, trt__ProfileCapabilities*) deserialize from a stream
/// - int soap_write_trt__ProfileCapabilities(soap*, trt__ProfileCapabilities*) serialize to a stream
/// - trt__ProfileCapabilities* trt__ProfileCapabilities::soap_dup(soap*) returns deep copy of trt__ProfileCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - trt__ProfileCapabilities::soap_del() deep deletes trt__ProfileCapabilities data members, use only after trt__ProfileCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int trt__ProfileCapabilities::soap_type() returns SOAP_TYPE_trt__ProfileCapabilities or derived type identifier
class trt__ProfileCapabilities
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles supported.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "MaximumNumberOfProfiles" of type xs:int.
  @ int*                                 MaximumNumberOfProfiles        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/media/wsdl":StreamingCapabilities is a complexType.
///
/// @note class trt__StreamingCapabilities operations:
/// - trt__StreamingCapabilities* soap_new_trt__StreamingCapabilities(soap*) allocate and default initialize
/// - trt__StreamingCapabilities* soap_new_trt__StreamingCapabilities(soap*, int num) allocate and default initialize an array
/// - trt__StreamingCapabilities* soap_new_req_trt__StreamingCapabilities(soap*, ...) allocate, set required members
/// - trt__StreamingCapabilities* soap_new_set_trt__StreamingCapabilities(soap*, ...) allocate, set all public members
/// - trt__StreamingCapabilities::soap_default(soap*) default initialize members
/// - int soap_read_trt__StreamingCapabilities(soap*, trt__StreamingCapabilities*) deserialize from a stream
/// - int soap_write_trt__StreamingCapabilities(soap*, trt__StreamingCapabilities*) serialize to a stream
/// - trt__StreamingCapabilities* trt__StreamingCapabilities::soap_dup(soap*) returns deep copy of trt__StreamingCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - trt__StreamingCapabilities::soap_del() deep deletes trt__StreamingCapabilities data members, use only after trt__StreamingCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int trt__StreamingCapabilities::soap_type() returns SOAP_TYPE_trt__StreamingCapabilities or derived type identifier
class trt__StreamingCapabilities
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// <PRE><BLOCKQUOTE>
///   Indicates support for RTP multicast.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RTPMulticast" of type xs:boolean.
  @ bool*                                RTPMulticast                   0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for RTP over TCP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RTP_TCP" of type xs:boolean.
  @ bool*                                RTP_USCORETCP                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for RTP/RTSP/TCP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "RTP_RTSP_TCP" of type xs:boolean.
  @ bool*                                RTP_USCORERTSP_USCORETCP       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for non aggregate RTSP control.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "NonAggregateControl" of type xs:boolean.
  @ bool*                                NonAggregateControl            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the device does not support live media streaming via RTSP.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "NoRTSPStreaming" of type xs:boolean.
  @ bool*                                NoRTSPStreaming                0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/media/wsdl":VideoSourceMode is a complexType.
///
/// @note class trt__VideoSourceMode operations:
/// - trt__VideoSourceMode* soap_new_trt__VideoSourceMode(soap*) allocate and default initialize
/// - trt__VideoSourceMode* soap_new_trt__VideoSourceMode(soap*, int num) allocate and default initialize an array
/// - trt__VideoSourceMode* soap_new_req_trt__VideoSourceMode(soap*, ...) allocate, set required members
/// - trt__VideoSourceMode* soap_new_set_trt__VideoSourceMode(soap*, ...) allocate, set all public members
/// - trt__VideoSourceMode::soap_default(soap*) default initialize members
/// - int soap_read_trt__VideoSourceMode(soap*, trt__VideoSourceMode*) deserialize from a stream
/// - int soap_write_trt__VideoSourceMode(soap*, trt__VideoSourceMode*) serialize to a stream
/// - trt__VideoSourceMode* trt__VideoSourceMode::soap_dup(soap*) returns deep copy of trt__VideoSourceMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - trt__VideoSourceMode::soap_del() deep deletes trt__VideoSourceMode data members, use only after trt__VideoSourceMode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int trt__VideoSourceMode::soap_type() returns SOAP_TYPE_trt__VideoSourceMode or derived type identifier
class trt__VideoSourceMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Max frame rate in frames per second for this video source mode.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxFramerate" of type xs:float.
    float                                MaxFramerate                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Max horizontal and vertical resolution for this video source mode.
/// </BLOCKQUOTE></PRE>
///
/// Element "MaxResolution" of type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 MaxResolution                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indication which encodings are supported for this video source. The list may contain one or more enumeration values of tt:VideoEncoding.
/// </BLOCKQUOTE></PRE>
///
/// Element "Encodings" of type "http://www.onvif.org/ver10/media/wsdl":EncodingTypes.
    trt__EncodingTypes                   Encodings                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
/// </BLOCKQUOTE></PRE>
///
/// Element "Reboot" of type xs:boolean.
    bool                                 Reboot                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of this video source mode. This field should be described in English.
/// </BLOCKQUOTE></PRE>
///
/// Element "Description" of type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    0;	///< Optional element.
/// Element "Extension" of type "http://www.onvif.org/ver10/media/wsdl":VideoSourceModeExtension.
    trt__VideoSourceModeExtension*       Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicate token for video source mode.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
  @ tt__ReferenceToken                   token                          1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.
/// </BLOCKQUOTE></PRE>
///
/// Attribute "Enabled" of type xs:boolean.
  @ bool*                                Enabled                        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/media/wsdl":VideoSourceModeExtension is a complexType.
///
/// @note class trt__VideoSourceModeExtension operations:
/// - trt__VideoSourceModeExtension* soap_new_trt__VideoSourceModeExtension(soap*) allocate and default initialize
/// - trt__VideoSourceModeExtension* soap_new_trt__VideoSourceModeExtension(soap*, int num) allocate and default initialize an array
/// - trt__VideoSourceModeExtension* soap_new_req_trt__VideoSourceModeExtension(soap*, ...) allocate, set required members
/// - trt__VideoSourceModeExtension* soap_new_set_trt__VideoSourceModeExtension(soap*, ...) allocate, set all public members
/// - trt__VideoSourceModeExtension::soap_default(soap*) default initialize members
/// - int soap_read_trt__VideoSourceModeExtension(soap*, trt__VideoSourceModeExtension*) deserialize from a stream
/// - int soap_write_trt__VideoSourceModeExtension(soap*, trt__VideoSourceModeExtension*) serialize to a stream
/// - trt__VideoSourceModeExtension* trt__VideoSourceModeExtension::soap_dup(soap*) returns deep copy of trt__VideoSourceModeExtension, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - trt__VideoSourceModeExtension::soap_del() deep deletes trt__VideoSourceModeExtension data members, use only after trt__VideoSourceModeExtension::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int trt__VideoSourceModeExtension::soap_type() returns SOAP_TYPE_trt__VideoSourceModeExtension or derived type identifier
class trt__VideoSourceModeExtension
{ public:
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilities
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilities is a complexType.
///
/// @note class _trt__GetServiceCapabilities operations:
/// - _trt__GetServiceCapabilities* soap_new__trt__GetServiceCapabilities(soap*) allocate and default initialize
/// - _trt__GetServiceCapabilities* soap_new__trt__GetServiceCapabilities(soap*, int num) allocate and default initialize an array
/// - _trt__GetServiceCapabilities* soap_new_req__trt__GetServiceCapabilities(soap*, ...) allocate, set required members
/// - _trt__GetServiceCapabilities* soap_new_set__trt__GetServiceCapabilities(soap*, ...) allocate, set all public members
/// - _trt__GetServiceCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetServiceCapabilities(soap*, _trt__GetServiceCapabilities*) deserialize from a stream
/// - int soap_write__trt__GetServiceCapabilities(soap*, _trt__GetServiceCapabilities*) serialize to a stream
/// - _trt__GetServiceCapabilities* _trt__GetServiceCapabilities::soap_dup(soap*) returns deep copy of _trt__GetServiceCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetServiceCapabilities::soap_del() deep deletes _trt__GetServiceCapabilities data members, use only after _trt__GetServiceCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetServiceCapabilities::soap_type() returns SOAP_TYPE__trt__GetServiceCapabilities or derived type identifier
class _trt__GetServiceCapabilities
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilitiesResponse is a complexType.
///
/// @note class _trt__GetServiceCapabilitiesResponse operations:
/// - _trt__GetServiceCapabilitiesResponse* soap_new__trt__GetServiceCapabilitiesResponse(soap*) allocate and default initialize
/// - _trt__GetServiceCapabilitiesResponse* soap_new__trt__GetServiceCapabilitiesResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetServiceCapabilitiesResponse* soap_new_req__trt__GetServiceCapabilitiesResponse(soap*, ...) allocate, set required members
/// - _trt__GetServiceCapabilitiesResponse* soap_new_set__trt__GetServiceCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - _trt__GetServiceCapabilitiesResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetServiceCapabilitiesResponse(soap*, _trt__GetServiceCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__trt__GetServiceCapabilitiesResponse(soap*, _trt__GetServiceCapabilitiesResponse*) serialize to a stream
/// - _trt__GetServiceCapabilitiesResponse* _trt__GetServiceCapabilitiesResponse::soap_dup(soap*) returns deep copy of _trt__GetServiceCapabilitiesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetServiceCapabilitiesResponse::soap_del() deep deletes _trt__GetServiceCapabilitiesResponse data members, use only after _trt__GetServiceCapabilitiesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetServiceCapabilitiesResponse::soap_type() returns SOAP_TYPE__trt__GetServiceCapabilitiesResponse or derived type identifier
class _trt__GetServiceCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The capabilities for the media service is returned in the Capabilities element.
/// </BLOCKQUOTE></PRE>
///
/// Element "Capabilities" of type "http://www.onvif.org/ver10/media/wsdl":Capabilities.
    trt__Capabilities*                   Capabilities                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSources
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetVideoSources is a complexType.
///
/// @note class _trt__GetVideoSources operations:
/// - _trt__GetVideoSources* soap_new__trt__GetVideoSources(soap*) allocate and default initialize
/// - _trt__GetVideoSources* soap_new__trt__GetVideoSources(soap*, int num) allocate and default initialize an array
/// - _trt__GetVideoSources* soap_new_req__trt__GetVideoSources(soap*, ...) allocate, set required members
/// - _trt__GetVideoSources* soap_new_set__trt__GetVideoSources(soap*, ...) allocate, set all public members
/// - _trt__GetVideoSources::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetVideoSources(soap*, _trt__GetVideoSources*) deserialize from a stream
/// - int soap_write__trt__GetVideoSources(soap*, _trt__GetVideoSources*) serialize to a stream
/// - _trt__GetVideoSources* _trt__GetVideoSources::soap_dup(soap*) returns deep copy of _trt__GetVideoSources, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetVideoSources::soap_del() deep deletes _trt__GetVideoSources data members, use only after _trt__GetVideoSources::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetVideoSources::soap_type() returns SOAP_TYPE__trt__GetVideoSources or derived type identifier
class _trt__GetVideoSources
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourcesResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetVideoSourcesResponse is a complexType.
///
/// @note class _trt__GetVideoSourcesResponse operations:
/// - _trt__GetVideoSourcesResponse* soap_new__trt__GetVideoSourcesResponse(soap*) allocate and default initialize
/// - _trt__GetVideoSourcesResponse* soap_new__trt__GetVideoSourcesResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetVideoSourcesResponse* soap_new_req__trt__GetVideoSourcesResponse(soap*, ...) allocate, set required members
/// - _trt__GetVideoSourcesResponse* soap_new_set__trt__GetVideoSourcesResponse(soap*, ...) allocate, set all public members
/// - _trt__GetVideoSourcesResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetVideoSourcesResponse(soap*, _trt__GetVideoSourcesResponse*) deserialize from a stream
/// - int soap_write__trt__GetVideoSourcesResponse(soap*, _trt__GetVideoSourcesResponse*) serialize to a stream
/// - _trt__GetVideoSourcesResponse* _trt__GetVideoSourcesResponse::soap_dup(soap*) returns deep copy of _trt__GetVideoSourcesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetVideoSourcesResponse::soap_del() deep deletes _trt__GetVideoSourcesResponse data members, use only after _trt__GetVideoSourcesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetVideoSourcesResponse::soap_type() returns SOAP_TYPE__trt__GetVideoSourcesResponse or derived type identifier
class _trt__GetVideoSourcesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of existing Video Sources
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__VideoSource* is 0..unbounded.
  $ int                                  __sizeVideoSources             0;
/// Pointer to array tt__VideoSource* of size 0..unbounded.
    tt__VideoSource*                    *VideoSources                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSources
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetAudioSources is a complexType.
///
/// @note class _trt__GetAudioSources operations:
/// - _trt__GetAudioSources* soap_new__trt__GetAudioSources(soap*) allocate and default initialize
/// - _trt__GetAudioSources* soap_new__trt__GetAudioSources(soap*, int num) allocate and default initialize an array
/// - _trt__GetAudioSources* soap_new_req__trt__GetAudioSources(soap*, ...) allocate, set required members
/// - _trt__GetAudioSources* soap_new_set__trt__GetAudioSources(soap*, ...) allocate, set all public members
/// - _trt__GetAudioSources::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetAudioSources(soap*, _trt__GetAudioSources*) deserialize from a stream
/// - int soap_write__trt__GetAudioSources(soap*, _trt__GetAudioSources*) serialize to a stream
/// - _trt__GetAudioSources* _trt__GetAudioSources::soap_dup(soap*) returns deep copy of _trt__GetAudioSources, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetAudioSources::soap_del() deep deletes _trt__GetAudioSources data members, use only after _trt__GetAudioSources::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetAudioSources::soap_type() returns SOAP_TYPE__trt__GetAudioSources or derived type identifier
class _trt__GetAudioSources
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourcesResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetAudioSourcesResponse is a complexType.
///
/// @note class _trt__GetAudioSourcesResponse operations:
/// - _trt__GetAudioSourcesResponse* soap_new__trt__GetAudioSourcesResponse(soap*) allocate and default initialize
/// - _trt__GetAudioSourcesResponse* soap_new__trt__GetAudioSourcesResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetAudioSourcesResponse* soap_new_req__trt__GetAudioSourcesResponse(soap*, ...) allocate, set required members
/// - _trt__GetAudioSourcesResponse* soap_new_set__trt__GetAudioSourcesResponse(soap*, ...) allocate, set all public members
/// - _trt__GetAudioSourcesResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetAudioSourcesResponse(soap*, _trt__GetAudioSourcesResponse*) deserialize from a stream
/// - int soap_write__trt__GetAudioSourcesResponse(soap*, _trt__GetAudioSourcesResponse*) serialize to a stream
/// - _trt__GetAudioSourcesResponse* _trt__GetAudioSourcesResponse::soap_dup(soap*) returns deep copy of _trt__GetAudioSourcesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetAudioSourcesResponse::soap_del() deep deletes _trt__GetAudioSourcesResponse data members, use only after _trt__GetAudioSourcesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetAudioSourcesResponse::soap_type() returns SOAP_TYPE__trt__GetAudioSourcesResponse or derived type identifier
class _trt__GetAudioSourcesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of existing Audio Sources
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__AudioSource* is 0..unbounded.
  $ int                                  __sizeAudioSources             0;
/// Pointer to array tt__AudioSource* of size 0..unbounded.
    tt__AudioSource*                    *AudioSources                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputs
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputs is a complexType.
///
/// @note class _trt__GetAudioOutputs operations:
/// - _trt__GetAudioOutputs* soap_new__trt__GetAudioOutputs(soap*) allocate and default initialize
/// - _trt__GetAudioOutputs* soap_new__trt__GetAudioOutputs(soap*, int num) allocate and default initialize an array
/// - _trt__GetAudioOutputs* soap_new_req__trt__GetAudioOutputs(soap*, ...) allocate, set required members
/// - _trt__GetAudioOutputs* soap_new_set__trt__GetAudioOutputs(soap*, ...) allocate, set all public members
/// - _trt__GetAudioOutputs::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetAudioOutputs(soap*, _trt__GetAudioOutputs*) deserialize from a stream
/// - int soap_write__trt__GetAudioOutputs(soap*, _trt__GetAudioOutputs*) serialize to a stream
/// - _trt__GetAudioOutputs* _trt__GetAudioOutputs::soap_dup(soap*) returns deep copy of _trt__GetAudioOutputs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetAudioOutputs::soap_del() deep deletes _trt__GetAudioOutputs data members, use only after _trt__GetAudioOutputs::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetAudioOutputs::soap_type() returns SOAP_TYPE__trt__GetAudioOutputs or derived type identifier
class _trt__GetAudioOutputs
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputsResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputsResponse is a complexType.
///
/// @note class _trt__GetAudioOutputsResponse operations:
/// - _trt__GetAudioOutputsResponse* soap_new__trt__GetAudioOutputsResponse(soap*) allocate and default initialize
/// - _trt__GetAudioOutputsResponse* soap_new__trt__GetAudioOutputsResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetAudioOutputsResponse* soap_new_req__trt__GetAudioOutputsResponse(soap*, ...) allocate, set required members
/// - _trt__GetAudioOutputsResponse* soap_new_set__trt__GetAudioOutputsResponse(soap*, ...) allocate, set all public members
/// - _trt__GetAudioOutputsResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetAudioOutputsResponse(soap*, _trt__GetAudioOutputsResponse*) deserialize from a stream
/// - int soap_write__trt__GetAudioOutputsResponse(soap*, _trt__GetAudioOutputsResponse*) serialize to a stream
/// - _trt__GetAudioOutputsResponse* _trt__GetAudioOutputsResponse::soap_dup(soap*) returns deep copy of _trt__GetAudioOutputsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetAudioOutputsResponse::soap_del() deep deletes _trt__GetAudioOutputsResponse data members, use only after _trt__GetAudioOutputsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetAudioOutputsResponse::soap_type() returns SOAP_TYPE__trt__GetAudioOutputsResponse or derived type identifier
class _trt__GetAudioOutputsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of existing Audio Outputs
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__AudioOutput* is 0..unbounded.
  $ int                                  __sizeAudioOutputs             0;
/// Pointer to array tt__AudioOutput* of size 0..unbounded.
    tt__AudioOutput*                    *AudioOutputs                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":CreateProfile
/// @brief "http://www.onvif.org/ver10/media/wsdl":CreateProfile is a complexType.
///
/// @note class _trt__CreateProfile operations:
/// - _trt__CreateProfile* soap_new__trt__CreateProfile(soap*) allocate and default initialize
/// - _trt__CreateProfile* soap_new__trt__CreateProfile(soap*, int num) allocate and default initialize an array
/// - _trt__CreateProfile* soap_new_req__trt__CreateProfile(soap*, ...) allocate, set required members
/// - _trt__CreateProfile* soap_new_set__trt__CreateProfile(soap*, ...) allocate, set all public members
/// - _trt__CreateProfile::soap_default(soap*) default initialize members
/// - int soap_read__trt__CreateProfile(soap*, _trt__CreateProfile*) deserialize from a stream
/// - int soap_write__trt__CreateProfile(soap*, _trt__CreateProfile*) serialize to a stream
/// - _trt__CreateProfile* _trt__CreateProfile::soap_dup(soap*) returns deep copy of _trt__CreateProfile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__CreateProfile::soap_del() deep deletes _trt__CreateProfile data members, use only after _trt__CreateProfile::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__CreateProfile::soap_type() returns SOAP_TYPE__trt__CreateProfile or derived type identifier
class _trt__CreateProfile
{ public:
/// <PRE><BLOCKQUOTE>
///   friendly name of the profile to be created
/// </BLOCKQUOTE></PRE>
///
/// Element "Name" of type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional token, specifying the unique identifier of the new profile. <br/>A device supports at least a token length of 12 characters and characters "A-Z" | "a-z" | "0-9" | "-.".
/// </BLOCKQUOTE></PRE>
///
/// Element "Token" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":CreateProfileResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":CreateProfileResponse is a complexType.
///
/// @note class _trt__CreateProfileResponse operations:
/// - _trt__CreateProfileResponse* soap_new__trt__CreateProfileResponse(soap*) allocate and default initialize
/// - _trt__CreateProfileResponse* soap_new__trt__CreateProfileResponse(soap*, int num) allocate and default initialize an array
/// - _trt__CreateProfileResponse* soap_new_req__trt__CreateProfileResponse(soap*, ...) allocate, set required members
/// - _trt__CreateProfileResponse* soap_new_set__trt__CreateProfileResponse(soap*, ...) allocate, set all public members
/// - _trt__CreateProfileResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__CreateProfileResponse(soap*, _trt__CreateProfileResponse*) deserialize from a stream
/// - int soap_write__trt__CreateProfileResponse(soap*, _trt__CreateProfileResponse*) serialize to a stream
/// - _trt__CreateProfileResponse* _trt__CreateProfileResponse::soap_dup(soap*) returns deep copy of _trt__CreateProfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__CreateProfileResponse::soap_del() deep deletes _trt__CreateProfileResponse data members, use only after _trt__CreateProfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__CreateProfileResponse::soap_type() returns SOAP_TYPE__trt__CreateProfileResponse or derived type identifier
class _trt__CreateProfileResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   returns the new created profile
/// </BLOCKQUOTE></PRE>
///
/// Element "Profile" of type "http://www.onvif.org/ver10/schema":Profile.
    tt__Profile*                         Profile                        1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfile
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetProfile is a complexType.
///
/// @note class _trt__GetProfile operations:
/// - _trt__GetProfile* soap_new__trt__GetProfile(soap*) allocate and default initialize
/// - _trt__GetProfile* soap_new__trt__GetProfile(soap*, int num) allocate and default initialize an array
/// - _trt__GetProfile* soap_new_req__trt__GetProfile(soap*, ...) allocate, set required members
/// - _trt__GetProfile* soap_new_set__trt__GetProfile(soap*, ...) allocate, set all public members
/// - _trt__GetProfile::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetProfile(soap*, _trt__GetProfile*) deserialize from a stream
/// - int soap_write__trt__GetProfile(soap*, _trt__GetProfile*) serialize to a stream
/// - _trt__GetProfile* _trt__GetProfile::soap_dup(soap*) returns deep copy of _trt__GetProfile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetProfile::soap_del() deep deletes _trt__GetProfile data members, use only after _trt__GetProfile::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetProfile::soap_type() returns SOAP_TYPE__trt__GetProfile or derived type identifier
class _trt__GetProfile
{ public:
/// <PRE><BLOCKQUOTE>
///   this command requests a specific profile
/// </BLOCKQUOTE></PRE>
///
/// Element "ProfileToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ProfileToken                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfileResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetProfileResponse is a complexType.
///
/// @note class _trt__GetProfileResponse operations:
/// - _trt__GetProfileResponse* soap_new__trt__GetProfileResponse(soap*) allocate and default initialize
/// - _trt__GetProfileResponse* soap_new__trt__GetProfileResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetProfileResponse* soap_new_req__trt__GetProfileResponse(soap*, ...) allocate, set required members
/// - _trt__GetProfileResponse* soap_new_set__trt__GetProfileResponse(soap*, ...) allocate, set all public members
/// - _trt__GetProfileResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetProfileResponse(soap*, _trt__GetProfileResponse*) deserialize from a stream
/// - int soap_write__trt__GetProfileResponse(soap*, _trt__GetProfileResponse*) serialize to a stream
/// - _trt__GetProfileResponse* _trt__GetProfileResponse::soap_dup(soap*) returns deep copy of _trt__GetProfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetProfileResponse::soap_del() deep deletes _trt__GetProfileResponse data members, use only after _trt__GetProfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetProfileResponse::soap_type() returns SOAP_TYPE__trt__GetProfileResponse or derived type identifier
class _trt__GetProfileResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   returns the requested media profile
/// </BLOCKQUOTE></PRE>
///
/// Element "Profile" of type "http://www.onvif.org/ver10/schema":Profile.
    tt__Profile*                         Profile                        1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfiles
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetProfiles is a complexType.
///
/// @note class _trt__GetProfiles operations:
/// - _trt__GetProfiles* soap_new__trt__GetProfiles(soap*) allocate and default initialize
/// - _trt__GetProfiles* soap_new__trt__GetProfiles(soap*, int num) allocate and default initialize an array
/// - _trt__GetProfiles* soap_new_req__trt__GetProfiles(soap*, ...) allocate, set required members
/// - _trt__GetProfiles* soap_new_set__trt__GetProfiles(soap*, ...) allocate, set all public members
/// - _trt__GetProfiles::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetProfiles(soap*, _trt__GetProfiles*) deserialize from a stream
/// - int soap_write__trt__GetProfiles(soap*, _trt__GetProfiles*) serialize to a stream
/// - _trt__GetProfiles* _trt__GetProfiles::soap_dup(soap*) returns deep copy of _trt__GetProfiles, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetProfiles::soap_del() deep deletes _trt__GetProfiles data members, use only after _trt__GetProfiles::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetProfiles::soap_type() returns SOAP_TYPE__trt__GetProfiles or derived type identifier
class _trt__GetProfiles
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfilesResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":GetProfilesResponse is a complexType.
///
/// @note class _trt__GetProfilesResponse operations:
/// - _trt__GetProfilesResponse* soap_new__trt__GetProfilesResponse(soap*) allocate and default initialize
/// - _trt__GetProfilesResponse* soap_new__trt__GetProfilesResponse(soap*, int num) allocate and default initialize an array
/// - _trt__GetProfilesResponse* soap_new_req__trt__GetProfilesResponse(soap*, ...) allocate, set required members
/// - _trt__GetProfilesResponse* soap_new_set__trt__GetProfilesResponse(soap*, ...) allocate, set all public members
/// - _trt__GetProfilesResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__GetProfilesResponse(soap*, _trt__GetProfilesResponse*) deserialize from a stream
/// - int soap_write__trt__GetProfilesResponse(soap*, _trt__GetProfilesResponse*) serialize to a stream
/// - _trt__GetProfilesResponse* _trt__GetProfilesResponse::soap_dup(soap*) returns deep copy of _trt__GetProfilesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__GetProfilesResponse::soap_del() deep deletes _trt__GetProfilesResponse data members, use only after _trt__GetProfilesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__GetProfilesResponse::soap_type() returns SOAP_TYPE__trt__GetProfilesResponse or derived type identifier
class _trt__GetProfilesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   lists all profiles that exist in the media service
/// </BLOCKQUOTE></PRE>
///
/// Size of array of tt__Profile* is 0..unbounded.
  $ int                                  __sizeProfiles                 0;
/// Pointer to array tt__Profile* of size 0..unbounded.
    tt__Profile*                        *Profiles                       0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfiguration
/// @brief "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfiguration is a complexType.
///
/// @note class _trt__AddVideoEncoderConfiguration operations:
/// - _trt__AddVideoEncoderConfiguration* soap_new__trt__AddVideoEncoderConfiguration(soap*) allocate and default initialize
/// - _trt__AddVideoEncoderConfiguration* soap_new__trt__AddVideoEncoderConfiguration(soap*, int num) allocate and default initialize an array
/// - _trt__AddVideoEncoderConfiguration* soap_new_req__trt__AddVideoEncoderConfiguration(soap*, ...) allocate, set required members
/// - _trt__AddVideoEncoderConfiguration* soap_new_set__trt__AddVideoEncoderConfiguration(soap*, ...) allocate, set all public members
/// - _trt__AddVideoEncoderConfiguration::soap_default(soap*) default initialize members
/// - int soap_read__trt__AddVideoEncoderConfiguration(soap*, _trt__AddVideoEncoderConfiguration*) deserialize from a stream
/// - int soap_write__trt__AddVideoEncoderConfiguration(soap*, _trt__AddVideoEncoderConfiguration*) serialize to a stream
/// - _trt__AddVideoEncoderConfiguration* _trt__AddVideoEncoderConfiguration::soap_dup(soap*) returns deep copy of _trt__AddVideoEncoderConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__AddVideoEncoderConfiguration::soap_del() deep deletes _trt__AddVideoEncoderConfiguration data members, use only after _trt__AddVideoEncoderConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__AddVideoEncoderConfiguration::soap_type() returns SOAP_TYPE__trt__AddVideoEncoderConfiguration or derived type identifier
class _trt__AddVideoEncoderConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to the profile where the configuration should be added
/// </BLOCKQUOTE></PRE>
///
/// Element "ProfileToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ProfileToken                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Contains a reference to the VideoEncoderConfiguration to add
/// </BLOCKQUOTE></PRE>
///
/// Element "ConfigurationToken" of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ConfigurationToken             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfigurationResponse
/// @brief "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfigurationResponse is a complexType.
///
/// @note class _trt__AddVideoEncoderConfigurationResponse operations:
/// - _trt__AddVideoEncoderConfigurationResponse* soap_new__trt__AddVideoEncoderConfigurationResponse(soap*) allocate and default initialize
/// - _trt__AddVideoEncoderConfigurationResponse* soap_new__trt__AddVideoEncoderConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _trt__AddVideoEncoderConfigurationResponse* soap_new_req__trt__AddVideoEncoderConfigurationResponse(soap*, ...) allocate, set required members
/// - _trt__AddVideoEncoderConfigurationResponse* soap_new_set__trt__AddVideoEncoderConfigurationResponse(soap*, ...) allocate, set all public members
/// - _trt__AddVideoEncoderConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__trt__AddVideoEncoderConfigurationResponse(soap*, _trt__AddVideoEncoderConfigurationResponse*) deserialize from a stream
/// - int soap_write__trt__AddVideoEncoderConfigurationResponse(soap*, _trt__AddVideoEncoderConfigurationResponse*) serialize to a stream
/// - _trt__AddVideoEncoderConfigurationResponse* _trt__AddVideoEncoderConfigurationResponse::soap_dup(soap*) returns deep copy of _trt__AddVideoEncoderConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _trt__AddVideoEncoderConfigurationResponse::soap_del() deep deletes _trt__AddVideoEncoderConfigurationResponse data members, use only after _trt__AddVideoEncoderConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _trt__AddVideoEncoderConfigurationResponse::soap_type() returns SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse or derived type identifier
class _trt__AddVideoEncoderConfigurationResponse
{ public:
/// Pointer to soap context that manages this instance.
    st