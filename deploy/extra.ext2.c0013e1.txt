s New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31560\fbidi \fnil\fcharset0\fprq2 SimSun Western{\*\falt \'cb\'ce\'cc\'e5};}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \fs22\lang1033\langfe2052\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp2052 \snext0 \sqformat \spriority0 \styrsid7174289 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe2052\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp2052 
\snext11 \ssemihidden \sunhideused \sqformat Normal Table;}}{\*\rsidtbl \rsid69038\rsid82046\rsid87707\rsid95659\rsid134211\rsid154312\rsid162960\rsid343415\rsid353316\rsid357831\rsid424175\rsid425239\rsid487345\rsid555870\rsid592788\rsid662841\rsid664362
\rsid669664\rsid677615\rsid682290\rsid723102\rsid729875\rsid745976\rsid753359\rsid861325\rsid884569\rsid936148\rsid1004892\rsid1063873\rsid1134810\rsid1186501\rsid1186883\rsid1194660\rsid1376795\rsid1401633\rsid1529513\rsid1535688\rsid1536023\rsid1581410
\rsid1582120\rsid1584154\rsid1647099\rsid1654806\rsid1655805\rsid1734857\rsid1776626\rsid1781686\rsid1793423\rsid1796780\rsid1797706\rsid1842033\rsid1977053\rsid2124302\rsid2178214\rsid2188409\rsid2368406\rsid2455043\rsid2556191\rsid2559080\rsid2706421
\rsid2717148\rsid2838319\rsid2842440\rsid2846834\rsid2849503\rsid2890251\rsid2915487\rsid2978369\rsid3087645\rsid3096048\rsid3157651\rsid3213286\rsid3216382\rsid3231882\rsid3243724\rsid3292963\rsid3306157\rsid3411267\rsid3494792\rsid3552460\rsid3555247
\rsid3564302\rsid3564469\rsid3606601\rsid3613764\rsid3678404\rsid3702734\rsid3744060\rsid3746433\rsid3764488\rsid3767582\rsid3802866\rsid3822118\rsid3867395\rsid3879311\rsid3883140\rsid3941726\rsid3960565\rsid4017175\rsid4069295\rsid4086842\rsid4217327
\rsid4218194\rsid4265694\rsid4287373\rsid4474139\rsid4480618\rsid4481007\rsid4526124\rsid4541201\rsid4543468\rsid4553189\rsid4597977\rsid4598568\rsid4606409\rsid4617940\rsid4661390\rsid4665798\rsid4669776\rsid4718821\rsid4743566\rsid4745032\rsid4862560
\rsid4916941\rsid4930440\rsid4934643\rsid4942416\rsid4984938\rsid5051074\rsid5057133\rsid5072156\rsid5112549\rsid5126983\rsid5137805\rsid5208771\rsid5321575\rsid5330704\rsid5333576\rsid5390032\rsid5393962\rsid5406273\rsid5466724\rsid5468218\rsid5528489
\rsid5584391\rsid5655967\rsid5657287\rsid5770668\rsid5772499\rsid5782795\rsid5797800\rsid5835669\rsid5844695\rsid5990916\rsid6119276\rsid6161711\rsid6182604\rsid6187748\rsid6193081\rsid6244483\rsid6294159\rsid6361415\rsid6366086\rsid6386107\rsid6438581
\rsid6444379\rsid6499201\rsid6505118\rsid6570222\rsid6572459\rsid6631200\rsid6649362\rsid6685800\rsid6825220\rsid6825684\rsid6833010\rsid6893441\rsid6896301\rsid7031407\rsid7040521\rsid7090529\rsid7099881\rsid7147977\rsid7151242\rsid7161394\rsid7170939
\rsid7174289\rsid7216603\rsid7223901\rsid7239928\rsid7275269\rsid7285619\rsid7342289\rsid7343100\rsid7345751\rsid7359472\rsid7360787\rsid7365160\rsid7431355\rsid7567533\rsid7603088\rsid7632088\rsid7670100\rsid7677695\rsid7685243\rsid7690018\rsid7699692
\rsid7749205\rsid7757442\rsid7804790\rsid7805881\rsid7823655\rsid7866042\rsid7869944\rsid7881919\rsid7887261\rsid7892841\rsid8001358\rsid8065457\rsid8082350\rsid8205271\rsid8263249\rsid8276646\rsid8340657\rsid8403836\rsid8404675\rsid8413005\rsid8415953
\rsid8454550\rsid8464518\rsid8471740\rsid8473147\rsid8474305\rsid8608269\rsid8674070\rsid8678535\rsid8680380\rsid8716556\rsid8726521\rsid8740342\rsid8792794\rsid8850474\rsid8939938\rsid9008211\rsid9009783\rsid9046093\rsid9050817\rsid9199494\rsid9256582
\rsid9382159\rsid9382524\rsid9580642\rsid9636050\rsid9650101\rsid9719636\rsid9790198\rsid9845373\rsid9896574\rsid9911041\rsid9917438\rsid9923535\rsid10058259\rsid10104370\rsid10104782\rsid10116859\rsid10119940\rsid10162764\rsid10171268\rsid10173470
\rsid10181119\rsid10186326\rsid10227481\rsid10228062\rsid10238495\rsid10241328\rsid10251406\rsid10253016\rsid10308789\rsid10356536\rsid10448859\rsid10451319\rsid10553803\rsid10617894\rsid10624398\rsid10630071\rsid10644784\rsid10649121\rsid10693560
\rsid10778738\rsid10819029\rsid10822871\rsid10833058\rsid10889418\rsid10906327\rsid10947796\rsid10948305\rsid10959936\rsid10970050\rsid11022248\rsid11091976\rsid11092694\rsid11106531\rsid11221818\rsid11223744\rsid11284859\rsid11297367\rsid11304667
\rsid11410401\rsid11471275\rsid11473879\rsid11483990\rsid11630288\rsid11670184\rsid11683410\rsid11695780\rsid11749422\rsid11801413\rsid11823730\rsid11885140\rsid11948062\rsid11949587\rsid11952697\rsid12011226\rsid12011847\rsid12143706\rsid12196369
\rsid12197931\rsid12211842\rsid12256397\rsid12260147\rsid12274050\rsid12278472\rsid12341722\rsid12386746\rsid12400576\rsid12462365\rsid12480687\rsid12524088\rsid12602696\rsid12654958\rsid12714736\rsid12730982\rsid12734740\rsid12736982\rsid12737686
\rsid12847212\rsid12858831\rsid12938446\rsid12980310\rsid12998071\rsid12999036\rsid13001300\rsid13042177\rsid13060905\rsid13138458\rsid13256747\rsid13313954\rsid13320738\rsid13322171\rsid13331168\rsid13384129\rsid13444667\rsid13530695\rsid13530763
\rsid13663661\rsid13763981\rsid13775311\rsid13793683\rsid13852375\rsid13857004\rsid13896517\rsid13924119\rsid13964242\rsid13968489\rsid13985729\rsid13986503\rsid13990163\rsid14027411\rsid14034599\rsid14118349\rsid14167608\rsid14171158\rsid14174498
\rsid14237993\rsid14245230\rsid14301665\rsid14302208\rsid14304207\rsid14313482\rsid14318505\rsid14356566\rsid14439634\rsid14446103\rsid14447519\rsid14492879\rsid14495582\rsid14552397\rsid14581735\rsid14822449\rsid14837713\rsid14896889\rsid14968219
\rsid15014585\rsid15022794\rsid15029050\rsid15091012\rsid15097832\rsid15155308\rsid15222503\rsid15229110\rsid15367816\rsid15419119\rsid15490739\rsid15532842\rsid15538613\rsid15554039\rsid15556187\rsid15561492\rsid15564061\rsid15611687\rsid15613741
\rsid15615348\rsid15741996\rsid15751877\rsid15753374\rsid15757262\rsid15758596\rsid15809585\rsid15824214\rsid15873165\rsid15880090\rsid15884729\rsid15930247\rsid15934296\rsid16023137\rsid16066612\rsid16129228\rsid16151538\rsid16208867\rsid16216830
\rsid16258247\rsid16278765\rsid16283291\rsid16283921\rsid16285193\rsid16330841\rsid16337005\rsid16339481\rsid16340046\rsid16346818\rsid16411054\rsid16455128\rsid16461848\rsid16515316\rsid16595350\rsid16596092\rsid16608749\rsid16647151\rsid16662723
\rsid16678462\rsid16726804\rsid16738174\rsid16739818\rsid16740151\rsid16741504\rsid16742933}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author roland}
{\operator roland}{\creatim\yr2015\mo12\dy8\hr22\min17}{\revtim\yr2015\mo12\dy8\hr22\min19}{\version1}{\edmins2}{\nofpages1}{\nofwords18}{\nofchars105}{\nofcharsws122}{\vern32769}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}
}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves1\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale140\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot1529513\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid7174289\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1529513 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe2052\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1529513 \hich\af31506\dbch\af31505\loch\f31506 This program itself is nonsense.\hich\af31506\dbch\af31505\loch\f31506 
 It serves no purpose.
\par \hich\af31506\dbch\af31505\loch\f31506 It\hich\af31506\dbch\af31505\loch\f31506 s \hich\af31506\dbch\af31505\loch\f31506 project\loch\af31506\dbch\af31505\hich\f31506 \rquote \hich\af31506\dbch\af31505\loch\f31506 s \hich\af31506\dbch\af31505\loch\f31506 
purpose is to test waf, the python base build tool.
\par 
\par 
\par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8
72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7
2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b
44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7
065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000
00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08
84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc
52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353
bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468
656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c
070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7
29e245eb2b260a0238fd010000ffff0300504b03041400060008000000210096b5ade296060000501b0000160000007468656d652f7468656d652f7468656d65
312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87615b8116d8
a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad79482a9c04
98f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b5d8a314d3c
94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab999fb7b471
7509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9699640f671
9e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd5868b37a088d1
e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d60cf03ac1a5
193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f9e7ef3f2d1
17d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be15c308d3f2
8acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a99793849c26ae6
6252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d32a423279a
668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2af074481847
bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86e877f0034e
16bafb0e258ebb4faf06b769e888340b103d3311da9750aa9d0a1cd3e4efca31a3508f6d0c5c5c398602f8e2ebc71591f5b616e24dd893aa3261fb44f95d843b
5974bb5c04f4edafb95b7892ec1108f3f98de75dc97d5772bdff7cc95d94cf672db4b3da0a6557f70db629362d72bcb0431e53c6066acac80d699a6409fb44d0
8741bdce9c0e4971624a2378cceaba830b05366b90e0ea23aaa241845368b0eb9e2612ca8c742851ca251ceccc70256d8d87265dd96361531f186c3d9058edf2
c00eafe8e1fc5c509031bb4d680e9f39a3154de0accc56ae644441edd76156d7429d995bdd88664a9dc3ad50197c38af1a0c16d684060441db02565e85f3b966
0d0713cc48a0ed6ef7dedc2dc60b17e92219e180643ed27acffba86e9c94c78ab90980d8a9f0913ee49d62b512b79626fb06dccee2a432bbc60276b9f7dec44b
7904cfbca4f3f6443ab2a49c9c2c41476dafd55c6e7ac8c769db1bc399161ee314bc2e75cf8759081743be1236ec4f4d6693e5336fb672c5dc24a8c33585b5fb
9cc24e1d4885545b58463634cc5416022cd19cacfccb4d30eb45296023fd35a458598360f8d7a4003bbaae25e331f155d9d9a5116d3bfb9a95523e51440ca2e0
088dd844ec6370bf0e55d027a012ae264c45d02f708fa6ad6da6dce29c255df9f6cae0ec38666984b372ab5334cf640b37795cc860de4ae2816e95b21be5ceaf
8a49f90b52a51cc6ff3355f47e0237052b81f6800fd7b802239daf6d8f0b1571a8426944fdbe80c6c1d40e8816b88b8569082ab84c36ff0539d4ff6dce591a26
ade1c0a7f669880485fd484582903d284b26fa4e2156cff62e4b9265844c4495c495a9157b440e091bea1ab8aaf7760f4510eaa69a6465c0e04ec69ffb9e65d0
28d44d4e39df9c1a52ecbd3607fee9cec7263328e5d661d3d0e4f62f44acd855ed7ab33cdf7bcb8ae889599bd5c8b3029895b6825696f6af29c239b75a5bb1e6
345e6ee6c28117e73586c1a2214ae1be07e93fb0ff51e133fb65426fa843be0fb515c187064d0cc206a2fa926d3c902e907670048d931db4c1a44959d366ad93
b65abe595f70a75bf03d616c2dd959fc7d4e6317cd99cbcec9c58b34766661c7d6766ca1a9c1b327531486c6f941c638c67cd22a7f75e2a37be0e82db8df9f30
254d30c1372581a1f51c983c80e4b71ccdd28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f74
68656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f24
51eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198
720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528
a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000000000000000
000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000
002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000140200007468
656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210096b5ade296060000501b000016000000000000000000
00000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000
00000000000000009b0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000960a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdprio#warning "a"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #warning "e"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
#if A
const char* c = "foo /*";
  #if B
const char* d = " bar */";
// /*
    #if C
// */
      #include "a.h"
    #else
      #include "b.h"
    #endif
  #else
    #if C
      #include "c.h"
    #else
      #include "d.h"
    #endif
  #endif
#elif B
  #if C
	# if 1 - 1
		#include "a.h"
	# endif
	# if 0
	#include "a.h"
	# endif
     #include <e.h>
  #else
     #include "f.h"
  #endif
#elif C
  #include "g.h"
#else
  #include "h.h"
#endif


/*
#include "a.h"
*/
//#include "a.h"

int main() {
	return 0;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #define STRINGIFY2( x) #x
#define STRINGIFY(x) STRINGIFY2(x)

#define PASTE2( x, y) x ## y
#define PASTE(x, y) PASTE2(x, y)

#include STRINGIFY(PASTE(PREFIX_VAL, PASTE(a, SUFFIX_VAL)).h)

int main() {return 0;}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2012 (ita)

VERSION='0.0.1'
APPNAME='preproc_test'
top = '.'
out = 'build'

from waflib import Utils
from waflib.Tools import c_preproc
from waflib.Tools.c_preproc import NUM, OP, IDENT

from waflib.Logs import pprint

def configure(conf):
	pass

def build(bld):

	bld.failure = 0
	def disp(color, result):
		pprint(color, result)
		if color == 'RED':
			bld.failure=1
	def stop_status(bld):
		if bld.failure:
			bld.fatal('One or several test failed, check the outputs above')
	bld.add_post_fun(stop_status)

	defs = {
		'm1'   : "m1 9 + 9",
		'fun0' : "fun0(x, y) x y",
		'fun1' : "fun1(x, y) x ## y",
		'fun2' : "fun2(x) #x",
		'fun3' : "fun3(x, y) x * y",
		'fun4' : "fun4(x) fun2(x)",
		'fun5' : "fun5(x, y, z) x ## y ## z",
		'fun6' : "fun6(x, y) <x.y>",
		'fun7' : "fun() 7",
	}

	def test(x, result, fun=c_preproc.reduce_tokens):
		toks = c_preproc.tokenize(x)
		c_preproc.reduce_tokens(toks, defs, [])
		ret = c_preproc.stringize(toks)

		if ret == result:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%s\t\t%r" % (ret, toks))

	test("1 + m1 + 1", "1+9+9+1")
	test("1 + fun0(1, +) 1", "1+1+1")
	test("fun2(mmm)", "mmm")
	test("m1", "9+9")
	test("fun2(m1)", "m1")
	test("fun4(m1)", "9+9")
	test("fun1(m, m)", "mm")
	test("fun5(a, b, c)", "abc")
	test("fun1(>, =)", ">=")
	test("fun1(a, 12)", "a12")
	test("fun5(a, _, 12)", "a_12")
	test("fun6(math, h)", "<math.h>")

	def test(x, result):
		ret = c_preproc.extract_include(x, defs)
		if ret == result:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%s" % str(ret))

	test("fun6(math, h)", ("<", "math.h"))

	def test(x, result):
		toks = c_preproc.tokenize(x)
		c_preproc.reduce_tokens(toks, defs, [])
		(_, ret) = c_preproc.reduce_eval(toks)
		if int(ret) == result:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%s\t\t%r" % (ret, toks))

	test("1+1", 2)
	test("1-1", 0)
	test("1?77:0", 77)
	test("0?0:88", 88)
	test("1+2*3", 7)
	test("1*2+3", 5)

	test("7*m1*3", 90)
	test("m1*3", 36)
	test("defined m1", 1)
	test("defined(m1)", 1)
	test("defined inex", 0)
	test("defined(inex)", 0)
	test("fun7()", 7)

	test("0&&2<3", 0)
	test("(5>1)*6", 6)
	test("1,2,3*9,9", 9)

	test("0x52 > 02", 1)

	# lazy evaluation
	test("defined(foo) && foo > 2", 0)
	test("defined(m1) && m1 > 20", 0)
	test("defined(m1) || m1 > 20", 1)

	# undefined macros -> 0
	test("not_possibly_defined || another", 0)

	test("1+2+((3+4)+5)+6==(6*7)/2==1*-1*-1", 1)


	def add_defs(a, b, c, expected):
		main = bld.path.find_resource('src/main.c')
		bld.env.DEFINES = ['A=%s' % str(a), 'B=%s' % str(b), 'C=%s' % str(c)]
		gruik = c_preproc.c_parser([main.parent])
		gruik.start(main, bld.env)

		if len(gruik.nodes) == 1 and gruik.nodes[0].name == expected:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%r %r %r -> header %s (got %r)" % (a, b, c, expected, gruik.nodes))

	add_defs(1, 1, 1, 'a.h')
	add_defs(1, 1, 0, 'b.h')
	add_defs(1, 0, 1, 'c.h')
	add_defs(1, 0, 0, 'd.h')
	add_defs(0, 1, 1, 'e.h')
	add_defs(0, 1, 0, 'f.h')
	add_defs(0, 0, 1, 'g.h')
	add_defs(0, 0, 0, 'h.h')


	defs = {
		'a' : 'a 0',
		'b' : 'b 1',
		'c' : 'c 1',
		'd' : 'd 0',
		'e' : 'e a || b || c || d'
	}


	def test_pasting():
		main = bld.path.find_resource('src/pasting.c')
		bld.env.DEFINES = ['PREFIX_VAL=', 'SUFFIX_VAL=']
		gruik = c_preproc.c_parser([main.parent])
		gruik.start(main, bld.env)
		if len(gruik.nodes) == 1 and gruik.nodes[0].name == 'a.h':
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "token pasting -> %r (expected a.h)" % gruik.nodes)

	test_pasting()

	def test(x, result):
		toks = c_preproc.tokenize(x)
		c_preproc.reduce_tokens(toks, defs, [])
		(_, ret) = c_preproc.reduce_eval(toks)
		if int(ret) == result:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%s\t\t%r" % (ret, toks))

	test('a||b||c||d', 1)
	test('a&&b&&c&&d', 0)
	test('e', 1)

	def test_rec(defines, expected):
		main = bld.path.find_resource('recursion/a.c')
		bld.env.DEFINES = defines.split()
		gruik = c_preproc.c_parser([main.parent])
		gruik.start(main, bld.env)
		result = "".join([x.name[0] for x in gruik.nodes])
		if result == expected:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%s\t\t%r" % (expected, gruik.nodes))

	test_rec("", "a")
	test_rec("FOO=1", "ac")
	test_rec("BAR=1", "abc")
	test_rec("FOO=1 BAR=1", "ac")

	return
	test("1?1,(0?5:9):3,4", 0) # <- invalid expression



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2012 (ita)

VERSION='0.0.1'
APPNAME='preproc_test'
top = '.'
out = 'build'

from waflib import Utils
from waflib.Logs import pprint

def configure(conf):
	pass

def build(bld):

	bld.failure = 0
	def disp(color, result):
		pprint(color, result)
		if color == 'RED':
			bld.failure=1
	def stop_status(bld):
		if bld.failure:
			bld.fatal('One or several test failed, check the outputs above')
	bld.add_post_fun(stop_status)

	def test_shell(inp, expected):
		ret = Utils.shell_escape(inp)
		if ret == expected:
			color = "GREEN"
		else:
			color = "RED"
		disp(color, "%r -> %r\t\texpected: %r" % (inp, ret, expected))

	test_shell("ls -l", "ls -l")
	test_shell(['ls', '-l', 'a space'], "ls -l 'a space'")


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #!/usr/bin/env python
# encoding: utf-8

import sys
import os.path
from random import Random
random = Random(0) # initialise with seed to have reproductible benches

HELP_USAGE = """Usage: generate_libs.py root libs classes internal external.
    root     - Root directory where to create libs.
    libs     - Number of libraries (libraries only depend on those with smaller numbers)
    classes  - Number of classes per library
    internal - Number of includes per file referring to that same library
    external - Number of includes per file pointing to other libraries

For example:
./genbench.py /tmp/build 200 100 15 5

To try the waf part, do:
waf configure build -p -j5

To test the autotools part, do:
touch README AUTHORS NEWS ChangeLog &&
autoreconf --install --symlink --verbose &&
mkdir autotools-build-dir &&
cd autotools-build-dir &&
../configure --disable-shared CXXFLAGS=-Wall &&
time make -j4 --silent &&
time make -j4 --silent
"""

def lib_name(i):
    return "lib_" + str(i)

def createHeader(name):
    filename = name + ".h"
    handle = open(filename, "w" )

    guard = name + '_h_'
    handle.write ('#ifndef ' + guard + '\n');
    handle.write ('#define ' + guard + '\n\n');

    handle.write ('class ' + name + ' {\n');
    handle.write ('public:\n');
    handle.write ('    ' + name + '();\n');
    handle.write ('    ~' + name + '();\n');
    handle.write ('};\n\n');

    handle.write ('#endif\n');


def createCPP(name, lib_number, classes_per_lib, internal_includes, external_includes):
    filename = name + ".cpp"
    handle = open(filename, "w" )

    header= name + ".h"
    handle.write ('#include "' + header + '"\n');

    includes = random.sample(range(classes_per_lib), internal_includes)
    for i in includes:
        handle.write ('#include "class_' + str(i) + '.h"\n')

    if (lib_number > 0):
        includes = random.sample(range(classes_per_lib), external_includes)
        lib_list = range(lib_number)
        for i in includes:
            libname = 'lib_' + str(random.choice(lib_list))
            handle.write ('#include <' + libname + '/' + 'class_' + str(i) + '.h>\n')

    handle.write ('\n');
    handle.write (name + '::' + name + '() {}\n');
    handle.write (name + '::~' + name  + '() {}\n');


def createSConscript(lib_number, classes):
    handle = open("SConscript", "w");
    handle.write("Import('env')\n")
    handle.write('list = Split("""\n');
    for i in range(classes):
        handle.write('    class_' + str(i) + '.cpp\n')
    handle.write('    """)\n\n')
    handle.write('env.StaticLibrary("lib_' + str(lib_number) + '", list)\n\n')

def createLibCMakeLists(lib_number, classes):
    handle = open("CMakeLists.txt", "w")
    handle.write("""add_library(lib_%s STATIC %s)\n""" % (str(lib_number), ' '.join(('class_%s' % str(i) for i in range(classes)))))

def createLibMakefile(lib_number, classes):
    handle = open("Makefile", "w");
    handle.write ("""COMPILER = g++
INC = -I..
CCFLAGS = -g -Wall $(INC)
ARCHIVE = ar
DEPEND = makedepend
.SUFFIXES: .o .cpp

""")
    handle.write ("lib = lib_" + str(lib_number) + ".a\n")
    handle.write ("src = \\\n")
    for i in range(classes):
        handle.write('class_' + str(i) + '.cpp \\\n')
    handle.write ("""

objects = $(patsubst %.cpp, %.o, $(src))

all: depend $(lib)

$(lib): $(objects)
	$(ARCHIVE) cr $@ $^
	touch $@

.cpp.o:
	$(COMPILER) $(CCFLAGS) -c $<

clean:
	@rm $(objects) $(lib) 2> /dev/null

depend:
	@$(DEPEND) $(INC) $(src)

""")

def createLibJamFile(lib_number, classes):
    handle = open("Jamfile", "w")
    handle.write ("SubDir TOP lib_" + str(lib_number) + " ;\n\n")
    handle.write ("SubDirHdrs $(INCLUDES) ;\n\n")
    handle.write ("Library lib_" + str(lib_number) + " :\n")
    for i in range(classes):
        handle.write('    class_' + str(i) + '.cpp\n')
    handle.write ('    ;\n')

def createVCProjFile(lib_number, classes):
    handle = open("lib_" + str(lib_number) + ".vcproj", "w")
    handle.write("""<?xml version="1.0" encoding="Windows-1252"?>
<VisualStudioProject
	ProjectType="Visual C++"
	Version="7.10"
	Name=""" + '"' + lib_name(lib_number) + '"' + """
	ProjectGUID="{CF495178-8865-4D20-939D-AAA""" + str(lib_number) + """}"
	Keyword="Win32Proj">
	<Platforms>
		<Platform
			Name="Win32"/>
	</Platforms>
	<Configurations>
		<Configuration
			Name="Debug|Win32"
			OutputDirectory="Debug"
			IntermediateDirectory="Debug"
			ConfigurationType="4"
			CharacterSet="2">
			<Tool
				Name="VCCLCompilerTool"
				Optimization="0"
				PreprocessorDefinitions="WIN32;_DEBUG;_LIB"
                AdditionalIncludeDirectories=".."
				MinimalRebuild="TRUE"
				BasicRuntimeChecks="3"
				RuntimeLibrary="5"
				UsePrecompiledHeader="0"
				WarningLevel="3"
				Detect64BitPortabilityProblems="TRUE"
				DebugInformationFormat="4"/>
			<Tool
				Name="VCCustomBuildTool"/>
			<Tool
				Name="VCLibrarianTool"
				OutputFile="$(OutDir)/""" + lib_name(lib_number) + """.lib"/>
		</Configuration>
	</Configurations>
	<References>
	</References>
	<Files>
""")

    for i in range(classes):
        handle.write(r'  <File RelativePath=".\class_' + str(i) + '.cpp"/>\n')

    handle.write("""
	</Files>
	<Globals>
	</Globals>
</VisualStudioProject>
""")

def createLibrary(lib_number, classes, internal_includes, external_includes):
    name = "lib_" + str(lib_number)
    setDir(name)
    for i in range(classes):
        classname = "class_" + str(i)
        createHeader(classname)
        createCPP(classname, lib_number, classes, internal_includes, external_includes)
    createSConscript(lib_number, classes)
    createLibCMakeLists(lib_number, classes)
    createLibMakefile(lib_number, classes)
    createAutotools(lib_number, classes)

    os.chdir("..")

def createCMakeLists(libs):
    handle = open("CMakeLists.txt", "w")
    handle.write("""project('profiling-test')
cmake_minimum_required(VERSION 2.8)

include_directories(${CMAKE_SOURCE_DIR})
""")

    for i in range(libs):
        handle.write("""add_subdirectory(lib_%s)\n""" % str(i))

def createSConstruct(libs):
    handle = open("SConstruct", "w");
    handle.write("""env = Environment(CPPFLAGS=['-Wall'], CPPDEFINES=['LINUX'], CPPPATH=[Dir('#')])\n""")
    handle.write("""env.Decider('timestamp-newer')\n""")
    handle.write("""env.SetOption('implicit_cache', True)\n""")
    handle.write("""env.SourceCode('.', None)\n""")

    for i in range(libs):
        handle.write("""env.SConscript("lib_%s/SConscript", exports=['env'])\n""" % str(i))

def createFullMakefile(libs):
    handle = open("Makefile", "w")

    handle.write('subdirs = \\\n')
    for i in range(libs):
        handle.write('lib_' + str(i) + '\\\n')
    handle.write("""

all: $(subdirs)
	@for i in $(subdirs); do \
    $(MAKE) -C $$i all; done

clean:
	@for i in $(subdirs); do \
	(cd $$i; $(MAKE) clean); done

depend:
	@for i in $(subdirs); do \
	(cd $$i; $(MAKE) depend); done
""")

def createFullJamfile(libs):
    handle = open("Jamfile", "w")
    handle.write ("SubDir TOP ;\n\n")

    for i in range(libs):
        handle.write('SubInclude TOP ' + lib_name(i) + ' ;\n')

    handle = open("Jamrules", "w")
    handle.write('INCLUDES = $(TOP) ;\n')

WT = """#! /usr/bin/env python
# encoding: utf-8

VERSION = '0.0.2'
APPNAME = 'build_bench'
top  = '.'
out  = 'out'

def options(opt):
	opt.load('compiler_cxx')

def configure(conf):
	conf.load('compiler_cxx')

def build(bld):
	for i in range(%d):
		filez = ' '.join(['lib_%%d/class_%%d.cpp' %% (i, j) for j in range(%d)])
		bld.stlib(
			source = filez,
			target = 'lib_%%d' %% i,
			includes = '.', # include the top-level
		)
"""

def createWtop(libs, classes):
	f = open('wscript', 'w')
	f.write(WT % (libs, classes))
	f.close()

def createFullSolution(libs):
    handle = open("solution.sln", "w")
    handle.write("Microsoft Visual Studio Solution File, Format Version 8.00\n")

    for i in range(libs):
        project_name = lib_name(i) + '\\' + lib_name(i) + '.vcproj'
        handle.write('Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "' + lib_name(i) +
                      '", "' + project_name + '", "{CF495178-8865-4D20-939D-AAA' + str(i) + '}"\n')
        handle.write('EndProject\n')

def createAutotoolsTop(libs):
    handle = open("configure.ac", "w")
    handle.write('''\
AC_INIT([bench], [1.0.0])
AC_CONFIG_AUX_DIR([autotools-aux])
AM_INIT_AUTOMAKE([subdir-objects nostdinc no-define tar-pax dist-bzip2])
AM_PROG_LIBTOOL
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
''')

    handle = open("Makefile.am", "w")
    handle.write('''\
AM_CPPFLAGS = -I$(srcdir)
lib_LTLIBRARIES =
''')
    for i in range(libs): handle.write('include lib_%s/Makefile.am\n' % str(i))

def createAutotools(lib_number, classes):

    handle = open("Makefile.am", "w")
    handle.write('''\
lib_LTLIBRARIES += lib%s.la
lib%s_la_SOURCES =''' % (str(lib_number), str(lib_number)))
    for i in range(classes): handle.write(' lib_%s/class_%s.cpp' % (str(lib_number), str(i)))
    handle.write('\n')

def setDir(dir):
    if (not os.path.exists(dir)):
        os.mkdir(dir)
    os.chdir(dir)

def main(argv):
    if len(argv) != 6:
        print(HELP_USAGE)
        return

    root_dir = argv[1]
    libs = int(argv[2])
    classes = int(argv[3])
    internal_includes = int(argv[4])
    external_includes = int(argv[5])

    setDir(root_dir)
    for i in range(libs):
        createLibrary(i, classes, internal_includes, external_includes)

    createSConstruct(libs)
    createCMakeLists(libs)
    createFullMakefile(libs)
    createWtop(libs, classes)
    createAutotoolsTop(libs)

if __name__ == "__main__":
    main( sys.argv )


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #Waf-launcher
This is a simple wrapper for the 
[waf build system](https://waf.io/)

Since many windows users does not have python installed by default, 
the exe file from this project can be included along with the copy of 
waf to wrap waf to install python on demand.

The requirements is only .Net 2.0 whics is either Windows Server 2003 R2 
and up, or Windows Vista and up. There is a good chance it is installed 
in many OEM installs of Windows XP as well

##How to compile
use either waf or monodevelop (wscript and project files is in the repository)

##How to use

Assume we have a repository, myrepo, where wscript and waf already exists.

    myrepo/waf
    myrepo/wscript

now copy waf-launcher/bin/Release/waf.exe to the repository

    myrepo/waf.exe

Linux users can continue to use `./waf`, just like
Windows users can continue to use `python waf`

For Windows users there is now a second way to invoke waf by writing 
either `waf.exe` or simply just `waf`.

When the Windows users does that the following happens:

1. It tries "python waf"
2. If 1 failed it tries "C:\python27\python.exe waf"
3. If 2 failed it ask for permission to install python
4. If pemission is given it tries to install python silently
5. step 1 and 2 it done again
6. If this still fails we exit with an error

Any arguments to `waf.exe` is passed on to `waf`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ﻿
Microsoft Visual Studio Solution File, Format Version 10.00
# Visual Studio 2008
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "waf-launcher", "waf-launcher\waf-launcher.csproj", "{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|x86 = Debug|x86
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}.Debug|x86.ActiveCfg = Debug|x86
		{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}.Debug|x86.Build.0 = Debug|x86
		{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}.Release|x86.ActiveCfg = Release|x86
		{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(MonoDevelopProperties) = preSolution
		StartupItem = waf-launcher\waf-launcher.csproj
		version = 1.0
	EndGlobalSection
EndGlobal
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        using System.Reflection;
using System.Runtime.CompilerServices;

// Information about this assembly is defined by the following attributes. 
// Change them to the values specific to your project.

[assembly: AssemblyTitle("waf-launcher")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// The assembly version has the format "{Major}.{Minor}.{Build}.{Revision}".
// The form "{Major}.{Minor}.*" will automatically update the build and revision,
// and "{Major}.{Minor}.{Build}.*" will update just the revision.

[assembly: AssemblyVersion("1.0.*")]

// The following attributes are used to specify the signing key for the assembly, 
// if desired. See the Mono documentation for more information about signing.

//[assembly: AssemblyDelaySign(false)]
//[assembly: AssemblyKeyFile("")]

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace waflauncher
{
	class MainClass
	{
		public static System.Diagnostics.Process exec(string command,params string[] args) {
			String argstring = String.Join(" ",args);
			System.Diagnostics.ProcessStartInfo startinfo = new System.Diagnostics.ProcessStartInfo(command,argstring);
			startinfo.UseShellExecute = false;
			System.Diagnostics.Process p;
			try {
				p = Process.Start(startinfo);
			} catch (System.ComponentModel.Win32Exception){
				return null;
			}
			p.WaitForExit();
			return p;
		}

		public static int Main (string[] args)
		{
			//I run waf and if not successful we try on-the-fly install of python
			if(!runWaf(args)){
				//but first we ask the user if it's okay to install software on their computer
				if(mayInstall()){
					//I install python and try running waf yet another time
					installPython();
					if(!runWaf(args)){
						//If it still fails something has gone horrible wrong
						Console.WriteLine("Python not fully working");
						return 1;
					}
				} else {
					Console.WriteLine("Not automatically installing Python");
					Console.WriteLine("Please download and install http://www.python.org/ftp/python/2.7.1/python-2.7.1.msi");
					Console.WriteLine("or if you have python installed make sure it is on %PATH%");
					Console.WriteLine("or run this command again and answer yes");
				}
			}
			return 0;
		}

		public static bool mayInstall() {
			Console.Write("Download and install python [Y/n]? ");
			ConsoleKeyInfo a = Console.ReadKey();
			Console.WriteLine();
			switch(a.KeyChar){
			case 'Y':
			case 'y':
			case '\n':
			case '\r':
				return true;
			//If unsure default to not doing it
			default:
				return false;
			}
		}

		public static String getwafDir(){
			//This changes the current directory to the place where the exe exists
			System.Reflection.Assembly a = System.Reflection.Assembly.GetEntryAssembly();
			String path = System.IO.Path.GetDirectoryName(a.Location);
			return path + System.IO.Path.DirectorySeparatorChar;
		}

		public static bool runWaf(string[] args){
			Process p = exec("python", getwafDir() + "waf", String.Join(" ",args));
			//If command could be execeuted return true
			if (p != null) return true;
			//If not try with the direct path to the default installation which is where installPython() will install it to
			//This is done since the %PATH% variable might not be setup to include python

			List<String> versions = new List<String>() { "27", "32", "26", "31", "25", "30" };
			foreach (String v in versions) {
				p = exec("C:\\Python"+v+"\\python.exe", "waf", String.Join(" ",args));
				if (p != null) return true;
			}
			return false;
		}

		public static void installPython(){
			//Make a filename to download python to
			String filename = System.IO.Path.GetTempPath() + Char.ToString(System.IO.Path.DirectorySeparatorChar) + "python-2.7.1.msi";

			System.Net.WebClient web = new System.Net.WebClient();
			Console.WriteLine ("Downloading python 2.7");
			web.DownloadFile("http://www.python.org/ftp/python/2.7.1/python-2.7.1.msi",filename);
			Console.WriteLine ("python2.7 downloaded to " + filename);

			Console.WriteLine ("Installing python");
			//filename must be quoted or else msiexec will fail
			exec("msiexec","/qn","/i","\"" +filename + "\"");
			Console.WriteLine ("Python is now installed");
		}
	}
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="3.5" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>9.0.21022</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{63E79792-BE8F-4AE5-9A99-99B1AE4D96E3}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>waflauncher</RootNamespace>
    <AssemblyName>waf</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <ReleaseVersion>1.0</ReleaseVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug</OutputPath>
    <DefineConstants>DEBUG</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
    <Externalconsole>true</Externalconsole>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <DebugType>none</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Release</OutputPath>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
    <Externalconsole>true</Externalconsole>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Main.cs" />
    <Compile Include="AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <MonoDevelop>
      <Properties>
        <Deployment.LinuxDeployData generateScript="false" />
      </Properties>
    </MonoDevelop>
  </ProjectExtensions>
</Project>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    out = 'waf-launcher/bin/Release'

def configure(config):
	config.load('cs')

def build(bld):
	bld(features='cs',source='waf-launcher/Main.cs', type='exe',gen='waf.exe')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       -----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBGTWwoEBEADYhx0mRt8fzJ0i9bGJctQSh4gyCXC9vHkclmtw8j/3ixFid045
dajTcrjfUyGkErN4YPWiS94Fffv/1ATC+CH9AfYJuS5htQAx3j/0vbdSI2tstzxr
yemtBUCrmMKCGUA1rln3eo4e2/v/qJLxEZ0/PkXCmsFZkucU4BFH20i3lGswGZZn
yoppZsFAsGeZ0JZQnKeJuqvASPuzTPvvfEd1tErvNOtRJ9ObJDSSgKaWZaBSU4x5
ARIjdzETSzstOYL+SgW2wiVoV0h9pAVaXCeL6e4Llr6fp6ptgqxcdlznLaIZhmuA
kmtGT2Cb8MxbgAqr2LWhgSN9VxvAe0yToMoRzj95RuAn054Kgcr2e9/CDDRvK45z
tuaP+579j+cUM0lNGyUxN/ZzMYdMs+xB816zokyV07WrNXbx0u16kzeLl5nP3cdB
H9b/14DCiq85hsAeDyZFAbWT7Cn26WYpHZj8mkFyFmba/jOCisTZW6iFekADarvE
ybctOUUMdrdtsqo53leYCrypWlJta4ixhNaGCMIw0p8/fZCcx5ECj3q5NXt+ZKiZ
5/f70LhsxvlcfNo9m2P06eit+IMV7STSx0CTKZUPyga5KeqGi4EtJZ0KGZWfBXhF
ODQAYpdnIMV+/9fMF0EE9iB0sgL0Me8hUL2KkhTWJ2OwnmE0VAZ5W+JmywARAQAB
tBxXYWYgUHJvamVjdCA8bm9yZXBseUB3YWYuaW8+iQJMBBMBCgA2FiEEjH6y+TsM
RfVzL+XRG6xXHc13IpUFAmTWwoECGwMFCRLMAwADCwkIBRUKCQgLAh4BAheAAAoJ
EBusVx3NdyKVSLsP/00nputckP0s1aC7ZSK+wiHn6umA4/kX4i+i+mQvStajsTZr
sSOs8UxL7kxRMDrKGdNekjxs0JU/MZ5+xL8+1odFxr/GSF343/9qXze301SKnmeS
ev3P/EJ9jkv8q+7LVjwlIkJ09OajvlEdC8Gkm6RuOaUcmO1G7secqCs15GXh+f8n
wS3nM0TGitzpomqE09C7OywUe3HhB+lSKCcOf6/8SFIeuxh5dp9Pcj3gUlpwXevH
IT/V+pMR/YlocpWQFyuMIRMIUCuYaWnHxndoB87ctwsepidQWj5DnbAG7gYGemGa
hhFG0VVHoLrR3tZAJcNxtr37E/9Efb152Ki9Eip+Pm5ov0miTGES1wCuFCmZXGaZ
aJcLBHng/iQme2XkRZ1t1MkywFK6eMvv3IBn3tICw54h5x6A7W2qTNeNvu3NQ7Oe
LRleMUmMFfceAXoCCqzcsdK44yetUutRSrEBf1hO13v34R5/DWagk1MU8y7SLBHA
oeIM1JwI0NEQx4kn1PLXBQbqllVllBakuPdIrk8zmflHd6/mSWcH2M2kDRzucuJN
ro912aDcD1Fp4WUM+CRfsP6tgkaDK1mXL/whtkHomMOUeA0OhGO8hp68PEb7toNR
h95ZBcAyRl7K/77Un80HxPT6rHBHyZOsX745UdivHbcdv/yjRNUywC/82RkiuQIN
BGTWwoEBEADEMA0ny4v9n7fjZPS9m8dypPXKgLUtlJKg9W1X8Wu5DiC+j24dhvoP
1IBVdEsRIRgDEu7VCI6t2OdlX7+4EYP3ltFlZ/tIgd8yhq2Kaim6hnQLPBehq/0K
7EXqvhZ5wxLi9jaW4ltlcmMPpEm/MBv0nv19TwEocQfevioFZwX/sohaRpqS8R26
YVSBNsdmC1arJEXaFtmrXGPXMcCDflbkJ+Sk4okpkBANWHeNftT0LSV/5fov/gbA
nlwm7+UCU+D81JlCH1S1mHGHgHVsQatDSuN1GLdg0Uk85t/qrqpXcjz8SYMfqP1E
TPeq3DaArOtUxKdHR8dDtwZ4zRthhoOcqB9PvVXYq65f9+ad9fmASgYdrHMNccqg
V7VGu761MCD90iB2R7z4Ga3BWfxs+ywDV+wTzgMINRV1HlbNYpCF/vzUlvpBBx9f
ryclk6HhF6qtV3vWb5+r6gXUFunP9VBXqCOeJtbxBxRGImfYuuFen9qdq0aWtxl0
59oO4Sj1vRxMnw6T5di13WgtGSKvI6SKgXf37o+u5+YepQVTOEg84mciS4GKq8KI
CTcMlO0LItU2Y1BD6T+RO6YdGVGU3CLUnq3WsTQ0mBtFNkeIwMNfU5yNynDO6Y2d
O4R9nB7uhrlSudheIj8VIIsMlPgBfIvkErjOAfGXsEWSmsRWRja2YQARAQABiQI8
BBgBCgAmFiEEjH6y+TsMRfVzL+XRG6xXHc13IpUFAmTWwoECGwwFCRLMAwAACgkQ
G6xXHc13IpU58A/+KBmBO5vQ1sWiGczB5i887/v+fvbcbS6fHkLIaxApimVGXklV
Qjp7MGq1K1vnzPc0ovu9aFbxfdNSq6iwhAvB1Q9JFv1b7zhyWiaOIeCM6mYliBZW
GnWEe56GMiYW503vlglUEoYJ/4N/I6r1i5mNMj8D6xqtZfbAOk3bnt9ws7yBOpKe
LfZXWz9q23fXg1PRKmU0E9OFC87tfw/5Wltp7GVFzFdLWchhITTYcO+sjF3O2yNv
3STUQpmdx9NEZSEWKIEd7msnf7BA5FnNPjWZx59FULZWzuWOcJ/foPbktpvKXF34
yT5SV9UIlXjCteZrMd5fxK5u6Tacae5n6fw8eFbS4l/6BOxSGROb+H3ilpqebzvJ
gv8ryQkFh076BevWndJMeq5kxuKv49jVON4SzbtEReLRkcFXFD6mGK+2d02ksW+f
NiGMBQYTXCfY97LROieyQ32hvhAIqacnE7L7F0U6Yz98gVkq57ThHBLNfOu4gqYj
PhpOr/iddN1mVNxzZagx+serw7xQUg8WhoFA9QkWmx7Bn3PGQnrtGEslbL6Lo+pI
VOzahFM1mHIcv3bfbGlN54fgKUoFOElnlSBNZrFS6E74MoNRq2CLzRmku7uNDcVR
IYlK05zLaeHsRNnBKgN7YOW05M4p+0K5OecuXm66Yajezi/+vyMf13tulIU=
=zzf7
-----END PGP PUBLIC KEY BLOCK-----
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      import setuptools
import sys
sys.path.insert(0,'..')
import waflib.Context

with open("../README.md", "r") as fh:
    long_description = fh.read()

setuptools.setup(
    name="waf",
    version=waflib.Context.WAFVERSION,
    author="Thomas Nagy",
    author_email="author@example.com",
    description="Build Framework",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://gitlab.com/ita1024/waf",
    package_dir={'': '../'},
    packages=['waflib', 'waflib/Tools', 'waflib/extras'],
    scripts=['../waf-light'],
    classifiers=[
        "Programming Language :: Python :: 3",
        "Operating System :: OS Independent",
    ],
)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #! /usr/bin/env python

"""
A script that creates signed Python files.
"""

from __future__ import print_function

import os
import argparse
import subprocess


def get_file_encoding(filename):
    """
    Get the file encoding for the file with the given filename
    """

    with open(filename, 'rb') as fp:
        # The encoding is usually specified on the second line
        txt = fp.read().splitlines()[1]
        txt = txt.decode('utf-8')
        if 'encoding' in txt:
            encoding = txt.split()[-1]
        else:
            encoding = 'utf-8' # default

    return str(encoding)


def sign_file_and_get_sig(filename, encoding):
    """
    Sign the file and get the signature
    """

    cmd = 'gpg -bass {}'.format(filename)
    ret = subprocess.Popen(cmd, shell=True).wait()
    print ('-> %r' % cmd)

    if ret:
        raise ValueError('Could not sign the file!')

    with open('{}.asc'.format(filename), 'rb') as fp:
        sig = fp.read()

    try:
        os.remove('{}.asc'.format(filename))
    except OSError:
        pass

    sig = sig.decode(encoding)
    sig = sig.replace('\r', '').replace('\n', '\\n')
    sig = sig.encode(encoding)

    return sig


def sign_original_file(filename, encoding):
    """
    Sign the original file
    """

    sig = sign_file_and_get_sig(filename, encoding)

    with open(filename, 'ab') as outfile:
        outfile.write('#'.encode(encoding))
        outfile.write(sig)
        outfile.write('\n'.encode(encoding))


def create_signed_file(filename, encoding):
    """
    Create a signed file
    """

    sig = sign_file_and_get_sig(filename, encoding)
    name, extension = os.path.splitext(filename)

    new_file_name = '{}_signed{}'.format(name, extension)

    with open(new_file_name, 'wb') as outfile, \
         open(filename, 'rb') as infile:
        txt = infile.read()
        outfile.write(txt)
        outfile.write('#'.encode(encoding))
        outfile.write(sig)
        outfile.write('\n'.encode(encoding))


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('filenames', action='store', nargs='+',
                        help='Files you wish to sign')

    parser.add_argument('--overwrite', action='store_true',
                        dest='overwrite', default=False, 
                        help='Overwrite the original file'
                             ' (sign the original file)')

    opts = parser.parse_args()

    return opts


if __name__ == '__main__':
    opts = parse_args()

    for filename in opts.filenames:
        encoding = get_file_encoding(filename)
        if opts.overwrite:
            sign_original_file(filename, encoding)
        else:
            create_signed_file(filename, encoding)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2014-2015

"""
A simple file for verifying signatures in signed waf files
This script is meant for Python >= 2.6 and the encoding is bytes - latin-1

Distributing detached signatures is boring
"""

import sys, os, re, subprocess

if __name__ == '__main__':
	try:
		infile = sys.argv[1]
	except IndexError:
		infile = 'waf'

	try:
		outfile1 = sys.argv[2]
	except IndexError:
		outfile1 = infile + '-sig'

	try:
		outfile2 = sys.argv[3]
	except IndexError:
		outfile2 = outfile1 + '.asc'

	f1 = open(outfile1, 'wb')
	f2 = open(outfile2, 'wb')
	f = open(infile, 'rb')
	try:
		txt = f.read()

		lastline = txt.decode('latin-1').splitlines()[-1] # just the last line
		if not lastline.startswith('#-----BEGIN PGP SIGNATURE-----'):
			print("ERROR: there is no signature to verify in %r :-/" % infile)
			sys.exit(1)

		sigtext = lastline.replace('\\n', '\n') # convert newlines
		sigtext = sigtext[1:] # omit the '# character'
		sigtext = sigtext.encode('latin-1') # python3

		f2.write(sigtext)
		f1.write(txt[:-len(lastline) - 1]) # one newline character was eaten from splitlines()
	finally:
		f.close()
		f1.close()
		f2.close()

	cmd = 'gpg --verify %s' % outfile2
	print("-> %r" % cmd)
	ret = subprocess.Popen(cmd, shell=True).wait()
	sys.exit(ret)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    @echo off

rem from issue #964

Setlocal EnableDelayedExpansion

rem Check Windows Version
set TOKEN=tokens=2*
ver | findstr /i "5\.0\." > nul
if %ERRORLEVEL% EQU 0 SET TOKEN=tokens=3*
ver | findstr /i "5\.1\." > nul
if %ERRORLEVEL% EQU 0 SET TOKEN=tokens=3*
ver | findstr /i "5\.2\." > nul
if %ERRORLEVEL% EQU 0 SET TOKEN=tokens=3*

rem Start calculating PYTHON and PYTHON_DIR
set PYTHON=
set PYTHON_DIR=

Setlocal EnableDelayedExpansion

set PYTHON_DIR_OK=FALSE
set REGPATH=

for %%i in (3.12 3.11 3.10 3.9 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0 2.7 2.6 2.5) do (
for %%j in (HKCU HKLM) do (
for %%k in (SOFTWARE\Wow6432Node SOFTWARE) do (
for %%l in (Python\PythonCore IronPython) do (
set REG_PYTHON_EXE=python.exe
if "%%l"=="IronPython" (
set REG_PYTHON_EXE=ipy.exe
)

@echo on

set REGPATH=%%j\%%k\%%l\%%i\InstallPath
rem @echo Regpath !REGPATH!
REG QUERY "!REGPATH!" /ve 1>nul 2>nul
if !ERRORLEVEL! equ 0 (
  for /F "%TOKEN% delims=	 " %%A IN ('REG QUERY "!REGPATH!" /ve') do @set REG_PYTHON_DIR=%%B
  if exist !REG_PYTHON_DIR!  (
    IF NOT "!REG_PYTHON_DIR:~-1!"=="\" SET REG_PYTHON_DIR=!REG_PYTHON_DIR!\
    set REG_PYTHON=!REG_PYTHON_DIR!!REG_PYTHON_EXE!
    rem set PYTHON_DIR_OK=TRUE
    if "!PYTHON_DIR_OK!"=="FALSE" (
      set PYTHON_DIR=!REG_PYTHON_DIR!
      set PYTHON=!REG_PYTHON!
      set PYTHON_DIR_OK=TRUE
    )

    rem set PYTHON_DIR_OK=FALSE
    rem @echo Find !REG_PYTHON!
    rem goto finished
  )
)

echo off

)
rem for l
)
rem for k
)
rem for j
)
rem for i



:finished

Endlocal & SET PYTHON_DIR=%PYTHON_DIR% & SET PYTHON=%PYTHON%

if "%PYTHON_DIR%" == "" (
rem @echo No Python dir
set PYTHON=py
goto running
)

rem @echo %PYTHON_DIR%

if "%PYTHON%" == "" (
rem @echo No Python
set PYTHON=py
goto running
)

:running

@echo Using %PYTHON%

"%PYTHON%" -x "%~dp0waf" %*
Endlocal
exit /b %ERRORLEVEL%
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #!/usr/bin/env python
# encoding: latin-1
# Thomas Nagy, 2005-2018
#
"""
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

import os, sys, inspect

VERSION="2.0.27"
REVISION="x"
GIT="x"
INSTALL="x"
C1='x'
C2='x'
C3='x'
cwd = os.getcwd()
join = os.path.join

if sys.hexversion<0x206000f:
	raise ImportError('Python >= 2.6 is required to create the waf file')

WAF='waf'
def b(x):
	return x
if sys.hexversion>0x300000f:
	WAF='waf3'
	def b(x):
		return x.encode()

def err(m):
	print(('\033[91mError: %s\033[0m' % m))
	sys.exit(1)

def unpack_wafdir(dir, src):
	f = open(src,'rb')
	c = 'corrupt archive (%d)'
	while 1:
		line = f.readline()
		if not line: err('run waf-light from a folder containing waflib')
		if line == b('#==>\n'):
			txt = f.readline()
			if not txt: err(c % 1)
			if f.readline() != b('#<==\n'): err(c % 2)
			break
	if not txt: err(c % 3)
	txt = txt[1:-1].replace(b(C1), b('\n')).replace(b(C2), b('\r')).replace(b(C3), b('\x00'))

	import shutil, tarfile
	try: shutil.rmtree(dir)
	except OSError: pass
	try:
		for x in ('Tools', 'extras'):
			os.makedirs(join(dir, 'waflib', x))
	except OSError:
		err("Cannot unpack waf lib into %s\nMove waf in a writable directory" % dir)

	os.chdir(dir)
	tmp = 't.bz2'
	t = open(tmp,'wb')
	try: t.write(txt)
	finally: t.close()

	try:
		t = tarfile.open(tmp)
	except:
		try:
			os.system('bunzip2 t.bz2')
			t = tarfile.open('t')
			tmp = 't'
		except:
			os.chdir(cwd)
			try: shutil.rmtree(dir)
			except OSError: pass
			err("Waf cannot be unpacked, check that bzip2 support is present")

	try:
		for x in t: t.extract(x)
	finally:
		t.close()

	for x in ('Tools', 'extras'):
		os.chmod(join('waflib',x), 493)

	if sys.hexversion<0x300000f:
		sys.path = [join(dir, 'waflib')] + sys.path
		import fixpy2
		fixpy2.fixdir(dir)

	os.remove(tmp)
	os.chdir(cwd)

	try: dir = unicode(dir, 'mbcs')
	except: pass
	try:
		from ctypes import windll
		windll.kernel32.SetFileAttributesW(dir, 2)
	except:
		pass

def test(dir):
	try:
		os.stat(join(dir, 'waflib'))
		return os.path.abspath(dir)
	except OSError:
		pass

def find_lib():
	src = os.path.abspath(inspect.getfile(inspect.getmodule(err)))
	base, name = os.path.split(src)

	#devs use $WAFDIR
	w=test(os.environ.get('WAFDIR', ''))
	if w: return w

	#waf-light
	if name.endswith('waf-light'):
		w = test(base)
		if w: return w
		for dir in sys.path:
			if test(dir):
				return dir
		err('waf-light requires waflib -> export WAFDIR=/folder')

	dirname = '%s-%s-%s' % (WAF, VERSION, REVISION)
	for i in (INSTALL,'/usr','/usr/local','/opt'):
		w = test(i + '/lib/' + dirname)
		if w: return w

	#waf-local
	dir = join(base, (sys.platform != 'win32' and '.' or '') + dirname)
	w = test(dir)
	if w: return w

	#unpack
	unpack_wafdir(dir, src)
	return dir

wafdir = find_lib()
sys.path.insert(0, wafdir)

if __name__ == '__main__':
	#import waflib.extras.compat15#PRELUDE
	from waflib import Scripting
	Scripting.waf_entry_point(cwd, VERSION, wafdir)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #!/usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2005-2018 (ita)

"""
Classes related to the build phase (build, clean, install, step, etc)

The inheritance tree is the following:

"""

import os, sys, errno, re, shutil, stat
try:
	import cPickle
except ImportError:
	import pickle as cPickle
from waflib import Node, Runner, TaskGen, Utils, ConfigSet, Task, Logs, Options, Context, Errors

CACHE_DIR = 'c4che'
"""Name of the cache directory"""

CACHE_SUFFIX = '_cache.py'
"""ConfigSet cache files for variants are written under :py:attr:´waflib.Build.CACHE_DIR´ in the form ´variant_name´_cache.py"""

INSTALL = 1337
"""Positive value '->' install, see :py:attr:`waflib.Build.BuildContext.is_install`"""

UNINSTALL = -1337
"""Negative value '<-' uninstall, see :py:attr:`waflib.Build.BuildContext.is_install`"""

SAVED_ATTRS = 'root node_sigs task_sigs imp_sigs raw_deps node_deps'.split()
"""Build class members to save between the runs; these should be all dicts
except for `root` which represents a :py:class:`waflib.Node.Node` instance
"""

CFG_FILES = 'cfg_files'
"""Files from the build directory to hash before starting the build (``config.h`` written during the configuration)"""

POST_AT_ONCE = 0
"""Post mode: all task generators are posted before any task executed"""

POST_LAZY = 1
"""Post mode: post the task generators group after group, the tasks in the next group are created when the tasks in the previous groups are done"""

PROTOCOL = -1
if sys.platform == 'cli':
	PROTOCOL = 0

class BuildContext(Context.Context):
	'''executes the build'''

	cmd = 'build'
	variant = ''

	def __init__(self, **kw):
		super(BuildContext, self).__init__(**kw)

		self.is_install = 0
		"""Non-zero value when installing or uninstalling file"""

		self.top_dir = kw.get('top_dir', Context.top_dir)
		"""See :py:attr:`waflib.Context.top_dir`; prefer :py:attr:`waflib.Build.BuildContext.srcnode`"""

		self.out_dir = kw.get('out_dir', Context.out_dir)
		"""See :py:attr:`waflib.Context.out_dir`; prefer :py:attr:`waflib.Build.BuildContext.bldnode`"""

		self.run_dir = kw.get('run_dir', Context.run_dir)
		"""See :py:attr:`waflib.Context.run_dir`"""

		self.launch_dir = Context.launch_dir
		"""See :py:attr:`waflib.Context.out_dir`; prefer :py:meth:`waflib.Build.BuildContext.launch_node`"""

		self.post_mode = POST_LAZY
		"""Whether to post the task generators at once or group-by-group (default is group-by-group)"""

		self.cache_dir = kw.get('cache_dir')
		if not self.cache_dir:
			self.cache_dir = os.path.join(self.out_dir, CACHE_DIR)

		self.all_envs = {}
		"""Map names to :py:class:`waflib.ConfigSet.ConfigSet`, the empty string must map to the default environment"""

		# ======================================= #
		# cache variables

		self.node_sigs = {}
		"""Dict mapping build nodes to task identifier (uid), it indicates whether a task created a particular file (persists across builds)"""

		self.task_sigs = {}
		"""Dict mapping task identifiers (uid) to task signatures (persists across builds)"""

		self.imp_sigs = {}
		"""Dict mapping task identifiers (uid) to implicit task dependencies used for scanning targets (persists across builds)"""

		self.node_deps = {}
		"""Dict mapping task identifiers (uid) to node dependencies found by :py:meth:`waflib.Task.Task.scan` (persists across builds)"""

		self.raw_deps = {}
		"""Dict mapping task identifiers (uid) to custom data returned by :py:meth:`waflib.Task.Task.scan` (persists across builds)"""

		self.task_gen_cache_names = {}

		self.jobs = Options.options.jobs
		"""Amount of jobs to run in parallel"""

		self.targets = Options.options.targets
		"""List of targets to build (default: \\*)"""

		self.keep = Options.options.keep
		"""Whether the build should continue past errors"""

		self.progress_bar = Options.options.progress_bar
		"""
		Level of progress status:

		0. normal output
		1. progress bar
		2. IDE output
		3. No output at all
		"""

		# Manual dependencies.
		self.deps_man = Utils.defaultdict(list)
		"""Manual dependencies set by :py:meth:`waflib.Build.BuildContext.add_manual_dependen