       */
                         0x02,          /* bInterfaceSubClass (Abstract
                                         Control Model, CDC section 4.3).   */
                         0x01,          /* bInterfaceProtocol (AT commands,
                                           CDC section 4.4).                */
                         0),            /* iInterface.                      */
  /* Header Functional Descriptor (CDC section 5.2.3).*/
  USB_DESC_BYTE         (5),            /* bLength.                         */
  USB_DESC_BYTE         (0x24),         /* bDescriptorType (CS_INTERFACE).  */
  USB_DESC_BYTE         (0x00),         /* bDescriptorSubtype (Header
                                           Functional Descriptor.           */
  USB_DESC_BCD          (0x0110),       /* bcdCDC.                          */
  /* Call Management Functional Descriptor. */
  USB_DESC_BYTE         (5),            /* bFunctionLength.                 */
  USB_DESC_BYTE         (0x24),         /* bDescriptorType (CS_INTERFACE).  */
  USB_DESC_BYTE         (0x01),         /* bDescriptorSubtype (Call Management
                                           Functional Descriptor).          */
  USB_DESC_BYTE         (0x00),         /* bmCapabilities (D0+D1).          */
  USB_DESC_BYTE         (0x01),         /* bDataInterface.                  */
  /* ACM Functional Descriptor.*/
  USB_DESC_BYTE         (4),            /* bFunctionLength.                 */
  USB_DESC_BYTE         (0x24),         /* bDescriptorType (CS_INTERFACE).  */
  USB_DESC_BYTE         (0x02),         /* bDescriptorSubtype (Abstract
                                           Control Management Descriptor).  */
  USB_DESC_BYTE         (0x02),         /* bmCapabilities.                  */
  /* Union Functional Descriptor.*/
  USB_DESC_BYTE         (5),            /* bFunctionLength.                 */
  USB_DESC_BYTE         (0x24),         /* bDescriptorType (CS_INTERFACE).  */
  USB_DESC_BYTE         (0x06),         /* bDescriptorSubtype (Union
                                           Functional Descriptor).          */
  USB_DESC_BYTE         (0x00),         /* bMasterInterface (Communication
                                           Class Interface).                */
  USB_DESC_BYTE         (0x01),         /* bSlaveInterface0 (Data Class
                                           Interface).                      */
  /* Endpoint 2 Descriptor.*/
  USB_DESC_ENDPOINT     (USBD1_INTERRUPT_REQUEST_EP|0x80,
                         0x03,          /* bmAttributes (Interrupt).        */
                         0x0008,        /* wMaxPacketSize.                  */
                         0xFF),         /* bInterval.                       */
  /* Interface Descriptor.*/
  USB_DESC_INTERFACE    (0x01,          /* bInterfaceNumber.                */
                         0x00,          /* bAlternateSetting.               */
                         0x02,          /* bNumEndpoints.                   */
                         0x0A,          /* bInterfaceClass (Data Class
                                           Interface, CDC section 4.5).     */
                         0x00,          /* bInterfaceSubClass (CDC section
                                           4.6).                            */
                         0x00,          /* bInterfaceProtocol (CDC section
                                           4.7).                            */
                         0x00),         /* iInterface.                      */
  /* Endpoint 3 Descriptor.*/
  USB_DESC_ENDPOINT     (USBD1_DATA_AVAILABLE_EP,       /* bEndpointAddress.*/
                         0x02,          /* bmAttributes (Bulk).             */
                         0x0040,        /* wMaxPacketSize.                  */
                         0x00),         /* bInterval.                       */
  /* Endpoint 1 Descriptor.*/
  USB_DESC_ENDPOINT     (USBD1_DATA_REQUEST_EP|0x80,    /* bEndpointAddress.*/
                         0x02,          /* bmAttributes (Bulk).             */
                         0x0040,        /* wMaxPacketSize.                  */
                         0x00)          /* bInterval.                       */
};

/*
 * Configuration Descriptor wrapper.
 */
static const USBDescriptor vcom_configuration_descriptor = {
  sizeof vcom_configuration_descriptor_data,
  vcom_configuration_descriptor_data
};

/*
 * U.S. English language identifier.
 */
static const uint8_t vcom_string0[] = {
  USB_DESC_BYTE(4),                     /* bLength.                         */
  USB_DESC_BYTE(USB_DESCRIPTOR_STRING), /* bDescriptorType.                 */
  USB_DESC_WORD(0x0409)                 /* wLANGID (U.S. English).          */
};

/*
 * Strings wrappers array. The strings are created dynamically to
 * allow them to be setup with apj_tool
 */
static USBDescriptor vcom_strings[] = {
  {sizeof vcom_string0, vcom_string0},
  {0, NULL}, // manufacturer
  {0, NULL}, // product
  {0, NULL}, // version
};

static uint8_t vcom_buffers[3][2+2*USB_DESC_MAX_STRLEN];

/*
  dynamically allocate a USB descriptor string
 */
static void setup_usb_string(USBDescriptor *desc, const char *str, uint8_t *b)
{
    char str2[USB_DESC_MAX_STRLEN];
    string_substitute(str, str2);
    uint8_t len = strlen(str2);
    desc->ud_size = 2+2*len;
    desc->ud_string = (const uint8_t *)b;
    b[0] = USB_DESC_BYTE(desc->ud_size);
    b[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
    uint8_t i;
    for (i=0; i<len; i++) {
        b[2+i*2] = str2[i];
        b[2+i*2+1] = 0;
    }
}

/*
  dynamically allocate a USB descriptor strings
 */
void setup_usb_strings(void)
{
    setup_usb_string(&vcom_strings[1], HAL_USB_STRING_MANUFACTURER, vcom_buffers[0]);
    setup_usb_string(&vcom_strings[2], HAL_USB_STRING_PRODUCT, vcom_buffers[1]);
    setup_usb_string(&vcom_strings[3], HAL_USB_STRING_SERIAL, vcom_buffers[2]);
}

/*
 * Handles the GET_DESCRIPTOR callback. All required descriptors must be
 * handled here.
 */
static const USBDescriptor *get_descriptor(USBDriver *usbp,
                                           uint8_t dtype,
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
      if (dindex < 4) {
          return &vcom_strings[dindex];
      }
  }
  return NULL;
}

/*
    get the requested usb baudrate - 0 = none
*/
#if HAL_USE_SERIAL_USB
uint32_t get_usb_baud(uint16_t endpoint_id)
{
    if (endpoint_id == 0) {
        uint32_t rate;
        memcpy(&rate, &linecoding.dwDTERate[0], sizeof(rate));
        return rate;
    }
    return 0;
}

/*
    get the requested usb parity.  Valid if get_usb_baud() returned non-zero
*/
uint8_t get_usb_parity(uint16_t endpoint_id)
{
      if (endpoint_id == 0) {
          return linecoding.bParityType;
      }

      return 0;
}
#endif
/**
 * @brief   IN EP1 state.
 */
static USBInEndpointState ep1instate;

/**
 * @brief   OUT EP1 state.
 */
static USBOutEndpointState ep1outstate;

/**
 * @brief   EP1 initialization structure (both IN and OUT).
 */
static const USBEndpointConfig ep1config = {
  USB_EP_MODE_TYPE_BULK,
  NULL,
  sduDataTransmitted,
  sduDataReceived,
  0x0040,
  0x0040,
  &ep1instate,
  &ep1outstate,
  2,
  NULL
};

/**
 * @brief   IN EP2 state.
 */
static USBInEndpointState ep2instate;

/**
 * @brief   EP2 initialization structure (IN only).
 */
static const USBEndpointConfig ep2config = {
  USB_EP_MODE_TYPE_INTR,
  NULL,
  sduInterruptTransmitted,
  NULL,
  0x0010,
  0x0000,
  &ep2instate,
  NULL,
  1,
  NULL
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
  case USB_EVENT_ADDRESS:
    return;
  case USB_EVENT_CONFIGURED:
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);

    chSysUnlockFromISR();
    return;
  case USB_EVENT_RESET:
    /* Falls into.*/
  case USB_EVENT_UNCONFIGURED:
    /* Falls into.*/
  case USB_EVENT_SUSPEND:
    chSysLockFromISR();

    /* Disconnection event on suspend.*/
    sduSuspendHookI(&SDU1);

    chSysUnlockFromISR();
    return;
  case USB_EVENT_WAKEUP:
    chSysLockFromISR();

    /* Disconnection event on suspend.*/
    sduWakeupHookI(&SDU1);

    chSysUnlockFromISR();
    return;
  case USB_EVENT_STALLED:
    return;
  }
  return;
}

/*
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS && usbp->setup[4] == 0x00 && usbp->setup[5] == 0x00) {
    switch (usbp->setup[1]) {
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    }
  }
  return sduRequestsHook(usbp);
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}

/*
 * USB driver configuration.
 */
const USBConfig usbcfg = {
  usb_event,
  get_descriptor,
  requests_hook,
  sof_handler
};

/*
 * Serial over USB driver configuration.
 */
const SerialUSBConfig serusbcfg1 = {
#if STM32_OTG2_IS_OTG1
  &USBD2,
#else
  &USBD1,
#endif
  USBD1_DATA_REQUEST_EP,
  USBD1_DATA_AVAILABLE_EP,
  USBD1_INTERRUPT_REQUEST_EP
};

#endif // HAL_USB_PRODUCT_ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Modified for use in AP_HAL by Andrew Tridgell and Siddharth Bharat Purohit
 */
#pragma once
#include "hwdef.h"

#ifndef HAL_HAVE_DUAL_USB_CDC
#define HAL_HAVE_DUAL_USB_CDC 0
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#if HAL_USE_SERIAL_USB
extern const USBConfig usbcfg;
extern const SerialUSBConfig serusbcfg1;
extern SerialUSBDriver SDU1;
#if HAL_HAVE_DUAL_USB_CDC
extern SerialUSBDriver SDU2;
extern const SerialUSBConfig serusbcfg2;
#endif //HAL_HAVE_DUAL_USB_CDC
uint32_t get_usb_baud(uint16_t endpoint_id);
uint8_t get_usb_parity(uint16_t endpoint_id);
#endif
#define USB_DESC_MAX_STRLEN 100
void setup_usb_strings(void);
void string_substitute(const char *str, char *str2);
bool string_contains(const char *haystack, const char *needle);

#if defined(__cplusplus)
}
#endif
    
/** @} */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Modified for use in AP_HAL by Andrew Tridgell and Siddharth Bharat Purohit
 */
#include "hal.h"
#include "hwdef.h"

#include <stdlib.h>
#include <string.h>

#include "usbcfg.h"

#if defined(HAL_USB_PRODUCT_ID)
/*
  check if one string contains another
 */
bool string_contains(const char *haystack, const char *needle)
{
    uint8_t needle_len = strlen(needle);
    while (*haystack) {
        if (strncmp(haystack, needle, needle_len) == 0) {
            return true;
        }
        haystack++;
    }
    return false;
}

/*
  handle substitution of variables in strings for USB descriptors
 */
void string_substitute(const char *str, char *str2)
{
    const char *board = "%BOARD%";
    const char *serial = "%SERIAL%";
    uint8_t new_len = strlen(str);
    if (string_contains(str, board)) {
        new_len += strlen(HAL_BOARD_NAME) - strlen(board);
    }
    if (string_contains(str, serial)) {
        new_len += 24 - strlen(serial);
    }
    if (new_len+1 > USB_DESC_MAX_STRLEN) {
        strcpy(str2, str);
        return;
    }
    char *p = str2;
    while (*str) {
        char c = *str;
        if (c == '%') {
            if (strncmp(str, board, strlen(board)) == 0) {
                memcpy(p, HAL_BOARD_NAME, strlen(HAL_BOARD_NAME));
                str += 7;
                p += strlen(HAL_BOARD_NAME);
                continue;
            }
            if (strncmp(str, serial, strlen(serial)) == 0) {
                const char *hex = "0123456789ABCDEF";
                const uint8_t *cpu_id = (const uint8_t *)UDID_START;
                uint8_t i;
                for (i=0; i<12; i++) {
                    *p++ = hex[(cpu_id[i]>>4)&0xF];
                    *p++ = hex[cpu_id[i]&0xF];
                }
                str += 8;
                continue;
            }
        }
        *p++ = *str++;
    }
    *p = 0;
}
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Modified for use in AP_HAL by Andrew Tridgell and Siddharth Bharat Purohit
 */
#include "hal.h"
#include "hwdef.h"

#include <stdlib.h>
#include <string.h>

#include "usbcfg.h"

#ifndef ARRAY_SIZE
#define ARRAY_SIZE(_arr) (sizeof(_arr) / sizeof(_arr[0]))
#endif

#if defined(HAL_USB_PRODUCT_ID) && HAL_HAVE_DUAL_USB_CDC
/*
 * Virtual serial ports over USB.
 */
SerialUSBDriver SDU1;
SerialUSBDriver SDU2;

static cdc_linecoding_t linecoding[] = {
  {{0x00, 0x96, 0x00, 0x00},             /* 38400.                           */
  LC_STOP_1, LC_PARITY_NONE, 8},
  {{0x00, 0x96, 0x00, 0x00},             /* 38400.                           */
  LC_STOP_1, LC_PARITY_NONE, 8}
};

static uint8_t ep_index[] = {0, 2};

/*
 * Endpoints.
 */
#define USB_INTERRUPT_REQUEST_EP_A      1
#define USB_DATA_AVAILABLE_EP_A         2
#define USB_DATA_REQUEST_EP_A           2
#define USB_INTERRUPT_REQUEST_EP_B      3
#define USB_DATA_AVAILABLE_EP_B         4
#define USB_DATA_REQUEST_EP_B           4

#define USB_INTERRUPT_REQUEST_SIZE      0x10
#define USB_DATA_SIZE                   0x40

/*
 * Interfaces
 */
#define USB_NUM_INTERFACES              4
#define USB_CDC_CIF_NUM0                0
#define USB_CDC_DIF_NUM0                1
#define USB_CDC_CIF_NUM1                2
#define USB_CDC_DIF_NUM1                3

/*
 * USB Device Descriptor.
 */
static const uint8_t vcom_device_descriptor_data[] = {
  USB_DESC_DEVICE(
    0x0200,                                 /* bcdUSB (1.1).                */
    0xEF,                                   /* bDeviceClass (misc).         */
    0x02,                                   /* bDeviceSubClass (common).    */
    0x01,                                   /* bDeviceProtocol (IAD).       */
    USB_DATA_SIZE,                          /* bMaxPacketSize.              */
    HAL_USB_VENDOR_ID,                      /* idVendor.                    */
    HAL_USB_PRODUCT_ID,                     /* idProduct.                   */
    0x0200,                                 /* bcdDevice.                   */
    1,                                      /* iManufacturer.               */
    2,                                      /* iProduct.                    */
    3,                                      /* iSerialNumber.               */
    1)                                      /* bNumConfigurations.          */
};

/*
 * Device Descriptor wrapper.
 */
static const USBDescriptor vcom_device_descriptor = {
  sizeof vcom_device_descriptor_data,
  vcom_device_descriptor_data
};

#define CDC_IF_DESC_SET_SIZE                                                \
  (USB_DESC_INTERFACE_SIZE + 5 + 5 + 4 + 5 + USB_DESC_ENDPOINT_SIZE +       \
   USB_DESC_INTERFACE_SIZE + (USB_DESC_ENDPOINT_SIZE * 2))

#define CDC_IF_DESC_SET(comIfNum, datIfNum, comInEp, datOutEp, datInEp)     \
  /* Interface Descriptor.*/                                                \
  USB_DESC_INTERFACE(                                                       \
    comIfNum,                               /* bInterfaceNumber.        */  \
    0x00,                                   /* bAlternateSetting.       */  \
    0x01,                                   /* bNumEndpoints.           */  \
    CDC_COMMUNICATION_INTERFACE_CLASS,      /* bInterfaceClass.         */  \
    CDC_ABSTRACT_CONTROL_MODEL,             /* bInterfaceSubClass.      */  \
    0x01,                                   /* bInterfaceProtocol (AT
                                               commands, CDC section
                                               4.4).                    */  \
    0),                                     /* iInterface.              */  \
  /* Header Functional Descriptor (CDC section 5.2.3).*/                    \
  USB_DESC_BYTE     (5),                    /* bLength.                 */  \
  USB_DESC_BYTE     (CDC_CS_INTERFACE),     /* bDescriptorType.         */  \
  USB_DESC_BYTE     (CDC_HEADER),           /* bDescriptorSubtype.      */  \
  USB_DESC_BCD      (0x0110),               /* bcdCDC.                  */  \
  /* Call Management Functional Descriptor.*/                               \
  USB_DESC_BYTE     (5),                    /* bFunctionLength.         */  \
  USB_DESC_BYTE     (CDC_CS_INTERFACE),     /* bDescriptorType.         */  \
  USB_DESC_BYTE     (CDC_CALL_MANAGEMENT),  /* bDescriptorSubtype.      */  \
  USB_DESC_BYTE     (0x03),    /*******/    /* bmCapabilities.          */  \
  USB_DESC_BYTE     (datIfNum),             /* bDataInterface.          */  \
  /* Abstract Control Management Functional Descriptor.*/                   \
  USB_DESC_BYTE     (4),                    /* bFunctionLength.         */  \
  USB_DESC_BYTE     (CDC_CS_INTERFACE),     /* bDescriptorType.         */  \
  USB_DESC_BYTE     (CDC_ABSTRACT_CONTROL_MANAGEMENT),                      \
  USB_DESC_BYTE     (0x02),                 /* bmCapabilities.          */  \
  /* Union Functional Descriptor.*/                                         \
  USB_DESC_BYTE     (5),                    /* bFunctionLength.         */  \
  USB_DESC_BYTE     (CDC_CS_INTERFACE),     /* bDescriptorType.         */  \
  USB_DESC_BYTE     (CDC_UNION),            /* bDescriptorSubtype.      */  \
  USB_DESC_BYTE     (comIfNum),             /* bMasterInterface.        */  \
  USB_DESC_BYTE     (datIfNum),             /* bSlaveInterface.         */  \
  /* Endpoint, Interrupt IN.*/                                              \
  USB_DESC_ENDPOINT (                                                       \
    comInEp,                                                                \
    USB_EP_MODE_TYPE_INTR,                  /* bmAttributes.            */  \
    USB_INTERRUPT_REQUEST_SIZE,             /* wMaxPacketSize.          */  \
    0x01),                                  /* bInterval.               */  \
                                                                            \
  /* CDC Data Interface Descriptor.*/                                       \
  USB_DESC_INTERFACE(                                                       \
    datIfNum,                               /* bInterfaceNumber.        */  \
    0x00,                                   /* bAlternateSetting.       */  \
    0x02,                                   /* bNumEndpoints.           */  \
    CDC_DATA_INTERFACE_CLASS,               /* bInterfaceClass.         */  \
    0x00,                                   /* bInterfaceSubClass (CDC
                                               section 4.6).            */  \
    0x00,                                   /* bInterfaceProtocol (CDC
                                               section 4.7).            */  \
    0x00),                                  /* iInterface.              */  \
  /* Endpoint, Bulk OUT.*/                                                  \
  USB_DESC_ENDPOINT(                                                        \
    datOutEp,                               /* bEndpointAddress.        */  \
    USB_EP_MODE_TYPE_BULK,                  /* bmAttributes.            */  \
    USB_DATA_SIZE,                          /* wMaxPacketSize.          */  \
    0x00),                                  /* bInterval.               */  \
  /* Endpoint, Bulk IN.*/                                                   \
  USB_DESC_ENDPOINT(                                                        \
    datInEp,                                /* bEndpointAddress.        */  \
    USB_EP_MODE_TYPE_BULK,                  /* bmAttributes.            */  \
    USB_DATA_SIZE,                          /* wMaxPacketSize.          */  \
    0x00)                                   /* bInterval.               */

#define IAD_CDC_IF_DESC_SET_SIZE                                            \
  (USB_DESC_INTERFACE_ASSOCIATION_SIZE + CDC_IF_DESC_SET_SIZE)

#define IAD_CDC_IF_DESC_SET(comIfNum, datIfNum, comInEp, datOutEp, datInEp) \
  /* Interface Association Descriptor.*/                                    \
  USB_DESC_INTERFACE_ASSOCIATION(                                           \
    comIfNum,                               /* bFirstInterface.         */  \
    2,                                      /* bInterfaceCount.         */  \
    CDC_COMMUNICATION_INTERFACE_CLASS,      /* bFunctionClass.          */  \
    CDC_ABSTRACT_CONTROL_MODEL,             /* bFunctionSubClass.       */  \
    1,                                      /* bFunctionProcotol.       */  \
    0                                       /* iInterface.              */  \
  ),                                                                        \
  /* CDC Interface descriptor set */                                        \
  CDC_IF_DESC_SET(comIfNum, datIfNum, comInEp, datOutEp, datInEp)

/* Configuration Descriptor tree for a CDC.*/
static const uint8_t vcom_configuration_descriptor_data[] = {
  /* Configuration Descriptor.*/
  USB_DESC_CONFIGURATION(
    USB_DESC_CONFIGURATION_SIZE +
    (IAD_CDC_IF_DESC_SET_SIZE * 2),         /* wTotalLength.                */
    USB_NUM_INTERFACES,                     /* bNumInterfaces.              */
    0x01,                                   /* bConfigurationValue.         */
    0,                                      /* iConfiguration.              */
    0xC0,                                   /* bmAttributes (self powered). */
    50                                      /* bMaxPower (100mA).           */
  ),
  IAD_CDC_IF_DESC_SET(
    USB_CDC_CIF_NUM0,
    USB_CDC_DIF_NUM0,
    USB_ENDPOINT_IN(USB_INTERRUPT_REQUEST_EP_A),
    USB_ENDPOINT_OUT(USB_DATA_AVAILABLE_EP_A),
    USB_ENDPOINT_IN(USB_DATA_REQUEST_EP_A)
  ),
  IAD_CDC_IF_DESC_SET(
    USB_CDC_CIF_NUM1,
    USB_CDC_DIF_NUM1,
    USB_ENDPOINT_IN(USB_INTERRUPT_REQUEST_EP_B),
    USB_ENDPOINT_OUT(USB_DATA_AVAILABLE_EP_B),
    USB_ENDPOINT_IN(USB_DATA_REQUEST_EP_B)
  ),
};


/*
 * Configuration Descriptor wrapper.
 */
static const USBDescriptor vcom_configuration_descriptor = {
  sizeof vcom_configuration_descriptor_data,
  vcom_configuration_descriptor_data
};

/*
 * U.S. English language identifier.
 */
static const uint8_t vcom_string0[] = {
  USB_DESC_BYTE(4),                     /* bLength.                         */
  USB_DESC_BYTE(USB_DESCRIPTOR_STRING), /* bDescriptorType.                 */
  USB_DESC_WORD(0x0409)                 /* wLANGID (U.S. English).          */
};

/*
 * Strings wrappers array. The strings are created dynamically to
 * allow them to be setup with apj_tool
 */
static USBDescriptor vcom_strings[] = {
  {sizeof vcom_string0, vcom_string0},
  {0, NULL}, // manufacturer
  {0, NULL}, // product
  {0, NULL}, // version
};

#define USB_DESC_MAX_STRLEN 100
static uint8_t vcom_buffers[3][2+2*USB_DESC_MAX_STRLEN];

/*
  dynamically allocate a USB descriptor string
 */
static void setup_usb_string(USBDescriptor *desc, const char *str, uint8_t *b)
{
    char str2[USB_DESC_MAX_STRLEN];
    string_substitute(str, str2);
    uint8_t len = strlen(str2);
    desc->ud_size = 2+2*len;
    desc->ud_string = (const uint8_t *)b;
    b[0] = USB_DESC_BYTE(desc->ud_size);
    b[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
    uint8_t i;
    for (i=0; i<len; i++) {
        b[2+i*2] = str2[i];
        b[2+i*2+1] = 0;
    }
}

/*
  dynamically allocate a USB descriptor strings
 */
void setup_usb_strings(void)
{
    setup_usb_string(&vcom_strings[1], HAL_USB_STRING_MANUFACTURER, vcom_buffers[0]);
    setup_usb_string(&vcom_strings[2], HAL_USB_STRING_PRODUCT, vcom_buffers[1]);
    setup_usb_string(&vcom_strings[3], HAL_USB_STRING_SERIAL, vcom_buffers[2]);
}

/*
 * Handles the GET_DESCRIPTOR callback. All required descriptors must be
 * handled here.
 */
static const USBDescriptor *get_descriptor(USBDriver *usbp,
                                           uint8_t dtype,
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
}

/*
    get the requested usb baudrate - 0 = none
*/
#if HAL_USE_SERIAL_USB
uint32_t get_usb_baud(uint16_t endpoint_id)
{
  for (uint8_t i = 0; i < ARRAY_SIZE(linecoding); i++) {
      if (endpoint_id == ep_index[i]) {
          uint32_t rate;
          memcpy(&rate, &linecoding[i].dwDTERate[0], sizeof(rate));
          return rate;
      }
  }
  return 0;
}

/*
    get the requested usb parity.  Valid if get_usb_baud() returned non-zero
*/
uint8_t get_usb_parity(uint16_t endpoint_id)
{
  for (uint8_t i = 0; i < ARRAY_SIZE(linecoding); i++) {
      if (endpoint_id == ep_index[i]) {
          return linecoding[i].bParityType;
      }
  }
  return 0;
}
#endif
/**
 * @brief   IN EP1 state.
 */
static USBInEndpointState ep1instate;

/**
 * @brief   EP1 initialization structure (IN only).
 */
static const USBEndpointConfig ep1config = {
  USB_EP_MODE_TYPE_INTR,
  NULL,
  sduInterruptTransmitted,
  NULL,
  USB_INTERRUPT_REQUEST_SIZE,
  0x0000,
  &ep1instate,
  NULL,
  1,
  NULL
};

/**
 * @brief   IN EP2 state.
 */
static USBInEndpointState ep2instate;

/**
 * @brief   OUT EP2 state.
 */
static USBOutEndpointState ep2outstate;

/**
 * @brief   EP2 initialization structure (both IN and OUT).
 */
static const USBEndpointConfig ep2config = {
  USB_EP_MODE_TYPE_BULK,
  NULL,
  sduDataTransmitted,
  sduDataReceived,
  USB_DATA_SIZE,
  USB_DATA_SIZE,
  &ep2instate,
  &ep2outstate,
  2,
  NULL
};

/**
 * @brief   IN EP3 state.
 */
static USBInEndpointState ep3instate;

/**
 * @brief   EP3 initialization structure (IN only).
 */
static const USBEndpointConfig ep3config = {
  USB_EP_MODE_TYPE_INTR,
  NULL,
  sduInterruptTransmitted,
  NULL,
  USB_INTERRUPT_REQUEST_SIZE,
  0x0000,
  &ep3instate,
  NULL,
  1,
  NULL
};

/**
 * @brief   IN EP4 state.
 */
static USBInEndpointState ep4instate;

/**
 * @brief   OUT EP4 state.
 */
static USBOutEndpointState ep4outstate;

/**
 * @brief   EP4 initialization structure (both IN and OUT).
 */
static const USBEndpointConfig ep4config = {
  USB_EP_MODE_TYPE_BULK,
  NULL,
  sduDataTransmitted,
  sduDataReceived,
  USB_DATA_SIZE,
  USB_DATA_SIZE,
  &ep4instate,
  &ep4outstate,
  2,
  NULL
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;
  extern SerialUSBDriver SDU2;

  switch (event) {
  case USB_EVENT_ADDRESS:
    return;
  case USB_EVENT_CONFIGURED:
    chSysLockFromISR();

    if (usbp->state == USB_ACTIVE) {
      /* Enables the endpoints specified into the configuration.
         Note, this callback is invoked from an ISR so I-Class functions
         must be used.*/
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_B, &ep3config);
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_B, &ep4config);

      /* Resetting the state of the CDC subsystem.*/
      sduConfigureHookI(&SDU1);
      sduConfigureHookI(&SDU2);
    }
    else if (usbp->state == USB_SELECTED) {
      usbDisableEndpointsI(usbp);
    }

    chSysUnlockFromISR();
    return;
  case USB_EVENT_RESET:
    /* Falls into.*/
  case USB_EVENT_UNCONFIGURED:
    /* Falls into.*/
  case USB_EVENT_SUSPEND:
    chSysLockFromISR();

    /* Disconnection event on suspend.*/
    sduSuspendHookI(&SDU1);
    sduSuspendHookI(&SDU2);

    chSysUnlockFromISR();
    return;
  case USB_EVENT_WAKEUP:
    chSysLockFromISR();

    /* Connection event on wakeup.*/
    sduWakeupHookI(&SDU1);
    sduWakeupHookI(&SDU2);

    chSysUnlockFromISR();
    return;
  case USB_EVENT_STALLED:
    return;
  }
  return;
}

/*
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  // process only index=2 commands here - ie the second interface - the first interface is handled via the default handler
  for (uint8_t i = 0; i < ARRAY_SIZE(linecoding); i++) {
    if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS && usbp->setup[4] == ep_index[i] && usbp->setup[5] == 0x00) {
      switch (usbp->setup[1]) {
      case CDC_GET_LINE_CODING:
        usbSetupTransfer(usbp, (uint8_t *)&linecoding[i], sizeof(linecoding[i]), NULL);
        return true;
      case CDC_SET_LINE_CODING:
        usbSetupTransfer(usbp, (uint8_t *)&linecoding[i], sizeof(linecoding[i]), NULL);
        return true;
      case CDC_SET_CONTROL_LINE_STATE:
        /* Nothing to do, there are no control lines.*/
        usbSetupTransfer(usbp, NULL, 0, NULL);
        return true;
      }
    }
  }

  return sduRequestsHook(usbp);
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  sduSOFHookI(&SDU2);
  osalSysUnlockFromISR();
}

/*
 * USB driver configuration.
 */
const USBConfig usbcfg = {
  usb_event,
  get_descriptor,
  requests_hook,
  sof_handler
};

/*
 * Serial over USB driver configuration 1.
 */
const SerialUSBConfig serusbcfg1 = {
  &USBD1,
  USB_DATA_REQUEST_EP_A,
  USB_DATA_AVAILABLE_EP_A,
  USB_INTERRUPT_REQUEST_EP_A
};

/*
 * Serial over USB driver configuration 2.
 */
const SerialUSBConfig serusbcfg2 = {
  &USBD1,
  USB_DATA_REQUEST_EP_B,
  USB_DATA_AVAILABLE_EP_B,
  USB_INTERRUPT_REQUEST_EP_B
};
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
  independent watchdog support
 */

#include "hal.h"
#include "watchdog.h"
#include "stm32_util.h"

#ifndef IWDG_BASE
#if defined(STM32H7)
#define IWDG_BASE             0x58004800
#elif defined(STM32F7) || defined(STM32F4)
#define IWDG_BASE             0x40003000
#elif defined(STM32F1) || defined(STM32F3)
#define IWDG_BASE             0x40003000
#else
#error "Unsupported IWDG MCU config"
#endif
#endif

#ifndef RCC_BASE
#error "Unsupported IWDG RCC MCU config"
#endif

/*
  define for controlling how long the watchdog is set for.
*/
#ifndef STM32_WDG_TIMEOUT_MS
#define STM32_WDG_TIMEOUT_MS 2048
#endif
#if STM32_WDG_TIMEOUT_MS > 4096 || STM32_WDG_TIMEOUT_MS < 20
#error "Watchdog timeout out of range"
#endif

/*
  defines for working out if the reset was from the watchdog
 */
#if defined(STM32H7)
#define WDG_RESET_STATUS (*(__IO uint32_t *)(RCC_BASE + 0xD0))
#define WDG_RESET_CLEAR (1U<<16)
#define WDG_RESET_IS_IWDG (1U<<26)
#define WDG_RESET_IS_SFT (1U<<24)
#elif defined(STM32F7) || defined(STM32F4)
#define WDG_RESET_STATUS (*(__IO uint32_t *)(RCC_BASE + 0x74))
#define WDG_RESET_CLEAR (1U<<24)
#define WDG_RESET_IS_IWDG (1U<<29)
#define WDG_RESET_IS_SFT (1U<<28)
#elif defined(STM32F1) || defined(STM32F3)
#define WDG_RESET_STATUS (*(__IO uint32_t *)(RCC_BASE + 0x24))
#define WDG_RESET_CLEAR (1U<<24)
#define WDG_RESET_IS_IWDG (1U<<29)
#define WDG_RESET_IS_SFT (1U<<28)
#elif defined(STM32G4) || defined(STM32L4) || defined(STM32L4PLUS)
#define WDG_RESET_STATUS (*(__IO uint32_t *)(RCC_BASE + 0x94))
#define WDG_RESET_CLEAR (1U<<23)
#define WDG_RESET_IS_IWDG (1U<<29)
#define WDG_RESET_IS_SFT (1U<<28)
#else
#error "Unsupported IWDG MCU config"
#endif

typedef struct
{
  __IO uint32_t KR;   /*!< IWDG Key register,       Address offset: 0x00 */
  __IO uint32_t PR;   /*!< IWDG Prescaler register, Address offset: 0x04 */
  __IO uint32_t RLR;  /*!< IWDG Reload register,    Address offset: 0x08 */
  __IO uint32_t SR;   /*!< IWDG Status register,    Address offset: 0x0C */
  __IO uint32_t WINR; /*!< IWDG Window register,    Address offset: 0x10 */
} IWDG_Regs;

#define IWDGD (*(IWDG_Regs *)(IWDG_BASE))

static uint32_t reset_reason;
static bool watchdog_enabled;

/*
  setup the watchdog
 */
void stm32_watchdog_init(void)
{
    // setup the watchdog timeout
    // t = 4 * 2^PR * (RLR+1) / 32KHz
    IWDGD.KR = 0x5555;
    IWDGD.PR = 3; // changing this would change the definition of STM32_WDG_TIMEOUT_MS
    IWDGD.RLR = STM32_WDG_TIMEOUT_MS - 1;
    IWDGD.KR = 0xCCCC;
    watchdog_enabled = true;
}

/*
  pat the dog, to prevent a reset. If not called for STM32_WDG_TIMEOUT_MS
  after stm32_watchdog_init() then MCU will reset
 */
void stm32_watchdog_pat(void)
{
    if (watchdog_enabled) {
        IWDGD.KR = 0xAAAA;
    }
}

/*
  save reason code for reset
 */
void stm32_watchdog_save_reason(void)
{
    if (reset_reason == 0) {
        reset_reason = WDG_RESET_STATUS;
    }
}

/*
  clear reason code for reset
 */
void stm32_watchdog_clear_reason(void)
{
    WDG_RESET_STATUS = WDG_RESET_CLEAR;
}

/*
  return true if reboot was from a watchdog reset
 */
bool stm32_was_watchdog_reset(void)
{
    stm32_watchdog_save_reason();
    return (reset_reason & WDG_RESET_IS_IWDG) != 0;
}

/*
  return true if reboot was from a software reset
 */
bool stm32_was_software_reset(void)
{
    stm32_watchdog_save_reason();
    return (reset_reason & WDG_RESET_IS_SFT) != 0;
}

/*
  save persistent watchdog data
 */
void stm32_watchdog_save(const uint32_t *data, uint32_t nwords)
{
    set_rtc_backup(1, data, nwords);
}

/*
  load persistent watchdog data
 */
void stm32_watchdog_load(uint32_t *data, uint32_t nwords)
{
    get_rtc_backup(1, data, nwords);
}
                                                                                                                                                                                                                                                                                                                                                                                                                                 include ../f103-periph/hwdef-bl.inc



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         include ../f103-periph/hwdef-bl.inc



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         include ../f103-periph/hwdef.inc


define HAL_AIRSPEED_BUS_DEFAULT 0

# 10" DLVR sensor by default
define HAL_AIRSPEED_TYPE_DEFAULT 9
define AIRSPEED_MAX_SENSORS 1

define HAL_PERIPH_ENABLE_AIRSPEED
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         include ../f103-periph/hwdef-bl.inc


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          include ../f303-periph/hwdef-bl.inc

# start as DNA

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # hw definition file f303 Matek CAN GPS

# MCU class and specific type
MCU STM32F303 STM32F303xC

FLASH_RESERVE_START_KB 0
FLASH_BOOTLOADER_LOAD_KB 26

# board ID for firmware load
APJ_BOARD_ID 1004

# setup build for a peripheral firmware
env AP_PERIPH 1

# crystal frequency
OSCILLATOR_HZ 8000000

define CH_CFG_ST_FREQUENCY 1000

# assume 256k flash part
FLASH_SIZE_KB 256

STDOUT_SERIAL SD1
STDOUT_BAUDRATE 57600


# order of UARTs
SERIAL_ORDER
define HAL_USE_UART FALSE

PA4 LED_BOOTLOADER OUTPUT LOW
define HAL_LED_ON 1

# USART1
PA9  USART1_TX USART1 SPEED_HIGH NODMA
PA10 USART1_RX USART1 SPEED_HIGH NODMA

# USART2
PA2 USART2_TX USART2 SPEED_HIGH NODMA
PA3 USART2_RX USART2 SPEED_HIGH NODMA

# USART3
PB10 USART3_TX USART3 SPEED_HIGH NODMA
PB11 USART3_RX USART3 SPEED_HIGH NODMA

define HAL_USE_SERIAL TRUE

define STM32_SERIAL_USE_USART1 TRUE
define STM32_SERIAL_USE_USART2 TRUE
define STM32_SERIAL_USE_USART3 FALSE

PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

define HAL_NO_GPIO_IRQ
define CH_CFG_ST_TIMEDELTA 0
#define CH_CFG_USE_DYNAMIC FALSE
define SERIAL_BUFFERS_SIZE 32
define HAL_USE_EMPTY_IO TRUE
define PORT_INT_REQUIRED_STACK 64


define DMA_RESERVE_SIZE 0

MAIN_STACK 0x800
PROCESS_STACK 0x800

# enable CAN support
PA11 CAN_RX CAN
PA12 CAN_TX CAN

# make bl baudrate match debug baudrate for easier debugging
define BOOTLOADER_BAUDRATE 57600

# use a small bootloader timeout
define HAL_BOOTLOADER_TIMEOUT 1000

# use PB6 (normally I2C1_SCL) as "hold in bootloader" pin
# this has a hw pullup, so if we set it as input floating
# and look for it low then we know user has pulled it down and
# want to stay in the bootloader
PB6 STAY_IN_BOOTLOADER INPUT FLOATING

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # hw definition file for processing by chibios_hwdef.py
# mRo Nexus CAN flight controller bootloader
# M10084

# MCU class and specific type
MCU STM32H7xx STM32H743xx

# USB setup
USB_STRING_MANUFACTURER "mRo"

# crystal frequency
OSCILLATOR_HZ 25000000

# board ID for firmware load
APJ_BOARD_ID 1015

FLASH_SIZE_KB 2048

# bootloader is installed at zero offset
FLASH_RESERVE_START_KB 0

# the location where the bootloader will put the firmware
# the H743 has 128k sectors
FLASH_BOOTLOADER_LOAD_KB 128

PB0 LED_BOOTLOADER OUTPUT

# define all 3 to make LED output White.
PA6 LED_ACTIVITY OUTPUT
PA7 LED_ACTIVITY2 OUTPUT
# PB11 LED_ACTIVITY3 OUTPUT

define HAL_LED_ON 0


# order of UARTs (and USB)
SERIAL_ORDER OTG1 UART7

PE7 UART7_RX UART7
PE8 UART7_TX UART7

PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# Add CS pins to ensure they are high in bootloader
PB12 CS_ADIS16470 CS
PA15 CS_ICM40609D CS
PE3  CS_DPS310 CS
PB11 CS_RM3100 CS
PE4  CS_FRAM CS

# This is the reset line for the adis16470. This will force a reset upon reboot.
PB1 nRST_ADIS OUTPUT LOW
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #!/usr/bin/env python
'''
setup for STM32F105xx
'''

# additional build information for ChibiOS
build = {
    "CHIBIOS_STARTUP_MK"  : "os/common/startup/ARMCMx/compilers/GCC/mk/startup_stm32f1xx.mk",
    "CHIBIOS_PLATFORM_MK" : "os/hal/ports/STM32/STM32F1xx/platform.mk",
    "CHPRINTF_USE_FLOAT" : 'no',
    "USE_FPU" : 'no'
    }

pincount = {
    'A': 16,
    'B': 16,
    'C': 16,
    'D': 16,
    'E': 16
}

# MCU parameters
mcu = {
    'RAM_MAP' : [
        (0x20000000, 64, 1), # main memory, DMA safe
    ],

    'EXPECTED_CLOCK' : 72000000,

    'DEFINES' : {
        'STM32F1' : '1',
    }

}

ADC1_map = {
	# format is PIN : ADC1_CHAN
    "PA0"	:	0,
	"PA1"	:	1,
	"PA2"	:	2,
	"PA3"	:	3,
	"PA4"	:	4,
	"PA5"	:	5,
	"PA6"	:	6,
	"PA7"	:	7,
	"PB0"	:	8,
	"PB1"	:	9,
	"PC0"	:	10,
	"PC1"	:	11,
	"PC2"	:	12,
	"PC3"	:	13,
	"PC4"	:	14,
	"PC5"	:	15,
}
    

DMA_Map = {
    # format is (DMA_TABLE, StreamNum, Channel)
    "ADC1"          :   [(1,1,0)],
    "TIM1_CH1"      :   [(1,2,0)],
    "TIM1_CH3"      :   [(1,6,0)],
    "TIM1_CH4"      :   [(1,4,0)],
    "TIM1_UP"       :   [(1,5,0)],
    "TIM2_CH1"      :   [(1,5,0)],
    "TIM2_CH2"      :   [(1,7,0)],
    "TIM2_CH3"      :   [(1,1,0)],
    "TIM2_CH4"      :   [(1,7,0)],
    "TIM2_UP"       :   [(1,2,0)],
    "TIM3_CH1"      :   [(1,6,0)],
    "TIM3_CH3"      :   [(1,2,0)],
    "TIM3_CH4"      :   [(1,3,0)],
    "TIM3_UP"       :   [(1,3,0)],
    "TIM4_CH1"      :   [(1,1,0)],
    "TIM4_CH2"      :   [(1,4,0)],
    "TIM4_CH3"      :   [(1,5,0)],
    "TIM4_UP"       :   [(1,7,0)],
    "TIM5_CH1"      :   [(2,5,0)],
    "TIM5_CH2"      :   [(2,4,0)],
    "TIM5_CH3"      :   [(2,2,0)],
    "TIM5_CH4"      :   [(2,1,0)],
    "TIM5_UP"       :   [(2,2,0)],
    "TIM8_CH1"      :   [(2,3,0)],
    "TIM8_CH2"      :   [(2,5,0)],
    "TIM8_CH3"      :   [(2,1,0)],
    "TIM8_CH4"      :   [(2,2,0)],
    "TIM8_UP"       :   [(2,1,0)],
    "TIM6_UP"       :   [(2,3,0)],
    "TIM7_UP"       :   [(2,4,0)],
    "I2C1_RX"    	:	[(1,7,0)],
    "I2C1_TX"    	:	[(1,6,0)],
    "I2C2_RX"    	:	[(1,5,0)],
    "I2C2_TX"    	:	[(1,4,0)],
    "SPI1_RX"    	:	[(1,2,0)],
    "SPI1_TX"    	:	[(1,3,0)],
    "SPI2_RX"    	:	[(1,4,0)],
    "SPI2_TX"    	:	[(1,5,0)],
    "SPI3_RX"    	:	[(2,1,0)],
    "SPI3_TX"    	:	[(2,2,0)],
    "UART4_RX"    	:	[(2,3,0)],
    "UART4_TX"    	:	[(2,5,0)],
    "USART1_RX"    	:	[(1,5,0)],
    "USART1_TX"    	:	[(1,4,0)],
    "USART2_RX"    	:	[(1,6,0)],
    "USART2_TX"    	:	[(1,7,0)],
    "USART3_RX"    	:	[(1,3,0)],
    "USART3_TX"    	:	[(1,2,0)],
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #!/usr/bin/env python
'''
these tables are generated from the STM32 datasheets for the
STM32F303
'''

# additional build information for ChibiOS
build = {
    "CHIBIOS_STARTUP_MK"  : "os/common/startup/ARMCMx/compilers/GCC/mk/startup_stm32f3xx.mk",
    "CHIBIOS_PLATFORM_MK" : "os/hal/ports/STM32/STM32F3xx/platform.mk"
    }

# MCU parameters
mcu = {
    # ram map, as list of (address, size-kb, flags)
    # flags of 1 means DMA-capable
    # flags of 2 means faster memory for CPU intensive work
    'RAM_MAP' : [
        (0x20000000,  40, 1), # main memory, DMA safe
        (0x10000000,   8, 2), # CCM memory, faster, but not DMA safe
    ],

    'EXPECTED_CLOCK' : 72000000,

    'DEFINES' : {
        'STM32F3' : '1',
    }

}

AltFunction_map = {
	# format is PIN:FUNCTION : AFNUM
	# extracted from tabula-AF-STM32F303cc.csv
	"PA0:COMP1_OUT"     	:	8,
	"PA0:EVENTOUT"      	:	15,
	"PA0:TIM2_CH1_ETR"  	:	1,
	"PA0:TIM8_BKIN"     	:	9,
	"PA0:TIM8_ETR"      	:	10,
	"PA0:TSC_G1_IO1"    	:	3,
	"PA0:USART2_CTS"    	:	7,
	"PA1:EVENTOUT"      	:	15,
	"PA1:RTC_REFIN"     	:	0,
	"PA1:TIM15_CH1N"    	:	9,
	"PA1:TIM2_CH2"      	:	1,
	"PA1:TSC_G1_IO2"    	:	3,
	"PA1:USART2_RTS_DE" 	:	7,
	"PA2:COMP2_OUT"     	:	8,
	"PA2:EVENTOUT"      	:	15,
	"PA2:TIM15_CH1"     	:	9,
	"PA2:TIM2_CH3"      	:	1,
	"PA2:TSC_G1_IO3"    	:	3,
	"PA2:USART2_TX"     	:	7,
	"PA3:EVENTOUT"      	:	15,
	"PA3:TIM15_CH2"     	:	9,
	"PA3:TIM2_CH4"      	:	1,
	"PA3:TSC_G1_IO4"    	:	3,
	"PA3:USART2_RX"     	:	7,
	"PA4:EVENTOUT"      	:	15,
	"PA4:SPI1_NSS"      	:	5,
	"PA4:SPI3_NSS,I2S3_WS"	:	6,
	"PA4:TIM3_CH2"      	:	2,
	"PA4:TSC_G2_IO1"    	:	3,
	"PA4:USART2_CK"     	:	7,
	"PA5:EVENTOUT"      	:	15,
	"PA5:SPI1_SCK"      	:	5,
	"PA5:TIM2_CH1_ETR"  	:	1,
	"PA5:TSC_G2_IO2"    	:	3,
	"PA6:COMP1_OUT"     	:	8,
	"PA6:EVENTOUT"      	:	15,
	"PA6:SPI1_MISO"     	:	5,
	"PA6:TIM16_CH1"     	:	1,
	"PA6:TIM1_BKIN"     	:	6,
	"PA6:TIM3_CH1"      	:	2,
	"PA6:TIM8_BKIN"     	:	4,
	"PA6:TSC_G2_IO3"    	:	3,
	"PA7:COMP2_OUT"     	:	8,
	"PA7:EVENTOUT"      	:	15,
	"PA7:SPI1_MOSI"     	:	5,
	"PA7:TIM17_CH1"     	:	1,
	"PA7:TIM1_CH1N"     	:	6,
	"PA7:TIM3_CH2"      	:	2,
	"PA7:TIM8_CH1N"     	:	4,
	"PA7:TSC_G2_IO4"    	:	3,
	"PA8:COMP3_OUT"     	:	8,
	"PA8:EVENTOUT"      	:	15,
	"PA8:I2C2_SMBA"     	:	4,
	"PA8:I2S2_MCK"      	:	5,
	"PA8:MCO"           	:	0,
	"PA8:TIM1_CH1"      	:	6,
	"PA8:TIM4_ETR"      	:	10,
	"PA8:USART1_CK"     	:	7,
	"PA9:COMP5_OUT"     	:	8,
	"PA9:EVENTOUT"      	:	15,
	"PA9:I2C2_SCL"      	:	4,
	"PA9:I2S3_MCK"      	:	5,
	"PA9:TIM15_BKIN"    	:	9,
	"PA9:TIM1_CH2"      	:	6,
	"PA9:TIM2_CH3"      	:	10,
	"PA9:TSC_G4_IO1"    	:	3,
	"PA9:USART1_TX"     	:	7,
	"PA10:COMP6_OUT"    	:	8,
	"PA10:EVENTOUT"     	:	15,
	"PA10:I2C2_SDA"     	:	4,
	"PA10:TIM17_BKIN"   	:	1,
	"PA10:TIM1_CH3"     	:	6,
	"PA10:TIM2_CH4"     	:	10,
	"PA10:TIM8_BKIN"    	:	11,
	"PA10:TSC_G4_IO2"   	:	3,
	"PA10:USART1_RX"    	:	7,
	"PA11:CAN_RX"       	:	9,
	"PA11:COMP1_OUT"    	:	8,
	"PA11:EVENTOUT"     	:	15,
	"PA11:TIM1_BKIN2"   	:	12,
	"PA11:TIM1_CH1N"    	:	6,
	"PA11:TIM1_CH4"     	:	11,
	"PA11:TIM4_CH1"     	:	10,
	"PA11:USART1_CTS"   	:	7,
	"PA11:USB_DM"       	:	14,
	"PA12:CAN_TX"       	:	9,
	"PA12:COMP2_OUT"    	:	8,
	"PA12:EVENTOUT"     	:	15,
	"PA12:TIM16_CH1"    	:	1,
	"PA12:TIM1_CH2N"    	:	6,
	"PA12:TIM1_ETR"     	:	11,
	"PA12:TIM4_CH2"     	:	10,
	"PA12:USART1_RTS_DE"	:	7,
	"PA12:USB_DP"       	:	14,
	"PA13:EVENTOUT"     	:	15,
	"PA13:IR_OUT"       	:	5,
	"PA13:JTMS-SWDIO"   	:	0,
	"PA13:TIM16_CH1N"   	:	1,
	"PA13:TIM4_CH3"     	:	10,
	"PA13:TSC_G4_IO3"   	:	3,
	"PA13:USART3_CTS"   	:	7,
	"PA14:EVENTOUT"     	:	15,
	"PA14:I2C1_SDA"     	:	4,
	"PA14:JTCK-SWCLK"   	:	0,
	"PA14:TIM1_BKIN"    	:	6,
	"PA14:TIM8_CH2"     	:	5,
	"PA14:TSC_G4_IO4"   	:	3,
	"PA14:USART2_TX"    	:	7,
	"PA15:EVENTOUT"     	:	15,
	"PA15:I2C1_SCL"     	:	4,
	"PA15:JTDI"         	:	0,
	"PA15:SPI1_NSS"     	:	5,
	"PA15:SPI3_NSS,I2S3_WS"	:	6,
	"PA15:TIM1_BKIN"    	:	9,
	"PA15:TIM2_CH1_ETR" 	:	1,
	"PA15:TIM8_CH1"     	:	2,
	"PA15:USART2_RX"    	:	7,
	"PB0:EVENTOUT"      	:	12,
	"PB0:TIM1_CH2N"     	:	6,
	"PB0:TIM3_CH3"      	:	2,
	"PB0:TIM8_CH2N"     	:	4,
	"PB0:TSC_G3_IO2"    	:	3,
	"PB1:COMP4_OUT"     	:	8,
	"PB1:EVENTOUT"      	:	12,
	"PB1:TIM1_CH3N"     	:	6,
	"PB1:TIM3_CH4"      	:	2,
	"PB1:TIM8_CH3N"     	:	4,
	"PB1:TSC_G3_IO3"    	:	3,
	"PB2:EVENTOUT"      	:	12,
	"PB2:TSC_G3_IO4"    	:	3,
	"PB3:EVENTOUT"      	:	12,
	"PB3:JTDO-TRACESWO" 	:	0,
	"PB3:SPI1_SCK"      	:	5,
	"PB3:SPI3_SCK,I2S3_CK"	:	6,
	"PB3:TIM2_CH2"      	:	1,
	"PB3:TIM3_ETR"      	:	10,
	"PB3:TIM4_ETR"      	:	2,
	"PB3:TIM8_CH1N"     	:	4,
	"PB3:TSC_G5_IO1"    	:	3,
	"PB3:USART2_TX"     	:	7,
	"PB4:EVENTOUT"      	:	12,
	"PB4:NJTRST"        	:	0,
	"PB4:SPI1_MISO"     	:	5,
	"PB4:SPI3_MISO,I2S3EXT_SD"	:	6,
	"PB4:TIM16_CH1"     	:	1,
	"PB4:TIM17_BKIN"    	:	10,
	"PB4:TIM3_CH1"      	:	2,
	"PB4:TIM8_CH2N"     	:	4,
	"PB4:TSC_G5_IO2"    	:	3,
	"PB4:USART2_RX"     	:	7,
	"PB5:EVENTOUT"      	:	12,
	"PB5:I2C1_SMBA"     	:	4,
	"PB5:SPI1_MOSI"     	:	5,
	"PB5:SPI3_MOSI,I2S3_SD"	:	6,
	"PB5:TIM16_BKIN"    	:	1,
	"PB5:TIM17_CH1"     	:	10,
	"PB5:TIM3_CH2"      	:	2,
	"PB5:TIM8_CH3N"     	:	3,
	"PB5:USART2_CK"     	:	7,
	"PB6:EVENTOUT"      	:	12,
	"PB6:I2C1_SCL"      	:	4,
	"PB6:TIM16_CH1N"    	:	1,
	"PB6:TIM4_CH1"      	:	2,
	"PB6:TIM8_BKIN2"    	:	10,
	"PB6:TIM8_CH1"      	:	5,
	"PB6:TIM8_ETR"      	:	6,
	"PB6:TSC_G5_IO3"    	:	3,
	"PB6:USART1_TX"     	:	7,
	"PB7:EVENTOUT"      	:	12,
	"PB7:I2C1_SDA"      	:	4,
	"PB7:TIM17_CH1N"    	:	1,
	"PB7:TIM3_CH4"      	:	10,
	"PB7:TIM4_CH2"      	:	2,
	"PB7:TIM8_BKIN"     	:	5,
	"PB7:TSC_G5_IO4"    	:	3,
	"PB7:USART1_RX"     	:	7,
	"PB8:CAN_RX"        	:	9,
	"PB8:COMP1_OUT"     	:	8,
	"PB8:EVENTOUT"      	:	12,
	"PB8:I2C1_SCL"      	:	4,
	"PB8:TIM16_CH1"     	:	1,
	"PB8:TIM1_BKIN"     	:	11,
	"PB8:TIM4_CH3"      	:	2,
	"PB8:TIM8_CH2"      	:	10,
	"PB8:TSC_SYNC"      	:	3,
	"PB9:CAN_TX"        	:	9,
	"PB9:COMP2_OUT"     	:	8,
	"PB9:EVENTOUT"      	:	12,
	"PB9:I2C1_SDA"      	:	4,
	"PB9:IR_OUT"        	:	6,
	"PB9:TIM17_CH1"     	:	1,
	"PB9:TIM4_CH4"      	:	2,
	"PB9:TIM8_CH3"      	:	10,
	"PB10:EVENTOUT"     	:	12,
	"PB10:TIM2_CH3"     	:	1,
	"PB10:TSC_SYNC"     	:	3,
	"PB10:USART3_TX"    	:	7,
	"PB11:EVENTOUT"     	:	12,
	"PB11:TIM2_CH4"     	:	1,
	"PB11:TSC_G6_IO1"   	:	3,
	"PB11:USART3_RX"    	:	7,
	"PB12:EVENTOUT"     	:	12,
	"PB12:I2C2_SMBA"    	:	4,
	"PB12:SPI2_NSS,I2S2_WS"	:	5,
	"PB12:TIM1_BKIN"    	:	6,
	"PB12:TSC_G6_IO2"   	:	3,
	"PB12:USART3_CK"    	:	7,
	"PB13:EVENTOUT"     	:	12,
	"PB13:SPI2_SCK,I2S2_CK"	:	5,
	"PB13:TIM1_CH1N"    	:	6,
	"PB13:TSC_G6_IO3"   	:	3,
	"PB13:USART3_CTS"   	:	7,
	"PB14:EVENTOUT"     	:	12,
	"PB14:SPI2_MISO,I2S2EXT_SD"	:	5,
	"PB14:TIM15_CH1"    	:	1,
	"PB14:TIM1_CH2N"    	:	6,
	"PB14:TSC_G6_IO4"   	:	3,
	"PB14:USART3_RTS_DE"	:	7,
	"PB15:EVENTOUT"     	:	12,
	"PB15:RTC_REFIN"    	:	0,
	"PB15:SPI2_MOSI,I2S2_SD"	:	5,
	"PB15:TIM15_CH1N"   	:	2,
	"PB15:TIM15_CH2"    	:	1,
	"PB15:TIM1_CH3N"    	:	4,
	"PC0:EVENTOUT"      	:	0,
	"PC1:EVENTOUT"      	:	0,
	"PC2:COMP7_OUT"     	:	2,
	"PC2:EVENTOUT"      	:	0,
	"PC3:EVENTOUT"      	:	0,
	"PC3:TIM1_BKIN2"    	:	5,
	"PC4:EVENTOUT"      	:	0,
	"PC4:USART1_TX"     	:	6,
	"PC5:EVENTOUT"      	:	0,
	"PC5:TSC_G3_IO1"    	:	2,
	"PC5:USART1_RX"     	:	6,
	"PC6:COMP6_OUT"     	:	6,
	"PC6:EVENTOUT"      	:	0,
	"PC6:I2S2_MCK"      	:	5,
	"PC6:TIM3_CH1"      	:	1,
	"PC6:TIM8_CH1"      	:	3,
	"PC7:COMP5_OUT"     	:	6,
	"PC7:EVENTOUT"      	:	0,
	"PC7:I2S3_MCK"      	:	5,
	"PC7:TIM3_CH2"      	:	1,
	"PC7:TIM8_CH2"      	:	3,
	"PC8:COMP3_OUT"     	:	6,
	"PC8:EVENTOUT"      	:	0,
	"PC8:TIM3_CH3"      	:	1,
	"PC8:TIM8_CH3"      	:	3,
	"PC9:EVENTOUT"      	:	0,
	"PC9:I2S_CKIN"      	:	4,
	"PC9:TIM3_CH4"      	:	1,
	"PC9:TIM8_BKIN2"    	:	5,
	"PC9:TIM8_CH4"      	:	3,
	"PC10:EVENTOUT"     	:	0,
	"PC10:SPI3_SCK,I2S3_CK"	:	5,
	"PC10:TIM8_CH1N"    	:	3,
	"PC10:UART4_TX"     	:	4,
	"PC10:USART3_TX"    	:	6,
	"PC11:EVENTOUT"     	:	0,
	"PC11:SPI3_MISO,I2S3EXT_SD"	:	5,
	"PC11:TIM8_CH2N"    	:	3,
	"PC11:UART4_RX"     	:	4,
	"PC11:USART3_RX"    	:	6,
	"PC12:EVENTOUT"     	:	0,
	"PC12:SPI3_MOSI,I2S3_SD"	:	5,
	"PC12:TIM8_CH3N"    	:	3,
	"PC12:UART5_TX"     	:	4,
	"PC12:USART3_CK"    	:	6,
	"PC13:TIM1_CH1N"    	:	3,
	"PD0:CAN_RX"        	:	6,
	"PD0:EVENTOUT"      	:	0,
	"PD1:CAN_TX"        	:	6,
	"PD1:EVENTOUT"      	:	0,
	"PD1:TIM8_BKIN2"    	:	5,
	"PD1:TIM8_CH4"      	:	3,
	"PD2:EVENTOUT"      	:	0,
	"PD2:TIM3_ETR"      	:	1,
	"PD2:TIM8_BKIN"     	:	3,
	"PD2:UART5_RX"      	:	4,
	"PD3:EVENTOUT"      	:	0,
	"PD3:TIM2_CH1_ETR"  	:	1,
	"PD3:USART2_CTS"    	:	6,
	"PD4:EVENTOUT"      	:	0,
	"PD4:TIM2_CH2"      	:	1,
	"PD4:USART2_RTS_DE" 	:	6,
	"PD5:EVENTOUT"      	:	0,
	"PD5:USART2_TX"     	:	6,
	"PD6:EVENTOUT"      	:	0,
	"PD6:TIM2_CH4"      	:	1,
	"PD6:USART2_RX"     	:	6,
	"PD7:EVENTOUT"      	:	0,
	"PD7:TIM2_CH3"      	:	1,
	"PD7:USART2_CK"     	:	6,
	"PD8:EVENTOUT"      	:	0,
	"PD8:USART3_TX"     	:	6,
	"PD9:EVENTOUT"      	:	0,
	"PD9:USART3_RX"     	:	6,
	"PD10:EVENTOUT"     	:	0,
	"PD10:USART3_CK"    	:	6,
	"PD11:EVENTOUT"     	:	0,
	"PD11:USART3_CTS"   	:	6,
	"PD12:EVENTOUT"     	:	0,
	"PD12:TIM4_CH1"     	:	1,
	"PD12:TSC_G8_IO1"   	:	2,
	"PD12:USART3_RTS_DE"	:	6,
	"PD13:EVENTOUT"     	:	0,
	"PD13:TIM4_CH2"     	:	1,
	"PD13:TSC_G8_IO2"   	:	2,
	"PD14:EVENTOUT"     	:	0,
	"PD14:TIM4_CH3"     	:	1,
	"PD14:TSC_G8_IO3"   	:	2,
	"PD15:EVENTOUT"     	:	0,
	"PD15:SPI2_NSS"     	:	5,
	"PD15:TIM4_CH4"     	:	1,
	"PD15:TSC_G8_IO4"   	:	2,
	"PE0:EVENTOUT"      	:	1,
	"PE0:TIM16_CH1"     	:	4,
	"PE0:TIM4_ETR"      	:	2,
	"PE0:USART1_TX"     	:	6,
	"PE1:EVENTOUT"      	:	1,
	"PE1:TIM17_CH1"     	:	4,
	"PE1:USART1_RX"     	:	6,
	"PE2:EVENTOUT"      	:	1,
	"PE2:TIM3_CH1"      	:	2,
	"PE2:TRACECK"       	:	0,
	"PE2:TSC_G7_IO1"    	:	3,
	"PE3:EVENTOUT"      	:	1,
	"PE3:TIM3_CH2"      	:	2,
	"PE3:TRACED0"       	:	0,
	"PE3:TSC_G7_IO2"    	:	3,
	"PE4:EVENTOUT"      	:	1,
	"PE4:TIM3_CH3"      	:	2,
	"PE4:TRACED1"       	:	0,
	"PE4:TSC_G7_IO3"    	:	3,
	"PE5:EVENTOUT"      	:	1,
	"PE5:TIM3_CH4"      	:	2,
	"PE5:TRACED2"       	:	0,
	"PE5:TSC_G7_IO4"    	:	3,
	"PE6:EVENTOUT"      	:	1,
	"PE6:TRACED3"       	:	0,
	"PE7:EVENTOUT"      	:	1,
	"PE7:TIM1_ETR"      	:	2,
	"PE8:EVENTOUT"      	:	1,
	"PE8:TIM1_CH1N"     	:	2,
	"PE9:EVENTOUT"      	:	1,
	"PE9:TIM1_CH1"      	:	2,
	"PE10:EVENTOUT"     	:	1,
	"PE10:TIM1_CH2N"    	:	2,
	"PE11:EVENTOUT"     	:	1,
	"PE11:TIM1_CH2"     	:	2,
	"PE12:EVENTOUT"     	:	1,
	"PE12:TIM1_CH3N"    	:	2,
	"PE13:EVENTOUT"     	:	1,
	"PE13:TIM1_CH3"     	:	2,
	"PE14:EVENTOUT"     	:	1,
	"PE14:TIM1_BKIN2"   	:	5,
	"PE14:TIM1_CH4"     	:	2,
	"PE15:EVENTOUT"     	:	1,
	"PE15:TIM1_BKIN"    	:	2,
	"PE15:USART3_RX"    	:	6,
	"PF0:I2C2_SDA"      	:	3,
	"PF0:TIM1_CH3N"     	:	5,
	"PF1:I2C2_SCL"      	:	3,
	"PF2:EVENTOUT"      	:	0,
	"PF4:COMP1_OUT"     	:	1,
	"PF4:EVENTOUT"      	:	0,
	"PF6:EVENTOUT"      	:	0,
	"PF6:I2C2_SCL"      	:	3,
	"PF6:TIM4_CH4"      	:	1,
	"PF6:USART3_RTS_DE" 	:	6,
	"PF9:EVENTOUT"      	:	0,
	"PF9:SPI2_SCK"      	:	4,
	"PF9:TIM15_CH1"     	:	2,
	"PF10:EVENTOUT"     	:	0,
	"PF10:SPI2_SCK"     	:	4,
	"PF10:TIM15_CH2"    	:	2,
}
    
ADC1_map = {
	# format is PIN : ADC1_CHAN
	# extracted from tabula-addfunc-F303.csv
    "PA0"	:	1,
    "PA1"	:	2,
    "PA2"	:	3,
    "PA3"	:	4,
    "PF4"	:	5,
    "PC0"	:	6,
    "PC1"	:	7,
    "PC2"	:	8,
    "PC3"	:	9,
    "PF2"	:	10,
}

DMA_Map = {
	# format is (DMA_TABLE, StreamNum, Channel)
    # extracted from tabula-STM32F303-DMA.csv
    "ADC1"      :   [(1,1,0)],
    "SPI1_RX"   :   [(1,2,0)],
    "SPI1_TX"   :   [(1,3,0)],
    "SPI2_RX"   :   [(1,4,0)],
    "SPI2_TX"   :   [(1,5,0)],
    "USART3_TX" :   [(1,2,0)],
    "USART3_RX" :   [(1,3,0)],
    "USART1_TX" :   [(1,4,0)],
    "USART1_RX" :   [(1,5,0)],
    "USART2_RX" :   [(1,6,0)],
    "USART2_TX" :   [(1,7,0)],
    "I2C2_TX"   :   [(1,4,0)],
    "I2C2_RX"   :   [(1,5,0)],
    "I2C1_TX"   :   [(1,6,0)],
    "I2C1_RX"   :   [(1,7,0)],
    "TIM1_CH1"  :   [(1,2,0)],
    "TIM1_CH2"  :   [(1,3,0)],
    "TIM1_CH4"  :   [(1,4,0)],
    "TIM1_UP"   :   [(1,5,0)],
    "TIM1_CH3"  :   [(1,6,0)],
    "TIM2_CH3"  :   [(1,1,0)],
    "TIM2_UP"   :   [(1,2,0)],
    "TIM2_CH1"  :   [(1,5,0)],
    "TIM2_CH2"  :   [(1,7,0)],
    "TIM2_CH4"  :   [(1,7,0)],
    "TIM3_CH3"  :   [(1,2,0)],
    "TIM3_CH4"  :   [(1,3,0)],
    "TIM3_UP"   :   [(1,3,0)],
    "TIM3_CH1"  :   [(1,6,0)],
    "TIM15_CH1" :   [(1,5,0)],
    "TIM15_UP"  :   [(1,5,0)],
    "TIM16_CH1" :   [(1,3,0)],
    "TIM16_UP"  :   [(1,3,0)],
    "TIM17_CH1" :   [(1,1,0)],
    "TIM17_UP"  :   [(1,1,0)],
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #!/usr/bin/env python
'''
these tables are generated from the STM32 datasheets for the
STM32F40x
'''

# additional build information for ChibiOS
build = {
    "CHIBIOS_STARTUP_MK"  : "os/common/startup/ARMCMx/compilers/GCC/mk/startup_stm32f4xx.mk",
    "CHIBIOS_PLATFORM_MK" : "os/hal/ports/STM32/STM32F4xx/platform.mk"
    }

# MCU parameters
mcu = {
    # ram map, as list of (address, size-kb, flags)
    # flags of 1 means DMA-capable
    # flags of 2 means faster memory for CPU intensive work
    'RAM_MAP' : [
        (0x20000000, 128, 1), # main memory, DMA safe
        (0x10000000,  64, 2), # CCM memory, faster, but not DMA safe
    ],

    'EXPECTED_CLOCK' : 168000000,

    'DEFINES' : {
        'STM32F4' : '1',
    }

}

AltFunction_map = {
	# format is PIN:FUNCTION : AFNUM
	# extracted from tabula-AF-F405.csv
	"PA0:ETH_MII_CRS"   	:	11,
	"PA0:EVENTOUT"      	:	15,
	"PA0:TIM2_CH1"  	:	1,
	"PA0:TIM2_ETR"  	:	1,
	"PA0:TIM5_CH1"      	:	2,
	"PA0:TIM8_ETR"      	:	3,
	"PA0:UART4_TX"      	:	8,
	"PA0:USART2_CTS"    	:	7,
	"PA10:DCMI_D1"      	:	13,
	"PA10:EVENTOUT"     	:	15,
	"PA10:OTG_FS_ID"    	:	10,
	"PA10:TIM1_CH3"     	:	1,
	"PA10:USART1_RX"    	:	7,
	"PA11:CAN1_RX"      	:	9,
	"PA11:EVENTOUT"     	:	15,
	"PA11:OTG_FS_DM"    	:	10,
	"PA11:TIM1_CH4"     	:	1,
	"PA11:USART1_CTS"   	:	7,
	"PA12:CAN1_TX"      	:	9,
	"PA12:EVENTOUT"     	:	15,
	"PA12:OTG_FS_DP"    	:	10,
	"PA12:TIM1_ETR"     	:	1,
	"PA12:USART1_RTS"   	:	7,
	"PA13:EVENTOUT"     	:	15,
	"PA13:JTMS-SWDIO"   	:	0,
	"PA14:EVENTOUT"     	:	15,
	"PA14:JTCK-SWCLK"   	:	0,
	"PA15:EVENTOUT"     	:	15,
	"PA15:JTDI"         	:	0,
	"PA15:SPI1_NSS"     	:	5,
	"PA15:SPI3_NSS"     	:	6,
	"PA15:TIM2_CH1"     	:	1,
	"PA15:TIM2_ETR"     	:	1,
	"PA1:ETH_MII_RX_CLK"	:	11,
	"PA1:ETH_RMII__REF_CLK"	:	11,
	"PA1:EVENTOUT"      	:	15,
	"PA1:TIM2_CH2"      	:	1,
	"PA1:TIM5_CH2"      	:	2,
	"PA1:UART4_RX"      	:	8,
	"PA1:USART2_RTS"    	:	7,
	"PA2:ETH_MDIO"      	:	11,
	"PA2:EVENTOUT"      	:	15,
	"PA2:TIM2_CH3"      	:	1,
	"PA2:TIM5_CH3"      	:	2,
	"PA2:TIM9_CH1"      	:	3,
	"PA2:USART2_TX"     	:	7,
	"PA3:ETH_MII_COL"   	:	11,
	"PA3:EVENTOUT"      	:	15,
	"PA3:OTG_HS_ULPI_D0"	:	10,
	"PA3:TIM2_CH4"      	:	1,
	"PA3:TIM5_CH4"      	:	2,
	"PA3:TIM9_CH2"      	:	3,
	"PA3:USART2_RX"     	:	7,
	"PA4:DCMI_HSYNC"    	:	13,
	"PA4:EVENTOUT"      	:	15,
	"PA4:OTG_HS_SOF"    	:	12,
	"PA4:SPI1_NSS"      	:	5,
	"PA4:SPI3_NSS"		:	6,
	"PA4:I2S3_WS"		:	6,
	"PA4:USART2_CK"     	:	7,
	"PA5:EVENTOUT"      	:	15,
	"PA5:OTG_HS_ULPI_CK"	:	10,
	"PA5:SPI1_SCK"      	:	5,
	"PA5:TIM2_CH1"  	:	1,
	"PA5:TIM2_ETR"  	:	1,
	"PA5:TIM8_CH1N"     	:	3,
	"PA6:DCMI_PIXCK"    	:	13,
	"PA6:EVENTOUT"      	:	15,
	"PA6:SPI1_MISO"     	:	5,
	"PA6:TIM13_CH1"     	:	9,
	"PA6:TIM1_BKIN"     	:	1,
	"PA6:TIM3_CH1"      	:	2,
	"PA6:TIM8_BKIN"     	:	3,
	"PA7:ETH_MII_RX_DV" 	:	11,
	"PA7:ETH_RMII_CRS_DV"	:	11,
	"PA7:EVENTOUT"      	:	15,
	"PA7:SPI1_MOSI"     	:	5,
	"PA7:TIM14_CH1"     	:	9,
	"PA7:TIM1_CH1N"     	:	1,
	"PA7:TIM3_CH2"      	:	2,
	"PA7:TIM8_CH1N"     	:	3,
	"PA8:EVENTOUT"      	:	15,
	"PA8:I2C3_SCL"      	:	4,
	"PA8:MCO1"          	:	0,
	"PA8:OTG_FS_SOF"    	:	10,
	"PA8:TIM1_CH1"      	:	1,
	"PA8:USART1_CK"     	:	7,
	"PA9:DCMI_D0"       	:	13,
	"PA9:EVENTOUT"      	:	15,
	"PA9:I2C3_SMBA"     	:	4,
	"PA9:TIM1_CH2"      	:	1,
	"PA9:USART1_TX"     	:	7,
	"PB0:ETH_MII_RXD2"  	:	11,
	"PB0:EVENTOUT"      	:	15,
	"PB0:OTG_HS_ULPI_D1"	:	10,
	"PB0:TIM1_CH2N"     	:	1,
	"PB0:TIM3_CH3"      	:	2,
	"PB0:TIM8_CH2N"     	:	3,
	"PB10:ETH_MII_RX_ER"	:	11,
	"PB10:EVENTOUT"     	:	15,
	"PB10:I2C2_SCL"     	:	4,
	"PB10:OTG_HS_ULPI_D3"	:	10,
	"PB10:SPI2_SCK"		:	5,
	"PB10:I2S2_CK"		:	5,
	"PB10:TIM2_CH3"     	:	1,
	"PB10:USART3_TX"    	:	7,
	"PB11:ETH_MII_TX_EN"	:	11,
	"PB11:ETH_RMII_TX_EN"	:	11,
	"PB11:EVENTOUT"     	:	15,
	"PB11:I2C2_SDA"     	:	4,
	"PB11:OTG_HS_ULPI_D4"	:	10,
	"PB11:TIM2_CH4"     	:	1,
	"PB11:USART3_RX"    	:	7,
	"PB12:CAN2_RX"      	:	9,
	"PB12:ETH_MII_TXD0" 	:	11,
	"PB12:ETH_RMII_TXD0"	:	11,
	"PB12:EVENTOUT"     	:	15,
	"PB12:I2C2_SMBA"    	:	4,
	"PB12:OTG_HS_ID"    	:	12,
	"PB12:OTG_HS_ULPI_D5"	:	10,
	"PB12:SPI2_NSS"		:	5,
	"PB12:I2S2_WS"		:	5,
	"PB12:TIM1_BKIN"    	:	1,
	"PB12:USART3_CK"    	:	7,
	"PB13:CAN2_TX"      	:	9,
	"PB13:ETH_MII_TXD1" 	:	11,
	"PB13:ETH_RMII_TXD1"	:	11,
	"PB13:EVENTOUT"     	:	15,
	"PB13:OTG_HS_ULPI_D6"	:	10,
	"PB13:SPI2_SCK"		:	5,
	"PB13:I2S2_CK"		:	5,
	"PB13:TIM1_CH1N"    	:	1,
	"PB13:USART3_CTS"   	:	7,
	"PB14:EVENTOUT"     	:	15,
	"PB14:I2S2EXT_SD"   	:	6,
	"PB14:OTG_HS_DM"    	:	12,
	"PB14:SPI2_MISO"    	:	5,
	"PB14:TIM12_CH1"    	:	9,
	"PB14:TIM1_CH2N"    	:	1,
	"PB14:TIM8_CH2N"    	:	3,
	"PB14:USART3_RTS"   	:	7,
	"PB15:RTC_REFIN"    	:	0,
	"PB15:TIM1_CH3N"    	:	1,
	"PB15:TIM8_CH3N"    	:	3,
	"PB15:SPI2_MOSI"    	:	5,
	"PB15:I2S2_SD"    	:	5,
	"PB15:TIM12_CH2"    	:	9,
	"PB15:OTG_HS_DP"    	:	12,
	"PB15:EVENTOUT"    	:	15,
	"PB1:ETH_MII_RXD3"  	:	11,
	"PB1:EVENTOUT"      	:	15,
	"PB1:OTG_HS_ULPI_D2"	:	10,
	"PB1:TIM1_CH3N"     	:	1,
	"PB1:TIM3_CH4"      	:	2,
	"PB1:TIM8_CH3N"     	:	3,
	"PB2:EVENTOUT"      	:	15,
	"PB3:EVENTOUT"      	:	15,
	"PB3:JTDO"          	:	0,
	"PB3:SPI1_SCK"      	:	5,
	"PB3:I2S3_CK"		:	6,
	"PB3:SPI3_SCK"		:	6,
	"PB3:TIM2_CH2"      	:	1,
	"PB3:TRACESWO"      	:	0,
	"PB4:EVENTOUT"      	:	15,
	"PB4:I2S3EXT_SD"    	:	7,
	"PB4:NJTRST"        	:	0,
	"PB4:SPI1_MISO"     	:	5,
	"PB4:SPI3_MISO"     	:	6,
	"PB4:TIM3_CH1"      	:	2,
	"PB5:CAN2_RX"       	:	9,
	"PB5:DCMI_D10"      	:	13,
	"PB5:ETH_PPS_OUT"   	:	11,
	"PB5:EVENTOUT"      	:	15,
	"PB5:I2C1_SMBA"     	:	4,
	"PB5:OTG_HS_ULPI_D7"	:	10,
	"PB5:SPI1_MOSI"     	:	5,
	"PB5:SPI3_MOSI"     	:	6,
	"PB5:I2S3_SD"       	:	6,
	"PB5:TIM3_CH2"      	:	2,
	"PB6:CAN2_TX"       	:	9,
	"PB6:DCMI_D5"       	:	13,
	"PB6:EVENTOUT"      	:	15,
	"PB6:I2C1_SCL"      	:	4,
	"PB6:TIM4_CH1"      	:	2,
	"PB6:USART1_TX"     	:	7,
	"PB7:DCMI_VSYNC"    	:	13,
	"PB7:EVENTOUT"      	:	15,
	"PB7:FSMC_NL"       	:	12,
	"PB7:I2C1_SDA"      	:	4,
	"PB7:TIM4_CH2"      	:	2,
	"PB7:USART1_RX"     	:	7,
	"PB8:CAN1_RX"       	:	9,
	"PB8:DCMI_D6"       	:	13,
	"PB8:ETH_MII_TXD3"  	:	11,
	"PB8:EVENTOUT"      	:	15,
	"PB8:I2C1_SCL"      	:	4,
	"PB8:SDIO_D4"       	:	12,
	"PB8:TIM10_CH1"     	:	3,
	"PB8:TIM4_CH3"      	:	2,
	"PB9:CAN1_TX"       	:	9,
	"PB9:DCMI_D7"       	:	13,
	"PB9:EVENTOUT"      	:	15,
	"PB9:I2C1_SDA"      	:	4,
	"PB9:SDIO_D5"       	:	12,
	"PB9:SPI2_NSS"		:	5,
	"PB9:I2S2_WS"		:	5,
	"PB9:TIM11_CH1"     	:	3,
	"PB9:TIM4_CH4"      	:	2,
	"PC0:EVENTOUT"      	:	15,
	"PC0:OTG_HS_ULPI_STP"	:	10,
	"PC10:DCMI_D8"      	:	13,
	"PC10:EVENTOUT"     	:	15,
	"PC10:I2S3_CK"      	:	6,
	"PC10:SDIO_D2"      	:	12,
	"PC10:SPI3_SCK"     	:	6,
	"PC10:UART4_TX"     	:	8,
	"PC10:USART3_TX"    	:	7,
	"PC11:DCMI_D4"      	:	13,
	"PC11:EVENTOUT"     	:	15,
	"PC11:I2S3EXT_SD"   	:	5,
	"PC11:SDIO_D3"      	:	12,
	"PC11:SPI3_MISO"    	:	6,
	"PC11:UART4_RX"     	:	8,
	"PC11:USART3_RX"    	:	7,
	"PC12:DCMI_D9"      	:	13,
	"PC12:EVENTOUT"     	:	15,
	"PC12:SDIO_CK"      	:	12,
	"PC12:I2S3_SD"		:	6,
	"PC12:SPI3_MOSI"	:	6,
	"PC12:UART5_TX"     	:	8,
	"PC12:USART3_CK"    	:	7,
	"PC13:EVENTOUT"     	:	15,
	"PC14:EVENTOUT"     	:	15,
	"PC15:EVENTOUT"     	:	15,
	"PC1:ETH_MDC"       	:	11,
	"PC1:EVENTOUT"      	:	15,
	"PC2:ETH_MII_TXD2"  	:	11,
	"PC2:EVENTOUT"      	:	15,
	"PC2:I2S2EXT_SD"    	:	6,
	"PC2:OTG_HS_ULPI_DIR"	:	10,
	"PC2:SPI2_MISO"     	:	5,
	"PC3:ETH_MII_TX_CLK"	:	11,
	"PC3:EVENTOUT"      	:	15,
	"PC3:OTG_HS_ULPI_NXT"	:	10,
	"PC3:SPI2_MOSI"		:	5,
	"PC3:II2S2_SD"		:	5,
	"PC4:ETH_MII_RXD0"  	:	11,
	"PC4:ETH_RMII_RXD0" 	:	11,
	"PC4:EVENTOUT"      	:	15,
	"PC5:ETH_MII_RXD1"  	:	11,
	"PC5:ETH_RMII_RXD1" 	:	11,
	"PC5:EVENTOUT"      	:	15,
	"PC6:DCMI_D0"       	:	13,
	"PC6:EVENTOUT"      	:	15,
	"PC6:I2S2_MCK"      	:	5,
	"PC6:SDIO_D6"       	:	12,
	"PC6:TIM3_CH1"      	:	2,
	"PC6:TIM8_CH1"      	:	3,
	"PC6:USART6_TX"     	:	8,
	"PC7:DCMI_D1"       	:	13,
	"PC7:EVENTOUT"      	:	15,
	"PC7:I2S3_MCK"      	:	6,
	"PC7:SDIO_D7"       	:	12,
	"PC7:TIM3_CH2"      	:	2,
	"PC7:TIM8_CH2"      	:	3,
	"PC7:USART6_RX"     	:	8,
	"PC8:DCMI_D2"       	:	13,
	"PC8:EVENTOUT"      	:	15,
	"PC8:SDIO_D0"       	:	12,
	"PC8:TIM3_CH3"      	:	2,
	"PC8:TIM8_CH3"      	:	3,
	"PC8:USART6_CK"     	:	8,
	"PC9:DCMI_D3"       	:	13,
	"PC9:EVENTOUT"      	:	15,
	"PC9:I2C3_SDA"      	:	4,
	"PC9:I2S_CKIN"      	:	5,
	"PC9:MCO2"          	:	0,
	"PC9:SDIO_D1"       	:	12,
	"PC9:TIM3_CH4"      	:	2,
	"PC9:TIM8_CH4"      	:	3,
	"PD0:CAN1_RX"       	:	9,
	"PD0:EVENTOUT"      	:	15,
	"PD0:FSMC_D2"       	:	12,
	"PD10:EVENTOUT"     	:	15,
	"PD10:FSMC_D15"     	:	12,
	"PD10:USART3_CK"    	:	7,
	"PD11:EVENTOUT"     	:	15,
	"PD11:FSMC_A16"     	:	12,
	"PD11:USART3_CTS"   	:	7,
	"PD12:EVENTOUT"     	:	15,
	"PD12:FSMC_A17"     	:	12,
	"PD12:TIM4_CH1"     	:	2,
	"PD12:USART3_RTS"   	:	7,
	"PD13:EVENTOUT"     	:	15,
	"PD13:FSMC_A18"     	:	12,
	"PD13:TIM4_CH2"     	:	2,
	"PD14:EVENTOUT"     	:	15,
	"PD14:FSMC_D0"      	:	12,
	"PD14:TIM4_CH3"     	:	2,
	"PD15:EVENTOUT"     	:	15,
	"PD15:FSMC_D1"      	:	12,
	"PD15:TIM4_CH4"     	:	2,
	"PD1:CAN1_TX"       	:	9,
	"PD1:EVENTOUT"      	:	15,
	"PD1:FSMC_D3"       	:	12,
	"PD2:DCMI_D11"      	:	13,
	"PD2:EVENTOUT"      	:	15,
	"PD2:SDIO_CMD"      	:	12,
	"PD2:TIM3_ETR"      	:	2,
	"PD2:UART5_RX"      	:	8,
	"PD3:EVENTOUT"      	:	15,
	"PD3:FSMC_CLK"      	:	12,
	"PD3:USART2_CTS"    	:	7,
	"PD4:EVENTOUT"      	:	15,
	"PD4:FSMC_NOE"      	:	12,
	"PD4:USART2_RTS"    	:	7,
	"PD5:EVENTOUT"      	:	15,
	"PD5:FSMC_NWE"      	:	12,
	"PD5:USART2_TX"     	:	7,
	"PD6:EVENTOUT"      	:	15,
	"PD6:FSMC_NWAIT"    	:	12,
	"PD6:USART2_RX"     	:	7,
	"PD7:EVENTOUT"      	:	15,
	"PD7:FSMC_NCE2"     	:	12,
	"PD7:FSMC_NE1"      	:	12,
	"PD7:USART2_CK"     	:	7,
	"PD8:EVENTOUT"      	:	15,
	"PD8:FSMC_D13"      	:	12,
	"PD8:USART3_TX"     	:	7,
	"PD9:EVENTOUT"      	:	15,
	"PD9:FSMC_D14"      	:	12,
	"PD9:USART3_RX"     	:	7,
	"PE0:DCMI_D2"       	:	13,
	"PE0:EVENTOUT"      	:	15,
	"PE0:FSMC_NBL0"     	:	12,
	"PE0:TIM4_ETR"      	:	2,
	"PE10:EVENTOUT"     	:	15,
	"PE10:FSMC_D7"      	:	12,
	"PE10:TIM1_CH2N"    	:	1,
	"PE11:EVENTOUT"     	:	15,
	"PE11:FSMC_D8"      	:	12,
	"PE11:TIM1_CH2"     	:	1,
	"PE12:EVENTOUT"     	:	15,
	"PE12:FSMC_D9"      	:	12,
	"PE12:TIM1_CH3N"    	:	1,
	"PE13:EVENTOUT"     	:	15,
	"PE13:FSMC_D10"     	:	12,
	"PE13:TIM1_CH3"     	:	1,
	"PE14:EVENTOUT"     	:	15,
	"PE14:FSMC_D11"     	:	12,
	"PE14:TIM1_CH4"     	:	1,
	"PE15:TIM1_BKIN"    	:	1,
	"PE15:FSMC_D12"    	:	12,
	"PE15:EVENTOUT"    	:	15,
	"PE1:DCMI_D3"       	:	13,
	"PE1:EVENTOUT"      	:	15,
	"PE1:FSMC_NBL1"     	:	12,
	"PE2:ETH_MII_TXD3"  	:	11,
	"PE2:EVENTOUT"      	:	15,
	"PE2:FSMC_A23"      	:	12,
	"PE2:TRACECLK"      	:	0,
	"PE3:EVENTOUT"      	:	15,
	"PE3:FSMC_A19"      	:	12,
	"PE3:TRACED0"       	:	0,
	"PE4:DCMI_D4"       	:	13,
	"PE4:EVENTOUT"      	:	15,
	"PE4:FSMC_A20"      	:	12,
	"PE4:TRACED1"       	:	0,
	"PE5:DCMI_D6"       	:	13,
	"PE5:EVENTOUT"      	:	15,
	"PE5:FSMC_A21"      	:	12,
	"PE5:TIM9_CH1"      	:	3,
	"PE5:TRACED2"       	:	0,
	"PE6:DCMI_D7"       	:	13,
	"PE6:EVENTOUT"      	:	15,
	"PE6:FSMC_A22"      	:	12,
	"PE6:TIM9_CH2"      	:	3,
	"PE6:TRACED3"       	:	0,
	"PE7:EVENTOUT"      	:	15,
	"PE7:FSMC_D4"       	:	12,
	"PE7:TIM1_ETR"      	:	1,
	"PE8:EVENTOUT"      	:	15,
	"PE8:FSMC_D5"       	:	12,
	"PE8:TIM1_CH1N"     	:	1,
	"PE9:EVENTOUT"      	:	15,
	"PE9:FSMC_D6"       	:	12,
	"PE9:TIM1_CH1"      	:	1,
	"PF0:EVENTOUT"      	:	15,
	"PF0:FSMC_A0"       	:	12,
	"PF0:I2C2_SDA"      	:	4,
	"PF10:EVENTOUT"     	:	15,
	"PF10:FSMC_INTR"    	:	12,
	"PF11:DCMI_D12"     	:	13,
	"PF11:EVENTOUT"     	:	15,
	"PF12:EVENTOUT"     	:	15,
	"PF12:FSMC_A6"      	:	12,
	"PF13:EVENTOUT"     	:	15,
	"PF13:FSMC_A7"      	:	12,
	"PF14:EVENTOUT"     	:	15,
	"PF14:FSMC_A8"      	:	12,
	"PF15:EVENTOUT"     	:	15,
	"PF15:FSMC_A9"      	:	12,
	"PF1:EVENTOUT"      	:	15,
	"PF1:FSMC_A1"       	:	12,
	"PF1:I2C2_SCL"      	:	4,
	"PF2:EVENTOUT"      	:	15,
	"PF2:FSMC_A2"       	:	12,
	"PF2:I2C2_SMBA"     	:	4,
	"PF3:EVENTOUT"      	:	15,
	"PF3:FSMC_A3"       	:	12,
	"PF4:EVENTOUT"      	:	15,
	"PF4:FSMC_A4"       	:	12,
	"PF5:EVENTOUT"      	:	15,
	"PF5:FSMC_A5"       	:	12,
	"PF6:EVENTOUT"      	:	15,
	"PF6:FSMC_NIORD"    	:	12,
	"PF6:TIM10_CH1"     	:	3,
	"PF7:EVENTOUT"      	:	15,
	"PF7:FSMC_NREG"     	:	12,
	"PF7:TIM11_CH1"     	:	3,
	"PF8:EVENTOUT"      	:	15,
	"PF8:FSMC_NIOWR"    	:	12,
	"PF8:TIM13_CH1"     	:	9,
	"PF9:EVENTOUT"      	:	15,
	"PF9:FSMC_CD"       	:	12,
	"PF9:TIM14_CH1"     	:	9,
	"PG0:EVENTOUT"      	:	15,
	"PG0:FSMC_A10"      	:	12,
	"PG10:EVENTOUT"     	:	15,
	"PG10:FSMC_NCE4_1"  	:	12,
	"PG10:FSMC_NE3"     	:	12,
	"PG11:ETH_MII_TX_EN"	:	11,
	"PG11:ETH_RMII_TX_EN"	:	11,
	"PG11:EVENTOUT"     	:	15,
	"PG11:FSMC_NCE4_2"  	:	12,
	"PG12:EVENTOUT"     	:	15,
	"PG12:FSMC_NE4"     	:	12,
	"PG12:USART6_RTS"   	:	8,
	"PG13:ETH_MII_TXD0" 	:	11,
	"PG13:ETH_RMII_TXD0"	:	11,
	"PG13:EVENTOUT"     	:	15,
	"PG13:FSMC_A24"     	:	12,
	"PG13:UART6_CTS"    	:	8,
	"PG14:ETH_MII_TXD1" 	:	11,
	"PG14:ETH_RMII_TXD1"	:	11,
	"PG14:EVENTOUT"     	:	15,
	"PG14:FSMC_A25"     	:	12,
	"PG14:USART6_TX"    	:	8,
	"PG15:USART6_CTS"    	:	8,
	"PG15:DCMI_D13"    	:	13,
	"PG15:EVENTOUT"    	:	15,
	"PG1:EVENTOUT"      	:	15,
	"PG1:FSMC_A11"      	:	12,
	"PG2:EVENTOUT"      	:	15,
	"PG2:FSMC_A12"      	:	12,
	"PG3:EVENTOUT"      	:	15,
	"PG3:FSMC_A13"      	:	12,
	"PG4:EVENTOUT"      	:	15,
	"PG4:FSMC_A14"      	:	12,
	"PG5:EVENTOUT"      	:	15,
	"PG5:FSMC_A15"      	:	12,
	"PG6:EVENTOUT"      	:	15,
	"PG6:FSMC_INT2"     	:	12,
	"PG7:EVENTOUT"      	:	15,
	"PG7:FSMC_INT3"     	:	12,
	"PG7:USART6_CK"     	:	8,
	"PG8:ETH_PPS_OUT"   	:	11,
	"PG8:EVENTOUT"      	:	15,
	"PG8:USART6_RTS"    	:	8,
	"PG9:EVENTOUT"      	:	15,
	"PG9:FSMC_NCE3"     	:	12,
	"PG9:FSMC_NE2"      	:	12,
	"PG9:USART6_RX"     	:	8,
	"PH0:EVENTOUT"      	:	15,
	"PH10:DCMI_D1"      	:	13,
	"PH10:EVENTOUT"     	:	15,
	"PH10:TIM5_CH1"     	:	2,
	"PH11:DCMI_D2"      	:	13,
	"PH11:EVENTOUT"     	:	15,
	"PH11:TIM5_CH2"     	:	2,
	"PH12:DCMI_D3"      	:	13,
	"PH12:EVENTOUT"     	:	15,
	"PH12:TIM5_CH3"     	:	2,
	"PH13:CAN1_TX"      	:	9,
	"PH13:EVENTOUT"     	:	15,
	"PH13:TIM8_CH1N"    	:	3,
	"PH14:DCMI_D4"      	:	13,
	"PH14:EVENTOUT"     	:	15,
	"PH14:TIM8_CH2N"    	:	3,
	"PH15:DCMI_D11"     	:	13,
	"PH15:EVENTOUT"     	:	15,
	"PH15:TIM8_CH3N"    	:	3,
	"PH1:EVENTOUT"      	:	15,
	"PH2:ETH_MII_CRS"   	:	11,
	"PH2:EVENTOUT"      	:	15,
	"PH3:ETH_MII_COL"   	:	11,
	"PH3:EVENTOUT"      	:	15,
	"PH4:EVENTOUT"      	:	15,
	"PH4:I2C2_SCL"      	:	4,
	"PH4:OTG_HS_ULPI_NXT"	:	10,
	"PH5:EVENTOUT"      	:	15,
	"PH5:I2C2_SDA"      	:	4,
	"PH6:ETH_MII_RXD2"  	:	11,
	"PH6:EVENTOUT"      	:	15,
	"PH6:I2C2_SMBA"     	:	4,
	"PH6:TIM12_CH1"     	:	9,
	"PH7:ETH_MII_RXD3"  	:	11,
	"PH7:EVENTOUT"      	:	15,
	"PH7:I2C3_SCL"      	:	4,
	"PH8:DCMI_HSYNC"    	:	13,
	"PH8:EVENTOUT"      	:	15,
	"PH8:I2C3_SDA"      	:	4,
	"PH9:DCMI_D0"       	:	13,
	"PH9:EVENTOUT"      	:	15,
	"PH9:I2C3_SMBA"     	:	4,
	"PH9:TIM12_CH2"     	:	9,
}
ADC1_map = {
	# format is PIN : ADC1_CHAN
	# extracted from tabula-addfunc-F405.csv
	"PA0"	:	0,
	"PA1"	:	1,
	"PA2"	:	2,
	"PA3"	:	3,
	"PA4"	:	4,
	"PA5"	:	5,
	"PA6"	:	6,
	"PA7"	:	7,
	"PB0"	:	8,
	"PB1"	:	9,
	"PC0"	:	10,
	"PC1"	:	11,
	"PC2"	:	12,
	"PC3"	:	13,
	"PC4"	:	14,
	"PC5"	:	15,
}

DMA_Map = {
	# format is (DMA_TABLE, StreamNum, Channel)
	# extracted from tabula-STM32F405-DMA.csv
	"ADC1"    	:	[(2,0,0),(2,4,0)],
	"ADC2"    	:	[(2,2,1),(2,3,1)],
	"ADC3"    	:	[(2,0,2),(2,1,2)],
	"CRYP_IN" 	:	[(2,6,2)],
	"CRYP_OUT"	:	[(2,5,2)],
	"DAC1"    	:	[(1,5,7)],
	"DAC2"    	:	[(1,6,7)],
	"DCMI"    	:	[(2,1,1),(2,7,1)],
	"HASH_IN" 	:	[(2,7,2)],
	"I2C1_RX" 	:	[(1,0,1),(1,5,1)],
	"I2C1_TX" 	:	[(1,6,1),(1,7,1)],
	"I2C2_RX" 	:	[(1,2,7),(1,3,7)],
	"I2C2_TX" 	:	[(1,7,7)],
	"I2C3_RX" 	:	[(1,2,3)],
	"I2C3_TX" 	:	[(1,4,3)],
	"I2S2_EXT_RX"	:	[(1,3,3)],
	"I2S2_EXT_TX"	:	[(1,4,2)],
	"I2S3_EXT_RX"	:	[(1,2,2),(1,0,3)],
	"I2S3_EXT_TX"	:	[(1,5,2)],
	"SAI1_A"  	:	[(2,1,0),(2,3,0)],
	"SAI1_B"  	:	[(2,5,0),(2,4,1)],
	"SDIO"    	:	[(2,3,4),(2,6,4)],
	"SPI1_RX" 	:	[(2,0,3),(2,2,3)],
	"SPI1_TX" 	:	[(2,3,3),(2,5,3)],
	"SPI2_RX" 	:	[(1,3,0)],
	"SPI2_TX" 	:	[(1,4,0)],
	"SPI3_RX" 	:	[(1,0,0),(1,2,0)],
	"SPI3_TX" 	:	[(1,5,0),(1,7,0)],
	"SPI4_RX" 	:	[(2,0,4),(2,3,5)],
	"SPI4_TX" 	:	[(2,1,4),(2,4,5)],
	"SPI5_RX" 	:	[(2,3,2),(2,5,7)],
	"SPI5_TX" 	:	[(2,4,2),(2,6,7)],
	"SPI6_RX" 	:	[(2,6,1)],
	"SPI6_TX" 	:	[(2,5,1)],
	"TIM1_CH1"	:	[(2,6,0),(2,1,6),(2,3,6)],
	"TIM1_CH2"	:	[(2,6,0),(2,2,6)],
	"TIM1_CH3"	:	[(2,6,0),(2,6,6)],
	"TIM1_CH4"	:	[(2,4,6)],
	"TIM1_COM"	:	[(2,4,6)],
	"TIM1_TRIG"	:	[(2,0,6),(2,4,6)],
	"TIM1_UP" 	:	[(2,5,6)],
	"TIM2_CH1"	:	[(1,5,3)],
	"TIM2_CH2"	:	[(1,6,3)],
	"TIM2_CH3"	:	[(1,1,3)],
	"TIM2_CH4"	:	[(1,6,3),(1,7,3)],
	"TIM2_UP" 	:	[(1,1,3),(1,7,3)],
	"TIM3_CH1"	:	[(1,4,5)],
	"TIM3_CH2"	:	[(1,5,5)],
	"TIM3_CH3"	:	[(1,7,5)],
	"TIM3_CH4"	:	[(1,2,5)],
	"TIM3_TRIG"	:	[(1,4,5)],
	"TIM3_UP" 	:	[(1,2,5)],
	"TIM4_CH1"	:	[(1,0,2)],
	"TIM4_CH2"	:	[(1,3,2)],
	"TIM4_CH3"	:	[(1,7,2)],
	"TIM4_UP" 	:	[(1,6,2)],
	"TIM5_CH1"	:	[(1,2,6)],
	"TIM5_CH2"	:	[(1,4,6)],
	"TIM5_CH3"	:	[(1,0,6)],
	"TIM5_CH4"	:	[(1,1,6),(1,3,6)],
	"TIM5_TRIG"	:	[(1,1,6),(1,3,6)],
	"TIM5_UP" 	:	[(1,0,6),(1,6,6)],
	"TIM6_UP" 	:	[(1,1,7)],
	"TIM7_UP" 	:	[(1,2,1),(1,4,1)],
	"TIM8_CH1"	:	[(2,2,0),(2,2,7)],
	"TIM8_CH2"	:	[(2,2,0),(2,3,7)],
	"TIM8_CH3"	:	[(2,2,0),(2,4,7)],
	"TIM8_CH4"	:	[(2,7,7)],
	"TIM8_COM"	:	[(2,7,7)],
	"TIM8_TRIG"	:	[(2,7,7)],
	"TIM8_UP" 	:	[(2,1,7)],
	"UART4_RX"	:	[(1,2,4)],
	"UART4_TX"	:	[(1,4,4)],
	"UART5_RX"	:	[(1,0,4)],
	"UART5_TX"	:	[(1,7,4)],
	"UART7_RX"	:	[(1,3,5)],
	"UART7_TX"	:	[(1,1,5)],
	"UART8_RX"	:	[(1,6,5)],
	"UART8_TX"	:	[(1,0,5)],
	"USART1_RX"	:	[(2,2,4),(2,5,4)],
	"USART1_TX"	:	[(2,7,4)],
	"USART2_RX"	:	[(1,5,4)],
	"USART2_TX"	:	[(1,6,4)],
	"USART3_RX"	:	[(1,1,4)],
	"USART3_TX"	:	[(1,3,4),(1,4,7)],
	"USART6_RX"	:	[(2,1,5),(2,2,5)],
	"USART6_TX"	:	[(2,6,5),(2,7,5)],
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #!/usr/bin/env python
'''
these tables are generated from the STM32 datasheets for the
STM32F40x
'''

# additional build information for ChibiOS
build = {
    "CHIBIOS_STARTUP_MK"  : "os/common/startup/ARMCMx/compilers/GCC/mk/startup_stm32f4xx.mk",
    "CHIBIOS_PLATFORM_MK" : "os/hal/ports/STM32/STM32F4xx/platform.mk"
    }

# MCU parameters
mcu = {
    # ram map, as list of (address, size-kb, flags)
    # flags of 1 means DMA-capable
    # flags of 2 means faster memory for CPU intensive work
    'RAM_MAP' : [
        (0x20000000, 128, 1), # main memory, DMA safe
        (0x10000000,  64, 2), # CCM memory, faster, but not DMA safe
    ],

	'EXPECTED_CLOCK' : 168000000,

    'DEFINES' : {
        'STM32F4' : '1',
    }

}

DMA_Map = {
	# format is (DMA_TABLE, StreamNum, Channel)
	# extracted from tabula-STM32F4x7-dma.csv
	"ADC1"    	:	[(2,0,0),(2,4,0)],
	"ADC2"    	:	[(2,2,1),(2,3,1)],
	"ADC3"    	:	[(2,0,2),(2,1,2)],
	"CRYP_IN" 	:	[(2,6,2)],
	"CRYP_OUT"	:	[(2,5,2)],
	"DAC1"    	:	[(1,5,7)],
	"DAC2"    	:	[(1,6,7)],
	"DCMI"    	:	[(2,1,1),(2,7,1)],
	"HASH_IN" 	:	[(2,7,2)],
	"I2C1_RX" 	:	[(1,0,1),(1,5,1)],
	"I2C1_TX" 	:	[(1,6,1),(1,7,1)],
	"I2C2_RX" 	:	[(1,2,7),(1,3,7)],
	"I2C2_TX" 	:	[(1,7,7)],
	"I2C3_RX" 	:	[(1,2,3)],
	"I2C3_TX" 	:	[(1,4,3)],
	"I2S2_EXT_RX"	:	[(1,3,3)],
	"I2S2_EXT_TX"	:	[(1,4,2)],
	"I2S3_EXT_RX"	:	[(1,2,2),(1,0,3)],
	"I2S3_EXT_TX"	:	[(1,5,2)],
	"SDIO"    	:	[(2,3,4),(2,6,4)],
	"SPI1_RX" 	:	[(2,0,3),(2,2,3)],
	"SPI1_TX" 	:	[(2,3,3),(2,5,3)],
	"SPI2_RX" 	:	[(1,3,0)],
	"SPI2_TX" 	:	[(1,4,0)],
	"SPI3_RX" 	:	[(1,0,0),(1,2,0)],
	"SPI3_TX" 	:	[(1,5,0),(1,7,0)],
	"TIM1_CH1"	:	[(2,6,0),(2,1,6),(2,3,6)],
	"TIM1_CH2"	:	[(2,6,0),(2,2,6)],
	"TIM1_CH3"	:	[(2,6,0),(2,6,6)],
	"TIM1_CH4"	:	[(2,4,6)],
	"TIM1_COM"	:	[(2,4,6)],
	"TIM1_TRIG"	:	[(2,0,6),(2,4,6)],
	"TIM1_UP" 	:	[(2,5,6)],
	"TIM2_CH1"	:	[(1,5,3)],
	"TIM2_CH2"	:	[(1,6,3)],
	"TIM2_CH3"	:	[(1,1,3)],
	"TIM2_CH4"	:	[(1,6,3),(1,7,3)],
	"TIM2_UP" 	:	[(1,1,3),(1,7,3)],
	"TIM3_CH1"	:	[(1,4,5)],
	"TIM3_CH2"	:	[(1,5,5)],
	"TIM3_CH3"	:	[(1,7,5)],
	"TIM3_CH4"	:	[(1,2,5)],
	"TIM3_TRIG"	:	[(1,4,5)],
	"TIM3_UP" 	:	[(1,2,5)],
	"TIM4_CH1"	:	[(1,0,2)],
	"TIM4_CH2"	:	[(1,3,2)],
	"TIM4_CH3"	:	[(1,7,2)],
	"TIM4_UP" 	:	[(1,6,2)],
	"TIM5_CH1"	:	[(1,2,6)],
	"TIM5_CH2"	:	[(1,4,6)],
	"TIM5_CH3"	:	[(1,0,6)],
	"TIM5_CH4"	:	[(1,1,6),(1,3,6)],
	"TIM5_TRIG"	:	[(1,1,6),(1,3,6)],
	"TIM5_UP" 	:	[(1,0,6),(1,6,6)],
	"TIM6_UP" 	:	[(1,1,7)],
	"TIM7_UP" 	:	[(1,2,1),(1,4,1)],
	"TIM8_CH1"	:	[(2,2,0),(2,2,7)],
	"TIM8_CH2"	:	[(2,2,0),(2,3,7)],
	"TIM8_CH3"	:	[(2,2,0),(2,4,7)],
	"TIM8_CH4"	:	[(2,7,7)],
	"TIM8_COM"	:	[(2,7,7)],
	"TIM8_TRIG"	:	[(2,7,7)],
	"TIM8_UP" 	:	[(2,1,7)],
	"UART4_RX"	:	[(1,2,4)],
	"UART4_TX"	:	[(1,4,4)],
	"UART5_RX"	:	[(1,0,4)],
	"UART5_TX"	:	[(1,7,4)],
	"USART1_RX"	:	[(2,2,4),(2,5,4)],
	"USART1_TX"	:	[(2,7,4)],
	"USART2_RX"	:	[(1,5,4)],
	"USART2_TX"	:	[(1,6,4)],
	"USART3_RX"	:	[(1,1,4)],
	"USART3_TX"	:	[(1,3,4),(1,4,7)],
	"USART6_RX"	:	[(2,1,5),(2,2,5)],
	"USART6_TX"	:	[(2,6,5),(2,7,5)],
}

AltFunction_map = {
	# format is PIN:FUNCTION : AFNUM
	# extracted from tabula-AF-F427.csv
	"PA0:ETH_MII_CRS"   	:	11,
	"PA0:EVENTOUT"      	:	15,
	"PA0:TIM2_CH1"      	:	1,
	"PA0:TIM2_ETR"      	:	1,
	"PA0:TIM5_CH1"      	:	2,
	"PA0:TIM8_ETR"      	:	3,
	"PA0:UART4_TX"      	:	8,
	"PA0:USART2_CTS"    	:	7,
	"PA10:DCMI_D1"      	:	13,
	"PA10:EVENTOUT"     	:	15,
	"PA10:OTG_FS_ID"    	:	10,
	"PA10:TIM1_CH3"     	:	1,
	"PA10:USART1_RX"    	:	7,
	"PA11:CAN1_RX"      	:	9,
	"PA11:EVENTOUT"     	:	15,
	"PA11:LCD_R4"       	:	14,
	"PA11:OTG_FS_DM"    	:	10,
	"PA11:TIM1_CH4"     	:	1,
	"PA11:USART1_CTS"   	:	7,
	"PA12:CAN1_TX"      	:	9,
	"PA12:EVENTOUT"     	:	15,
	"PA12:LCD_R5"       	:	14,
	"PA12:OTG_FS_DP"    	:	10,
	"PA12:TIM1_ETR"     	:	1,
	"PA12:USART1_RTS"   	:	7,
	"PA13:EVENTOUT"     	:	15,
	"PA13:JTMS-SWDIO"   	:	0,
	"PA14:EVENTOUT"     	:	15,
	"PA14:JTCK-SWCLK"   	:	0,
	"PA15:EVENTOUT"     	:	15,
	"PA15:I2S3_WS"      	:	6,
	"PA15:JTDI"         	:	0,
	"PA15:SPI1_NSS"     	:	5,
	"PA15:SPI3_NSS"     	:	6,
	"PA15:TIM2_CH1"     	:	1,
	"PA15:TIM2_ETR"     	:	1,
	"PA1:ETH_MII_RX_CLK"	:	11,
	"PA1:ETH_RMII_REF_CLK"	:	11,
	"PA1:EVENTOUT"      	:	15,
	"PA1:TIM2_CH2"      	:	1,
	"PA1:TIM5_CH2"      	:	2,
	"PA1:UART4_RX"      	:	8,
	"PA1:USART2_RTS"    	:	7,
	"PA2:ETH_MDIO"      	:	11,
	"PA2:EVENTOUT"      	:	15,
	"PA2:TIM2_CH3"      	:	1,
	"PA2:TIM5_CH3"      	:	2,
	"PA2:TIM9_CH1"      	:	3,
	"PA2:USART2_TX"     	:	7,
	"PA3:ETH_MII_COL"   	:	11,
	"PA3:EVENTOUT"      	:	15,
	"PA3:LCD_B5"        	:	14,
	"PA3:OTG_HS_ULPI_D0"	:	10,
	"PA3:TIM2_CH4"      	:	1,
	"PA3:TIM5_CH4"      	:	2,
	"PA3:TIM9_CH2"      	:	3,
	"PA3:USART2_RX"     	:	7,
	"PA4:DCMI_HSYNC"    	:	13,
	"PA4:EVENTOUT"      	:	15,
	"PA4:I2S3_WS"       	:	6,
	"PA4:LCD_VSYNC"     	:	14,
	"PA4:OTG_HS_SOF"    	:	12,
	"PA4:SPI1_NSS"      	:	5,
	"PA4:SPI3_NSS"      	:	6,
	"PA4:USART2_CK"     	:	7,
	"PA5:EVENTOUT"      	:	15,
	"PA5:OTG_HS_ULPI_CK"	:	10,
	"PA5:SPI1_SCK"      	:	5,
	"PA5:TIM2_CH1"      	:	1,
	"PA5:TIM2_ETR"      	:	1,
	"PA5:TIM8_CH1N"     	:	3,
	"PA6:DCMI_PIXCLK"   	:	13,
	"PA6:EVENTOUT"      	:	15,
	"PA6:LCD_G2"        	:	14,
	"PA6:SPI1_MISO"     	:	5,
	"PA6:TIM13_CH1"     	:	9,
	"PA6:TIM1_BKIN"     	:	1,
	"PA6:TIM3_CH1"      	:	2,
	"PA6:TIM8_BKIN"     	:	3,
	"PA7:ETH_MII_RX_DV" 	:	11,
	"PA7:ETH_RMII_CRS_DV"	:	11,
	"PA7:EVENTOUT"      	:	15,
	"PA7:SPI1_MOSI"     	:	5,
	"PA7:TIM14_CH1"     	:	9,
	"PA7:TIM1_CH1N"     	:	1,
	"PA7:TIM3_CH2"      	:	2,
	"PA7:TIM8_CH1N"     	:	3,
	"PA8:EVENTOUT"      	:	15,
	"PA8:I2C3_SCL"      	:	4,
	"PA8:LCD_R6"        	:	14,
	"PA8:MCO1"          	:	0,
	"PA8:OTG_FS_SOF"    	:	10,
	"PA8:TIM1_CH1"      	:	1,
	"PA8:USART1_CK"     	:	7,
	"PA9:DCMI_D0"       	:	13,
	"PA9:EVENTOUT"      	:	15,
	"PA9:I2C3_SMBA"     	:	4,
	"PA9:TIM1_CH2"      	:	1,
	"PA9:USART1_TX"     	:	7,
	"PB0:ETH_MII_RXD2"  	:	11,
	"PB0:EVENTOUT"      	:	15,
	"PB0:LCD_R3"        	:	9,
	"PB0:OTG_HS_ULPI_D1"	:	10,
	"PB0:TIM1_CH2N"     	:	1,
	"PB0:TIM3_CH3"      	:	2,
	"PB0:TIM8_CH2N"     	:	3,
	"PB10:ETH_MII_RX_ER"	:	11,
	"PB10:EVENTOUT"     	:	15,
	"PB10:I2C2_SCL"     	:	4,
	"PB10:I2S2_CK"      	:	5,
	"PB10:LCD_G4"       	:	14,
	"PB10:OTG_HS_ULPI_D3"	:	10,
	"PB10:SPI2_SCK"     	:	5,
	"PB10:TIM2_CH3"     	:	1,
	"PB10:USART3_TX"    	:	7,
	"PB11:ETH_MII_TX_EN"	:	11,
	"PB11:ETH_RMII_TX_EN"	:	11,
	"PB11:EVENTOUT"     	:	15,
	"PB11:I2C2_SDA"     	:	4,
	"PB11:LCD_G5"       	:	14,
	"PB11:OTG_HS_ULPI_D4"	:	10,
	"PB11:TIM2_CH4"     	:	1,
	"PB11:USART3_RX"    	:	7,
	"PB12:CAN2_RX"      	:	9,
	"PB12:ETH_MII_TXD0" 	:	11,
	"PB12:ETH_RMII_TXD0"	:	11,
	"PB12:EVENTOUT"     	:	15,
	"PB12:I2C2_SMBA"    	:	4,
	"PB12:I2S2_WS"      	:	5,
	"PB12:OTG_HS_ID"    	:	12,
	"PB12:OTG_HS_ULPI_D5"	:	10,
	"PB12:SPI2_NSS"     	:	5,
	"PB12:TIM1_BKIN"    	:	1,
	"PB12:USART3_CK"    	:	7,
	"PB13:CAN2_TX"      	:	9,
	"PB13:ETH_MII_TXD1" 	:	11,
	"PB13:ETH_RMII_TXD1"	:	11,
	"PB13:EVENTOUT"     	:	15,
	"PB13:I2S2_CK"      	:	5,
	"PB13:OTG_HS_ULPI_D6"	:	10,
	"PB13:SPI2_SCK"     	:	5,
	"PB13:TIM1_CH1N"    	:	1,
	"PB13:USART3_CTS"   	:	7,
	"PB14:EVENTOUT"     	:	15,
	"PB14:I2S2EXT_SD"   	:	6,
	"PB14:OTG_HS_DM"    	:	12,
	"PB14:SPI2_MISO"    	:	5,
	"PB14:TIM12_CH1"    	:	9,
	"PB14:TIM1_CH2N"    	:	1,
	"PB14:TIM8_CH2N"    	:	3,
	"PB14:USART3_RTS"   	:	7,
	"PB15:EVENTOUT"     	:	15,
	"PB15:I2S2_SD"      	:	5,
	"PB15:OTG_HS_DP"    	:	12,
	"PB15:RTC_REFIN"    	:	0,
	"PB15:SPI2_MOSI"    	:	5,
	"PB15:TIM12_CH2"    	:	9,
	"PB15:TIM1_CH3N"    	:	1,
	"PB15:TIM8_CH3N"    	:	3,
	"PB1:ETH_MII_RXD3"  	:	11,
	"PB1:EVENTOUT"      	:	15,
	"PB1:LCD_R6"        	:	9,
	"PB1:OTG_HS_ULPI_D2"	:	10,
	"PB1:TIM1_CH3N"     	:	1,
	"PB1:TIM3_CH4"      	:	2,
	"PB1:TIM8_CH3N"     	:	3,
	"PB2:EVENTOUT"      	:	15,
	"PB3:EVENTOUT"      	:	15,
	"PB3:I2S3_CK"       	:	6,
	"PB3:JTDO"          	:	0,
	"PB3:SPI1_SCK"      	:	5,
	"PB3:SPI3_SCK"      	:	6,
	"PB3:TIM2_CH2"      	:	1,
	"PB3:TRACESWO"      	:	0,
	"PB4:EVENTOUT"      	:	15,
	"PB4:I2S3EXT_SD"    	:	7,
	"PB4:NJTRST"        	:	0,
	"PB4:SPI1_MISO"     	:	5,
	"PB4:SPI3_MISO"     	:	6,
	"PB4:TIM3_CH1"      	:	2,
	"PB5:CAN2_RX"       	:	9,
	"PB5:DCMI_D10"      	:	13,
	"PB5:ETH_PPS_OUT"   	:	11,
	"PB5:EVENTOUT"      	:	15,
	"PB5:FMC_SDCKE1"    	:	12,
	"PB5:I2C1_SMBA"     	:	4,
	"PB5:I2S3_SD"       	:	6,
	"PB5:OTG_HS_ULPI_D7"	:	10,
	"PB5:SPI1_MOSI"     	:	5,
	"PB5:SPI3_MOSI"     	:	6,
	"PB5:TIM3_CH2"      	:	2,
	"PB6:CAN2_TX"       	:	9,
	"PB6:DCMI_D5"       	:	13,
	"PB6:EVENTOUT"      	:	15,
	"PB6:FMC_SDNE1"     	:	12,
	"PB6:I2C1_SCL"      	:	4,
	"PB6:TIM4_CH1"      	:	2,
	"PB6:USART1_TX"     	:	7,
	"PB7:DCMI_VSYNC"    	:	13,
	"PB7:EVENTOUT"      	:	15,
	"PB7:FMC_NL"        	:	12,
	"PB7:I2C1_SDA"      	:	4,
	"PB7:TIM4_CH2"      	:	2,
	"PB7:USART1_RX"     	:	7,
	"PB8:CAN1_RX"       	:	9,
	"PB8:DCMI_D6"       	:	13,
	"PB8:ETH_MII_TXD3"  	:	11,
	"PB8:EVENTOUT"      	:	15,
	"PB8:I2C1_SCL"      	:	4,
	"PB8:LCD_B6"        	:	14,
	"PB8:SDIO_D4"       	:	12,
	"PB8:TIM10_CH1"     	:	3,
	"PB8:TIM4_CH3"      	:	2,
	"PB9:CAN1_TX"       	:	9,
	"PB9:DCMI_D7"       	:	13,
	"PB9:EVENTOUT"      	:	15,
	"PB9:I2C1_SDA"      	:	4,
	"PB9:I2S2_WS"       	:	5,
	"PB9:LCD_B7"        	:	14,
	"PB9:SDIO_D5"       	:	12,
	"PB9:SPI2_NSS"      	:	5,
	"PB9:TIM11_CH1"     	:	3,
	"PB9:TIM4_CH4"      	:	2,
	"PC0:EVENTOUT"      	:	15,
	"PC0:FMC_SDNWE"     	:	12,
	"PC0:OTG_HS_ULPI_STP"	:	10,
	"PC10:DCMI_D8"      	:	13,
	"PC10:EVENTOUT"     	:	15,
	"PC10:I2S3_CK"      	:	6,
	"PC10:LCD_R2"       	:	14,
	"PC10:SDIO_D2"      	:	12,
	"PC10:SPI3_SCK"     	:	6,
	"PC10:UART4_TX"     	:	8,
	"PC10:USART3_TX"    	:	7,
	"PC11:DCMI_D4"      	:	13,
	"PC11:EVENTOUT"     	:	15,
	"PC11:I2S3EXT_SD"   	:	5,
	"PC11:SDIO_D3"      	:	12,
	"PC11:SPI3_MISO"    	:	6,
	"PC11:UART4_RX"     	:	8,
	"PC11:USART3_RX"    	:	7,
	"PC12:DCMI_D9"      	:	13,
	"PC12:EVENTOUT"     	:	15,
	"PC12:I2S3_SD"      	:	6,
	"PC12:SDIO_CK"      	:	12,
	"PC12:SPI3_MOSI"    	:	6,
	"PC12:UART5_TX"     	:	8,
	"PC12:USART3_CK"    	:	7,
	"PC13:EVENTOUT"     	:	15,
	"PC14:EVENTOUT"     	:	15,
	"PC15:EVENTOUT"     	:	15,
	"PC1:ETH_MDC"       	:	11,
	"PC1:EVENTOUT"      	:	15,
	"PC2:ETH_MII_TXD2"  	:	11,
	"PC2:EVENTOUT"      	:	15,
	"PC2:FMC_SDNE0"     	:	12,
	"PC2:I2S2EXT_SD"    	:	6,
	"PC2:OTG_HS_ULPI_DIR"	:	10,
	"PC2:SPI2_MISO"     	:	5,
	"PC3:ETH_MII_TX_CLK"	:	11,
	"PC3:EVENTOUT"      	:	15,
	"PC3:FMC_SDCKE0"    	:	12,
	"PC3:I2S2_SD"       	:	5,
	"PC3:OTG_HS_ULPI_NXT"	:	10,
	"PC3:SPI2_MOSI"     	:	5,
	"PC4:ETH_MII_RXD0"  	:	11,
	"PC4:ETH_RMII_RXD0" 	:	11,
	"PC4:EVENTOUT"      	:	15,
	"PC5:ETH_MII_RXD1"  	:	11,
	"PC5:ETH_RMII_RXD1" 	:	11,
	"PC5:EVENTOUT"      	:	15,
	"PC6:DCMI_D0"       	:	13,
	"PC6:EVENTOUT"      	:	15,
	"PC6:I2S2_MCK"      	:	5,
	"PC6:LCD_HSYNC"     	:	14,
	"PC6:SDIO_D6"       	:	12,
	"PC6:TIM3_CH1"      	:	2,
	"PC6:TIM8_CH1"      	:	3,
	"PC6:USART6_TX"     	:	8,
	"PC7:DCMI_D1"       	:	13,
	"PC7:EVENTOUT"      	:	15,
	"PC7:I2S3_MCK"      	:	6,
	"PC7:LCD_G6"        	:	14,
	"PC7:SDIO_D7"       	:	12,
	"PC7:TIM3_CH2"      	:	2,
	"PC7:TIM8_CH2"      	:	3,
	"PC7:USART6_RX"     	:	8,
	"PC8:DCMI_D2"       	:	13,
	"PC8:EVENTOUT"      	:	15,
	"PC8:SDIO_D0"       	:	12,
	"PC8:TIM3_CH3"      	:	2,
	"PC8:TIM8_CH3"      	:	3,
	"PC8:USART6_CK"     	:	8,
	"PC9:DCMI_D3"       	:	13,
	"PC9:EVENTOUT"      	:	15,
	"PC9:I2C3_SDA"      	:	4,
	"PC9:I2S_CKIN"      	:	5,
	"PC9:MCO2"          	:	0,
	"PC9:SDIO_D1"       	:	12,
	"PC9:TIM3_CH4"      	:	2,
	"PC9:TIM8_CH4"      	:	3,
	"PD0:CAN1_RX"       	:	9,
	"PD0:EVENTOUT"      	:	15,
	"PD0:FMC_D2"        	:	12,
	"PD10:EVENTOUT"     	:	15,
	"PD10:FMC_D15"      	:	12,
	"PD10:LCD_B3"       	:	14,
	"PD10:USART3_CK"    	:	7,
	"PD11:EVENTOUT"     	:	15,
	"PD11:FMC_A16"      	:	12,
	"PD11:USART3_CTS"   	:	7,
	"PD12:EVENTOUT"     	:	15,
	"PD12:FMC_A17"      	:	12,
	"PD12:TIM4_CH1"     	:	2,
	"PD12:USART3_RTS"   	:	7,
	"PD13:EVENTOUT"     	:	15,
	"PD13:FMC_A18"      	:	12,
	"PD13:TIM4_CH2"     	:	2,
	"PD14:EVENTOUT"     	:	15,
	"PD14:FMC_D0"       	:	12,
	"PD14:TIM4_CH3"     	:	2,
	"PD15:EVENTOUT"     	:	15,
	"PD15:FMC_D1"       	:	12,
	"PD15:TIM4_CH4"     	:	2,
	"PD1:CAN1_TX"       	:	9,
	"PD1:EVENTOUT"      	:	15,
	"PD1:FMC_D3"        	:	12,
	"PD2:DCMI_D11"      	:	13,
	"PD2:EVENTOUT"      	:	15,
	"PD2:SDIO_CMD"      	:	12,
	"PD2:TIM3_ETR"      	:	2,
	"PD2:UART5_RX"      	:	8,
	"PD3:DCMI_D5"       	:	13,
	"PD3:EVENTOUT"      	:	15,
	"PD3:FMC_CLK"       	:	12,
	"PD3:I2S2_CK"       	:	5,
	"PD3:LCD_G7"        	:	14,
	"PD3:SPI2_SCK"      	:	5,
	"PD3:USART2_CTS"    	:	7,
	"PD4:EVENTOUT"      	:	15,
	"PD4:FMC_NOE"       	:	12,
	"PD4:USART2_RTS"    	:	7,
	"PD5:EVENTOUT"      	:	15,
	"PD5:FMC_NWE"       	:	12,
	"PD5:USART2_TX"     	:	7,
	"PD6:DCMI_D10"      	:	13,
	"PD6:EVENTOUT"      	:	15,
	"PD6:FMC_NWAIT"     	:	12,
	"PD6:I2S3_SD"       	:	5,
	"PD6:LCD_B2"        	:	14,
	"PD6:SAI1_SD_A"     	:	6,
	"PD6:SPI3_MOSI"     	:	5,
	"PD6:USART2_RX"     	:	7,
	"PD7:EVENTOUT"      	:	15,
	"PD7:FMC_NCE2"      	:	12,
	"PD7:FMC_NE1"       	:	12,
	"PD7:USART2_CK"     	:	7,
	"PD8:EVENTOUT"      	:	15,
	"PD8:FMC_D13"       	:	12,
	"PD8:USART3_TX"     	:	7,
	"PD9:EVENTOUT"      	:	15,
	"PD9:FMC_D14"       	:	12,
	"PD9:USART3_RX"     	:	7,
	"PE0:DCMI_D2"       	:	13,
	"PE0:EVENTOUT"      	:	15,
	"PE0:FMC_NBL0"      	:	12,
	"PE0:TIM4_ETR"      	:	2,
	"PE0:UART8_RX"      	:	8,
	"PE10:EVENTOUT"     	:	15,
	"PE10:FMC_D7"       	:	12,
	"PE10:TIM1_CH2N"    	:	1,
	"PE11:EVENTOUT"     	:	15,
	"PE11:FMC_D8"       	:	12,
	"PE11:LCD_G3"       	:	14,
	"PE11:SPI4_NSS"     	:	5,
	"PE11:TIM1_CH2"     	:	1,
	"PE12:EVENTOUT"     	:	15,
	"PE12:FMC_D9"       	:	12,
	"PE12:LCD_B4"       	:	14,
	"PE12:SPI4_SCK"     	:	5,
	"PE12:TIM1_CH3N"    	:	1,
	"PE13:EVENTOUT"     	:	15,
	"PE13:FMC_D10"      	:	12,
	"PE13:LCD_DE"       	:	14,
	"PE13:SPI4_MISO"    	:	5,
	"PE13:TIM1_CH3"     	:	1,
	"PE14:EVENTOUT"     	:	15,
	"PE14:FMC_D11"      	:	12,
	"PE14:LCD_CLK"      	:	14,
	"PE14:SPI4_MOSI"    	:	5,
	"PE14:TIM1_CH4"     	:	1,
	"PE15:"             	:	5,
	"PE15:EVENTOUT"     	:	15,
	"PE15:FMC_D12"      	:	12,
	"PE15:LCD_R7"       	:	14,
	"PE15:TIM1_BKIN"    	:	1,
	"PE1:DCMI_D3"       	:	13,
	"PE1:EVENTOUT"      	:	15,
	"PE1:FMC_NBL1"      	:	12,
	"PE1:UART8_TX"      	:	8,
	"PE2:ETH_MII_TXD3"  	:	11,
	"PE2:EVENTOUT"      	:	15,
	"PE2:FMC_A23"       	:	12,
	"PE2:SAI1_MCLK_A"   	:	6,
	"PE2:SPI4_SCK"      	:	5,
	"PE2:TRACECLK"      	:	0,
	"PE3:EVENTOUT"      	:	15,
	"PE3:FMC_A19"       	:	12,
	"PE3:SAI1_SD_B"     	:	6,
	"PE3:TRACED0"       	:	0,
	"PE4:DCMI_D4"       	:	13,
	"PE4:EVENTOUT"      	:	15,
	"PE4:FMC_A20"       	:	12,
	"PE4:LCD_B0"        	:	14,
	"PE4:SAI1_FS_A"     	:	6,
	"PE4:SPI4_NSS"      	:	5,
	"PE4:TRACED1"       	:	0,
	"PE5:DCMI_D6"       	:	13,
	"PE5:EVENTOUT"      	:	15,
	"PE5:FMC_A21"       	:	12,
	"PE5:LCD_G0"        	:	14,
	"PE5:SAI1_SCK_A"    	:	6,
	"PE5:SPI4_MISO"     	:	5,
	"PE5:TIM9_CH1"      	:	3,
	"PE5:TRACED2"       	:	0,
	"PE6:DCMI_D7"       	:	13,
	"PE6:EVENTOUT"      	:	15,
	"PE6:FMC_A22"       	:	12,
	"PE6:LCD_G1"        	:	14,
	"PE6:SAI1_SD_A"     	:	6,
	"PE6:SPI4_MOSI"     	:	5,
	"PE6:TIM9_CH2"      	:	3,
	"PE6:TRACED3"       	:	0,
	"PE7:EVENTOUT"      	:	15,
	"PE7:FMC_D4"        	:	12,
	"PE7:TIM1_ETR"      	:	1,
	"PE7:UART7_RX"      	:	8,
	"PE8:EVENTOUT"      	:	15,
	"PE8:FMC_D5"        	:	12,
	"PE8:TIM1_CH1N"     	:	1,
	"PE8:UART7_TX"      	:	8,
	"PE9:EVENTOUT"      	:	15,
	"PE9:FMC_D6"        	:	12,
	"PE9:TIM1_CH1"      	:	1,
	"PF0:EVENTOUT"      	:	15,
	"PF0:FMC_A0"        	:	12,
	"PF0:I2C2_SDA"      	:	4,
	"PF10:DCMI_D11"     	:	13,
	"PF10:EVENTOUT"     	:	15,
	"PF10:FMC_INTR"     	:	12,
	"PF10:LCD_DE"       	:	14,
	"PF11:DCMI_D12"     	:	13,
	"PF11:EVENTOUT"     	:	15,
	"PF11:FMC_SDNRAS"   	:	12,
	"PF11:SPI5_MOSI"    	:	5,
	"PF12:EVENTOUT"     	:	15,
	"PF12:FMC_A6"       	:	12,
	"PF13:EVENTOUT"     	:	15,
	"PF13:FMC_A7"       	:	12,
	"PF14:EVENTOUT"     	:	15,
	"PF14:FMC_A8"       	:	12,
	"PF15:EVENTOUT"     	:	15,
	"PF15:FMC_A9"       	:	12,
	"PF1:"              	:	3,
	"PF1:EVENTOUT"      	:	15,
	"PF1:FMC_A1"        	:	12,
	"PF1:I2C2_SCL"      	:	4,
	"PF2:EVENTOUT"      	:	15,
	"PF2:FMC_A2"        	:	12,
	"PF2:I2C2_SMBA"     	:	4,
	"PF3:"              	:	4,
	"PF3:EVENTOUT"      	:	15,
	"PF3:FMC_A3"        	:	12,
	"PF4:"              	:	4,
	"PF4:EVENTOUT"      	:	15,
	"PF4:FMC_A4"        	:	12,
	"PF5:"              	:	4,
	"PF5:EVENTOUT"      	:	15,
	"PF5:FMC_A5"        	:	12,
	"PF6:EVENTOUT"      	:	15,
	"PF6:FMC_NIORD"     	:	12,
	"PF6:SAI1_SD_B"     	:	6,
	"PF6:SPI5_NSS"      	:	5,
	"PF6:T