  HAL_PERIPH_ENABLE_ADSB = 1,
            HAL_PERIPH_ENABLE_SERIAL_OPTIONS = 1,
            AP_AIRSPEED_ENABLED = 1,
            AP_BATTERY_ESC_ENABLED = 1,
            HAL_PWM_COUNT = 32,
            HAL_WITH_ESC_TELEM = 1,
            AP_EXTENDED_ESC_TELEM_ENABLED = 1,
            AP_TERRAIN_AVAILABLE = 1,
        )

class sitl_periph_gps(sitl_periph):
    def configure_env(self, cfg, env):
        cfg.env.AP_PERIPH = 1
        super(sitl_periph_gps, self).configure_env(cfg, env)
        env.DEFINES.update(
            HAL_BUILD_AP_PERIPH = 1,
            PERIPH_FW = 1,
            CAN_APP_NODE_NAME = '"org.ardupilot.ap_periph_gps"',
            APJ_BOARD_ID = 101,

            HAL_PERIPH_ENABLE_GPS = 1,
        )

class sitl_periph_battmon(sitl_periph):
    def configure_env(self, cfg, env):
        cfg.env.AP_PERIPH = 1
        super(sitl_periph_battmon, self).configure_env(cfg, env)
        env.DEFINES.update(
            HAL_BUILD_AP_PERIPH = 1,
            PERIPH_FW = 1,
            CAN_APP_NODE_NAME = '"org.ardupilot.ap_periph_battmon"',
            APJ_BOARD_ID = 101,

            HAL_PERIPH_ENABLE_BATTERY = 1,
        )

class esp32(Board):
    abstract = True
    toolchain = 'xtensa-esp32-elf'
    def configure_env(self, cfg, env):
        env.BOARD_CLASS = "ESP32"

        def expand_path(p):
            print("USING EXPRESSIF IDF:"+str(env.idf))
            return cfg.root.find_dir(env.IDF+p).abspath()
        try:
            env.IDF = os.environ['IDF_PATH'] 
        except:
            env.IDF = cfg.srcnode.abspath()+"/modules/esp_idf"

        super(esp32, self).configure_env(cfg, env)
        cfg.load('esp32')
        env.DEFINES.update(
            CONFIG_HAL_BOARD = 'HAL_BOARD_ESP32',
        )

        tt = self.name[5:] #leave off 'esp32' so we just get 'buzz','diy','icarus, etc
        
        # this makes sure we get the correct subtype
        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_ESP32_%s' %  tt.upper() ,
            HAL_HAVE_HARDWARE_DOUBLE = '1',
        )

        if self.name.endswith("empty"):
            # for empty targets build as SIM-on-HW
            env.DEFINES.update(AP_SIM_ENABLED = 1)
            env.AP_LIBRARIES += [
                'SITL',
            ]
        else:
            env.DEFINES.update(AP_SIM_ENABLED = 0)

        env.AP_LIBRARIES += [
            'AP_HAL_ESP32',
        ]

        env.CFLAGS += [
            '-fno-inline-functions',
            '-mlongcalls',
            '-fsingle-precision-constant',
        ]
        env.CFLAGS.remove('-Werror=undef')

        env.CXXFLAGS += ['-mlongcalls',
                         '-Os',
                         '-g',
                         '-ffunction-sections',
                         '-fdata-sections',
                         '-fno-exceptions',
                         '-fno-rtti',
                         '-nostdlib',
                         '-fstrict-volatile-bitfields',
                         '-Wno-sign-compare',
                         '-fno-inline-functions',
                         '-mlongcalls',
                         '-fsingle-precision-constant', # force const vals to be float , not double. so 100.0 means 100.0f 
                         '-fno-threadsafe-statics']
        env.CXXFLAGS.remove('-Werror=undef')
        env.CXXFLAGS.remove('-Werror=shadow')

        # wrap malloc to ensure memory is zeroed
        env.LINKFLAGS += ['-Wl,--wrap,malloc']

        env.INCLUDES += [
                cfg.srcnode.find_dir('libraries/AP_HAL_ESP32/boards').abspath(),
            ]
        env.AP_PROGRAM_AS_STLIB = True
        #if cfg.options.enable_profile:
        #    env.CXXFLAGS += ['-pg',
        #                     '-DENABLE_PROFILE=1']
    def pre_build(self, bld):
        '''pre-build hook that gets called before dynamic sources'''
        from waflib.Context import load_tool
        module = load_tool('esp32', [], with_sys_path=True)
        fun = getattr(module, 'pre_build', None)
        if fun:
            fun(bld)
        super(esp32, self).pre_build(bld)


    def build(self, bld):
        super(esp32, self).build(bld)
        bld.load('esp32')

    def get_name(self):
        return self.__class__.__name__

class esp32s3(esp32):
    abstract = True
    toolchain = 'xtensa-esp32s3-elf'

class chibios(Board):
    abstract = True
    toolchain = 'arm-none-eabi'

    def configure_env(self, cfg, env):
        if hasattr(self, 'hwdef'):
            cfg.env.HWDEF = self.hwdef
        super(chibios, self).configure_env(cfg, env)

        cfg.load('chibios')
        env.BOARD = self.name
        env.BOARD_CLASS = "ChibiOS"

        env.DEFINES.update(
            CONFIG_HAL_BOARD = 'HAL_BOARD_CHIBIOS',
            HAVE_STD_NULLPTR_T = 0,
            USE_LIBC_REALLOC = 0,
        )

        env.AP_LIBRARIES += [
            'AP_HAL_ChibiOS',
        ]

        # make board name available for USB IDs
        env.CHIBIOS_BOARD_NAME = 'HAL_BOARD_NAME="%s"' % self.name
        env.HAL_MAX_STACK_FRAME_SIZE = 'HAL_MAX_STACK_FRAME_SIZE=%d' % 1300 # set per Wframe-larger-than, ensure its same
        env.CFLAGS += cfg.env.CPU_FLAGS + [
            '-Wlogical-op',
            '-Wframe-larger-than=1300',
            '-Wno-attributes',
            '-fno-exceptions',
            '-Wall',
            '-Wextra',
            '-Wno-sign-compare',
            '-Wfloat-equal',
            '-Wpointer-arith',
            '-Wmissing-declarations',
            '-Wno-unused-parameter',
            '-Werror=array-bounds',
            '-Wfatal-errors',
            '-Werror=uninitialized',
            '-Werror=init-self',
            '-Werror=unused-but-set-variable',
            '-Wno-missing-field-initializers',
            '-Wno-trigraphs',
            '-fno-strict-aliasing',
            '-fomit-frame-pointer',
            '-falign-functions=16',
            '-ffunction-sections',
            '-fdata-sections',
            '-fno-strength-reduce',
            '-fno-builtin-printf',
            '-fno-builtin-fprintf',
            '-fno-builtin-vprintf',
            '-fno-builtin-vfprintf',
            '-fno-builtin-puts',
            '-mno-thumb-interwork',
            '-mthumb',
            '--specs=nano.specs',
            '--specs=nosys.specs',
            '-D__USE_CMSIS',
            '-Werror=deprecated-declarations',
            '-DNDEBUG=1'
        ]
        if not cfg.options.Werror:
            env.CFLAGS += [
            '-Wno-error=double-promotion',
            '-Wno-error=missing-declarations',
            '-Wno-error=float-equal',
            '-Wno-error=cpp',
            ]

        env.CXXFLAGS += env.CFLAGS + [
            '-fno-rtti',
            '-fno-threadsafe-statics',
        ]
        env.CFLAGS += [
            '-std=c11'
        ]

        if Utils.unversioned_sys_platform() == 'cygwin':
            env.CXXFLAGS += ['-DCYGWIN_BUILD']

        bldnode = cfg.bldnode.make_node(self.name)
        env.BUILDROOT = bldnode.make_node('').abspath()

        env.LINKFLAGS = cfg.env.CPU_FLAGS + [
            '-fomit-frame-pointer',
            '-falign-functions=16',
            '-ffunction-sections',
            '-fdata-sections',
            '-u_port_lock',
            '-u_port_unlock',
            '-u_exit',
            '-u_kill',
            '-u_getpid',
            '-u_errno',
            '-uchThdExit',
            '-fno-common',
            '-nostartfiles',
            '-mno-thumb-interwork',
            '-mthumb',
            '--specs=nano.specs',
            '--specs=nosys.specs',
            '-L%s' % env.BUILDROOT,
            '-L%s' % cfg.srcnode.make_node('modules/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/ld/').abspath(),
            '-L%s' % cfg.srcnode.make_node('libraries/AP_HAL_ChibiOS/hwdef/common/').abspath(),
            '-Wl,-Map,Linker.map,%s--cref,--gc-sections,--no-warn-mismatch,--library-path=/ld,--script=ldscript.ld,--defsym=__process_stack_size__=%s,--defsym=__main_stack_size__=%s' % ("--print-memory-usage," if cfg.env.EXT_FLASH_SIZE_MB > 0 and cfg.env.INT_FLASH_PRIMARY == 0 else "", cfg.env.PROCESS_STACK, cfg.env.MAIN_STACK)
        ]

        if cfg.env.DEBUG:
            env.CFLAGS += [
                '-gdwarf-4',
                '-g3',
            ]
            env.LINKFLAGS += [
                '-gdwarf-4',
                '-g3',
            ]

        if cfg.env.COMPILER_CXX == "g++":
            if not self.cc_version_gte(cfg, 10, 2):
                # require at least 10.2 compiler
                cfg.fatal("ChibiOS build requires g++ version 10.2.1 or later, found %s" % '.'.join(cfg.env.CC_VERSION))
            
        if cfg.env.ENABLE_ASSERTS:
            cfg.msg("Enabling ChibiOS asserts", "yes")
            env.CFLAGS += [ '-DHAL_CHIBIOS_ENABLE_ASSERTS' ]
            env.CXXFLAGS += [ '-DHAL_CHIBIOS_ENABLE_ASSERTS' ]
        else:
            cfg.msg("Enabling ChibiOS asserts", "no")


        if cfg.env.SAVE_TEMPS:
            env.CXXFLAGS += [ '-S', '-save-temps=obj' ]

        if cfg.options.disable_watchdog:
            cfg.msg("Disabling Watchdog", "yes")
            env.CFLAGS += [ '-DDISABLE_WATCHDOG' ]
            env.CXXFLAGS += [ '-DDISABLE_WATCHDOG' ]
        else:
            cfg.msg("Disabling Watchdog", "no")

        if cfg.env.ENABLE_MALLOC_GUARD:
            cfg.msg("Enabling malloc guard", "yes")
            env.CFLAGS += [ '-DHAL_CHIBIOS_ENABLE_MALLOC_GUARD' ]
            env.CXXFLAGS += [ '-DHAL_CHIBIOS_ENABLE_MALLOC_GUARD' ]
        else:
            cfg.msg("Enabling malloc guard", "no")
            
        if cfg.env.ENABLE_STATS:
            cfg.msg("Enabling ChibiOS thread statistics", "yes")
            env.CFLAGS += [ '-DHAL_ENABLE_THREAD_STATISTICS' ]
            env.CXXFLAGS += [ '-DHAL_ENABLE_THREAD_STATISTICS' ]
        else:
            cfg.msg("Enabling ChibiOS thread statistics", "no")

        if cfg.env.SIM_ENABLED:
            env.DEFINES.update(
                AP_SIM_ENABLED = 1,
            )
            env.AP_LIBRARIES += [
                'SITL',
            ]
        else:
            env.DEFINES.update(
                AP_SIM_ENABLED = 0,
            )

        env.LIB += ['gcc', 'm']

        env.GIT_SUBMODULES += [
            'ChibiOS',
        ]

        env.INCLUDES += [
            cfg.srcnode.find_dir('libraries/AP_GyroFFT/CMSIS_5/include').abspath(),
            cfg.srcnode.find_dir('modules/lwip/src/include/compat/posix').abspath()
        ]

        # whitelist of compilers which we should build with -Werror
        gcc_whitelist = frozenset([
            ('4','9','3'),
            ('6','3','1'),
            ('9','2','1'),
            ('9','3','1'),
            ('10','2','1'),
            ('11','3','0'),
            ('11','4','0'),
        ])

        if cfg.env.HAL_CANFD_SUPPORTED:
            env.DEFINES.update(CANARD_ENABLE_CANFD=1)
        else:
            env.DEFINES.update(CANARD_ENABLE_TAO_OPTION=1)
        if not cfg.options.bootloader and cfg.env.HAL_NUM_CAN_IFACES:
            if int(cfg.env.HAL_NUM_CAN_IFACES) >= 1:
                env.DEFINES.update(CANARD_IFACE_ALL=(1<<int(cfg.env.HAL_NUM_CAN_IFACES))-1)
        if cfg.options.Werror or cfg.env.CC_VERSION in gcc_whitelist:
            cfg.msg("Enabling -Werror", "yes")
            if '-Werror' not in env.CXXFLAGS:
                env.CXXFLAGS += [ '-Werror' ]
        else:
            cfg.msg("Enabling -Werror", "no")

        if cfg.options.signed_fw:
            cfg.define('AP_SIGNED_FIRMWARE', 1)
            env.CFLAGS += [
                '-DAP_SIGNED_FIRMWARE=1',
            ]
        else:
            cfg.define('AP_SIGNED_FIRMWARE', 0)
            env.CFLAGS += [
                '-DAP_SIGNED_FIRMWARE=0',
            ]

        try:
            import intelhex
            env.HAVE_INTEL_HEX = True
            cfg.msg("Checking for intelhex module:", 'OK')
        except Exception:
            cfg.msg("Checking for intelhex module:", 'disabled', color='YELLOW')
            env.HAVE_INTEL_HEX = False

        if cfg.options.enable_new_checking:
            env.CHECK_SYMBOLS = True
        else:
            # disable new checking on ChibiOS by default to save flash
            # we enable it in a CI test to catch incorrect usage
            env.CXXFLAGS += [
                "-DNEW_NOTHROW=new",
                "-fcheck-new", # rely on -fcheck-new ensuring nullptr checks
                ]

    def build(self, bld):
        super(chibios, self).build(bld)
        bld.ap_version_append_str('CHIBIOS_GIT_VERSION', bld.git_submodule_head_hash('ChibiOS', short=True))
        bld.load('chibios')

    def pre_build(self, bld):
        '''pre-build hook that gets called before dynamic sources'''
        from waflib.Context import load_tool
        module = load_tool('chibios', [], with_sys_path=True)
        fun = getattr(module, 'pre_build', None)
        if fun:
            fun(bld)
        super(chibios, self).pre_build(bld)

    def get_name(self):
        return self.name

class linux(Board):
    def __init__(self):
        if self.toolchain == 'native':
            self.with_can = True
        else:
            self.with_can = False

    def configure_env(self, cfg, env):
        if cfg.options.board == 'linux':
            self.with_can = True
        super(linux, self).configure_env(cfg, env)

        env.BOARD_CLASS = "LINUX"

        env.DEFINES.update(
            CONFIG_HAL_BOARD = 'HAL_BOARD_LINUX',
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_NONE',
            AP_SIM_ENABLED = 0,
        )

        if not cfg.env.DEBUG:
            env.CXXFLAGS += [
                '-O3',
            ]

        env.LIB += [
            'm',
        ]

        cfg.check_librt(env)
        cfg.check_lttng(env)
        cfg.check_libdl(env)
        cfg.check_libiio(env)

        env.LINKFLAGS += ['-pthread',]
        env.AP_LIBRARIES += [
            'AP_HAL_Linux',
        ]

        # wrap malloc to ensure memory is zeroed
        env.LINKFLAGS += ['-Wl,--wrap,malloc']

        if cfg.options.force_32bit:
            env.DEFINES.update(
                HAL_FORCE_32BIT = 1,
            )
            # 32bit platform flags
            cfg.env.CXXFLAGS += [
                '-m32',
            ]
            cfg.env.CFLAGS += [
                '-m32',
            ]
            cfg.env.LDFLAGS += [
                '-m32',
            ]
        else:
            env.DEFINES.update(
                HAL_FORCE_32BIT = 0,
            )
        if self.with_can and cfg.options.board == 'linux':
            cfg.env.HAL_NUM_CAN_IFACES = 2
            cfg.define('HAL_NUM_CAN_IFACES', 2)
            cfg.define('HAL_CANFD_SUPPORTED', 1)
            cfg.define('CANARD_ENABLE_CANFD', 1)
        
        if self.with_can:
            env.DEFINES.update(CANARD_MULTI_IFACE=1,
                               CANARD_IFACE_ALL = 0x3)

        if cfg.options.apstatedir:
            cfg.define('AP_STATEDIR', cfg.options.apstatedir)

        defaults_file = 'libraries/AP_HAL_Linux/boards/%s/defaults.parm' % self.get_name()
        if os.path.exists(defaults_file):
            env.ROMFS_FILES += [('defaults.parm', defaults_file)]
            env.DEFINES.update(
                HAL_PARAM_DEFAULTS_PATH='"@ROMFS/defaults.parm"',
            )

    def build(self, bld):
        super(linux, self).build(bld)
        if bld.options.upload:
            waflib.Options.commands.append('rsync')
            # Avoid infinite recursion
            bld.options.upload = False

    def get_name(self):
        # get name of class
        return self.__class__.__name__


class navigator(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(navigator, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE='HAL_BOARD_SUBTYPE_LINUX_NAVIGATOR',
        )

class erleboard(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(erleboard, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_ERLEBOARD',
        )

class navio(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(navio, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_NAVIO',
        )

class navio2(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(navio2, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_NAVIO2',
        )

class edge(linux):
    toolchain = 'arm-linux-gnueabihf'

    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(edge, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_EDGE',
        )

class zynq(linux):
    toolchain = 'arm-xilinx-linux-gnueabi'

    def configure_env(self, cfg, env):
        super(zynq, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_ZYNQ',
        )

class ocpoc_zynq(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(ocpoc_zynq, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_OCPOC_ZYNQ',
        )

class bbbmini(linux):
    toolchain = 'arm-linux-gnueabihf'

    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(bbbmini, self).configure_env(cfg, env)
        cfg.env.HAL_NUM_CAN_IFACES = 1
        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_BBBMINI',
        )

class blue(linux):
    toolchain = 'arm-linux-gnueabihf'

    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(blue, self).configure_env(cfg, env)
        cfg.env.HAL_NUM_CAN_IFACES = 1

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_BLUE',
        )

class pocket(linux):
    toolchain = 'arm-linux-gnueabihf'

    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(pocket, self).configure_env(cfg, env)
        cfg.env.HAL_NUM_CAN_IFACES = 1

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_POCKET',
        )

class pxf(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(pxf, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_PXF',
        )

class bebop(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(bebop, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_BEBOP',
        )

class vnav(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(vnav, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_VNAV',
        )
        
class disco(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(disco, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_DISCO',
        )

class erlebrain2(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(erlebrain2, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_ERLEBRAIN2',
        )

class bhat(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(bhat, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_BH',
        )

class dark(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(dark, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_DARK',
        )

class pxfmini(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(pxfmini, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_PXFMINI',
        )

class aero(linux):
    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(aero, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_AERO',
        )

class rst_zynq(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(rst_zynq, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_RST_ZYNQ',
        )

class obal(linux):
    toolchain = 'arm-linux-gnueabihf'

    def configure_env(self, cfg, env):
        super(obal, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_OBAL_V1',
        )

class canzero(linux):
    toolchain = 'arm-linux-gnueabihf'

    def __init__(self):
        self.with_can = True

    def configure_env(self, cfg, env):
        super(canzero, self).configure_env(cfg, env)

        env.DEFINES.update(
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_CANZERO',
        )
        
class SITL_static(sitl):
    def configure_env(self, cfg, env):
        super(SITL_static, self).configure_env(cfg, env)
        cfg.env.STATIC_LINKING = True

class SITL_x86_64_linux_gnu(SITL_static):
    toolchain = 'x86_64-linux-gnu'

class SITL_arm_linux_gnueabihf(SITL_static):
    toolchain = 'arm-linux-gnueabihf'

class QURT(Board):
    '''support for QURT based boards'''
    toolchain = 'custom'

    def __init__(self):
        self.with_can = False

    def configure_toolchain(self, cfg):
        cfg.env.CXX_NAME = 'gcc'
        cfg.env.HEXAGON_SDK_DIR = "/opt/hexagon-sdk/4.1.0.4-lite"
        cfg.env.CC_VERSION = ('4','1','0')
        cfg.env.TOOLCHAIN_DIR = cfg.env.HEXAGON_SDK_DIR + "/tools/HEXAGON_Tools/8.4.05/Tools"
        cfg.env.COMPILER_CC = cfg.env.TOOLCHAIN_DIR + "/bin/hexagon-clang"
        cfg.env.COMPILER_CXX = cfg.env.TOOLCHAIN_DIR + "/bin/hexagon-clang++"
        cfg.env.LINK_CXX = cfg.env.HEXAGON_SDK_DIR + "/tools/HEXAGON_Tools/8.4.05/Tools/bin/hexagon-link"
        cfg.env.CXX = ["ccache", cfg.env.COMPILER_CXX]
        cfg.env.CC = ["ccache", cfg.env.COMPILER_CC]
        cfg.env.CXX_TGT_F = ['-c', '-o']
        cfg.env.CC_TGT_F = ['-c', '-o']
        cfg.env.CCLNK_SRC_F = []
        cfg.env.CXXLNK_SRC_F = []
        cfg.env.CXXLNK_TGT_F = ['-o']
        cfg.env.CCLNK_TGT_F = ['-o']
        cfg.env.CPPPATH_ST = '-I%s'
        cfg.env.DEFINES_ST = '-D%s'
        cfg.env.AR = cfg.env.HEXAGON_SDK_DIR + "/tools/HEXAGON_Tools/8.4.05/Tools/bin/hexagon-ar"
        cfg.env.ARFLAGS = 'rcs'
        cfg.env.cxxstlib_PATTERN = 'lib%s.a'
        cfg.env.cstlib_PATTERN = 'lib%s.a'
        cfg.env.LIBPATH_ST = '-L%s'
        cfg.env.LIB_ST = '-l%s'
        cfg.env.SHLIB_MARKER = ''
        cfg.env.STLIBPATH_ST = '-L%s'
        cfg.env.STLIB_MARKER = ''
        cfg.env.STLIB_ST = '-l%s'
        cfg.env.LDFLAGS = [
            '-lgcc',
            cfg.env.TOOLCHAIN_DIR + '/target/hexagon/lib/v66/G0/pic/finiS.o'
        ]

    def configure_env(self, cfg, env):
        super(QURT, self).configure_env(cfg, env)

        env.BOARD_CLASS = "QURT"
        env.HEXAGON_APP = "libardupilot.so"
        env.INCLUDES += [cfg.env.HEXAGON_SDK_DIR + "/rtos/qurt/computev66/include/qurt"]
        env.INCLUDES += [cfg.env.HEXAGON_SDK_DIR + "/rtos/qurt/computev66/include/posix"]

        CFLAGS = "-MD -mv66 -fPIC -mcpu=hexagonv66 -G0 -fdata-sections -ffunction-sections -fomit-frame-pointer -fmerge-all-constants -fno-signed-zeros -fno-trapping-math -freciprocal-math -fno-math-errno -fno-strict-aliasing -fvisibility=hidden -fno-rtti -fmath-errno"
        env.CXXFLAGS += CFLAGS.split()
        env.CFLAGS += CFLAGS.split()

        env.DEFINES.update(
            CONFIG_HAL_BOARD = 'HAL_BOARD_QURT',
            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_NONE',
            AP_SIM_ENABLED = 0,
        )

        env.LINKFLAGS = [
            "-march=hexagon",
            "-mcpu=hexagonv66",
            "-shared",
            "-call_shared",
            "-G0",
            cfg.env.TOOLCHAIN_DIR + "/target/hexagon/lib/v66/G0/pic/initS.o",
            f"-L{cfg.env.TOOLCHAIN_DIR}/target/hexagon/lib/v66/G0/pic",
            "-Bsymbolic",
            cfg.env.TOOLCHAIN_DIR + "/target/hexagon/lib/v66/G0/pic/libgcc.a",
            "--wrap=malloc",
            "--wrap=calloc",
            "--wrap=free",
            "--wrap=realloc",
            "--wrap=printf",
            "--wrap=strdup",
            "--wrap=__stack_chk_fail",
            "-lc"
        ]

        if not cfg.env.DEBUG:
            env.CXXFLAGS += [
                '-O3',
            ]

        env.AP_LIBRARIES += [
            'AP_HAL_QURT',
        ]

    def build(self, bld):
        super(QURT, self).build(bld)
        bld.load('qurt')

    def get_name(self):
        # get name of class
        return self.__class__.__name__
    
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AC3Db
MATERIAL "DefaultWhite" rgb 1 1 1  amb 1 1 1  emis 0 0 0  spec 0.5 0.5 0.5  shi 64  trans 0
MATERIAL "Concrete" rgb 0.509482 0.490523 0.407081 amb 0.469029 0.469029 0.469029 emis 0 0 0 spec 0.509482 0.509482 0.509482 shi 32 trans 0
MATERIAL "Steel" rgb 0.273885 0.273885 0.273885 amb 0.273885 0.273885 0.273885 emis 0 0 0 spec 0.163481 0.163481 0.163481 shi 72 trans 0
MATERIAL "Steel.001" rgb 0.984314 0.019608 0.019608 amb 0.273885 0.273885 0.273885 emis 0 0 0 spec 0.163481 0.163481 0.163481 shi 72 trans 0
MATERIAL "Steel.002" rgb 1 1 1 amb 0.273885 0.273885 0.273885 emis 0 0 0 spec 0.163481 0.163481 0.163481 shi 72 trans 0
OBJECT world
kids 3
OBJECT poly
name "Mount"
data 8
Cube.004
crease 30.000000
numvert 40
9.45 -15.35 -9.450001
9.45 -15.35 9.45
-9.450001 -15.35 9.449997
-9.449996 -15.35 -9.450004
6.750003 -0.35 -6.749997
6.749996 -0.35 6.750004
-6.750002 -0.35 6.749998
-6.749999 -0.35 -6.75
-5.55 0.55 5.55
-5.25 -0.35 5.25
-6.75 -0.35 5.25
-6.45 0.55 5.55
-5.55 0.55 6.45
-5.25 -0.35 6.75
-6.75 -0.35 6.75
-6.45 0.55 6.45
6.45 0.55 5.55
6.75 -0.35 5.25
5.25 -0.35 5.25
5.55 0.55 5.55
6.45 0.55 6.45
6.75 -0.35 6.75
5.25 -0.35 6.75
5.55 0.55 6.45
6.45 0.55 -6.45
6.75 -0.35 -6.75
5.25 -0.35 -6.75
5.55 0.55 -6.45
6.45 0.55 -5.55
6.75 -0.35 -5.25
5.25 -0.35 -5.25
5.55 0.55 -5.55
-5.55 0.55 -6.45
-5.25 -0.35 -6.75
-6.75 -0.35 -6.75
-6.45 0.55 -6.45
-5.55 0.55 -5.55
-5.25 -0.35 -5.25
-6.75 -0.35 -5.25
-6.45 0.55 -5.55
numsurf 25
SURF 0x20
mat 1
refs 4
4 0.0 0.0
7 0.0 0.0
6 0.0 0.0
5 0.0 0.0
SURF 0x20
mat 1
refs 4
0 0.0 0.0
4 0.0 0.0
5 0.0 0.0
1 0.0 0.0
SURF 0x20
mat 1
refs 4
1 0.0 0.0
5 0.0 0.0
6 0.0 0.0
2 0.0 0.0
SURF 0x20
mat 1
refs 4
2 0.0 0.0
6 0.0 0.0
7 0.0 0.0
3 0.0 0.0
SURF 0x20
mat 1
refs 4
4 0.0 0.0
0 0.0 0.0
3 0.0 0.0
7 0.0 0.0
SURF 0x20
mat 1
refs 4
8 0.0 0.0
9 0.0 0.0
10 0.0 0.0
11 0.0 0.0
SURF 0x20
mat 1
refs 4
12 0.0 0.0
15 0.0 0.0
14 0.0 0.0
13 0.0 0.0
SURF 0x20
mat 1
refs 4
8 0.0 0.0
12 0.0 0.0
13 0.0 0.0
9 0.0 0.0
SURF 0x20
mat 1
refs 4
10 0.0 0.0
14 0.0 0.0
15 0.0 0.0
11 0.0 0.0
SURF 0x20
mat 1
refs 4
12 0.0 0.0
8 0.0 0.0
11 0.0 0.0
15 0.0 0.0
SURF 0x20
mat 1
refs 4
16 0.0 0.0
17 0.0 0.0
18 0.0 0.0
19 0.0 0.0
SURF 0x20
mat 1
refs 4
20 0.0 0.0
23 0.0 0.0
22 0.0 0.0
21 0.0 0.0
SURF 0x20
mat 1
refs 4
16 0.0 0.0
20 0.0 0.0
21 0.0 0.0
17 0.0 0.0
SURF 0x20
mat 1
refs 4
18 0.0 0.0
22 0.0 0.0
23 0.0 0.0
19 0.0 0.0
SURF 0x20
mat 1
refs 4
20 0.0 0.0
16 0.0 0.0
19 0.0 0.0
23 0.0 0.0
SURF 0x20
mat 1
refs 4
24 0.0 0.0
25 0.0 0.0
26 0.0 0.0
27 0.0 0.0
SURF 0x20
mat 1
refs 4
28 0.0 0.0
31 0.0 0.0
30 0.0 0.0
29 0.0 0.0
SURF 0x20
mat 1
refs 4
24 0.0 0.0
28 0.0 0.0
29 0.0 0.0
25 0.0 0.0
SURF 0x20
mat 1
refs 4
26 0.0 0.0
30 0.0 0.0
31 0.0 0.0
27 0.0 0.0
SURF 0x20
mat 1
refs 4
28 0.0 0.0
24 0.0 0.0
27 0.0 0.0
31 0.0 0.0
SURF 0x20
mat 1
refs 4
32 0.0 0.0
33 0.0 0.0
34 0.0 0.0
35 0.0 0.0
SURF 0x20
mat 1
refs 4
36 0.0 0.0
39 0.0 0.0
38 0.0 0.0
37 0.0 0.0
SURF 0x20
mat 1
refs 4
32 0.0 0.0
36 0.0 0.0
37 0.0 0.0
33 0.0 0.0
SURF 0x20
mat 1
refs 4
34 0.0 0.0
38 0.0 0.0
39 0.0 0.0
35 0.0 0.0
SURF 0x20
mat 1
refs 4
36 0.0 0.0
32 0.0 0.0
35 0.0 0.0
39 0.0 0.0
kids 0
OBJECT poly
name "Plane"
data 5
Plane
texture "rw_pylon_insulator.png"
texrep 1 1
crease 30.000000
numvert 48
10.01353 25.136858 0
10.01353 23.636858 0
9.61353 23.636858 0
9.61353 25.136858 0
9.81353 25.136858 0.2
9.81353 23.636858 0.2
9.81353 23.636858 -0.2
9.81353 25.136858 -0.2
-9.760196 25.136858 -0.2
-9.760196 23.636858 -0.2
-9.760196 23.636858 0.2
-9.760196 25.136858 0.2
-9.960196 25.136858 0
-9.960196 23.636858 0
-9.560196 23.636858 0
-9.560196 25.136858 0
-9.560196 33.305336 0
-9.560196 31.805334 0
-9.960196 31.805334 0
-9.960196 33.305336 0
-9.760196 33.305336 0.2
-9.760196 31.805334 0.2
-9.760196 31.805334 -0.2
-9.760196 33.305336 -0.2
9.81353 33.305336 -0.2
9.81353 31.805334 -0.2
9.81353 31.805334 0.2
9.81353 33.305336 0.2
9.61353 33.305336 0
9.61353 31.805334 0
10.01353 31.805334 0
10.01353 33.305336 0
10.01353 41.782055 0
10.01353 40.282055 0
9.61353 40.282055 0
9.61353 41.782055 0
9.81353 41.782055 0.2
9.81353 40.282055 0.2
9.81353 40.282055 -0.2
9.81353 41.782055 -0.2
-9.760196 41.782055 -0.2
-9.760196 40.282055 -0.2
-9.760196 40.282055 0.2
-9.760196 41.782055 0.2
-9.960196 41.782055 0
-9.960196 40.282055 0
-9.560196 40.282055 0
-9.560196 41.782055 0
numsurf 12
SURF 0x20
mat 0
refs 4
0 0.0 1.00574707985
3 0.999999940395 1.00574707985
2 1.0 0.0
1 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
7 0.0 1.00574707985
4 0.999999940395 1.00574707985
5 1.0 0.0
6 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
8 0.0 1.00574707985
11 0.999999940395 1.00574707985
10 1.0 0.0
9 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
15 0.0 1.00574707985
12 0.999999940395 1.00574707985
13 1.0 0.0
14 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
16 0.0 1.00574707985
19 0.999999940395 1.00574707985
18 1.0 0.0
17 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
23 0.0 1.00574707985
20 0.999999940395 1.00574707985
21 1.0 0.0
22 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
24 0.0 1.00574707985
27 0.999999940395 1.00574707985
26 1.0 0.0
25 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
31 0.0 1.00574707985
28 0.999999940395 1.00574707985
29 1.0 0.0
30 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
32 0.0 1.00574707985
35 0.999999940395 1.00574707985
34 1.0 0.0
33 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
39 0.0 1.00574707985
36 0.999999940395 1.00574707985
37 1.0 0.0
38 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
40 0.0 1.00574707985
43 0.999999940395 1.00574707985
42 1.0 0.0
41 0.0 -8.76941896877e-08
SURF 0x20
mat 0
refs 4
47 0.0 1.00574707985
44 0.999999940395 1.00574707985
45 1.0 0.0
46 0.0 -8.76941896877e-08
kids 0
OBJECT poly
name "Pylon"
data 8
Mesh.142
crease 30.000000
numvert 369
-6.3 0 -6.3
-2.6 18.4 -2.599999
6.3 0 -6.3
2.6 18.4 -2.599999
0 12.6 -3.77
-3.77 12.6 -3.77
3.77 12.6 -3.77
-2.1 8.400001 -4.599999
2.1 8.400001 -4.599999
0 18.4 -2.599999
-2.23608 28.699999 -2.23608
2.23608 28.699999 -2.23608
-2.25 28.4 -2.249999
-10 25.200001 1e-06
10 25.200001 1e-06
2.25 28.4 -2.249999
-10 33.600002 1e-06
-1.98 36.799999 -1.979998
1.98 36.799999 -1.979998
10 33.600002 1e-06
-10 42 2e-06
-1.7 45.200001 -1.699998
10 42 2e-06
1.7 45.200001 -1.699998
-2.36 25.200001 -2.369999
2.48 22.1 -2.479999
2.36 25.200001 -2.369999
-2.48 22.1 -2.479999
0 25.200001 -2.369999
-2.08 33.600002 -2.099998
2.17 31 -2.199999
2.08 33.600002 -2.099998
-2.17 31 -2.199999
1.9 39.400002 1.900002
-1.9 39.400002 1.900002
1.8 42 -1.799998
-1.8 42 -1.799998
-4.7 27.300001 -1.599999
-4.7 25.200001 -1.599999
-6.8 26.5 -0.899999
-6.8 25.200001 -0.999999
4.7 27.300001 -1.599999
4.7 25.200001 -1.599999
6.8 26.5 -0.899999
6.8 25.200001 -0.999999
-4.7 35.700001 -1.299998
-4.7 33.600002 -1.399999
-6.8 34.900002 -0.799998
-6.8 33.600002 -0.799999
4.7 35.700001 -1.299998
4.7 33.600002 -1.399999
6.8 34.900002 -0.799998
6.8 33.600002 -0.799999
-4.7 44 -1.099998
-4.7 42 -1.099998
-6.8 43.200001 -0.599998
-6.8 42 -0.699998
4.7 44 -1.099998
4.7 42 -1.099998
6.8 43.200001 -0.599998
6.8 42 -0.699998
-6.3 0 6.3
-2.6 18.4 2.600001
6.3 0 6.3
2.6 18.4 2.600001
0 12.6 3.77
-3.77 12.6 3.77
3.77 12.6 3.77
-2.1 8.400001 4.6
2.1 8.400001 4.6
0 18.4 2.600001
-2.23608 28.699999 2.23608
2.23608 28.699999 2.23608
-2.25 28.4 2.250001
2.25 28.4 2.250001
-1.98 36.799999 1.980002
1.98 36.799999 1.980002
-1.7 45.200001 1.700002
1.7 45.200001 1.700002
-2.36 25.200001 2.370001
2.48 22.1 2.480001
2.36 25.200001 2.370001
-2.48 22.1 2.480001
0 25.200001 2.370001
-2.08 33.600002 2.100001
2.17 31 2.200001
2.08 33.600002 2.100001
-2.17 31 2.200001
1.9 39.400002 -1.899998
-1.9 39.400002 -1.899998
1.8 42 1.800002
-1.8 42 1.800002
-4.7 27.300001 1.600001
-4.7 25.200001 1.600001
-6.8 26.5 0.900001
-6.8 25.200001 1.000001
4.7 27.300001 1.600001
4.7 25.200001 1.600001
6.8 26.5 0.900001
6.8 25.200001 1.000001
-4.7 35.700001 1.300002
-4.7 33.600002 1.400001
-6.8 34.900002 0.800002
-6.8 33.600002 0.800002
4.7 35.700001 1.300002
4.7 33.600002 1.400001
6.8 34.900002 0.800002
6.8 33.600002 0.800002
-4.7 44 1.100002
-4.7 42 1.100002
-6.8 43.200001 0.600002
-6.8 42 0.700002
4.7 44 1.100002
4.7 42 1.100002
6.8 43.200001 0.600002
6.8 42 0.700002
3.77 12.6 1e-06
-3.77 12.6 1e-06
-4.6 8.400001 -2.099999
4.6 8.400001 2.1
4.6 8.400001 -2.099999
-4.6 8.400001 2.1
2.6 18.4 1e-06
-2.6 18.4 1e-06
-6 0 6.3
-2.3 18.4 2.600001
6 0 6.3
2.3 18.4 2.600001
-6 0 -6.3
-2.3 18.4 -2.599999
6 0 -6.3
2.3 18.4 -2.599999
-1.816815 28.699999 2.23608
-1.816815 28.699999 -2.23608
1.816815 28.699999 2.23608
1.816815 28.699999 -2.23608
0.3 12.6 3.77
0.3 12.6 -3.77
-0.3 12.6 3.77
-0.3 12.6 -3.77
-3.5 12.6 3.77
-1.8 8.400001 4.6
-3.5 12.6 -3.77
-1.8 8.400001 -4.599999
3.5 12.6 3.77
1.8 8.400001 4.6
3.5 12.6 -3.77
1.8 8.400001 -4.599999
-3.77 12.3 -3.77
3.77 12.3 -3.77
-3.77 12.3 3.77
3.77 12.3 3.77
0.3 18.4 2.600001
0.3 18.4 -2.599999
-0.3 18.4 2.600001
-0.3 18.4 -2.599999
-2.6 18.1 2.600001
2.6 18.1 2.600001
-2.6 18.1 -2.599999
2.6 18.1 -2.599999
-2.25 28.700001 -2.249999
-10 25.5 1e-06
10 25.5 1e-06
2.25 28.700001 -2.249999
-10 33.900002 1e-06
-1.98 37.100002 -1.979998
1.98 37.100002 -1.979998
10 33.900002 1e-06
-10 42.299999 2e-06
-1.7 45.5 -1.699998
10 42.299999 2e-06
1.7 45.5 -1.699998
1.8 42.299999 1.800002
-1.8 42.299999 1.800002
1.8 42.299999 -1.799998
-1.8 42.299999 -1.799998
2.08 33.900002 2.100001
-2.08 33.900002 2.100001
2.08 33.900002 -2.099998
-2.08 33.900002 -2.099998
2.36 25.5 2.370001
-2.36 25.5 2.370001
2.36 25.5 -2.369999
-2.36 25.5 -2.369999
1.7 45.5 1.700002
-1.7 45.5 1.700002
1.98 37.100002 1.980002
-1.98 37.100002 1.980002
2.25 28.700001 2.250001
-2.25 28.700001 2.250001
2.48 22.4 -2.479999
-2.48 22.4 -2.479999
2.17 31.300001 -2.199999
-2.17 31.300001 -2.199999
2.48 22.4 2.480001
-2.48 22.4 2.480001
2.17 31.300001 2.200001
-2.17 31.300001 2.200001
1.9 39.700001 1.900002
-1.9 39.700001 1.900002
-1.9 39.700001 -1.899998
1.9 39.700001 -1.899998
-2.48 21.700001 2.480001
-2.48 21.700001 -2.479999
2.48 21.700001 2.480001
2.48 21.700001 -2.479999
-4.7 25.5 -1.599999
-6.8 26.800001 -0.899999
4.7 25.5 -1.599999
6.8 26.800001 -0.899999
-4.7 33.900002 -1.399999
-6.8 35.200001 -0.799998
4.7 33.900002 -1.399999
6.8 35.200001 -0.799998
-4.7 42.299999 -1.099998
-6.8 43.5 -0.599998
4.7 42.299999 -1.099998
6.8 43.5 -0.599998
-4.7 25.5 1.600001
-6.8 26.800001 0.900001
4.7 25.5 1.600001
6.8 26.800001 0.900001
-4.7 33.900002 1.400001
-6.8 35.200001 0.800002
4.7 33.900002 1.400001
6.8 35.200001 0.800002
-4.7 42.299999 1.100002
-6.8 43.5 0.600002
4.7 42.299999 1.100002
6.8 43.5 0.600002
4.7 44.299999 1.100002
-4.7 44.299999 1.100002
4.7 36 1.300002
-4.7 36 1.300002
4.7 27.6 1.600001
-4.7 27.6 1.600001
0 25.5 2.370001
4.7 44.299999 -1.099998
-4.7 44.299999 -1.099998
4.7 36 -1.299998
-4.7 36 -1.299998
4.7 27.6 -1.599999
-4.7 27.6 -1.599999
0 25.5 -2.369999
-4.9 27.300001 -1.599999
-4.9 25.200001 -1.599999
-7 26.5 -0.899999
-7 25.200001 -0.999999
-4.9 35.700001 -1.299998
-4.9 33.600002 -1.399999
-7 34.900002 -0.799998
-7 33.600002 -0.799999
-4.9 44 -1.099998
-4.9 42 -1.099998
-7 43.200001 -0.599998
-7 42 -0.699998
-4.9 27.300001 1.600001
-4.9 25.200001 1.600001
-7 26.5 0.900001
-7 25.200001 1.000001
-4.9 35.700001 1.300002
-4.9 33.600002 1.400001
-7 34.900002 0.800002
-7 33.600002 0.800002
-4.9 44 1.100002
-4.9 42 1.100002
-7 43.200001 0.600002
-7 42 0.700002
4.9 27.300001 -1.599999
4.9 25.200001 -1.599999
7 26.5 -0.899999
7 25.200001 -0.999999
4.9 35.700001 -1.299998
4.9 33.600002 -1.399999
7 34.900002 -0.799998
7 33.600002 -0.799999
4.9 44 -1.099998
4.9 42 -1.099998
7 43.200001 -0.599998
7 42 -0.699998
4.9 27.300001 1.600001
4.9 25.200001 1.600001
7 26.5 0.900001
7 25.200001 1.000001
4.9 35.700001 1.300002
4.9 33.600002 1.400001
7 34.900002 0.800002
7 33.600002 0.800002
4.9 44 1.100002
4.9 42 1.100002
7 43.200001 0.600002
7 42 0.700002
2.36 25.5 1e-06
-2.36 25.5 1e-06
2.6 18.4 0.300001
-2.6 18.4 0.300001
2.6 18.4 -0.299999
-2.6 18.4 -0.299999
3.77 12.6 3.5
-3.77 12.6 3.5
3.77 12.6 -3.5
-3.77 12.6 -3.5
4.6 8.400001 1.8
-4.6 8.400001 1.8
4.6 8.400001 -1.8
-4.6 8.400001 -1.8
3.77 12.6 -0.299999
-3.77 12.6 -0.299999
3.77 12.6 0.300001
-3.77 12.6 0.300001
2.23608 28.699999 1.816815
-2.23608 28.699999 1.816815
2.23608 28.699999 -1.816815
-2.23608 28.699999 -1.816815
2.6 18.4 2.300001
6.3 0 6
2.6 18.4 -2.299999
6.3 0 -6
-2.6 18.4 2.300001
-6.3 0 6
-2.6 18.4 -2.299999
-6.3 0 -6
-2.36 25.200001 1e-06
2.36 25.200001 1e-06
-0.3 47.295094 2e-06
-1.6 45.795094 -1.299998
-1.6 45.795094 1.300002
1.6 45.795094 -1.299998
1.6 45.795094 1.300002
0.2 47.295094 2e-06
0 47.295094 -0.199998
1.3 45.795094 -1.599998
-1.3 45.795094 -1.599998
1.3 45.795094 1.600002
0 47.595093 2e-06
-1.3 45.795094 1.600002
0 47.295094 0.300002
1.6 45.795094 1.600002
-1.6 45.795094 1.600002
1.6 45.795094 -1.599998
-1.6 45.795094 -1.599998
1.6 45.49509 1.600002
-1.6 45.49509 1.600002
1.6 45.49509 -1.599998
-1.6 45.49509 -1.599998
-1.997881 37.11393 1.971619
-1.623278 37.11393 1.971619
-1.997881 37.11393 -1.971619
-1.623278 37.11393 -1.971619
1.997881 37.11393 1.971619
1.623278 37.11393 1.971619
1.997881 37.11393 -1.971619
1.623278 37.11393 -1.971619
1.997881 37.11393 1.60194
-1.997881 37.11393 1.60194
1.997881 37.11393 -1.60194
-1.997881 37.11393 -1.60194
-1.703457 45.497639 1.690476
-1.384058 45.497639 1.690476
-1.703457 45.497639 -1.690477
-1.384058 45.497639 -1.690477
1.703457 45.497639 1.690476
1.384059 45.497639 1.690476
1.703457 45.497639 -1.690477
1.384059 45.497639 -1.690477
1.703457 45.497639 1.373512
-1.703457 45.497639 1.373512
1.703457 45.497639 -1.373512
-1.703457 45.497639 -1.373512
numsurf 276
SURF 0x20
mat 2
refs 4
62 0.0 0.0
61 0.0 0.0
124 0.0 0.0
125 0.0 0.0
SURF 0x20
mat 2
refs 4
64 0.0 0.0
127 0.0 0.0
126 0.0 0.0
63 0.0 0.0
SURF 0x20
mat 2
refs 4
128 0.0 0.0
0 0.0 0.0
1 0.0 0.0
129 0.0 0.0
SURF 0x20
mat 2
refs 4
3 0.0 0.0
2 0.0 0.0
130 0.0 0.0
131 0.0 0.0
SURF 0x20
mat 3
refs 4
71 0.0 0.0
62 0.0 0.0
125 0.0 0.0
132 0.0 0.0
SURF 0x20
mat 3
refs 4
10 0.0 0.0
133 0.0 0.0
129 0.0 0.0
1 0.0 0.0
SURF 0x20
mat 3
refs 4
72 0.0 0.0
134 0.0 0.0
127 0.0 0.0
64 0.0 0.0
SURF 0x20
mat 3
refs 4
11 0.0 0.0
3 0.0 0.0
131 0.0 0.0
135 0.0 0.0
SURF 0x20
mat 2
refs 4
65 0.0 0.0
136 0.0 0.0
124 0.0 0.0
61 0.0 0.0
SURF 0x20
mat 2
refs 4
4 0.0 0.0
0 0.0 0.0
128 0.0 0.0
137 0.0 0.0
SURF 0x20
mat 2
refs 4
63 0.0 0.0
126 0.0 0.0
138 0.0 0.0
65 0.0 0.0
SURF 0x20
mat 2
refs 4
2 0.0 0.0
4 0.0 0.0
139 0.0 0.0
130 0.0 0.0
SURF 0x20
mat 2
refs 4
68 0.0 0.0
141 0.0 0.0
140 0.0 0.0
66 0.0 0.0
SURF 0x20
mat 2
refs 4
7 0.0 0.0
5 0.0 0.0
142 0.0 0.0
143 0.0 0.0
SURF 0x20
mat 2
refs 4
69 0.0 0.0
67 0.0 0.0
144 0.0 0.0
145 0.0 0.0
SURF 0x20
mat 2
refs 4
8 0.0 0.0
147 0.0 0.0
146 0.0 0.0
6 0.0 0.0
SURF 0x20
mat 2
refs 4
6 0.0 0.0
149 0.0 0.0
148 0.0 0.0
5 0.0 0.0
SURF 0x20
mat 2
refs 4
67 0.0 0.0
66 0.0 0.0
150 0.0 0.0
151 0.0 0.0
SURF 0x20
mat 2
refs 4
70 0.0 0.0
66 0.0 0.0
140 0.0 0.0
152 0.0 0.0
SURF 0x20
mat 2
refs 4
9 0.0 0.0
153 0.0 0.0
142 0.0 0.0
5 0.0 0.0
SURF 0x20
mat 2
refs 4
70 0.0 0.0
154 0.0 0.0
144 0.0 0.0
67 0.0 0.0
SURF 0x20
mat 2
refs 4
9 0.0 0.0
6 0.0 0.0
146 0.0 0.0
155 0.0 0.0
SURF 0x20
mat 3
refs 4
64 0.0 0.0
62 0.0 0.0
156 0.0 0.0
157 0.0 0.0
SURF 0x20
mat 3
refs 4
3 0.0 0.0
159 0.0 0.0
158 0.0 0.0
1 0.0 0.0
SURF 0x20
mat 3
refs 4
13 0.0 0.0
12 0.0 0.0
160 0.0 0.0
161 0.0 0.0
SURF 0x20
mat 3
refs 4
15 0.0 0.0
14 0.0 0.0
162 0.0 0.0
163 0.0 0.0
SURF 0x20
mat 4
refs 4
17 0.0 0.0
16 0.0 0.0
164 0.0 0.0
165 0.0 0.0
SURF 0x20
mat 4
refs 4
19 0.0 0.0
18 0.0 0.0
166 0.0 0.0
167 0.0 0.0
SURF 0x20
mat 3
refs 4
21 0.0 0.0
169 0.0 0.0
168 0.0 0.0
20 0.0 0.0
SURF 0x20
mat 3
refs 4
23 0.0 0.0
22 0.0 0.0
170 0.0 0.0
171 0.0 0.0
SURF 0x20
mat 3
refs 4
90 0.0 0.0
172 0.0 0.0
170 0.0 0.0
22 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
20 0.0 0.0
168 0.0 0.0
173 0.0 0.0
SURF 0x20
mat 3
refs 4
35 0.0 0.0
22 0.0 0.0
170 0.0 0.0
174 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
175 0.0 0.0
168 0.0 0.0
20 0.0 0.0
SURF 0x20
mat 4
refs 4
86 0.0 0.0
19 0.0 0.0
167 0.0 0.0
176 0.0 0.0
SURF 0x20
mat 4
refs 4
84 0.0 0.0
177 0.0 0.0
164 0.0 0.0
16 0.0 0.0
SURF 0x20
mat 4
refs 4
31 0.0 0.0
178 0.0 0.0
167 0.0 0.0
19 0.0 0.0
SURF 0x20
mat 4
refs 4
29 0.0 0.0
16 0.0 0.0
164 0.0 0.0
179 0.0 0.0
SURF 0x20
mat 3
refs 4
81 0.0 0.0
180 0.0 0.0
162 0.0 0.0
14 0.0 0.0
SURF 0x20
mat 3
refs 4
79 0.0 0.0
13 0.0 0.0
161 0.0 0.0
181 0.0 0.0
SURF 0x20
mat 3
refs 4
26 0.0 0.0
14 0.0 0.0
162 0.0 0.0
182 0.0 0.0
SURF 0x20
mat 3
refs 4
24 0.0 0.0
183 0.0 0.0
161 0.0 0.0
13 0.0 0.0
SURF 0x20
mat 3
refs 4
78 0.0 0.0
184 0.0 0.0
170 0.0 0.0
22 0.0 0.0
SURF 0x20
mat 3
refs 4
77 0.0 0.0
20 0.0 0.0
168 0.0 0.0
185 0.0 0.0
SURF 0x20
mat 4
refs 4
76 0.0 0.0
19 0.0 0.0
167 0.0 0.0
186 0.0 0.0
SURF 0x20
mat 4
refs 4
75 0.0 0.0
187 0.0 0.0
164 0.0 0.0
16 0.0 0.0
SURF 0x20
mat 3
refs 4
74 0.0 0.0
188 0.0 0.0
162 0.0 0.0
14 0.0 0.0
SURF 0x20
mat 3
refs 4
73 0.0 0.0
13 0.0 0.0
161 0.0 0.0
189 0.0 0.0
SURF 0x20
mat 3
refs 4
25 0.0 0.0
190 0.0 0.0
183 0.0 0.0
24 0.0 0.0
SURF 0x20
mat 3
refs 4
27 0.0 0.0
26 0.0 0.0
182 0.0 0.0
191 0.0 0.0
SURF 0x20
mat 4
refs 4
30 0.0 0.0
29 0.0 0.0
179 0.0 0.0
192 0.0 0.0
SURF 0x20
mat 4
refs 4
32 0.0 0.0
193 0.0 0.0
178 0.0 0.0
31 0.0 0.0
SURF 0x20
mat 3
refs 4
80 0.0 0.0
79 0.0 0.0
181 0.0 0.0
194 0.0 0.0
SURF 0x20
mat 3
refs 4
82 0.0 0.0
195 0.0 0.0
180 0.0 0.0
81 0.0 0.0
SURF 0x20
mat 4
refs 4
85 0.0 0.0
196 0.0 0.0
177 0.0 0.0
84 0.0 0.0
SURF 0x20
mat 4
refs 4
87 0.0 0.0
86 0.0 0.0
176 0.0 0.0
197 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
173 0.0 0.0
172 0.0 0.0
90 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
35 0.0 0.0
174 0.0 0.0
175 0.0 0.0
SURF 0x20
mat 4
refs 4
86 0.0 0.0
84 0.0 0.0
177 0.0 0.0
176 0.0 0.0
SURF 0x20
mat 4
refs 4
31 0.0 0.0
178 0.0 0.0
179 0.0 0.0
29 0.0 0.0
SURF 0x20
mat 3
refs 4
81 0.0 0.0
180 0.0 0.0
181 0.0 0.0
79 0.0 0.0
SURF 0x20
mat 3
refs 4
26 0.0 0.0
24 0.0 0.0
183 0.0 0.0
182 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
78 0.0 0.0
184 0.0 0.0
173 0.0 0.0
SURF 0x20
mat 3
refs 4
90 0.0 0.0
172 0.0 0.0
185 0.0 0.0
77 0.0 0.0
SURF 0x20
mat 4
refs 4
84 0.0 0.0
76 0.0 0.0
186 0.0 0.0
177 0.0 0.0
SURF 0x20
mat 4
refs 4
86 0.0 0.0
176 0.0 0.0
187 0.0 0.0
75 0.0 0.0
SURF 0x20
mat 3
refs 4
78 0.0 0.0
77 0.0 0.0
185 0.0 0.0
184 0.0 0.0
SURF 0x20
mat 4
refs 4
76 0.0 0.0
75 0.0 0.0
187 0.0 0.0
186 0.0 0.0
SURF 0x20
mat 4
refs 4
85 0.0 0.0
73 0.0 0.0
189 0.0 0.0
196 0.0 0.0
SURF 0x20
mat 4
refs 4
87 0.0 0.0
197 0.0 0.0
188 0.0 0.0
74 0.0 0.0
SURF 0x20
mat 3
refs 4
74 0.0 0.0
188 0.0 0.0
189 0.0 0.0
73 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
175 0.0 0.0
171 0.0 0.0
23 0.0 0.0
SURF 0x20
mat 3
refs 4
35 0.0 0.0
21 0.0 0.0
169 0.0 0.0
174 0.0 0.0
SURF 0x20
mat 4
refs 4
29 0.0 0.0
179 0.0 0.0
166 0.0 0.0
18 0.0 0.0
SURF 0x20
mat 4
refs 4
31 0.0 0.0
17 0.0 0.0
165 0.0 0.0
178 0.0 0.0
SURF 0x20
mat 3
refs 4
23 0.0 0.0
171 0.0 0.0
169 0.0 0.0
21 0.0 0.0
SURF 0x20
mat 4
refs 4
18 0.0 0.0
166 0.0 0.0
165 0.0 0.0
17 0.0 0.0
SURF 0x20
mat 4
refs 4
30 0.0 0.0
192 0.0 0.0
160 0.0 0.0
12 0.0 0.0
SURF 0x20
mat 4
refs 4
32 0.0 0.0
15 0.0 0.0
163 0.0 0.0
193 0.0 0.0
SURF 0x20
mat 3
refs 4
15 0.0 0.0
12 0.0 0.0
160 0.0 0.0
163 0.0 0.0
SURF 0x20
mat 3
refs 4
75 0.0 0.0
33 0.0 0.0
198 0.0 0.0
187 0.0 0.0
SURF 0x20
mat 3
refs 4
76 0.0 0.0
186 0.0 0.0
199 0.0 0.0
34 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
173 0.0 0.0
198 0.0 0.0
33 0.0 0.0
SURF 0x20
mat 3
refs 4
90 0.0 0.0
34 0.0 0.0
199 0.0 0.0
172 0.0 0.0
SURF 0x20
mat 3
refs 4
89 0.0 0.0
200 0.0 0.0
166 0.0 0.0
18 0.0 0.0
SURF 0x20
mat 3
refs 4
88 0.0 0.0
17 0.0 0.0
165 0.0 0.0
201 0.0 0.0
SURF 0x20
mat 3
refs 4
89 0.0 0.0
35 0.0 0.0
174 0.0 0.0
200 0.0 0.0
SURF 0x20
mat 3
refs 4
88 0.0 0.0
201 0.0 0.0
175 0.0 0.0
36 0.0 0.0
SURF 0x20
mat 3
refs 4
82 0.0 0.0
202 0.0 0.0
154 0.0 0.0
70 0.0 0.0
SURF 0x20
mat 3
refs 4
27 0.0 0.0
9 0.0 0.0
155 0.0 0.0
203 0.0 0.0
SURF 0x20
mat 3
refs 4
80 0.0 0.0
70 0.0 0.0
152 0.0 0.0
204 0.0 0.0
SURF 0x20
mat 3
refs 4
25 0.0 0.0
205 0.0 0.0
153 0.0 0.0
9 0.0 0.0
SURF 0x20
mat 3
refs 4
39 0.0 0.0
207 0.0 0.0
206 0.0 0.0
38 0.0 0.0
SURF 0x20
mat 3
refs 4
43 0.0 0.0
42 0.0 0.0
208 0.0 0.0
209 0.0 0.0
SURF 0x20
mat 4
refs 4
47 0.0 0.0
211 0.0 0.0
210 0.0 0.0
46 0.0 0.0
SURF 0x20
mat 4
refs 4
51 0.0 0.0
50 0.0 0.0
212 0.0 0.0
213 0.0 0.0
SURF 0x20
mat 3
refs 4
55 0.0 0.0
215 0.0 0.0
214 0.0 0.0
54 0.0 0.0
SURF 0x20
mat 3
refs 4
59 0.0 0.0
58 0.0 0.0
216 0.0 0.0
217 0.0 0.0
SURF 0x20
mat 3
refs 4
94 0.0 0.0
93 0.0 0.0
218 0.0 0.0
219 0.0 0.0
SURF 0x20
mat 3
refs 4
98 0.0 0.0
221 0.0 0.0
220 0.0 0.0
97 0.0 0.0
SURF 0x20
mat 4
refs 4
102 0.0 0.0
101 0.0 0.0
222 0.0 0.0
223 0.0 0.0
SURF 0x20
mat 4
refs 4
106 0.0 0.0
225 0.0 0.0
224 0.0 0.0
105 0.0 0.0
SURF 0x20
mat 3
refs 4
110 0.0 0.0
109 0.0 0.0
226 0.0 0.0
227 0.0 0.0
SURF 0x20
mat 3
refs 4
114 0.0 0.0
229 0.0 0.0
228 0.0 0.0
113 0.0 0.0
SURF 0x20
mat 3
refs 4
112 0.0 0.0
90 0.0 0.0
172 0.0 0.0
230 0.0 0.0
SURF 0x20
mat 3
refs 4
108 0.0 0.0
231 0.0 0.0
173 0.0 0.0
91 0.0 0.0
SURF 0x20
mat 4
refs 4
104 0.0 0.0
86 0.0 0.0
176 0.0 0.0
232 0.0 0.0
SURF 0x20
mat 4
refs 4
100 0.0 0.0
233 0.0 0.0
177 0.0 0.0
84 0.0 0.0
SURF 0x20
mat 3
refs 4
96 0.0 0.0
234 0.0 0.0
180 0.0 0.0
81 0.0 0.0
SURF 0x20
mat 3
refs 4
92 0.0 0.0
79 0.0 0.0
181 0.0 0.0
235 0.0 0.0
SURF 0x20
mat 3
refs 4
83 0.0 0.0
236 0.0 0.0
188 0.0 0.0
74 0.0 0.0
SURF 0x20
mat 3
refs 4
83 0.0 0.0
73 0.0 0.0
189 0.0 0.0
236 0.0 0.0
SURF 0x20
mat 3
refs 4
57 0.0 0.0
237 0.0 0.0
174 0.0 0.0
35 0.0 0.0
SURF 0x20
mat 3
refs 4
53 0.0 0.0
36 0.0 0.0
175 0.0 0.0
238 0.0 0.0
SURF 0x20
mat 4
refs 4
49 0.0 0.0
31 0.0 0.0
178 0.0 0.0
239 0.0 0.0
SURF 0x20
mat 4
refs 4
45 0.0 0.0
240 0.0 0.0
179 0.0 0.0
29 0.0 0.0
SURF 0x20
mat 3
refs 4
41 0.0 0.0
26 0.0 0.0
182 0.0 0.0
241 0.0 0.0
SURF 0x20
mat 3
refs 4
37 0.0 0.0
242 0.0 0.0
183 0.0 0.0
24 0.0 0.0
SURF 0x20
mat 3
refs 4
28 0.0 0.0
15 0.0 0.0
163 0.0 0.0
243 0.0 0.0
SURF 0x20
mat 3
refs 4
28 0.0 0.0
243 0.0 0.0
160 0.0 0.0
12 0.0 0.0
SURF 0x20
mat 3
refs 4
38 0.0 0.0
245 0.0 0.0
244 0.0 0.0
37 0.0 0.0
SURF 0x20
mat 3
refs 4
40 0.0 0.0
247 0.0 0.0
246 0.0 0.0
39 0.0 0.0
SURF 0x20
mat 4
refs 4
46 0.0 0.0
249 0.0 0.0
248 0.0 0.0
45 0.0 0.0
SURF 0x20
mat 4
refs 4
48 0.0 0.0
251 0.0 0.0
250 0.0 0.0
47 0.0 0.0
SURF 0x20
mat 3
refs 4
54 0.0 0.0
253 0.0 0.0
252 0.0 0.0
53 0.0 0.0
SURF 0x20
mat 3
refs 4
56 0.0 0.0
255 0.0 0.0
254 0.0 0.0
55 0.0 0.0
SURF 0x20
mat 3
refs 4
93 0.0 0.0
92 0.0 0.0
256 0.0 0.0
257 0.0 0.0
SURF 0x20
mat 3
refs 4
95 0.0 0.0
94 0.0 0.0
258 0.0 0.0
259 0.0 0.0
SURF 0x20
mat 4
refs 4
101 0.0 0.0
100 0.0 0.0
260 0.0 0.0
261 0.0 0.0
SURF 0x20
mat 4
refs 4
103 0.0 0.0
102 0.0 0.0
262 0.0 0.0
263 0.0 0.0
SURF 0x20
mat 3
refs 4
109 0.0 0.0
108 0.0 0.0
264 0.0 0.0
265 0.0 0.0
SURF 0x20
mat 3
refs 4
111 0.0 0.0
110 0.0 0.0
266 0.0 0.0
267 0.0 0.0
SURF 0x20
mat 3
refs 4
42 0.0 0.0
41 0.0 0.0
268 0.0 0.0
269 0.0 0.0
SURF 0x20
mat 3
refs 4
44 0.0 0.0
43 0.0 0.0
270 0.0 0.0
271 0.0 0.0
SURF 0x20
mat 4
refs 4
50 0.0 0.0
49 0.0 0.0
272 0.0 0.0
273 0.0 0.0
SURF 0x20
mat 4
refs 4
52 0.0 0.0
51 0.0 0.0
274 0.0 0.0
275 0.0 0.0
SURF 0x20
mat 3
refs 4
58 0.0 0.0
57 0.0 0.0
276 0.0 0.0
277 0.0 0.0
SURF 0x20
mat 3
refs 4
60 0.0 0.0
59 0.0 0.0
278 0.0 0.0
279 0.0 0.0
SURF 0x20
mat 3
refs 4
97 0.0 0.0
281 0.0 0.0
280 0.0 0.0
96 0.0 0.0
SURF 0x20
mat 3
refs 4
99 0.0 0.0
283 0.0 0.0
282 0.0 0.0
98 0.0 0.0
SURF 0x20
mat 4
refs 4
105 0.0 0.0
285 0.0 0.0
284 0.0 0.0
104 0.0 0.0
SURF 0x20
mat 4
refs 4
107 0.0 0.0
287 0.0 0.0
286 0.0 0.0
106 0.0 0.0
SURF 0x20
mat 3
refs 4
113 0.0 0.0
289 0.0 0.0
288 0.0 0.0
112 0.0 0.0
SURF 0x20
mat 3
refs 4
115 0.0 0.0
291 0.0 0.0
290 0.0 0.0
114 0.0 0.0
SURF 0x20
mat 3
refs 4
323 0.0 0.0
292 0.0 0.0
163 0.0 0.0
15 0.0 0.0
SURF 0x20
mat 3
refs 4
323 0.0 0.0
74 0.0 0.0
188 0.0 0.0
292 0.0 0.0
SURF 0x20
mat 3
refs 4
322 0.0 0.0
12 0.0 0.0
160 0.0 0.0
293 0.0 0.0
SURF 0x20
mat 3
refs 4
322 0.0 0.0
293 0.0 0.0
189 0.0 0.0
73 0.0 0.0
SURF 0x20
mat 3
refs 4
80 0.0 0.0
204 0.0 0.0
294 0.0 0.0
122 0.0 0.0
SURF 0x20
mat 3
refs 4
82 0.0 0.0
123 0.0 0.0
295 0.0 0.0
202 0.0 0.0
SURF 0x20
mat 3
refs 4
25 0.0 0.0
122 0.0 0.0
296 0.0 0.0
205 0.0 0.0
SURF 0x20
mat 3
refs 4
27 0.0 0.0
203 0.0 0.0
297 0.0 0.0
123 0.0 0.0
SURF 0x20
mat 3
refs 4
33 0.0 0.0
198 0.0 0.0
174 0.0 0.0
35 0.0 0.0
SURF 0x20
mat 3
refs 4
88 0.0 0.0
90 0.0 0.0
172 0.0 0.0
201 0.0 0.0
SURF 0x20
mat 3
refs 4
33 0.0 0.0
18 0.0 0.0
166 0.0 0.0
198 0.0 0.0
SURF 0x20
mat 3
refs 4
88 0.0 0.0
201 0.0 0.0
186 0.0 0.0
76 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
89 0.0 0.0
200 0.0 0.0
173 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
175 0.0 0.0
199 0.0 0.0
34 0.0 0.0
SURF 0x20
mat 3
refs 4
75 0.0 0.0
187 0.0 0.0
200 0.0 0.0
89 0.0 0.0
SURF 0x20
mat 3
refs 4
17 0.0 0.0
34 0.0 0.0
199 0.0 0.0
165 0.0 0.0
SURF 0x20
mat 3
refs 4
74 0.0 0.0
15 0.0 0.0
163 0.0 0.0
188 0.0 0.0
SURF 0x20
mat 4
refs 4
30 0.0 0.0
74 0.0 0.0
188 0.0 0.0
192 0.0 0.0
SURF 0x20
mat 4
refs 4
85 0.0 0.0
196 0.0 0.0
163 0.0 0.0
15 0.0 0.0
SURF 0x20
mat 4
refs 4
76 0.0 0.0
186 0.0 0.0
166 0.0 0.0
18 0.0 0.0
SURF 0x20
mat 3
refs 4
78 0.0 0.0
184 0.0 0.0
171 0.0 0.0
23 0.0 0.0
SURF 0x20
mat 4
refs 4
86 0.0 0.0
18 0.0 0.0
166 0.0 0.0
176 0.0 0.0
SURF 0x20
mat 4
refs 4
31 0.0 0.0
178 0.0 0.0
186 0.0 0.0
76 0.0 0.0
SURF 0x20
mat 3
refs 4
90 0.0 0.0
23 0.0 0.0
171 0.0 0.0
172 0.0 0.0
SURF 0x20
mat 3
refs 4
35 0.0 0.0
174 0.0 0.0
184 0.0 0.0
78 0.0 0.0
SURF 0x20
mat 3
refs 4
73 0.0 0.0
189 0.0 0.0
160 0.0 0.0
12 0.0 0.0
SURF 0x20
mat 4
refs 4
32 0.0 0.0
193 0.0 0.0
189 0.0 0.0
73 0.0 0.0
SURF 0x20
mat 4
refs 4
87 0.0 0.0
12 0.0 0.0
160 0.0 0.0
197 0.0 0.0
SURF 0x20
mat 4
refs 4
75 0.0 0.0
17 0.0 0.0
165 0.0 0.0
187 0.0 0.0
SURF 0x20
mat 3
refs 4
77 0.0 0.0
21 0.0 0.0
169 0.0 0.0
185 0.0 0.0
SURF 0x20
mat 4
refs 4
84 0.0 0.0
177 0.0 0.0
165 0.0 0.0
17 0.0 0.0
SURF 0x20
mat 4
refs 4
29 0.0 0.0
75 0.0 0.0
187 0.0 0.0
179 0.0 0.0
SURF 0x20
mat 3
refs 4
91 0.0 0.0
173 0.0 0.0
169 0.0 0.0
21 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
77 0.0 0.0
185 0.0 0.0
175 0.0 0.0
SURF 0x20
mat 3
refs 4
81 0.0 0.0
26 0.0 0.0
182 0.0 0.0
180 0.0 0.0
SURF 0x20
mat 3
refs 4
79 0.0 0.0
181 0.0 0.0
183 0.0 0.0
24 0.0 0.0
SURF 0x20
mat 4
refs 4
86 0.0 0.0
176 0.0 0.0
178 0.0 0.0
31 0.0 0.0
SURF 0x20
mat 4
refs 4
84 0.0 0.0
29 0.0 0.0
179 0.0 0.0
177 0.0 0.0
SURF 0x20
mat 3
refs 4
35 0.0 0.0
174 0.0 0.0
172 0.0 0.0
90 0.0 0.0
SURF 0x20
mat 3
refs 4
36 0.0 0.0
91 0.0 0.0
173 0.0 0.0
175 0.0 0.0
SURF 0x20
mat 4
refs 4
32 0.0 0.0
84 0.0 0.0
177 0.0 0.0
193 0.0 0.0
SURF 0x20
mat 4
refs 4
87 0.0 0.0
197 0.0 0.0
179 0.0 0.0
29 0.0 0.0
SURF 0x20
mat 3
refs 4
27 0.0 0.0
191 0.0 0.0
181 0.0 0.0
79 0.0 0.0
SURF 0x20
mat 3
refs 4
82 0.0 0.0
24 0.0 0.0
183 0.0 0.0
195 0.0 0.0
SURF 0x20
mat 4
refs 4
30 0.0 0.0
192 0.0 0.0
176 0.0 0.0
86 0.0 0.0
SURF 0x20
mat 4
refs 4
85 0.0 0.0
31 0.0 0.0
178 0.0 0.0
196 0.0 0.0
SURF 0x20
mat 3
refs 4
25 0.0 0.0
81 0.0 0.0
180 0.0 0.0
190 0.0 0.0
SURF 0x20
mat 3
refs 4
80 0.0 0.0
194 0.0 0.0
182 0.0 0.0
26 0.0 0.0
SURF 0x20
mat 3
refs 4
64 0.0 0.0
157 0.0 0.0
159 0.0 0.0
3 0.0 0.0
SURF 0x20
mat 3
refs 4
62 0.0 0.0
1 0.0 0.0
158 0.0 0.0
156 0.0 0.0
SURF 0x20
mat 2
refs 4
122 0.0 0.0
67 0.0 0.0
298 0.0 0.0
296 0.0 0.0
SURF 0x20
mat 2
refs 4
123 0.0 0.0
297 0.0 0.0
299 0.0 0.0
66 0.0 0.0
SURF 0x20
mat 2
refs 4
122 0.0 0.0
294 0.0 0.0
300 0.0 0.0
6 0.0 0.0
SURF 0x20
mat 2
refs 4
123 0.0 0.0
5 0.0 0.0
301 0.0 0.0
295 0.0 0.0
SURF 0x20
mat 2
refs 4
66 0.0 0.0
5 0.0 0.0
148 0.0 0.0
150 0.0 0.0
SURF 0x20
mat 2
refs 4
67 0.0 0.0
151 0.0 0.0
149 0.0 0.0
6 0.0 0.0
SURF 0x20
mat 2
refs 4
119 0.0 0.0
302 0.0 0.0
298 0.0 0.0
67 0.0 0.0
SURF 0x20
mat 2
refs 4
121 0.0 0.0
66 0.0 0.0
299 0.0 0.0
303 0.0 0.0
SURF 0x20
mat 2
refs 4
120 0.0 0.0
6 0.0 0.0
300 0.0 0.0
304 0.0 0.0
SURF 0x20
mat 2
refs 4
118 0.0 0.0
305 0.0 0.0
301 0.0 0.0
5 0.0 0.0
SURF 0x20
mat 2
refs 4
63 0.0 0.0
116 0.0 0.0
306 0.0 0.0
315 0.0 0.0
SURF 0x20
mat 2
refs 4
61 0.0 0.0
319 0.0 0.0
307 0.0 0.0
117 0.0 0.0
SURF 0x20
mat 2
refs 4
116 0.0 0.0
2 0.0 0.0
317 0.0 0.0
308 0.0 0.0
SURF 0x20
mat 2
refs 4
321 0.0 0.0
0 0.0 0.0
117 0.0 0.0
309 0.0 0.0
SURF 0x20
mat 3
refs 4
72 0.0 0.0
64 0.0 0.0
314 0.0 0.0
310 0.0 0.0
SURF 0x20
mat 3
refs 4
71 0.0 0.0
311 0.0 0.0
318 0.0 0.0
62 0.0 0.0
SURF 0x20
mat 3
refs 4
11 0.0 0.0
312 0.0 0.0
316 0.0 0.0
3 0.0 0.0
SURF 0x20
mat 3
refs 4
10 0.0 0.0
1 0.0 0.0
320 0.0 0.0
313 0.0 0.0
SURF 0x20
mat 2
refs 4
64 0.0 0.0
63 0.0 0.0
315 0.0 0.0
314 0.0 0.0
SURF 0x20
mat 2
refs 4
3 0.0 0.0
316 0.0 0.0
317 0.0 0.0
2 0.0 0.0
SURF 0x20
mat 2
refs 4
62 0.0 0.0
318 0.0 0.0
319 0.0 0.0
61 0.0 0.0
SURF 0x20
mat 2
refs 4
1 0.0 0.0
0 0.0 0.0
321 0.0 0.0
320 0.0 0.0
SURF 0x20
mat 3
refs 4
108 0.0 0.0
53 0.0 0.0
252 0.0 0.0
264 0.0 0.0
SURF 0x20
mat 3
refs 4
110 0.0 0.0
55 0.0 0.0
254 0.0 0.0
266 0.0 0.0
SURF 0x20
mat 4
refs 4
100 0.0 0.0
45 0.0 0.0
248 0.0 0.0
260 0.0 0.0
SURF 0x20
mat 4
refs 4
102 0.0 0.0
47 0.0 0.0
250 0.0 0.0
262 0.0 0.0
SURF 0x20
mat 3
refs 4
94 0.0 0.0
39 0.0 0.0
246 0.0 0.0
258 0.0 0.0
SURF 0x20
mat 3
refs 4
92 0.0 0.0
37 0.0 0.0
244 0.0 0.0
256 0.0 0.0
SURF 0x20
mat 3
refs 4
111 0.0 0.0
267 0.0 0.0
255 0.0 0.0
56 0.0 0.0
SURF 0x20
mat 3
refs 4
109 0.0 0.0
265 0.0 0.0
253 0.0 0.0
54 0.0 0.0
SURF 0x20
mat 4
refs 4
103 0.0 0.0
263 0.0 0.0
251 0.0 0.0
48 0.0 0.0
SURF 0x20
mat 4
refs 4
101 0.0 0.0
261 0.0 0.0
249 0.0 0.0
46 0.0 0.0
SURF 0x20
mat 3
refs 4
95 0.0 0.0
259 0.0 0.0
247 0.0 0.0
40 0.0 0.0
SURF 0x20
mat 3
refs 4
93 0.0 0.0
257 0.0 0.0
245 0.0 0.0
38 0.0 0.0
SURF 0x20
mat 3
refs 4
112 0.0 0.0
288 0.0 0.0
276 0.0 0.0
57 0.0 0.0
SURF 0x20
mat 3
refs 4
114 0.0 0.0
290 0.0 0.0
278 0.0 0.0
59 0.0 0.0
SURF 0x20
mat 4
refs 4
104 0.0 0.0
284 0.0 0.0
272 0.0 0.0
49 0.0 0.0
SURF 0x20
mat 4
refs 4
106 0.0 0.0
286 0.0 0.0
274 0.0 0.0
51 0.0 0.0
SURF 0x20
mat 3
refs 4
98 0.0 0.0
282 0.0 0.0
270 0.0 0.0
43 0.0 0.0
SURF 0x20
mat 3
refs 4
96 0.0 0.0
280 0.0 0.0
268 0.0 0.0
41 0.0 0.0
SURF 0x20
mat 3
refs 4
113 0.0 0.0
58 0.0 0.0
277 0.0 0.0
289 0.0 0.0
SURF 0x20
mat 3
refs 4
115 0.0 0.0
60 0.0 0.0
279 0.0 0.0
291 0.0 0.0
SURF 0x20
mat 4
refs 4
105 0.0 0.0
50 0.0 0.0
273 0.0 0.0
285 0.0 0.0
SURF 0x20
mat 4
refs 4
107 0.0 0.0
52 0.0 0.0
275 0.0 0.0
287 0.0 0.0
SURF 0x20
mat 3
refs 4
97 0.0 0.0
42 0.0 0.0
269 0.0 0.0
281 0.0 0.0
SURF 0x20
mat 3
refs 4
99 0.0 0.0
44 0.0 0.0
271 0.0 0.0
283 0.0 0.0
SURF 0x20
mat 3
refs 4
341 0.0 0.0
343 0.0 0.0
339 0.0 0.0
337 0.0 0.0
SURF 0x20
mat 3
refs 4
342 0.0 0.0
338 0.0 0.0
340 0.0 0.0
344 0.0 0.0
SURF 0x20
mat 3
refs 4
340 0.0 0.0
325 0.0 0.0
324 0.0 0.0
334 0.0 0.0
SURF 0x20
mat 3
refs 4
334 0.0 0.0
324 0.0 0.0
326 0.0 0.0
338 0.0 0.0
SURF 0x20
mat 3
refs 4
334 0.0 0.0
329 0.0 0.0
327 0.0 0.0
339 0.0 0.0
SURF 0x20
mat 3
refs 4
337 0.0 0.0
328 0.0 0.0
329 0.0 0.0
334 0.0 0.0
SURF 0x20
mat 3
refs 4
339 0.0 0.0
331 0.0 0.0
330 0.0 0.0
334 0.0 0.0
SURF 0x20
mat 3
refs 4
334 0.0 0.0
330 0.0 0.0
332 0.0 0.0
340 0.0 0.0
SURF 0x20
mat 3
refs 4
334 0.0 0.0
336 0.0 0.0
333 0.0 0.0
337 0.0 0.0
SURF 0x20
mat 3
refs 4
338 0.0 0.0
335 0.0 0.0
336 0.0 0.0
334 0.0 0.0
SURF 0x20
mat 3
refs 4
341 0.0 0.0
337 0.0 0.0
338 0.0 0.0
342 0.0 0.0
SURF 0x20
mat 3
refs 4
343 0.0 0.0
344 0.0 0.0
340 0.0 0.0
339 0.0 0.0
SURF 0x20
mat 4
refs 4
71 0.0 0.0
132 0.0 0.0
346 0.0 0.0
345 0.0 0.0
SURF 0x20
mat 4
refs 4
133 0.0 0.0
10 0.0 0.0
347 0.0 0.0
348 0.0 0.0
SURF 0x20
mat 4
refs 4
134 0.0 0.0
72 0.0 0.0
349 0.0 0.0
350 0.0 0.0
SURF 0x20
mat 4
refs 4
11 0.0 0.0
135 0.0 0.0
352 0.0 0.0
351 0.0 0.0
SURF 0x20
mat 4
refs 4
72 0.0 0.0
310 0.0 0.0
353 0.0 0.0
349 0.0 0.0
SURF 0x20
mat 4
refs 4
311 0.0 0.0
71 0.0 0.0
345 0.0 0.0
354 0.0 0.0
SURF 0x20
mat 4
refs 4
312 0.0 0.0
11 0.0 0.0
351 0.0 0.0
355 0.0 0.0
SURF 0x20
mat 4
refs 4
10 0.0 0.0
313 0.0 0.0
356 0.0 0.0
347 0.0 0.0
SURF 0x20
mat 3
refs 4
345 0.0 0.0
346 0.0 0.0
358 0.0 0.0
357 0.0 0.0
SURF 0x20
mat 3
refs 4
348 0.0 0.0
347 0.0 0.0
359 0.0 0.0
360 0.0 0.0
SURF 0x20
mat 3
refs 4
350 0.0 0.0
349 0.0 0.0
361 0.0 0.0
362 0.0 0.0
SURF 0x20
mat 3
refs 4
351 0.0 0.0
352 0.0 0.0
364 0.0 0.0
363 0.0 0.0
SURF 0x20
mat 3
refs 4
349 0.0 0.0
353 0.0 0.0
365 0.0 0.0
361 0.0 0.0
SURF 0x20
mat 3
refs 4
354 0.0 0.0
345 0.0 0.0
357 0.0 0.0
366 0.0 0.0
SURF 0x20
mat 3
refs 4
355 0.0 0.0
351 0.0 0.0
363 0.0 0.0
367 0.0 0.0
SURF 0x20
mat 3
refs 4
347 0.0 0.0
356 0.0 0.0
368 0.0 0.0
359 0.0 0.0
SURF 0x02
mat 2
refs 2
33 0 0
90 0 0
SURF 0x02
mat 2
refs 2
33 0 0
76 0 0
SURF 0x02
mat 2
refs 2
35 0 0
88 0 0
SURF 0x02
mat 2
refs 2
18 0 0
88 0 0
SURF 0x02
mat 2
refs 2
34 0 0
91 0 0
SURF 0x02
mat 2
refs 2
34 0 0
75 0 0
SURF 0x02
mat 2
refs 2
36 0 0
89 0 0
SURF 0x02
mat 2
refs 2
17 0 0
89 0 0
kids 0
                                                                                                                                                                                                                                                                                                                                                                          <?xml version="1.0"?>
<initialize name="reset00">
  <ubody unit="M/SEC"> nan </ubody>
  <vbody unit="M/SEC"> nan </vbody>
  <wbody unit="M/SEC"> nan </wbody>
  <phi unit="DEG"> nan </phi>
  <theta unit="DEG"> -nan </theta>
  <psi unit="DEG"> nan </psi>
  <longitude unit="DEG"> nan </longitude>
  <latitude unit="DEG"> nan </latitude>
  <altitude unit="M"> nan </altitude>
</initialize>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             <?xml version="1.0"?>
<!--
************************************************************************
Arducotper UAV Model
************************************************************************
-->
<PropertyList>
  <sim>
    <description>Arducopter UAV (R/C) (plus quad)</description>
    <author>James Goppert</author>
    <aircraft-version>0.0</aircraft-version>
    <status>experimental</status>
    <flight-model>jsb</flight-model>
    <aero>plus_quad2</aero>
    <model-hz>50</model-hz>
    <sound>
      <path>Aircraft/Generic/generic-sound.xml</path>
    </sound>
    <panel>
      <visibility archive="n">false</visibility>
    </panel>
    <model>
      <path archive="y">Aircraft/arducopter/Models/plus_quad2.xml</path>
    </model>
    <view>
      <internal archive="y">true</internal>
      <config>
        <x-offset-m archive="y">0.0</x-offset-m>
        <y-offset-m archive="y">0.15</y-offset-m>
        <z-offset-m archive="y">0.90</z-offset-m>
        <pitch-offset-deg>0</pitch-offset-deg>
      </config>
    </view>
    <chase-distance-m archive="y" type="double">-5.5</chase-distance-m>
    <help>
      <title>plus_quad UAV</title>
      <line>Cruise speed: ? mph</line>
      <line>Never-exceed (Vne): ? mph</line>
      <line>Best Glide (Vglide): ? mph</line>
      <line>Maneuvering (Va): ? mph</line>
      <line>Approach speed: ? mph</line>
      <line>Stall speed (Vs): ? mph</line>
    </help>
    <startup>
      <splash-title>Arducopter UAV DIY Drones/ OPENMAV</splash-title>
      <splash-texture>Aircraft/arducopter/arducopter.jpg</splash-texture>
    </startup>
  </sim>
  <controls>
    <flight>
      <aileron-trim>0.00</aileron-trim>
      <!-- fixed -->
      <elevator-trim>0.00</elevator-trim>
      <!-- controllable -->
    </flight>
  </controls>
  <consumables>
    <fuel>
      <tank n="0">
        <level-gal_us>0</level-gal_us>
      </tank>
    </fuel>
  </consumables>
  <payload>
    <weight>
      <name type="string">Payload</name>
      <weight-lb alias="/fdm/jsbsim/inertia/pointmass-weight-lbs[0]"/>
      <min-lb type="double">0.0</min-lb>
      <max-lb type="double">1.0</max-lb>
    </weight>
  </payload>
  <nasal>
    <plus_quad2>
      <script>
         setlistener("/sim/signals/fdm-initialized", func {
             var left  = screen.display.new(20, 10);
             left.add("/controls/engines/engine[0]/throttle");
             left.add("/controls/engines/engine[1]/throttle");
             left.add("/controls/engines/engine[2]/throttle");
             left.add("/controls/engines/engine[3]/throttle");

             var right = screen.display.new(-250, 20);
             right.add("/position/altitude-agl-ft");
             right.add("/orientation/roll-deg");
             right.add("/orientation/pitch-deg");
             right.add("/orientation/heading-deg");
             right.add("/instrumentation/gps/indicated-ground-speed-kt");
         });
        </script>
    </plus_quad2>
  </nasal>
</PropertyList>
<!-- vim:sw=4:ts=4:expandtab -->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         '''
Fly ArduPlane in SITL

AP_FLAKE8_CLEAN
'''

from __future__ import print_function
import math
import os
import signal

from pymavlink import quaternion
from pymavlink import mavutil

from pymavlink.rotmat import Vector3

import vehicle_test_suite

from vehicle_test_suite import AutoTestTimeoutException
from vehicle_test_suite import NotAchievedException
from vehicle_test_suite import OldpymavlinkException
from vehicle_test_suite import PreconditionFailedException
from vehicle_test_suite import Test
from vehicle_test_suite import WaitModeTimeout

from pysim import vehicleinfo
from pysim import util

import operator

# get location of scripts
testdir = os.path.dirname(os.path.realpath(__file__))
SITL_START_LOCATION = mavutil.location(-35.362938, 149.165085, 585, 354)
WIND = "0,180,0.2"  # speed,direction,variance


class AutoTestPlane(vehicle_test_suite.TestSuite):
    @staticmethod
    def get_not_armable_mode_list():
        return []

    @staticmethod
    def get_not_disarmed_settable_modes_list():
        return ["FOLLOW"]

    @staticmethod
    def get_no_position_not_settable_modes_list():
        return []

    @staticmethod
    def get_position_armable_modes_list():
        return ["GUIDED", "AUTO"]

    @staticmethod
    def get_normal_armable_modes_list():
        return ["MANUAL", "STABILIZE", "ACRO"]

    def log_name(self):
        return "ArduPlane"

    def default_speedup(self):
        return 100

    def test_filepath(self):
        return os.path.realpath(__file__)

    def sitl_start_location(self):
        return SITL_START_LOCATION

    def defaults_filepath(self):
        return os.path.join(testdir, 'default_params/plane-jsbsim.parm')

    def set_current_test_name(self, name):
        self.current_test_name_directory = "ArduPlane_Tests/" + name + "/"

    def default_frame(self):
        return "plane-elevrev"

    def apply_defaultfile_parameters(self):
        # plane passes in a defaults_filepath in place of applying
        # parameters afterwards.
        pass

    def is_plane(self):
        return True

    def get_stick_arming_channel(self):
        return int(self.get_parameter("RCMAP_YAW"))

    def get_disarm_delay(self):
        return int(self.get_parameter("LAND_DISARMDELAY"))

    def set_autodisarm_delay(self, delay):
        self.set_parameter("LAND_DISARMDELAY", delay)

    def takeoff(self, alt=150, alt_max=None, relative=True, mode=None, timeout=None):
        """Takeoff to altitude."""

        if mode == "TAKEOFF":
            return self.takeoff_in_TAKEOFF(alt=alt, relative=relative, timeout=timeout)

        return self.takeoff_in_FBWA(alt=alt, alt_max=alt_max, relative=relative, timeout=timeout)

    def takeoff_in_TAKEOFF(self, alt=150, relative=True, mode=None, alt_epsilon=2, timeout=None):
        if relative is not True:
            raise ValueError("Only relative alt supported ATM")
        self.change_mode("TAKEOFF")
        self.context_push()
        self.set_parameter('TKOFF_ALT', alt)
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.wait_altitude(alt-alt_epsilon, alt+alt_epsilon, relative=True, timeout=timeout)
        self.context_pop()

    def takeoff_in_FBWA(self, alt=150, alt_max=None, relative=True, mode=None, timeout=30):
        if alt_max is None:
            alt_max = alt + 30

        self.change_mode("FBWA")

        self.wait_ready_to_arm()
        self.arm_vehicle()

        # some rudder to counteract the prop torque
        self.set_rc(4, 1700)

        # some up elevator to keep the tail down
        self.set_rc(2, 1200)

        # get it moving a bit first
        self.set_rc(3, 1300)
        self.wait_groundspeed(6, 100)

        # a bit faster again, straighten rudder
        self.set_rc_from_map({
            3: 1600,
            4: 1500,
        })
        self.wait_groundspeed(12, 100)

        # hit the gas harder now, and give it some more elevator
        self.set_rc_from_map({
            2: 1100,
            3: 2000,
        })

        # gain a bit of altitude
        self.wait_altitude(alt, alt_max, timeout=timeout, relative=relative)

        # level off
        self.set_rc(2, 1500)

        self.progress("TAKEOFF COMPLETE")

    def fly_left_circuit(self):
        """Fly a left circuit, 200m on a side."""
        self.change_mode('FBWA')
        self.set_rc(3, 2000)
        self.wait_level_flight()

        self.progress("Flying left circuit")
        # do 4 turns
        for i in range(0, 4):
            # hard left
            self.progress("Starting turn %u" % i)
            self.set_rc(1, 1000)
            self.wait_heading(270 - (90*i), accuracy=10)
            self.set_rc(1, 1500)
            self.progress("Starting leg %u" % i)
            self.wait_distance(100, accuracy=20)
        self.progress("Circuit complete")

    def fly_RTL(self):
        """Fly to home."""
        self.progress("Flying home in RTL")
        target_loc = self.home_position_as_mav_location()
        target_loc.alt += 100
        self.change_mode('RTL')
        self.wait_location(target_loc,
                           accuracy=120,
                           height_accuracy=20,
                           timeout=180)
        self.progress("RTL Complete")

    def NeedEKFToArm(self):
        """Ensure the EKF must be healthy for the vehicle to arm."""
        self.progress("Ensuring we need EKF to be healthy to arm")
        self.set_parameter("SIM_GPS_DISABLE", 1)
        self.context_collect("STATUSTEXT")
        tstart = self.get_sim_time()
        success = False
        for run_cmd in self.run_cmd, self.run_cmd_int:
            while not success:
                if self.get_sim_time_cached() - tstart > 60:
                    raise NotAchievedException("Did not get correct failure reason")
                run_cmd(mavutil.mavlink.MAV_CMD_RUN_PREARM_CHECKS)
                try:
                    self.wait_statustext(".*AHRS: not using configured AHRS type.*", timeout=1, check_context=True, regex=True)
                    success = True
                    continue
                except AutoTestTimeoutException:
                    pass

        self.set_parameter("SIM_GPS_DISABLE", 0)
        self.wait_ready_to_arm()

    def fly_LOITER(self, num_circles=4):
        """Loiter where we are."""
        self.progress("Testing LOITER for %u turns" % num_circles)
        self.change_mode('LOITER')

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        initial_alt = m.alt
        self.progress("Initial altitude %u\n" % initial_alt)

        while num_circles > 0:
            self.wait_heading(0, accuracy=10, timeout=60)
            self.wait_heading(180, accuracy=10, timeout=60)
            num_circles -= 1
            self.progress("Loiter %u circles left" % num_circles)

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        final_alt = m.alt
        self.progress("Final altitude %u initial %u\n" %
                      (final_alt, initial_alt))

        self.change_mode('FBWA')

        if abs(final_alt - initial_alt) > 20:
            raise NotAchievedException("Failed to maintain altitude")

        self.progress("Completed Loiter OK")

    def fly_CIRCLE(self, num_circles=1):
        """Circle where we are."""
        self.progress("Testing CIRCLE for %u turns" % num_circles)
        self.change_mode('CIRCLE')

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        initial_alt = m.alt
        self.progress("Initial altitude %u\n" % initial_alt)

        while num_circles > 0:
            self.wait_heading(0, accuracy=10, timeout=60)
            self.wait_heading(180, accuracy=10, timeout=60)
            num_circles -= 1
            self.progress("CIRCLE %u circles left" % num_circles)

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        final_alt = m.alt
        self.progress("Final altitude %u initial %u\n" %
                      (final_alt, initial_alt))

        self.change_mode('FBWA')

        if abs(final_alt - initial_alt) > 20:
            raise NotAchievedException("Failed to maintain altitude")

        self.progress("Completed CIRCLE OK")

    def wait_level_flight(self, accuracy=5, timeout=30):
        """Wait for level flight."""
        tstart = self.get_sim_time()
        self.progress("Waiting for level flight")
        self.set_rc(1, 1500)
        self.set_rc(2, 1500)
        self.set_rc(4, 1500)
        while self.get_sim_time_cached() < tstart + timeout:
            m = self.mav.recv_match(type='ATTITUDE', blocking=True)
            roll = math.degrees(m.roll)
            pitch = math.degrees(m.pitch)
            self.progress("Roll=%.1f Pitch=%.1f" % (roll, pitch))
            if math.fabs(roll) <= accuracy and math.fabs(pitch) <= accuracy:
                self.progress("Attained level flight")
                return
        raise NotAchievedException("Failed to attain level flight")

    def change_altitude(self, altitude, accuracy=30, relative=False):
        """Get to a given altitude."""
        if relative:
            altitude += self.home_position_as_mav_location().alt
        self.change_mode('FBWA')
        alt_error = self.mav.messages['VFR_HUD'].alt - altitude
        if alt_error > 0:
            self.set_rc(2, 2000)
        else:
            self.set_rc(2, 1000)
        self.wait_altitude(altitude-accuracy/2, altitude+accuracy/2)
        self.set_rc(2, 1500)
        self.progress("Reached target altitude at %u" %
                      self.mav.messages['VFR_HUD'].alt)
        return self.wait_level_flight()

    def axial_left_roll(self, count=1):
        """Fly a left axial roll."""
        # full throttle!
        self.set_rc(3, 2000)
        self.change_altitude(300, relative=True)

        # fly the roll in manual
        self.change_mode('MANUAL')

        while count > 0:
            self.progress("Starting roll")
            self.set_rc(1, 1000)
            try:
                self.wait_roll(-150, accuracy=90)
                self.wait_roll(150, accuracy=90)
                self.wait_roll(0, accuracy=90)
            except Exception as e:
                self.set_rc(1, 1500)
                raise e
            count -= 1

        # back to FBWA
        self.set_rc(1, 1500)
        self.change_mode('FBWA')
        self.set_rc(3, 1700)
        return self.wait_level_flight()

    def inside_loop(self, count=1):
        """Fly a inside loop."""
        # full throttle!
        self.set_rc(3, 2000)
        self.change_altitude(300, relative=True)
        # fly the loop in manual
        self.change_mode('MANUAL')

        while count > 0:
            self.progress("Starting loop")
            self.set_rc(2, 1000)
            self.wait_pitch(-60, accuracy=20)
            self.wait_pitch(0, accuracy=20)
            count -= 1

        # back to FBWA
        self.set_rc(2, 1500)
        self.change_mode('FBWA')
        self.set_rc(3, 1700)
        return self.wait_level_flight()

    def set_attitude_target(self, tolerance=10):
        """Test setting of attitude target in guided mode."""
        self.change_mode("GUIDED")

        steps = [{"name": "roll-over",         "roll": 60, "pitch": 0,  "yaw": 0, "throttle": 0, "type_mask": 0b10000001},
                 {"name": "roll-back",         "roll": 0,  "pitch": 0,  "yaw": 0, "throttle": 0, "type_mask": 0b10000001},
                 {"name": "pitch-up+throttle", "roll": 0,  "pitch": 20, "yaw": 0, "throttle": 1, "type_mask": 0b11000010},
                 {"name": "pitch-back",        "roll": 0,  "pitch": 0,  "yaw": 0, "throttle": 0, "type_mask": 0b10000010}]

        state_wait = "wait"
        state_hold = "hold"
        try:
            for step in steps:
                step_start = self.get_sim_time_cached()
                state = state_wait
                state_start = self.get_sim_time_cached()
                while True:
                    m = self.mav.recv_match(type='ATTITUDE',
                                            blocking=True,
                                            timeout=0.1)
                    now = self.get_sim_time_cached()
                    if now - step_start > 30:
                        raise AutoTestTimeoutException("Manuevers not completed")
                    if m is None:
                        continue

                    angle_error = 0
                    if (step["type_mask"] & 0b00000001) or (step["type_mask"] == 0b10000000):
                        angle_error += abs(math.degrees(m.roll) - step["roll"])

                    if (step["type_mask"] & 0b00000010) or (step["type_mask"] == 0b10000000):
                        angle_error += abs(math.degrees(m.pitch) - step["pitch"])

                    if (step["type_mask"] & 0b00000100) or (step["type_mask"] == 0b10000000):
                        # Strictly we should angle wrap, by plane doesn't support yaw correctly anyway so its not tested here
                        angle_error += abs(math.degrees(m.yaw) - step["yaw"])

                    # Note were not checking throttle, however the SITL plane needs full throttle to meet the
                    # target pitch attitude, Pitch test will fail without throttle override

                    if state == state_wait:
                        # Reduced tolerance for initial trigger
                        if angle_error < (tolerance * 0.25):
                            state = state_hold
                            state_start = now

                        # Allow 10 seconds to reach attitude
                        if (now - state_start) > 10:
                            raise NotAchievedException(step["name"] + ": Failed to get to set attitude")

                    elif state == state_hold:
                        # Give 2 seconds to stabilize
                        if (now - state_start) > 2 and not (angle_error < tolerance):
                            raise NotAchievedException(step["name"] + ": Failed to hold set attitude")

                        # Hold for 10 seconds
                        if (now - state_start) > 12:
                            # move onto next step
                            self.progress("%s Done" % (step["name"]))
                            break

                    self.progress("%s %s error: %f" % (step["name"], state, angle_error))

                    time_boot_millis = 0 # FIXME
                    target_system = 1 # FIXME
                    target_component = 1 # FIXME
                    type_mask = step["type_mask"] ^ 0xFF # FIXME
                    # attitude in radians:
                    q = quaternion.Quaternion([math.radians(step["roll"]),
                                               math.radians(step["pitch"]),
                                               math.radians(step["yaw"])])
                    self.mav.mav.set_attitude_target_send(time_boot_millis,
                                                          target_system,
                                                          target_component,
                                                          type_mask,
                                                          q,
                                                          0, # roll rate, not used in AP
                                                          0, # pitch rate, not used in AP
                                                          0, # yaw rate, not used in AP
                                                          step["throttle"])
        except Exception as e:
            self.change_mode('FBWA')
            self.set_rc(3, 1700)
            raise e

        # back to FBWA
        self.change_mode('FBWA')
        self.set_rc(3, 1700)
        self.wait_level_flight()

    def test_stabilize(self, count=1):
        """Fly stabilize mode."""
        # full throttle!
        self.set_rc(3, 2000)
        self.set_rc(2, 1300)
        self.change_altitude(300, relative=True)
        self.set_rc(2, 1500)

        self.change_mode('STABILIZE')

        while count > 0:
            self.progress("Starting roll")
            self.set_rc(1, 2000)
            self.wait_roll(-150, accuracy=90)
            self.wait_roll(150, accuracy=90)
            self.wait_roll(0, accuracy=90)
            count -= 1

        self.set_rc(1, 1500)
        self.wait_roll(0, accuracy=5)

        # back to FBWA
        self.change_mode('FBWA')
        self.set_rc(3, 1700)
        return self.wait_level_flight()

    def test_acro(self, count=1):
        """Fly ACRO mode."""
        # full throttle!
        self.set_rc(3, 2000)
        self.set_rc(2, 1300)
        self.change_altitude(300, relative=True)
        self.set_rc(2, 1500)

        self.change_mode('ACRO')

        while count > 0:
            self.progress("Starting roll")
            self.set_rc(1, 1000)
            self.wait_roll(-150, accuracy=90)
            self.wait_roll(150, accuracy=90)
            self.wait_roll(0, accuracy=90)
            count -= 1
        self.set_rc(1, 1500)

        # back to FBWA
        self.change_mode('FBWA')

        self.wait_level_flight()

        self.change_mode('ACRO')

        count = 2
        while count > 0:
            self.progress("Starting loop")
            self.set_rc(2, 1000)
            self.wait_pitch(-60, accuracy=20)
            self.wait_pitch(0, accuracy=20)
            count -= 1

        self.set_rc(2, 1500)

        # back to FBWA
        self.change_mode('FBWA')
        self.set_rc(3, 1700)
        return self.wait_level_flight()

    def test_FBWB(self, mode='FBWB'):
        """Fly FBWB or CRUISE mode."""
        self.change_mode(mode)
        self.set_rc(3, 1700)
        self.set_rc(2, 1500)

        # lock in the altitude by asking for an altitude change then releasing
        self.set_rc(2, 1000)
        self.wait_distance(50, accuracy=20)
        self.set_rc(2, 1500)
        self.wait_distance(50, accuracy=20)

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        initial_alt = m.alt
        self.progress("Initial altitude %u\n" % initial_alt)

        self.progress("Flying right circuit")
        # do 4 turns
        for i in range(0, 4):
            # hard left
            self.progress("Starting turn %u" % i)
            self.set_rc(1, 1800)
            try:
                self.wait_heading(0 + (90*i), accuracy=20, timeout=60)
            except Exception as e:
                self.set_rc(1, 1500)
                raise e
            self.set_rc(1, 1500)
            self.progress("Starting leg %u" % i)
            self.wait_distance(100, accuracy=20)
        self.progress("Circuit complete")

        self.progress("Flying rudder left circuit")
        # do 4 turns
        for i in range(0, 4):
            # hard left
            self.progress("Starting turn %u" % i)
            self.set_rc(4, 1900)
            try:
                self.wait_heading(360 - (90*i), accuracy=20, timeout=60)
            except Exception as e:
                self.set_rc(4, 1500)
                raise e
            self.set_rc(4, 1500)
            self.progress("Starting leg %u" % i)
            self.wait_distance(100, accuracy=20)
        self.progress("Circuit complete")

        m = self.mav.recv_match(type='VFR_HUD', blocking=True)
        final_alt = m.alt
        self.progress("Final altitude %u initial %u\n" %
                      (final_alt, initial_alt))

        # back to FBWA
        self.change_mode('FBWA')

        if abs(final_alt - initial_alt) > 20:
            raise NotAchievedException("Failed to maintain altitude")

        return self.wait_level_flight()

    def fly_mission(self, filename, mission_timeout=60.0, strict=True, quadplane=False):
        """Fly a mission from a file."""
        self.progress("Flying mission %s" % filename)
        num_wp = self.load_mission(filename, strict=strict)-1
        self.fly_mission_waypoints(num_wp, mission_timeout=mission_timeout, quadplane=quadplane)

    def fly_mission_waypoints(self, num_wp, mission_timeout=60.0, quadplane=False):
        self.set_current_waypoint(0, check_afterwards=False)
        self.context_push()
        self.context_collect('STATUSTEXT')
        self.change_mode('AUTO')
        self.wait_waypoint(1, num_wp, max_dist=60, timeout=mission_timeout)
        self.wait_groundspeed(0, 0.5, timeout=mission_timeout)
        if quadplane:
            self.wait_statustext("Throttle disarmed", timeout=200, check_context=True)
        else:
            self.wait_statustext("Auto disarmed", timeout=60, check_context=True)
        self.context_pop()
        self.progress("Mission OK")

    def DO_REPOSITION(self):
        '''Test mavlink DO_REPOSITION command'''
        self.progress("Takeoff")
        self.takeoff(alt=50)
        self.set_rc(3, 1500)
        self.progress("Entering guided and flying somewhere constant")
        self.change_mode("GUIDED")
        loc = self.mav.location()
        self.location_offset_ne(loc, 500, 500)

        new_alt = 100
        self.run_cmd_int(
            mavutil.mavlink.MAV_CMD_DO_REPOSITION,
            p5=int(loc.lat * 1e7),
            p6=int(loc.lng * 1e7),
            p7=new_alt,    # alt
            frame=mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT,
        )
        self.wait_altitude(new_alt-10, new_alt, timeout=30, relative=True)

        self.install_terrain_handlers_context()

        self.location_offset_ne(loc, 500, 500)
        terrain_height_wanted = 150
        self.run_cmd_int(
            mavutil.mavlink.MAV_CMD_DO_REPOSITION,
            0,
            0,
            0,
            0,
            int(loc.lat*1e7),
            int(loc.lng*1e7),
            terrain_height_wanted,    # alt
            frame=mavutil.mavlink.MAV_FRAME_GLOBAL_TERRAIN_ALT,
        )

        # move to specific terrain-relative altitude and hold for <n> seconds
        tstart = self.get_sim_time_cached()
        achieve_start = None
        tr = None
        while True:
            if self.get_sim_time_cached() - tstart > 120:
                raise NotAchievedException("Did not move to correct terrain alt")

            m = self.mav.recv_match(type='TERRAIN_REPORT',
                                    blocking=True,
                                    timeout=1)
            tr = m
            terrain_height_achieved = m.current_height
            self.progress("terrain_alt=%f want=%f" %
                          (terrain_height_achieved, terrain_height_wanted))
            if m is None:
                continue
            if abs(terrain_height_wanted - terrain_height_achieved) > 5:
                if achieve_start is not None:
                    self.progress("Achieve stop")
                    achieve_start = None
            elif achieve_start is None:
                self.progress("Achieve start")
                achieve_start = self.get_sim_time_cached()
            if achieve_start is not None:
                if self.get_sim_time_cached() - achieve_start > 10:
                    break
        m = self.mav.recv_match(type='GLOBAL_POSITION_INT',
                                blocking=True,
                                timeout=1)
        self.progress("TR: %s" % tr)
        self.progress("GPI: %s" % m)
        min_delta = 4
        delta = abs(m.relative_alt/1000.0 - tr.current_height)
        if abs(delta < min_delta):
            raise NotAchievedException("Expected altitude delta (want=%f got=%f)" %
                                       (min_delta, delta))

        self.fly_home_land_and_disarm(timeout=180)

    def ExternalPositionEstimate(self):
        '''Test mavlink EXTERNAL_POSITION_ESTIMATE command'''
        if not hasattr(mavutil.mavlink, 'MAV_CMD_EXTERNAL_POSITION_ESTIMATE'):
            raise OldpymavlinkException("pymavlink too old; upgrade pymavlink to get MAV_CMD_EXTERNAL_POSITION_ESTIMATE")  # noqa
        self.change_mode("TAKEOFF")
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.wait_altitude(48, 52, relative=True)

        loc = self.mav.location()
        self.location_offset_ne(loc, 2000, 2000)

        # setting external position fail while we have GPS lock
        self.progress("set new position with GPS")
        self.run_cmd_int(
            mavutil.mavlink.MAV_CMD_EXTERNAL_POSITION_ESTIMATE,
            p1=self.get_sim_time()-1, # transmit time
            p2=0.5, # processing delay
            p3=50, # accuracy
            p5=int(loc.lat * 1e7),
            p6=int(loc.lng * 1e7),
            p7=float("NaN"),    # alt
            frame=mavutil.mavlink.MAV_FRAME_GLOBAL,
            want_result=mavutil.mavlink.MAV_RESULT_FAILED,
        )

        self.progress("disable the GPS")
        self.run_auxfunc(
            65,
            2,
            want_result=mavutil.mavlink.MAV_RESULT_ACCEPTED
        )

        # fly for a bit to get into non-aiding state
        self.progress("waiting 20 seconds")
        tstart = self.get_sim_time()
        while self.get_sim_time() < tstart + 20:
            self.wait_heartbeat()

        self.progress("getting base position")
        gpi = self.mav.recv_match(
            type='GLOBAL_POSITION_INT',
            blocking=True,
            timeout=5
        )
        loc = mavutil.location(gpi.lat*1e-7, gpi.lon*1e-7, 0, 0)

        self.progress("set new position with no GPS")
        self.run_cmd_int(
            mavutil.mavlink.MAV_CMD_EXTERNAL_POSITION_ESTIMATE,
            p1=self.get_sim_time()-1, # transmit time
            p2=0.5, # processing delay
            p3=50, # accuracy
            p5=gpi.lat+1,
            p6=gpi.lon+1,
            p7=float("NaN"),    # alt
            frame=mavutil.mavlink.MAV_FRAME_GLOBAL,
            want_result=mavutil.mavlink.MAV_RESULT_ACCEPTED
        )

        self.progress("waiting 3 seconds")
        tstart = self.get_sim_time()
        while self.get_sim_time() < tstart + 3:
            self.wait_heartbeat()

        gpi2 = self.mav.recv_match(
            type='GLOBAL_POSITION_INT',
            blocking=True,
            timeout=5
        )
        loc2 = mavutil.location(gpi2.lat*1e-7, gpi2.lon*1e-7, 0, 0)
        dist = self.get_distance(loc, loc2)

        self.progress("dist is %.1f" % dist)
        if dist > 200:
            raise NotAchievedException("Position error dist=%.1f" % dist)

        self.progress("re-enable the GPS")
        self.run_auxfunc(
            65,
            0,
            want_result=mavutil.mavlink.MAV_RESULT_ACCEPTED
        )

        self.progress("flying home")
        self.fly_home_land_and_disarm()

    def DeepStall(self):
        '''Test DeepStall Landing'''
        # self.fly_deepstall_absolute()
        self.fly_deepstall_relative()

    def fly_deepstall_absolute(self):
        self.start_subtest("DeepStall Relative Absolute")
        deepstall_elevator_pwm = 1661
        self.set_parameters({
            "LAND_TYPE": 1,
            "LAND_DS_ELEV_PWM": deepstall_elevator_pwm,
            "RTL_AUTOLAND": 1,
        })
        self.load_mission("plane-deepstall-mission.txt")
        self.change_mode("AUTO")
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.progress("Waiting for deepstall messages")

        # note that the following two don't necessarily happen in this
        # order, but at very high speedups we may miss the elevator
        # PWM if we first look for the text (due to the get_sim_time()
        # in wait_servo_channel_value)

        self.context_collect('STATUSTEXT')

        # assume elevator is on channel 2:
        self.wait_servo_channel_value(2, deepstall_elevator_pwm, timeout=240)

        self.wait_text("Deepstall: Entry: ", check_context=True)

        self.disarm_wait(timeout=120)

        self.progress("Flying home")
        self.set_current_waypoint(0, check_afterwards=False)
        self.takeoff(10)
        self.set_parameter("LAND_TYPE", 0)
        self.fly_home_land_and_disarm()

    def fly_deepstall_relative(self):
        self.start_subtest("DeepStall Relative")
        deepstall_elevator_pwm = 1661
        self.set_parameters({
            "LAND_TYPE": 1,
            "LAND_DS_ELEV_PWM": deepstall_elevator_pwm,
            "RTL_AUTOLAND": 1,
        })
        self.load_mission("plane-deepstall-relative-mission.txt")
        self.change_mode("AUTO")
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.wait_current_waypoint(4)

        # assume elevator is on channel 2:
        self.wait_servo_channel_value(2, deepstall_elevator_pwm, timeout=240)

        self.progress("Waiting for stage DEEPSTALL_STAGE_LAND")
        self.assert_receive_message(
            'DEEPSTALL',
            condition='DEEPSTALL.stage==6',
            timeout=240,
        )
        self.progress("Reached stage DEEPSTALL_STAGE_LAND")

        self.disarm_wait(timeout=120)
        self.set_current_waypoint(0, check_afterwards=False)

        self.progress("Flying home")
        self.set_current_waypoint(0, check_afterwards=False)
        self.takeoff(100)
        self.set_parameter("LAND_TYPE", 0)
        self.fly_home_land_and_disarm(timeout=240)

    def SmartBattery(self):
        '''Test smart battery logging etc'''
        self.set_parameters({
            "BATT_MONITOR": 16, # Maxell battery monitor
        })

        # Must reboot sitl after setting montior type for SMBus parameters to be set due to dynamic group
        self.reboot_sitl()
        self.set_parameters({
            "BATT_I2C_BUS": 2,      # specified in SIM_I2C.cpp
            "BATT_I2C_ADDR": 11,    # specified in SIM_I2C.cpp
        })
        self.reboot_sitl()

        self.wait_ready_to_arm()
        m = self.assert_receive_message('BATTERY_STATUS', timeout=10)
        if m.voltages_ext[0] == 65536:
            raise NotAchievedException("Flag value rather than voltage")
        if abs(m.voltages_ext[0] - 1000) > 300:
            raise NotAchievedException("Did not get good ext voltage (got=%f)" %
                                       (m.voltages_ext[0],))
        self.arm_vehicle()
        self.delay_sim_time(5)
        self.disarm_vehicle()
        if not self.current_onboard_log_contains_message("BCL2"):
            raise NotAchievedException("Expected BCL2 message")

    def context_push_do_change_speed(self):
        # the following lines ensure we revert these parameter values
        # - DO_CHANGE_AIRSPEED is a permanent vehicle change!
        self.context_push()
        self.set_parameters({
            "AIRSPEED_CRUISE": self.get_parameter("AIRSPEED_CRUISE"),
            "MIN_GROUNDSPEED": self.get_parameter("MIN_GROUNDSPEED"),
            "TRIM_THROTTLE": self.get_parameter("TRIM_THROTTLE"),
        })

    def DO_CHANGE_SPEED(self):
        '''Test DO_CHANGE_SPEED command/item'''
        self.set_parameters({
            "RTL_AUTOLAND": 1,
        })

        self.context_push_do_change_speed()
        self.DO_CHANGE_SPEED_mavlink_long()
        self.context_pop()

        self.set_current_waypoint(1)
        self.zero_throttle()

        self.context_push_do_change_speed()
        self.DO_CHANGE_SPEED_mavlink_int()
        self.context_pop()

        self.context_push_do_change_speed()
        self.DO_CHANGE_SPEED_mission()
        self.context_pop()

    def DO_CHANGE_SPEED_mission(self):
        '''test DO_CHANGE_SPEED as a mission item'''
        self.start_subtest("DO_CHANGE_SPEED_mission")
        self.load_mission("mission.txt")
        self.set_current_waypoint(1)

        self.progress("Takeoff")
        self.set_rc(3, 1000)
        self.takeoff(alt=10)
        self.set_rc(3, 1500)

        self.start_subtest("Check initial speed")

        self.change_mode('AUTO')

        checks = [
            (1, self.get_parameter("AIRSPEED_CRUISE")),
            (3, 10),
            (5, 20),
            (7, 15),
        ]

        for (current_waypoint, want_airspeed) in checks:
            self.wait_current_waypoint(current_waypoint, timeout=150)
            self.wait_airspeed(want_airspeed-1, want_airspeed+1, minimum_duration=5, timeout=120)

        self.fly_home_land_and_disarm()

    def DO_CHANGE_SPEED_mavlink_int(self):
        self.DO_CHANGE_SPEED_mavlink(self.run_cmd_int)

    def DO_CHANGE_SPEED_mavlink_long(self):
        self.DO_CHANGE_SPEED_mavlink(self.run_cmd)

    def DO_CHANGE_SPEED_mavlink(self, run_cmd_method):
        '''test DO_CHANGE_SPEED as a mavlink command'''
        self.progress("Takeoff")
        self.takeoff(alt=100, mode="TAKEOFF", timeout=120)
        self.set_rc(3, 1500)
        # ensure we know what the airspeed is:
        self.progress("Entering guided and flying somewhere constant")
        self.change_mode("GUIDED")
        self.run_cmd_int(
            mavutil.mavlink.MAV_CMD_DO_REPOSITION,
            p5=12345, # lat* 1e7
            p6=12345, # lon* 1e7
            p7=100    # alt
        )
        self.delay_sim_time(10)
        self.progress("Ensuring initial speed is known and relatively constant")
        initial_speed = 22.0
        timeout = 15
        self.wait_airspeed(initial_speed-1, initial_speed+1, minimum_duration=5, timeout=timeout)

        self.start_subtest("Setting groundspeed")
        for new_target_groundspeed in initial_speed + 5, initial_speed + 2:
            run_cmd_method(
                mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
                p1=1, # groundspeed
                p2=new_target_groundspeed,
                p3=-1, # throttle / no change
                p4=0, # absolute values
            )
            self.wait_groundspeed(new_target_groundspeed-2, new_target_groundspeed+2, timeout=80, minimum_duration=5)
            self.progress("Adding some wind, ensuring groundspeed holds")
            self.set_parameter("SIM_WIND_SPD", 5)
            self.delay_sim_time(5)
            self.wait_groundspeed(new_target_groundspeed-2, new_target_groundspeed+2, timeout=40, minimum_duration=5)
            self.set_parameter("SIM_WIND_SPD", 0)

        # clear target groundspeed
        run_cmd_method(
            mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
            p1=1, # groundspeed
            p2=0,
            p3=-1, # throttle / no change
            p4=0, # absolute values
        )

        self.start_subtest("Setting airspeed")
        for new_target_airspeed in initial_speed - 5, initial_speed + 5:
            run_cmd_method(
                mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
                p1=0, # airspeed
                p2=new_target_airspeed,
                p3=-1, # throttle / no change
                p4=0, # absolute values
            )
            self.wait_airspeed(new_target_airspeed-2, new_target_airspeed+2, minimum_duration=5)

        self.context_push()
        self.progress("Adding some wind, hoping groundspeed increases/decreases")
        self.set_parameters({
            "SIM_WIND_SPD": 7,
            "SIM_WIND_DIR": 270,
        })
        self.delay_sim_time(5)
        timeout = 10
        tstart = self.get_sim_time()
        while True:
            if self.get_sim_time_cached() - tstart > timeout:
                raise NotAchievedException("Did not achieve groundspeed delta")
            m = self.mav.recv_match(type='VFR_HUD', blocking=True)
            delta = abs(m.airspeed - m.groundspeed)
            want_delta = 5
            self.progress("groundspeed and airspeed should be different (have=%f want=%f)" % (delta, want_delta))
            if delta > want_delta:
                break
        self.context_pop()

        # cancel minimum groundspeed:
        run_cmd_method(
            mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
            p1=0, # groundspeed
            p2=-2,  # return to default
            p3=0, # throttle / no change
            p4=0, # absolute values
        )
        # cancel airspeed:
        run_cmd_method(
            mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
            p1=1, # airspeed
            p2=-2,  # return to default
            p3=0, # throttle / no change
            p4=0, # absolute values
        )

        self.start_subtest("Setting throttle")
        self.set_parameter('ARSPD_USE', 0)  # setting throttle only effective without airspeed
        for (set_throttle, expected_throttle) in (97, 79), (60, 51), (95, 77):
            run_cmd_method(
                mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
                p1=3, # throttle
                p2=0,
                p3=set_throttle, # throttle / no change
                p4=0, # absolute values
            )
            self.wait_message_field_values('VFR_HUD', {
                "throttle": expected_throttle,
            }, minimum_duration=5, epsilon=2)

        self.fly_home_land_and_disarm(timeout=240)

    def fly_home_land_and_disarm(self, timeout=120):
        filename = "flaps.txt"
        self.progress("Using %s to fly home" % filename)
        self.load_generic_mission(filename)
        self.change_mode("AUTO")
        # don't set current waypoint to 8 unless we're distant from it
        # or we arrive instantly and never see it as our current
        # waypoint:
        self.wait_distance_to_waypoint(8, 100, 10000000)
        self.set_current_waypoint(8)
        # TODO: reflect on file to find this magic waypoint number?
        #        self.wait_waypoint(7, num_wp-1, timeout=500) # we
        #        tend to miss the final waypoint by a fair bit, and
        #        this is probably too noisy anyway?
        self.wait_disarmed(timeout=timeout)

    def TestFlaps(self):
        """Test flaps functionality."""
        filename = "flaps.txt"
        flaps_ch = 5
        flaps_ch_min = 1000
        flaps_ch_trim = 1500
        flaps_ch_max = 2000

        servo_ch = 5
        servo_ch_min = 1200
        servo_ch_trim = 1300
        servo_ch_max = 1800

        self.set_parameters({
            "SERVO%u_FUNCTION" % servo_ch: 3, # flapsauto
            "RC%u_OPTION" % flaps_ch: 208, # Flaps RCx_OPTION
            "LAND_FLAP_PERCNT": 50,
            "LOG_DISARMED": 1,
            "RTL_AUTOLAND": 1,

            "RC%u_MIN" % flaps_ch: flaps_ch_min,
            "RC%u_MAX" % flaps_ch: flaps_ch_max,
            "RC%u_TRIM" % flaps_ch: flaps_ch_trim,

            "SERVO%u_MIN" % servo_ch: servo_ch_min,
            "SERVO%u_MAX" % servo_ch: servo_ch_max,
            "SERVO%u_TRIM" % servo_ch: servo_ch_trim,
        })

        self.progress("check flaps are not deployed")
        self.set_rc(flaps_ch, flaps_ch_min)
        self.wait_servo_channel_value(servo_ch, servo_ch_min, timeout=3)
        self.progress("deploy the flaps")
        self.set_rc(flaps_ch, flaps_ch_max)
        tstart = self.get_sim_time()
        self.wait_servo_channel_value(servo_ch, servo_ch_max)
        tstop = self.get_sim_time_cached()
        delta_time = tstop - tstart
        delta_time_min = 0.5
        delta_time_max = 1.5
        if delta_time < delta_time_min or delta_time > delta_time_max:
            raise NotAchievedException((
                "Flaps Slew not working (%f seconds)" % (delta_time,)))
        self.progress("undeploy flaps")
        self.set_rc(flaps_ch, flaps_ch_min)
        self.wait_servo_channel_value(servo_ch, servo_ch_min)

        self.progress("Flying mission %s" % filename)
        self.load_mission(filename)
        self.change_mode('AUTO')
        self.wait_ready_to_arm()
        self.arm_vehicle()
        # flaps should deploy for landing (RC input value used for position?!)
        self.wait_servo_channel_value(servo_ch, flaps_ch_trim, timeout=300)
        # flaps should undeploy at the end
        self.wait_servo_channel_value(servo_ch, servo_ch_min, timeout=30)

        self.progress("Flaps OK")

    def TestRCRelay(self):
        '''Test Relay RC Channel Option'''
        self.set_parameters({
            "RELAY1_FUNCTION": 1, # Enable relay as a standard relay pin
            "RC12_OPTION": 28 # Relay On/Off
        })
        self.set_rc(12, 1000)
        self.reboot_sitl() # needed for RC12_OPTION and RELAY1_FUNCTION to take effect

        off = self.get_parameter("SIM_PIN_MASK")
        if off:
            raise PreconditionFailedException("SIM_MASK_PIN off")

        # allow time for the RC library to register initial value:
        self.delay_sim_time(1)

        self.set_rc(12, 2000)
        self.wait_heartbeat()
        self.wait_heartbeat()

        on = self.get_parameter("SIM_PIN_MASK")
        if not on:
            raise NotAchievedException("SIM_PIN_MASK doesn't reflect ON")
        self.set_rc(12, 1000)
        self.wait_heartbeat()
        self.wait_heartbeat()
        off = self.get_parameter("SIM_PIN_MASK")
        if off:
            raise NotAchievedException("SIM_PIN_MASK doesn't reflect OFF")

    def TestRCCamera(self):
        '''Test RC Option - Camera Trigger'''
        self.set_parameter("RC12_OPTION", 9) # CameraTrigger
        self.set_parameter("CAM1_TYPE", 1)   # Camera with servo trigger
        self.reboot_sitl() # needed for RC12_OPTION to take effect

        x = self.mav.messages.get("CAMERA_FEEDBACK", None)
        if x is not None:
            raise PreconditionFailedException("Receiving CAMERA_FEEDBACK?!")
        self.set_rc(12, 2000)
        tstart = self.get_sim_time()
        while self.get_sim_time_cached() - tstart < 10:
            x = self.mav.messages.get("CAMERA_FEEDBACK", None)
            if x is not None:
                break
            self.wait_heartbeat()
        self.set_rc(12, 1000)
        if x is None:
            raise NotAchievedException("No CAMERA_FEEDBACK message received")

        self.wait_ready_to_arm()

        original_alt = self.get_altitude()

        takeoff_alt = 30
        self.takeoff(takeoff_alt)
        self.set_rc(12, 2000)
        self.delay_sim_time(1)
        self.set_rc(12, 1000)
        x = self.mav.messages.get("CAMERA_FEEDBACK", None)
        if abs(x.alt_rel - takeoff_alt) > 10:
            raise NotAchievedException("Bad relalt (want=%f vs got=%f)" % (takeoff_alt, x.alt_rel))
        if abs(x.alt_msl - (original_alt+30)) > 10:
            raise NotAchievedException("Bad absalt (want=%f vs got=%f)" % (original_alt+30, x.alt_msl))
        self.fly_home_land_and_disarm()

    def ThrottleFailsafe(self):
        '''Fly throttle failsafe'''
        self.change_mode('MANUAL')
        m = self.mav.recv_match(type='SYS_STATUS', blocking=True)
        receiver_bit = mavutil.mavlink.MAV_SYS_STATUS_SENSOR_RC_RECEIVER
        self.progress("Testing receiver enabled")
        if (not (m.onboard_control_sensors_enabled & receiver_bit)):
            raise PreconditionFailedException()
        self.progress("Testing receiver present")
        if (not (m.onboard_control_sensors_present & receiver_bit)):
            raise PreconditionFailedException()
        self.progress("Testing receiver health")
        if (not (m.onboard_control_sensors_health & receiver_bit)):
            raise PreconditionFailedException()

        self.progress("Ensure we know original throttle value")
        self.wait_rc_channel_value(3, 1000)

        self.set_parameter("THR_FS_VALUE", 960)
        self.progress("Failing receiver (throttle-to-950)")
        self.context_collect("HEARTBEAT")
        self.set_parameter("SIM_RC_FAIL", 2) # throttle-to-950
        self.wait_mode('RTL') # long failsafe
        if (self.get_mode_from_mode_mapping("CIRCLE") not in
                [x.custom_mode for x in self.context_stop_collecting("HEARTBEAT")]):
            raise NotAchievedException("Did not go via circle mode")
        self.progress("Ensure we've had our throttle squashed to 950")
        self.wait_rc_channel_value(3, 950)
        self.do_timesync_roundtrip()
        m = self.assert_receive_message('SYS_STATUS')
        self.progress("Got (%s)" % str(m))
        self.progress("Testing receiver enabled")
        if (not (m.onboard_control_sensors_enabled & receiver_bit)):
            raise NotAchievedException("Receiver not enabled")
        self.progress("Testing receiver present")
        if (not (m.onboard_control_sensors_present & receiver_bit)):
            raise NotAchievedException("Receiver not present")
        # skip this until RC is fixed
#        self.progress("Testing receiver health")
#        if (m.onboard_control_sensors_health & receiver_bit):
#            raise NotAchievedException("Sensor healthy when it shouldn't be")
        self.set_parameter("SIM_RC_FAIL", 0)
        # have to allow time for RC to be fetched from SITL
        self.delay_sim_time(0.5)
        self.do_timesync_roundtrip()
        m = self.assert_receive_message('SYS_STATUS')
        self.progress("Testing receiver enabled")
        if (not (m.onboard_control_sensors_enabled & receiver_bit)):
            raise NotAchievedException("Receiver not enabled")
        self.progress("Testing receiver present")
        if (not (m.onboard_control_sensors_present & receiver_bit)):
            raise NotAchievedException("Receiver not present")
        self.progress("Testing receiver health")
        if (not (m.onboard_control_sensors_health & receiver_bit)):
            raise NotAchievedException("Receiver not healthy2")
        self.change_mode('MANUAL')

        self.progress("Failing receiver (no-pulses)")
        self.context_collect("HEARTBEAT")
        self.set_parameter("SIM_RC_FAIL", 1) # no-pulses
        self.wait_mode('RTL') # long failsafe
        if (self.get_mode_from_mode_mapping("CIRCLE") not in
                [x.custom_mode for x in self.context_stop_collecting("HEARTBEAT")]):
            raise NotAchievedException("Did not go via circle mode")
        self.do_timesync_roundtrip()
        m = self.assert_receive_message('SYS_STATUS')
        self.progress("Got (%s)" % str(m))
        self.progress("Testing receiver enabled")
        if (not (m.onboard_control_sensors_enabled & receiver_bit)):
            raise NotAchievedException("Receiver not enabled")
        self.progress("Testing receiver present")
        if (not (m.onboard_control_sensors_present & receiver_bit)):
            raise NotAchievedException("Receiver not present")
        self.progress("Testing receiver health")
        if (m.onboard_control_sensors_health & receiver_bit):
            raise NotAchievedException("Sensor healthy when it shouldn't be")
        self.progress("Making RC work again")
        self.set_parameter("SIM_RC_FAIL", 0)
        # have to allow time for RC to be fetched from SITL
        self.progress("Giving receiver time to recover")
        self.delay_sim_time(0.5)
        self.do_timesync_roundtrip()
        m = self.assert_receive_message('SYS_STATUS')
        self.progress("Testing receiver enabled")
        if (not (m.onboard_control_sensors_enabled & receiver_bit)):
            raise NotAchievedException("Receiver not enabled")
        self.progress("Testing receiver present")
        if (not (m.onboard_control_sensors_present & receiver_bit)):
            raise NotAchievedException("Receiver not present")
        self.progress("Testing receiver health")
        if (not (m.onboard_control_sensors_health & receiver_bit)):
            raise NotAchievedException("Receiver not healthy")
        self.change_mode('MANUAL')

        self.progress("Ensure long failsafe can trigger when short failsafe disabled")
        self.context_push()
        self.context_collect("STATUSTEXT")
        self.set_parameters({
            "FS_SHORT_ACTN": 3, # 3 means disabled
            "SIM_RC_FAIL": 1,
        })
        self.wait_statustext("Long failsafe on", check_context=True)
        self.wait_mode("RTL")
#            self.context_clear_collection("STATUSTEXT")
        self.set_parameter("SIM_RC_FAIL", 0)
        self.wait_text("Long Failsafe Cleared", check_context=True)
        self.change_mode("MANUAL")

        self.progress("Trying again with THR_FS_VALUE")
        self.set_parameters({
            "THR_FS_VALUE": 960,
            "SIM_RC_FAIL": 2,
        })
        self.wait_statustext("Long Failsafe on", check_context=True)
        self.wait_mode("RTL")
        self.context_pop()

        self.start_subtest("Not use RC throttle input when THR_FAILSAFE==2")
        self.takeoff(100)
        self.set_rc(3, 1800)
        self.set_rc(1, 2000)
        self.wait_attitude(desroll=45, timeout=1)
        self.context_push()
        self.set_parameters({
            "THR_FAILSAFE": 2,
            "SIM_RC_FAIL": 1,  # no pulses
        })
        self.delay_sim_time(1)
        self.wait_attitude(desroll=0, timeout=5)
        self.assert_servo_channel_value(3, self.get_parameter("RC3_MIN"))
        self.set_parameters({
            "SIM_RC_FAIL": 0,  # fix receiver
        })
        self.zero_throttle()
        self.disarm_vehicle(force=True)
        self.context_pop()
        self.reboot_sitl()

    def ThrottleFailsafeFence(self):
        '''Fly fence survives throttle failsafe'''
        fence_bit = mavutil.mavlink.MAV_SYS_STATUS_GEOFENCE

        self.progress("Checking fence is not present before being configured")
        m = self.mav.recv_match(type='SYS_STATUS', blocking=True)
        self.progress("Got (%s)" % str(m))
        if (m.onboard_control_se'''
Drive a BalanceBot in SITL

AP_FLAKE8_CLEAN

'''

from __future__ import print_function

import os

from rover import AutoTestRover

import vehicle_test_suite
from vehicle_test_suite import NotAchievedException

# get location of scripts
testdir = os.path.dirname(os.path.realpath(__file__))


class AutoTestBalanceBot(AutoTestRover):

    def log_name(self):
        return "BalanceBot"

    def vehicleinfo_key(self):
        return "Rover"

    def init(self):
        if self.frame is None:
            self.frame = 'balancebot'
        super(AutoTestBalanceBot, self).init()

    def DO_SET_MODE(self):
        '''Set mode via MAV_COMMAND_DO_SET_MODE'''
        self.do_set_mode_via_command_long("HOLD")
        self.do_set_mode_via_command_long("MANUAL")

    def rc_defaults(self):
        ret = super(AutoTestBalanceBot, self).rc_defaults()
        ret[3] = 1500
        return ret

    def is_balancebot(self):
        return True

    def drive_rtl_mission_max_distance_from_home(self):
        '''maximum distance allowed from home at end'''
        '''balancebot tends to wander backwards, away from the target'''
        return 8

    def DriveRTL(self):
        '''Drive an RTL Mission'''
        # if we Hold then the balancebot continues to wander
        # indefinitely at ~1m/s, hence we set to Acro
        self.set_parameter("MIS_DONE_BEHAVE", 2)
        super(AutoTestBalanceBot, self).DriveRTL()

    def TestWheelEncoder(self):
        '''make sure wheel encoders are generally working'''
        ex = None
        try:
            self.set_parameter("WENC_TYPE", 10)
            self.set_parameter("AHRS_EKF_TYPE", 10)
            self.reboot_sitl()
            self.set_parameter("WENC2_TYPE", 10)
            self.set_parameter("WENC_POS_Y", 0.075)
            self.set_parameter("WENC2_POS_Y", -0.075)
            self.reboot_sitl()
            self.change_mode("HOLD")
            self.wait_ready_to_arm()
            self.change_mode("ACRO")
            self.arm_vehicle()
            self.set_rc(3, 1600)

            m = self.assert_receive_message('WHEEL_DISTANCE', timeout=5)

            tstart = self.get_sim_time()
            while True:
                if self.get_sim_time_cached() - tstart > 10:
                    break
                dist_home = self.distance_to_home(use_cached_home=True)
                m = self.mav.messages.get("WHEEL_DISTANCE")
                delta = abs(m.distance[0] - dist_home)
                self.progress("dist-home=%f wheel-distance=%f delta=%f" %
                              (dist_home, m.distance[0], delta))
                if delta > 5:
                    raise NotAchievedException("wheel distance incorrect")
            self.disarm_vehicle()
        except Exception as e:
            self.progress("Caught exception: %s" %
                          self.get_exception_stacktrace(e))
            self.disarm_vehicle()
            ex = e
        self.reboot_sitl()
        if ex is not None:
            raise ex

    def DriveMission(self):
        '''Drive Mission rover1.txt'''
        self.drive_mission("balancebot1.txt", strict=False)

    def tests(self):
        '''return list of all tests'''

        '''note that while AutoTestBalanceBot inherits from Rover we don't
inherit Rover's tests!'''
        ret = vehicle_test_suite.TestSuite.tests(self)

        ret.extend([
            self.DriveRTL,
            self.DriveMission,
            self.TestWheelEncoder,
            self.MAV_CMD_DO_SEND_BANNER,
            self.DO_SET_MODE,
            self.ServoRelayEvents,
        ])
        return ret

    def default_mode(self):
        return 'MANUAL'
                                                                                                                                                                                                                                                                                                                                                                                                                                                             #!/usr/bin/env python

'''A helper script for bisecting common problems when working with ArduPilot

When running bisections, you should

export SITL_PANIC_EXIT=1

Bisect between a commit which builds and one which doesn't,
finding the first commit which broke the build with a
 specific failure:

git bisect reset
git bisect good a7647e77d9
git bisect bad 153ad9539866f8d93a99e9998118bb090d2f747f
cp -a Tools/autotest/bisect-helper.py /tmp
git bisect run /tmp/bisect-helper.py --build \
     --build-failure-string= \
     "reference to 'OpticalFlow' is ambiguous"

Work out who killed bebop:
cp -a Tools/autotest/bisect-helper.py /tmp
git bisect reset
git bisect good a7647e77d9 &&
  git bisect bad 153ad9539866f8d93a99e9998118bb090d2f747f &&
  git bisect run /tmp/bisect-helper.py --build \
    --waf-configure-arg="--board bebop"

# Use a failing test to work out which commit broke things:
cp Tools/autotest/bisect-helper.py /tmp
git bisect reset
git bisect start
git bisect bad
git bisect good HEAD~1024
time git bisect run /tmp/bisect-helper.py --autotest --autotest-vehicle=Plane --autotest-test=NeedEKFToArm --autotest-branch=wip/bisection-using-named-test  # noqa

Work out who overflowed Omnbusf4pro:
cp -a Tools Tools2
GOOD=c4ce6fa3851f93df34393c376fee5b37e0a270d2
BAD=f00bf77af75f828334f735580d6b19698b639a74
BFS="overflowed by"
git bisect reset
git bisect start
git bisect good $GOOD &&
  git bisect bad $BAD &&
  git bisect run Tools2/autotest/bisect-helper.py --build \
    --waf-configure-arg="--board OmniBusF4Pro" \
     --build-failure-string="$BFS"

# Use a flapping test to work out which commit broke things.  The
# "autotest-branch" is the branch containing the flapping test (which
# may be master)
rm /tmp/bisect-debug/*; git commit -m "stuff" -a ; cp Tools/autotest/bisect-helper.py /tmp; git bisect reset; git bisect start; git bisect bad d24e569b20; git bisect good 3f6fd49507f286ad8f6ccc9e29b110d5e9fc9207^
time git bisect run /tmp/bisect-helper.py --autotest --autotest-vehicle=Copter --autotest-test=Replay --autotest-branch=wip/bisection-using-flapping-test --autotest-test-passes=40 --autotest-failure-require-string="Mismatch in field XKF1.Pitch" --autotest-failure-ignore-string="HALSITL::SITL_State::_check_rc_input"

AP_FLAKE8_CLEAN

'''

import optparse
import os
import subprocess
import shlex
import sys
import time
import traceback


def get_exception_stacktrace(e):
    if sys.version_info[0] >= 3:
        ret = "%s\n" % e
        ret += ''.join(traceback.format_exception(type(e),
                                                  value=e,
                                                  tb=e.__traceback__))
        return ret
    return traceback.format_exc(e)


class Bisect(object):
    def __init__(self, opts):
        self.opts = opts

    def exit_skip_code(self):
        return 125

    def exit_pass_code(self):
        return 0

    def exit_fail_code(self):
        return 1

    def exit_abort_code(self):
        return 129

    def exit_skip(self):
        self.progress("SKIP")
        sys.exit(self.exit_skip_code())

    def exit_pass(self):
        self.progress("PASS")
        sys.exit(self.exit_pass_code())

    def exit_fail(self):
        self.progress("FAIL")
        sys.exit(self.exit_fail_code())

    def exit_abort(self):
        '''call when this harness has failed (e.g. to reset to required
        state)'''
        self.progress("ABORT")
        sys.exit(self.exit_abort_code())

    def progress(self, string):
        '''pretty-print progress'''
        print("BH: %s" % string)

    def run_program(self, prefix, cmd_list):
        '''copied in from build_binaries.py'''
        '''run cmd_list, spewing and setting output in self'''
        self.progress("Running (%s)" % " ".join(cmd_list))
        p = subprocess.Popen(cmd_list,
                             stdin=None,
                             close_fds=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        self.program_output = ""
        while True:
            x = p.stdout.readline()
            if len(x) == 0:
                waitpid_result = os.waitpid(p.pid, 0)
                if waitpid_result:
                    break
                    # select not available on Windows... probably...
                time.sleep(0.1)
                continue
            if isinstance(x, bytes):
                x = x.decode('utf-8')
            self.program_output += x
            x = x.rstrip()
            print("%s: %s" % (prefix, x))
        (pid, status) = waitpid_result
        if status != 0:
            self.progress("Process failed (%s)" %
                          str(waitpid_result))
            raise subprocess.CalledProcessError(
                status, cmd_list)

    def build(self):
        '''run ArduCopter build.  May exit with skip or fail'''
        self.run_program("WAF-clean", ["./waf", "clean"])
        cmd_configure = ["./waf", "configure"]
        pieces = [shlex.split(x)
                  for x in self.opts.waf_configure_args]
        for piece in pieces:
            cmd_configure.extend(piece)
        self.run_program("WAF-configure", cmd_configure)
        cmd_build = ["./waf", "build"]
        pieces = [shlex.split(x)
                  for x in self.opts.waf_build_args]
        for piece in pieces:
            cmd_build.extend(piece)
        try:
            self.run_program("WAF-build", cmd_build)
        except subprocess.CalledProcessError:
            # well, it definitely failed....
            if self.opts.build_failure_string is not None:
                if self.opts.build_failure_string in self.program_output:
                    self.progress("Found relevant build failure")
                    self.exit_fail()
                # it failed, but not for the reason we're looking
                # for...
                self.exit_skip()
            else:
                self.exit_fail()

    def update_submodules(self):
        try:
            self.run_program("Update submodules",
                             ["git", "submodule", "update", "--init", "--recursive"])
        except subprocess.CalledProcessError:
            self.exit_abort()


class BisectBuild(Bisect):

    def __init__(self, opts):
        super(BisectBuild, self).__init__(opts)

    def run(self):
        if self.opts.build_failure_string is None:
            self.progress("--build-failure-string is required when using --build")
            self.exit_abort()

        self.update_submodules()
        self.build()  # may exit with skip or fail
        self.exit_pass()


class BisectCITest(Bisect):

    def __init__(self, opts):
        super(BisectCITest, self).__init__(opts)

    def autotest_script(self):
        return os.path.join("Tools", "autotest", "autotest.py")

    def git_reset(self):
        try:
            self.run_program("Reset autotest directory", ["git", "reset", "--hard"])
        except subprocess.CalledProcessError:
            self.exit_abort()

    def get_current_hash(self):
        self.run_program("Get current hash", ["git", "rev-parse", "HEAD"])
        x = self.program_output
        return x.strip()

    def run(self):

        current_hash = self.get_current_hash()

        self.debug_dir = os.path.join("/tmp", "bisect-debug")
        if not os.path.exists(self.debug_dir):
            os.mkdir(self.debug_dir)

        if self.opts.autotest_branch is None:
            raise ValueError("expected autotest branch")

        self.update_submodules()

        try:
            self.run_program("Check autotest directory out from master",
                             ["git", "checkout", self.opts.autotest_branch, "Tools/autotest"])
        except subprocess.CalledProcessError:
            self.exit_abort()

        self.progress("Build")
        cmd = [self.autotest_script()]
        if self.opts.autotest_valgrind:
            cmd.append("--debug")
        cmd.append("build.%s" % self.opts.autotest_vehicle)
        print("build cmd: %s" % str(cmd))

        try:
            self.run_program("Run autotest (build)", cmd)
        except subprocess.CalledProcessError:
            self.git_res