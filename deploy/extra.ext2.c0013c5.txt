#NOTE: 11/18/2018 2:50:09 AM Plane: Skywalker
ACRO_LOCKING,0
ACRO_PITCH_RATE,180
ACRO_ROLL_RATE,180
AFS_ENABLE,0
AHRS_COMP_BETA,0.1
AHRS_CUSTOM_PIT,0
AHRS_CUSTOM_ROLL,0
AHRS_CUSTOM_YAW,0
AHRS_EKF_TYPE,10
AHRS_GPS_GAIN,1
AHRS_GPS_MINSATS,6
AHRS_GPS_USE,1
AHRS_ORIENTATION,0
AHRS_RP_P,0.2
AHRS_TRIM_X,0
AHRS_TRIM_Y,0
AHRS_TRIM_Z,0
AHRS_WIND_MAX,0
AHRS_YAW_P,0.2
CRUISE_ALT_FLOOR,0.00
RTL_ALTITUDE,100.00
ALT_OFFSET,0
ARMING_ACCTHRESH,0.75
ARMING_CHECK,0
ARMING_REQUIRE,0
ARMING_RUDDER,1
ARMING_VOLT_MIN,0
ARMING_VOLT2_MIN,0
ARSPD_AUTOCAL,0
ARSPD_BUS,1
AIRSPEED_MAX,40
AIRSPEED_MIN,23
ARSPD_OFFSET,2013.475
ARSPD_PIN,1
ARSPD_PRIMARY,0
ARSPD_PSI_RANGE,1
ARSPD_RATIO,1.9936
ARSPD_SKIP_CAL,0
ARSPD_TUBE_ORDR,2
ARSPD_TYPE,2
ARSPD_USE,1
ARSPD2_TYPE,0
AUTOTUNE_LEVEL,6
AVD_ENABLE,0
BATT_MONITOR,0
BATT2_MONITOR,0
BRD_PWM_COUNT,8
BRD_RTC_TYPES,1
BRD_SERIAL_NUM,0
BTN_ENABLE,0
CAM_AUTO_ONLY,0
CAM_DURATION,10
CAM_FEEDBACK_PIN,-1
CAM_FEEDBACK_POL,1
CAM_MAX_ROLL,0
CAM_MIN_INTERVAL,0
CAM_RELAY_ON,1
CAM_SERVO_OFF,1100
CAM_SERVO_ON,1300
CAM_TRIGG_DIST,0
CAM_TRIGG_TYPE,0
CHUTE_CHAN,0
CHUTE_ENABLED,0
COMPASS_AUTO_ROT,2
COMPASS_AUTODEC,1
COMPASS_CAL_FIT,16
COMPASS_DEC,0.2073689
COMPASS_DEV_ID,983044
COMPASS_DEV_ID2,983052
COMPASS_DEV_ID3,0
COMPASS_DIA_X,1
COMPASS_DIA_Y,1
COMPASS_DIA_Z,1
COMPASS_DIA2_X,1
COMPASS_DIA2_Y,1
COMPASS_DIA2_Z,1
COMPASS_DIA3_X,0
COMPASS_DIA3_Y,0
COMPASS_DIA3_Z,0
COMPASS_EXP_DID,-1
COMPASS_EXP_DID2,-1
COMPASS_EXP_DID3,-1
COMPASS_EXTERN2,0
COMPASS_EXTERN3,0
COMPASS_EXTERNAL,1
COMPASS_FLTR_RNG,0
COMPASS_LEARN,1
COMPASS_MOT_X,0
COMPASS_MOT_Y,0
COMPASS_MOT_Z,0
COMPASS_MOT2_X,0
COMPASS_MOT2_Y,0
COMPASS_MOT2_Z,0
COMPASS_MOT3_X,0
COMPASS_MOT3_Y,0
COMPASS_MOT3_Z,0
COMPASS_MOTCT,0
COMPASS_ODI_X,0
COMPASS_ODI_Y,0
COMPASS_ODI_Z,0
COMPASS_ODI2_X,0
COMPASS_ODI2_Y,0
COMPASS_ODI2_Z,0
COMPASS_ODI3_X,0
COMPASS_ODI3_Y,0
COMPASS_ODI3_Z,0
COMPASS_OFFS_MAX,850
COMPASS_OFS_X,5
COMPASS_OFS_Y,13
COMPASS_OFS_Z,-18
COMPASS_OFS2_X,5
COMPASS_OFS2_Y,13
COMPASS_OFS2_Z,-18
COMPASS_OFS3_X,0
COMPASS_OFS3_Y,0
COMPASS_OFS3_Z,0
COMPASS_ORIENT,0
COMPASS_ORIENT2,0
COMPASS_ORIENT3,0
COMPASS_PMOT_EN,0
COMPASS_PRIMARY,0
COMPASS_DISBLMSK,0
COMPASS_USE,0
COMPASS_USE2,0
COMPASS_USE3,0
CRASH_ACC_THRESH,0
CRASH_DETECT,0
DSPOILR_RUD_RATE,100
EK2_ENABLE,0
EK3_ENABLE,0
FBWA_TDRAG_CHAN,0
FBWB_CLIMB_RATE,2
FBWB_ELEV_REV,0
FENCE_ACTION,0
FENCE_AUTOENABLE,0
FENCE_CHANNEL,0
FENCE_MAXALT,0
FENCE_MINALT,0
FENCE_RET_RALLY,0
FENCE_RETALT,0
FENCE_TOTAL,0
FLAP_1_PERCNT,0
FLAP_1_SPEED,0
FLAP_2_PERCNT,0
FLAP_2_SPEED,0
FLAP_IN_CHANNEL,0
FLAP_SLEWRATE,75
FLIGHT_OPTIONS,0
FLOW_ADDR,0
FLOW_ENABLE,0
FLOW_FXSCALER,0
FLOW_FYSCALER,0
FLOW_ORIENT_YAW,0
FLOW_POS_X,0
FLOW_POS_Y,0
FLOW_POS_Z,0
FLTMODE_CH,8
FLTMODE1,11
FLTMODE2,11
FLTMODE3,5
FLTMODE4,5
FLTMODE5,0
FLTMODE6,0
FORMAT_VERSION,13
FS_GCS_ENABL,0
FS_LONG_ACTN,0
FS_LONG_TIMEOUT,5
FS_SHORT_ACTN,0
FS_SHORT_TIMEOUT,1.5
GCS_PID_MASK,0
GLIDE_SLOPE_MIN,15
GLIDE_SLOPE_THR,5
GPS_AUTO_CONFIG,1
GPS_AUTO_SWITCH,1
GPS_BLEND_MASK,5
GPS_BLEND_TC,10
GPS_DELAY_MS,0
GPS2_DELAY_MS,0
GPS1_GNSS_MODE,0
GPS2_GNSS_MODE,0
GPS_INJECT_TO,127
GPS_MIN_ELEV,-100
GPS_NAVFILTER,8
GPS1_POS_X,0
GPS1_POS_Y,0
GPS1_POS_Z,0
GPS2_POS_X,0
GPS2_POS_Y,0
GPS2_POS_Z,0
GPS_RATE_MS,200
GPS2_RATE_MS,200
GPS_RAW_DATA,0
GPS_SAVE_CFG,0
GPS_SBAS_MODE,2
GPS_SBP_LOGMASK,-32768
GPS1_TYPE,1
GPS2_TYPE,0
GRIP_ENABLE,0
GROUND_STEER_ALT,0
GROUND_STEER_DPS,90
HIL_ERR_LIMIT,5
HIL_SERVOS,0
HOME_RESET_ALT,0
ICE_ENABLE,0
INITIAL_MODE,0
INS_ACC_BODYFIX,2
INS_ACC_ID,2753028
INS_ACC2_ID,2753036
INS_ACC2OFFS_X,0
INS_ACC2OFFS_Y,0
INS_ACC2OFFS_Z,0
INS_ACC2SCAL_X,1
INS_ACC2SCAL_Y,1
INS_ACC2SCAL_Z,1
INS_ACC3_ID,0
INS_ACC3OFFS_X,0
INS_ACC3OFFS_Y,0
INS_ACC3OFFS_Z,0
INS_ACC3SCAL_X,0
INS_ACC3SCAL_Y,0
INS_ACC3SCAL_Z,0
INS_ACCEL_FILTER,20
INS_ACCOFFS_X,0
INS_ACCOFFS_Y,0
INS_ACCOFFS_Z,0
INS_ACCSCAL_X,1
INS_ACCSCAL_Y,1
INS_ACCSCAL_Z,1
INS_ENABLE_MASK,1
INS_FAST_SAMPLE,0
INS_GYR_CAL,0
INS_GYR_ID,2752772
INS_GYR2_ID,2752780
INS_GYR2OFFS_X,0.00406022
INS_GYR2OFFS_Y,0.01334124
INS_GYR2OFFS_Z,-0.07174193
INS_GYR3_ID,0
INS_GYR3OFFS_X,0
INS_GYR3OFFS_Y,0
INS_GYR3OFFS_Z,0
INS_GYRO_FILTER,20
INS_GYROFFS_X,0.004127062
INS_GYROFFS_Y,0.01336281
INS_GYROFFS_Z,-0.07177746
INS_LOG_BAT_CNT,1024
INS_LOG_BAT_LGCT,32
INS_LOG_BAT_LGIN,20
INS_LOG_BAT_MASK,0
INS_LOG_BAT_OPT,0
INS_HNTC2_ENABLE,0
INS_POS1_X,0
INS_POS1_Y,0
INS_POS1_Z,0
INS_POS2_X,0
INS_POS2_Y,0
INS_POS2_Z,0
INS_POS3_X,0
INS_POS3_Y,0
INS_POS3_Z,0
INS_PRODUCT_ID,0
INS_STILL_THRESH,0.1
INS_TRIM_OPTION,1
INS_USE,1
INS_USE2,1
INS_USE3,0
KFF_RDDRMIX,0.7
KFF_THR2PTCH,0
LAND_ABORT_DEG,0
LAND_ABORT_THR,0
LAND_DISARMDELAY,20
LAND_DS_ABORTALT,0
LAND_DS_AIL_SCL,1
LAND_DS_APP_EXT,50
LAND_DS_ARSP_MAX,15
LAND_DS_ARSP_MIN,10
LAND_DS_D,0
LAND_DS_ELEV_PWM,1500
LAND_DS_I,0
LAND_DS_IMAX,0
LAND_DS_L1,30
LAND_DS_L1_I,0
LAND_DS_L1_TCON,0.4
LAND_DS_P,0
LAND_DS_SLEW_SPD,0.5
LAND_DS_SLOPE_A,1
LAND_DS_SLOPE_B,1
LAND_DS_V_DWN,2
LAND_DS_V_FWD,1
LAND_DS_YAW_LIM,10
LAND_FLAP_PERCNT,0
LAND_FLARE_ALT,3
LAND_FLARE_SEC,2
LAND_PF_ALT,10
LAND_PF_ARSPD,0
LAND_PF_SEC,6
LAND_PITCH_DEG,0.00
LAND_SLOPE_RCALC,2
LAND_THEN_NEUTRL,0
LAND_THR_SLEW,0
LAND_TYPE,0
LEVEL_ROLL_LIMIT,5
PTCH_LIM_MAX_DEG,20.00
PTCH_LIM_MIN_DEG,-25.00
ROLL_LIMIT_DEG,50.00
LOG_BACKEND_TYPE,1
LOG_BITMASK,65535
LOG_DISARMED,0
LOG_FILE_BUFSIZE,16
LOG_FILE_DSRMROT,0
LOG_MAV_BUFSIZE,8
LOG_REPLAY,0
MAG_ENABLE,1
MANUAL_RCMASK,0
MIN_GROUNDSPEED,0
MIS_OPTIONS,0
MIS_RESTART,0
MIS_TOTAL,11
MIXING_GAIN,0.5
MIXING_OFFSET,0
MNT_ANGMAX_PAN,4500
MNT_ANGMAX_ROL,4500
MNT_ANGMAX_TIL,4500
MNT_ANGMIN_PAN,-4500
MNT_ANGMIN_ROL,-4500
MNT_ANGMIN_TIL,-4500
MNT_DEFLT_MODE,3
MNT_JSTICK_SPD,0
MNT_LEAD_PTCH,0
MNT_LEAD_RLL,0
MNT_NEUTRAL_X,0
MNT_NEUTRAL_Y,0
MNT_NEUTRAL_Z,0
MNT_RETRACT_X,0
MNT_RETRACT_Y,0
MNT_RETRACT_Z,0
MNT_TYPE,0
NAV_CONTROLLER,1
NAVL1_DAMPING,1
NAVL1_LIM_BANK,60
NAVL1_PERIOD,20
NAVL1_XTRACK_I,0.02
NTF_BUZZ_ENABLE,1
NTF_BUZZ_PIN,0
NTF_DISPLAY_TYPE,0
NTF_LED_BRIGHT,3
NTF_LED_OVERRIDE,0
NTF_LED_TYPES,199
PTCH_RATE_D,0.000000
PTCH_RATE_FF,0.997500
PTCH_RATE_I,0.450000
PTCH_RATE_IMAX,1.000000
PTCH_RATE_P,0.600000
PTCH2SRV_RLL,1
PTCH2SRV_RMAX_DN,75
PTCH2SRV_RMAX_UP,75
PTCH2SRV_TCONST,0.45
Q_ENABLE,0
RALLY_INCL_HOME,0
RALLY_LIMIT_KM,5
RALLY_TOTAL,0
RC_OPTIONS,0
RC_OVERRIDE_TIME,3
RC1_DZ,30
RC1_MAX,1900
RC1_MIN,1100
RC1_OPTION,0
RC1_REVERSED,0
RC1_TRIM,1500
RC10_DZ,0
RC10_MAX,1900
RC10_MIN,1100
RC10_OPTION,0
RC10_REVERSED,0
RC10_TRIM,1500
RC11_DZ,0
RC11_MAX,1900
RC11_MIN,1100
RC11_OPTION,0
RC11_REVERSED,0
RC11_TRIM,1500
RC12_DZ,0
RC12_MAX,1900
RC12_MIN,1100
RC12_OPTION,0
RC12_REVERSED,0
RC12_TRIM,1500
RC13_DZ,0
RC13_MAX,1900
RC13_MIN,1100
RC13_OPTION,0
RC13_REVERSED,0
RC13_TRIM,1500
RC14_DZ,0
RC14_MAX,1900
RC14_MIN,1100
RC14_OPTION,0
RC14_REVERSED,0
RC14_TRIM,1500
RC15_DZ,0
RC15_MAX,1900
RC15_MIN,1100
RC15_OPTION,0
RC15_REVERSED,0
RC15_TRIM,1500
RC16_DZ,0
RC16_MAX,1900
RC16_MIN,1100
RC16_OPTION,0
RC16_REVERSED,0
RC16_TRIM,1500
RC2_DZ,30
RC2_MAX,1900
RC2_MIN,1100
RC2_OPTION,0
RC2_REVERSED,0
RC2_TRIM,1500
RC3_DZ,30
RC3_MAX,1900
RC3_MIN,1100
RC3_OPTION,0
RC3_REVERSED,0
RC3_TRIM,1500
RC4_DZ,30
RC4_MAX,1900
RC4_MIN,1100
RC4_OPTION,0
RC4_REVERSED,0
RC4_TRIM,1500
RC5_DZ,0
RC5_MAX,1900
RC5_MIN,1100
RC5_OPTION,0
RC5_REVERSED,0
RC5_TRIM,1500
RC6_DZ,0
RC6_MAX,1900
RC6_MIN,1100
RC6_OPTION,0
RC6_REVERSED,0
RC6_TRIM,1500
RC7_DZ,0
RC7_MAX,1900
RC7_MIN,1100
RC7_OPTION,0
RC7_REVERSED,0
RC7_TRIM,1500
RC8_DZ,0
RC8_MAX,1900
RC8_MIN,1100
RC8_OPTION,0
RC8_REVERSED,0
RC8_TRIM,1500
RC9_DZ,0
RC9_MAX,1900
RC9_MIN,1100
RC9_OPTION,0
RC9_REVERSED,0
RC9_TRIM,1500
RELAY_DEFAULT,0
RELAY_PIN,13
RELAY_PIN2,-1
RELAY_PIN3,-1
RELAY_PIN4,-1
RLL_RATE_D,0.000000
RLL_RATE_FF,1.049875
RLL_RATE_I,0.022500
RLL_RATE_IMAX,0.666667
RLL_RATE_P,0.200000
RLL2SRV_RMAX,50
RLL2SRV_TCONST,0.45
RNGFND_ADDR,0
RNGFND_FUNCTION,0
RNGFND_GNDCLEAR,10
RNGFND_LANDING,0
RNGFND_MAX_CM,700
RNGFND_MIN_CM,20
RNGFND_OFFSET,0
RNGFND_ORIENT,25
RNGFND_PIN,-1
RNGFND_POS_X,0
RNGFND_POS_Y,0
RNGFND_POS_Z,0
RNGFND_PWRRNG,0
RNGFND_RMETRIC,1
RNGFND_SCALING,3
RNGFND_SETTLE,0
RNGFND_STOP_PIN,-1
RNGFND_TYPE,0
RNGFND2_ADDR,0
RNGFND2_FUNCTION,0
RNGFND2_GNDCLEAR,10
RNGFND2_MAX_CM,700
RNGFND2_MIN_CM,20
RNGFND2_OFFSET,0
RNGFND2_ORIENT,25
RNGFND2_PIN,-1
RNGFND2_POS_X,0
RNGFND2_POS_Y,0
RNGFND2_POS_Z,0
RNGFND2_RMETRIC,1
RNGFND2_SCALING,3
RNGFND2_SETTLE,0
RNGFND2_STOP_PIN,-1
RNGFND2_TYPE,0
RSSI_TYPE,0
RST_MISSION_CH,0
RST_SWITCH_CH,0
RTL_AUTOLAND,0
RTL_RADIUS,0
RUDD_DT_GAIN,10
RUDDER_ONLY,0
SCALING_SPEED,15
SCHED_DEBUG,0
SCHED_LOOP_RATE,50
SERIAL0_BAUD,115
SERIAL0_PROTOCOL,1
SERIAL1_BAUD,57
SERIAL1_PROTOCOL,1
SERIAL2_BAUD,57
SERIAL2_PROTOCOL,1
SERIAL3_BAUD,38
SERIAL3_PROTOCOL,5
SERIAL4_BAUD,38
SERIAL4_PROTOCOL,5
SERIAL5_BAUD,57
SERIAL5_PROTOCOL,-1
SERIAL6_BAUD,57
SERIAL6_PROTOCOL,-1
SERVO_AUTO_TRIM,0
SERVO_RATE,50
SERVO_SBUS_RATE,50
SERVO_VOLZ_MASK,0
SERVO1_FUNCTION,4
SERVO1_MAX,1900
SERVO1_MIN,1100
SERVO1_REVERSED,0
SERVO1_TRIM,1500
SERVO10_FUNCTION,0
SERVO10_MAX,1900
SERVO10_MIN,1100
SERVO10_REVERSED,0
SERVO10_TRIM,1500
SERVO11_FUNCTION,0
SERVO11_MAX,1900
SERVO11_MIN,1100
SERVO11_REVERSED,0
SERVO11_TRIM,1500
SERVO12_FUNCTION,0
SERVO12_MAX,1900
SERVO12_MIN,1100
SERVO12_REVERSED,0
SERVO12_TRIM,1500
SERVO13_FUNCTION,0
SERVO13_MAX,1900
SERVO13_MIN,1100
SERVO13_REVERSED,0
SERVO13_TRIM,1500
SERVO14_FUNCTION,0
SERVO14_MAX,1900
SERVO14_MIN,1100
SERVO14_REVERSED,0
SERVO14_TRIM,1500
SERVO15_FUNCTION,0
SERVO15_MAX,1900
SERVO15_MIN,1100
SERVO15_REVERSED,0
SERVO15_TRIM,1500
SERVO16_FUNCTION,0
SERVO16_MAX,1900
SERVO16_MIN,1100
SERVO16_REVERSED,0
SERVO16_TRIM,1500
SERVO2_FUNCTION,19
SERVO2_MAX,1900
SERVO2_MIN,1100
SERVO2_REVERSED,0
SERVO2_TRIM,1500
SERVO3_FUNCTION,70
SERVO3_MAX,1900
SERVO3_MIN,1100
SERVO3_REVERSED,0
SERVO3_TRIM,1100
SERVO4_FUNCTION,21
SERVO4_MAX,1900
SERVO4_MIN,1100
SERVO4_REVERSED,0
SERVO4_TRIM,1500
SERVO5_FUNCTION,0
SERVO5_MAX,1900
SERVO5_MIN,1100
SERVO5_REVERSED,0
SERVO5_TRIM,1500
SERVO6_FUNCTION,0
SERVO6_MAX,1900
SERVO6_MIN,1100
SERVO6_REVERSED,0
SERVO6_TRIM,1500
SERVO7_FUNCTION,0
SERVO7_MAX,1900
SERVO7_MIN,1100
SERVO7_REVERSED,0
SERVO7_TRIM,1500
SERVO8_FUNCTION,0
SERVO8_MAX,1900
SERVO8_MIN,1100
SERVO8_REVERSED,0
SERVO8_TRIM,1500
SERVO9_FUNCTION,0
SERVO9_MAX,1900
SERVO9_MIN,1100
SERVO9_REVERSED,0
SERVO9_TRIM,1500
SIM_ADSB_ALT,1000
SIM_ADSB_COUNT,-1
SIM_ADSB_RADIUS,10000
SIM_ADSB_TX,0
SIM_ARSPD_FAIL,0
SIM_ARSPD_FAIL_P,0
SIM_ARSPD_PITOT,0
SIM_ARSPD_RND,0.5
SIM_ARSPD_SIGN,0
SIM_ARSPD2_FAIL,0
SIM_ARSPD2_FAILP,0
SIM_ARSPD2_PITOT,0
SIM_BARO_DELAY,0
SIM_BARO_DISABLE,0
SIM_BARO_DRIFT,0
SIM_BARO_GLITCH,0
SIM_BARO_RND,0.2
SIM_BATT_VOLTAGE,12.6
SIM_DRIFT_SPEED,0.05
SIM_DRIFT_TIME,5
SIM_ENGINE_FAIL,0
SIM_ENGINE_MUL,1
SIM_FLOAT_EXCEPT,1
SIM_FLOW_DELAY,0
SIM_FLOW_ENABLE,0
SIM_FLOW_POS_X,0
SIM_FLOW_POS_Y,0
SIM_FLOW_POS_Z,0
SIM_FLOW_RATE,10
SIM_GP2_GLITCH_X,0
SIM_GP2_GLITCH_Y,0
SIM_GP2_GLITCH_Z,0
SIM_GPS_ALT_OFS,0
SIM_GPS_BYTELOSS,0
SIM_GPS_DISABLE,0
SIM_GPS_DRIFTALT,0
SIM_GPS_GLITCH_X,0
SIM_GPS_GLITCH_Y,0
SIM_GPS_GLITCH_Z,0
SIM_GPS_HZ,20
SIM_GPS_LOCKTIME,0
SIM_GPS_NOISE,0
SIM_GPS_NUMSATS,10
SIM_GPS_TYPE,1
SIM_GPS2_ENABLE,0
SIM_GPS2_TYPE,1
SIM_GRPE_ENABLE,0
SIM_GRPE_PIN,-1
SIM_GRPS_ENABLE,0
SIM_GRPS_GRAB,2000
SIM_GRPS_PIN,-1
SIM_GRPS_RELEASE,1000
SIM_GRPS_REVERSE,0
SIM_IMU_POS_X,0
SIM_IMU_POS_Y,0
SIM_IMU_POS_Z,0
SIM_MAG_ALY_HGT,1
SIM_MAG_ALY_X,0
SIM_MAG_ALY_Y,0
SIM_MAG_ALY_Z,0
SIM_MAG_DELAY,0
SIM_MAG_DIA_X,0
SIM_MAG_DIA_Y,0
SIM_MAG_DIA_Z,0
SIM_MAG_ERROR,0
SIM_MAG_MOT_X,0
SIM_MAG_MOT_Y,0
SIM_MAG_MOT_Z,0
SIM_MAG_ODI_X,0
SIM_MAG_ODI_Y,0
SIM_MAG_ODI_Z,0
SIM_MAG_OFS_X,5
SIM_MAG_OFS_Y,13
SIM_MAG_OFS_Z,-18
SIM_MAG_ORIENT,0
SIM_MAG_RND,0
SIM_ODOM_ENABLE,0
SIM_PIN_MASK,0
SIM_RC_CHANCOUNT,16
SIM_RC_FAIL,0
SIM_SERVO_SPEED,0.14
SIM_SONAR_GLITCH,0
SIM_SONAR_POS_X,0
SIM_SONAR_POS_Y,0
SIM_SONAR_POS_Z,0
SIM_SONAR_RND,0
SIM_SONAR_SCALE,12.1212
SIM_SPEEDUP,-1
SIM_SPR_ENABLE,0
SIM_SPR_PUMP,-1
SIM_SPR_SPIN,-1
SIM_TEMP_BFACTOR,0
SIM_TEMP_BRD_OFF,20
SIM_TEMP_START,25
SIM_TEMP_TCONST,30
SIM_TERRAIN,1
SIM_VICON_HSTLEN,0
SIM_WIND_DIR,180
SIM_WIND_DIR_Z,0
SIM_WIND_SPD,0
SIM_WIND_T,0
SIM_WIND_T_ALT,60
SIM_WIND_T_COEF,0.01
SIM_WIND_TURB,0
SOAR_ALT_CUTOFF,200
SOAR_ALT_MAX,2000
SOAR_ALT_MIN,50
SOAR_DIST_AHEAD,5
SOAR_ENABLE,1
SOAR_ENABLE_CH,0
SOAR_MIN_CRSE_S,30
SOAR_MIN_THML_S,20
SOAR_POLAR_B,0.0156
SOAR_POLAR_CD0,0.00859
SOAR_POLAR_K,489
SOAR_Q1,0.001
SOAR_Q2,0.03
SOAR_R,0.45
SOAR_VSPEED,0.7
SR0_ADSB,5
SR0_EXT_STAT,2
SR0_EXTRA1,10
SR0_EXTRA2,10
SR0_EXTRA3,2
SR0_PARAMS,10
SR0_POSITION,2
SR0_RAW_CTRL,1
SR0_RAW_SENS,2
SR0_RC_CHAN,2
SR1_ADSB,5
SR1_EXT_STAT,1
SR1_EXTRA1,1
SR1_EXTRA2,1
SR1_EXTRA3,1
SR1_PARAMS,10
SR1_POSITION,1
SR1_RAW_CTRL,1
SR1_RAW_SENS,1
SR1_RC_CHAN,1
SR2_ADSB,5
SR2_EXT_STAT,1
SR2_EXTRA1,1
SR2_EXTRA2,1
SR2_EXTRA3,1
SR2_PARAMS,10
SR2_POSITION,1
SR2_RAW_CTRL,1
SR2_RAW_SENS,1
SR2_RC_CHAN,1
SR3_ADSB,5
SR3_EXT_STAT,1
SR3_EXTRA1,1
SR3_EXTRA2,1
SR3_EXTRA3,1
SR3_PARAMS,10
SR3_POSITION,1
SR3_RAW_CTRL,1
SR3_RAW_SENS,1
SR3_RC_CHAN,1
STAB_PITCH_DOWN,2
STALL_PREVENTION,1
STAT_BOOTCNT,190
STAT_FLTTIME,2701350
STAT_RESET,89185800
STAT_RUNTIME,3214486
STEER2SRV_D,0.005
STEER2SRV_DRTFCT,10
STEER2SRV_DRTMIN,4500
STEER2SRV_DRTSPD,0
STEER2SRV_FF,0
STEER2SRV_I,0.2
STEER2SRV_IMAX,1500
STEER2SRV_MINSPD,1
STEER2SRV_P,1.8
STEER2SRV_TCONST,0.75
STICK_MIXING,1
SYS_NUM_RESETS,274
SYSID_ENFORCE,0
SYSID_MYGCS,255
SYSID_THISMAV,1
TECS_APPR_SMAX,0
TECS_CLMB_MAX,5
TECS_HGT_OMEGA,3
TECS_INTEG_GAIN,0.5
TECS_LAND_ARSPD,-1
TECS_LAND_DAMP,0.5
TECS_LAND_IGAIN,0
TECS_LAND_PDAMP,0
TECS_LAND_PMAX,10
TECS_LAND_SINK,0.25
TECS_LAND_SPDWGT,-1
TECS_LAND_SRC,0
TECS_LAND_TCONST,2
TECS_LAND_TDAMP,0
TECS_LAND_THR,-1
TECS_PITCH_MAX,0
TECS_PITCH_MIN,0
TECS_PTCH_DAMP,0.2
TECS_RLL2THR,10
TECS_SINK_MAX,5
TECS_SINK_MIN,2
TECS_SPD_OMEGA,2
TECS_SPDWEIGHT,2
TECS_SYNAIRSPEED,0
TECS_THR_DAMP,0.5
TECS_TIME_CONST,12
TECS_TKOFF_IGAIN,0
TECS_VERT_ACC,7
TELEM_DELAY,0
TERRAIN_ENABLE,0
TERRAIN_FOLLOW,0
TERRAIN_LOOKAHD,2000
TERRAIN_SPACING,100
THR_FAILSAFE,1
THR_FS_VALUE,950
THR_MAX,100
THR_MIN,0
THR_PASS_STAB,0
THR_SLEWRATE,100
THR_SUPP_MAN,0
THROTTLE_NUDGE,1
TKOFF_FLAP_PCNT,0
TKOFF_PLIM_SEC,2
TKOFF_ROTATE_SPD,0
TKOFF_TDRAG_ELEV,0
TKOFF_TDRAG_SPD1,0
TKOFF_THR_DELAY,2
TKOFF_THR_MAX,0
TKOFF_THR_MINACC,0
TKOFF_THR_MINSPD,0
TKOFF_THR_SLEW,0
AIRSPEED_CRUISE,27.00
TRIM_AUTO,0
PTCH_TRIM_DEG,0.00
TRIM_THROTTLE,45
TUNE_CHAN,0
TUNE_CHAN_MAX,2000
TUNE_CHAN_MIN,1000
TUNE_ERR_THRESH,0.15
TUNE_MODE_REVERT,1
TUNE_PARAM,0
TUNE_RANGE,2
TUNE_SELECTOR,0
USE_REV_THRUST,2
WP_LOITER_RAD,90
WP_MAX_RADIUS,0
WP_RADIUS,130
YAW2SRV_DAMP,1.7
YAW2SRV_IMAX,1500
YAW2SRV_INT,0
YAW2SRV_RLL,1.1
YAW2SRV_SLIP,0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Program generated flight.

aircraftId	 = asw27
terrainId	 = D:/Silent Wings/data/Scenery/UK

pilot_name = Unknown Pilot

speed		 = 27.77777778
altitude	 = 1000
altitudeRef	 = QFE
yaw		 = 20
latitude	 = 57.33317424
longitude	 = -5.674033603

date = 01072005
time = 120000

competition_mode    = true
regatta_start       = false
start_gate_altitude = 1000
start_gate_altitude_ref = AGL
start_gate_open_time = -1

airport {
   name	 = Plockton
   lat	 = 57.335609
   lon	 = -5.672395
   elev	 = 0
   runway	 = 02
}

multiplayer = false
mp_port     = 1209

weather {
   simple {
      wind_str = 38
      wind_dir = 334
   }
   max_num_thermals = 5927
   max_num_sink     = 1481
   thermal_strength = 6.3
   thermal_radius   = 385
   thermal_ceiling  = 2500
   cumulus_prob     = 0.5
   cumulus_base     = 2000
   visibility       = 50000
   turbulence_strength = 1
   wind_layer {
      altitude  = 0
      direction = 334
      strength  = 1.9
   }

   wind_layer {
      altitude  = 150
      direction = 334
      strength  = 3.8
   }

   wind_layer {
      altitude  = 300
      direction = 334
      strength  = 4.94
   }

   wind_layer {
      altitude  = 1500
      direction = 19
      strength  = 5.7
   }

}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # Program generated flight.

aircraftId	 = ls8
terrainId	 = D:/Silent Wings/data/Scenery/Norway

pilot_name = Unknown Pilot

speed		 = 27.77777778
altitude	 = 800
altitudeRef	 = QFE
yaw		 = 145
latitude	 = 60.88056966
longitude	 = 11.66959703

date = 01072005
time = 140000

competition_mode    = true
regatta_start       = false
start_gate_altitude = 1000
start_gate_altitude_ref = AGL
start_gate_open_time = -1

airport {
   name	 = Starmoen
   lat	 = 60.8791
   lon	 = 11.6737
   elev	 = 0
   runway	 = 15
}

multiplayer = false
mp_port     = 1209

flight {
   aircraft_id = ls8
   type        = AI
   mode        = FOLLOW
   pilot_name  = AI Pilot 1
   glider_type = LS-8
   comp_id     = AA
   registration = LN-GAA
   start_time  = 0
   utc_offset  = -1742410382
   reg_color = [ 0 0 0 ]
   comp_color = [ 0 0 0 ]
}

flight {
   aircraft_id = ls8
   type        = AI
   mode        = FOLLOW
   pilot_name  = AI Pilot 2
   glider_type = LS-8
   comp_id     = AB
   registration = LN-GAB
   start_time  = 0
   utc_offset  = -1519176082
   reg_color = [ 0 0 0 ]
   comp_color = [ 0 0 0 ]
}

flight {
   aircraft_id = ls8
   type        = AI
   mode        = FOLLOW
   pilot_name  = AI Pilot 3
   glider_type = LS-8
   comp_id     = AC
   registration = LN-GAC
   start_time  = 0
   utc_offset  = 972621140
   reg_color = [ 0 0 0 ]
   comp_color = [ 0 0 0 ]
}

weather {
   simple {
      wind_str = 60
      wind_dir = 360
   }
   max_num_thermals = 2012
   max_num_sink     = 503
   thermal_strength = 4
   thermal_radius   = 227
   thermal_ceiling  = 2500
   cumulus_prob     = 0.4
   cumulus_base     = 2000
   visibility       = 50000
   turbulence_strength = 0.85
   wind_layer {
      altitude  = 0
      direction = 360
      strength  = 3
   }

   wind_layer {
      altitude  = 150
      direction = 360
      strength  = 6
   }

   wind_layer {
      altitude  = 300
      direction = 360
      strength  = 7.8
   }

   wind_layer {
      altitude  = 1500
      direction = 45
      strength  = 9
   }

}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *.so
*.o
*.d
*.wbproj
.webots_*.wbproj
/controllers/ardupilot_SITL_ROVER/ardupilot_SITL_ROVER
/controllers/ardupilot_SITL_QUAD/ardupilot_SITL_QUAD
/controllers/ardupilot_SITL_TRICOPTER/ardupilot_SITL_TRICOPTER
/controllers/ardupilot_SITL_Supervisor/ardupilot_SITL_Supervisor
/plugins/physics/sitl_physics_env/build

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # Using SITL with Webots

[Webots](https://www.cyberbotics.com/#webots "Webots") is an open source robot simulator that provides a complete development environment to model, program and simulate robots. Thousands of institutions worldwide use it for R&D and teaching. Webots has been codeveloped by the Swiss Federal Institute of Technology in Lausanne, thoroughly tested, well documented and continuously maintained since 1996.


#### Installing Webots

Please check this [page](https://www.cyberbotics.com/download "page"). The steps is very easy and straight forward.

#### Running Simulator

1- open webots and open file libraries/SITL/examples/Webots/worlds/webots_quadPlus.wbt 
2- press "run" button.
3- run  ./libraries/SITL/examples/Webots/dronePlus.sh 

please note that to re-run the simulator you need to stop ardupilot SITL then stop webots simulator "stop button". then press "run" button on webots and then rerun ardupilot SITL.

#### Simulation using Map Street 

You can use [OpenStreetMaps](https://www.openstreetmap.org/ "OpenStreetMaps") with [Webots](https://cyberbotics.com/doc/automobile/openstreetmap-importer "Webots"), it is fairly straight forward. This is a very nice sample  **./libraries/SITL/examples/Webots/worlds/pyramids_droneX.wbt**, and you need to run SITL using **./libraries/SITL/examples/Webots/pyramids_droneX.sh**
[![Watch the video] Flying at Giza Pyramids](https://www.youtube.com/embed/c5CJaRH9Pig)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # Copyright 1996-2018 Cyberbotics Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Generic Makefile.include for Webots controllers, physics plugins, robot
### window libraries, remote control libraries and other libraries
### to be used with GNU make
###
### Platforms: Windows, macOS, Linux
### Languages: C, C++
###
### Authors: Olivier Michel, Yvan Bourquin, Fabien Rohrer
###          Edmund Ronald, Sergei Poskriakov
###
###-----------------------------------------------------------------------------
###
### This file is meant to be included from the Makefile files located in the
### Webots projects subdirectories. It is possible to set a number of variables
### to customize the build process, i.e., add source files, compilation flags,
### include paths, libraries, etc. These variables should be set in your local
### Makefile just before including this Makefile.include. This Makefile.include
### should never be modified.
###
### Here is a description of the variables you may set in your local Makefile:
###
### ---- C Sources ----
### if your program uses several C source files:
### C_SOURCES = my_plugin.c my_clever_algo.c my_graphics.c
###
### ---- C++ Sources ----
### if your program uses several C++ source files:
### CXX_SOURCES = my_plugin.cc my_clever_algo.cpp my_graphics.c++
###
### ---- Compilation options ----
### if special compilation flags are necessary:
### CFLAGS = -Wno-unused-result
###
### ---- Linked libraries ----
### if your program needs additional libraries:
### INCLUDE = -I"/my_library_path/include"
### LIBRARIES = -L"/path/to/my/library" -lmy_library -lmy_other_library
###
### ---- Linking options ----
### if special linking flags are needed:
### LFLAGS = -s
###
### ---- Webots included libraries ----
### if you want to use the Webots C API in your C++ controller program:
### USE_C_API = true
### if you want to link with the Qt framework embedded in Webots:
### QT = core gui widgets network
###
### ---- Debug mode ----
### if you want to display the gcc command line for compilation and link, as
### well as the rm command details used for cleaning:
### VERBOSE = 1
###
###-----------------------------------------------------------------------------
C_SOURCES = ardupilot_SITL_QUAD.c sockets.c sensors.c
INCLUDE = -I"./"
### Do not modify: this includes Webots global Makefile.include
space :=
space +=
WEBOTS_HOME_PATH=$(subst $(space),\ ,$(strip $(subst \,/,$(WEBOTS_HOME))))
include $(WEBOTS_HOME_PATH)/resources/Makefile.include
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * File: ardupilot_SITL_QUAD.c
 * Date: 29 July 2019
 * Description: integration with ardupilot SITL simulation.
 * Author: M.S.Hefny (HefnySco)
 * Modifications:
 *  - Blocking sockets
 *  - Advance simulation time only when receive motor data.
 */


/*
  Data is sent in format:
  
  {"timestamp": 1561043647.7598028, 
            "vehicle.imu": {"timestamp": 1561043647.7431362, 
                    "angular_velocity": [-8.910427823138889e-06, 1.6135254554683343e-06, 0.0005768465343862772], 
                    "linear_acceleration": [-0.06396577507257462, 0.22235631942749023, 9.807276725769043], 
                    "magnetic_field": [23662.052734375, 2878.55859375, -53016.55859375]}, 
                    "vehicle.gps": {"timestamp": 1561043647.7431362, "x": -0.0027823783457279205, "y": -0.026340210810303688, "z": 0.159392312169075}, 
                    "vehicle.velocity": {"timestamp": 1561043647.7431362, "linear_velocity": [-6.0340113122947514e-05, -2.264878639834933e-05, 9.702569059300004e-07], 
                    "angular_velocity": [-8.910427823138889e-06, 1.6135254554683343e-06, 0.0005768465343862772], 
                    "world_linear_velocity": [-5.9287678595865145e-05, -2.5280191039200872e-05, 8.493661880493164e-07]}, 
                    "vehicle.pose": {"timestamp": 1561043647.7431362, "x": -0.0027823783457279205, "y": -0.026340210810303688, "z": 0.159392312169075, "yaw": 0.04371734336018562, "pitch": 0.0065115075558424, "roll": 0.022675735875964165}}
*/


/*
 * You may need to add include files like <webots/distance_sensor.h> or
 * <webots/differential_wheels.h>, etc.
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <webots/robot.h>
#include <webots/emitter.h>
#include "ardupilot_SITL_QUAD.h"
#include "sockets.h"
#include "sensors.h"



#define MOTOR_NUM 4

static WbDeviceTag motors[MOTOR_NUM];

static WbDeviceTag gyro;
static WbDeviceTag accelerometer;
static WbDeviceTag compass;
static WbDeviceTag gps;
static WbDeviceTag camera;
static WbDeviceTag inertialUnit;
static WbDeviceTag emitter;


static double _linear_velocity[3] = {0.0,0.0,0.0};
static double v[MOTOR_NUM];
int port;
float dragFactor = VEHICLE_DRAG_FACTOR;

static int timestep;

#ifdef DEBUG_SENSORS
FILE *fptr;
#endif

/**
// apply motor thrust.
*/
void update_controls()
{
  /*
      1 N = 101.97162129779 grams force
      Thrust = t1 * |omega| * omega - t2 * |omega| * V
      Where t1 and t2 are the constants specified in the thrustConstants field,
      omega is the motor angular velocity 
      and V is the component of the linear velocity of the center of thrust along the shaft axis.

      if Vehicle mass = 1 Kg. and we want omega = 1.0 to hover
      then (mass / 0.10197) / (4 motors) = t1

    LINEAR_THRUST
      we also want throttle to be linear with thrust so we use sqrt to calculate omega from input.
      Check this doc: https://docs.google.com/spreadsheets/d/1eR4Fb6cgaTb-BHUKJbhAXPzyX0ZLtUcEE3EY-wQYvM8/edit?usp=sharing
   */
  static float offset = 0.0f;
  
  static float motor_value[4];
  // pls check https://docs.google.com/spreadsheets/d/1eR4Fb6cgaTb-BHUKJbhAXPzyX0ZLtUcEE3EY-wQYvM8/edit?usp=sharing
  static float factorDyn[11] = {
            3.6f, // 0.0
            3.6f, // 0.1
            4.6f, // 0.2
            4.1f, // 0.3
            4.1f, // 0.4
            3.9f, // 0.5
            3.9f, // 0.6
            3.8f, // 0.7
            3.7f, // 0.8 
            3.6f, // 0.9 
            3.4f  // 1.0
          };
  //#define LINEAR_THRUST


// SCALE SERVO SIGNALS from 1000-2000
for (int i=0;i<4;++i) {
  state.motors.v[i] = (state.motors.v[i] - 1000.0f) * 0.001f;
}


motor_value[0] = (state.motors.v[2]) * factorDyn[10 * (int)(state.motors.v[2])]  + offset;
motor_value[1] = (state.motors.v[0]) * factorDyn[10 * (int)(state.motors.v[0])]  + offset;
motor_value[2] = (state.motors.v[3]) * factorDyn[10 * (int)(state.motors.v[3])]  + offset;
motor_value[3] = (state.motors.v[1]) * factorDyn[10 * (int)(state.motors.v[1])]  + offset;

for (int i=0; i<4; ++i)
{
  wb_motor_set_position(motors[i], INFINITY);
  wb_motor_set_velocity(motors[i], motor_value[i]); 
}

  

  #ifdef WIND_SIMULATION
  /*
    Drag: Fd = ½ ρ Cd A v²

    Fd is drag force in Newtons
    ρ is the density of air in kg/m³
    Cd is the drag coefficient
    A is the cross section of our quad in m³ in the direction of movement
    v is the velocity in m/s
  */
  
  wind_webots_axis.x =  state.wind.x - linear_velocity[0];
  wind_webots_axis.z = -state.wind.y - linear_velocity[2];   // "-state.wind.y" as angle 90 wind is from EAST.
  wind_webots_axis.y =  state.wind.z - linear_velocity[1];
  

  wind_webots_axis.x = dragFactor * wind_webots_axis.x * abs(wind_webots_axis.x);
  wind_webots_axis.z = dragFactor * wind_webots_axis.z * abs(wind_webots_axis.z);
  wind_webots_axis.y = dragFactor * wind_webots_axis.y * abs(wind_webots_axis.y);

  wb_emitter_send(emitter, &wind_webots_axis, sizeof(VECTOR4F));
  
  #ifdef DEBUG_WIND
  printf("wind sitl: %f %f %f %f\n",state.wind.w, state.wind.x, state.wind.y, state.wind.z);
  printf("wind ctrl: (dragFactor) %f %f %f %f %f\n",dragFactor, wind_webots_axis.w, wind_webots_axis.x, wind_webots_axis.y, wind_webots_axis.z);
  #endif

  #endif
}


// data example: [my_controller_SITL] {"engines": [0.000, 0.000, 0.000, 0.000]}
// the JSON parser is directly inspired by https://github.com/ArduPilot/ardupilot/blob/master/libraries/SITL/SIM_Morse.cpp
bool parse_controls(const char *json)
{
    #ifdef DEBUG_INPUT_DATA
    printf("%s\n", json);
    #endif
    
    for (uint16_t i=0; i < ARRAY_SIZE(keytable); i++) {
        struct keytable *key;
        key = &keytable[i];
        // look for section header 
        const char *p = strstr(json, key->section);
        if (!p) {
            // we don't have this section
            continue;
        }
        p += strlen(key->section)+1;

        // find key inside section
        p = strstr(p, key->key);
        if (!p) {
            fprintf(stderr,"Failed to find key %s/%s DATA:%s\n", key->section, key->key, json);
            return false;
        }

        p += strlen(key->key)+3;
        
        switch (key->type) 
        {
          case DATA_FLOAT:
              *((float *)key->ptr) = atof(p);
              #ifdef DEBUG_INPUT_DATA
              printf("GOT  %s/%s\n", key->section, key->key);
              #endif
              break;

          case DATA_DOUBLE:
              *((double *)key->ptr) = atof(p);
              #ifdef DEBUG_INPUT_DATA
              printf("GOT  %s/%s\n", key->section, key->key);
              #endif
              break;

          case DATA_VECTOR4F: {
             VECTOR4F *v = (VECTOR4F *)key->ptr;
              if (sscanf(p, "[%f, %f, %f, %f]", &(v->w), &(v->x), &(v->y), &(v->z)) != 4) {
                  fprintf(stderr,"Failed to parse Vector3f for %s %s/%s\n",p,  key->section, key->key);
                  return false;
              }
              else {
                  #ifdef DEBUG_INPUT_DATA
                  printf("GOT  %s/%s\n[%f, %f, %f, %f]\n ", key->section, key->key,v->w,v->x,v->y,v->z);
                  #endif
              }
            break;
            }

          case DATA_VECTOR16F: {
              VECTOR16F *v = (VECTOR16F *)key->ptr;
              if (sscanf(p, "[%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]", &(v->v[0]), &(v->v[1]), &(v->v[2]), &(v->v[3])
                  , &(v->v[4]), &(v->v[5]), &(v->v[6]), &(v->v[7])
                  , &(v->v[8]), &(v->v[9]), &(v->v[10]), &(v->v[11])
                  , &(v->v[12]), &(v->v[13]), &(v->v[14]), &(v->v[15])
                ) != 16) {
                  printf("Failed to parse DATA_VECTOR16F for %s %s/%s\n",p,  key->section, key->key);
                  return false;
              }
              else {
                  #ifdef DEBUG_INPUT_DATA
                  printf("GOT  %s/%s\n[%f, %f, %f, %f]\n ", key->section, key->key, (float)v->v[0], (float)v->v[1], (float)v->v[2],  (float)v->v[3]);
                  #endif
              }
            break;
            }
        }
    }
    return true;
}

void run ()
{
    char send_buf[1000]; 
    char command_buffer[2020];
    fd_set rfds;
    
    // calculate initial sensor values.
    wb_robot_step(timestep);
    
    while (true) 
    {
        if (fd == 0) 
        {
          // if no socket wait till you get a socket
            fd = socket_accept(sfd);
            if (fd < 0)
              break;
        }
         
        
        // trigget ArduPilot to send motor data 
        getAllSensors ((char *)send_buf, gyro,accelerometer,compass,gps, inertialUnit);

        #ifdef DEBUG_SENSORS
        //printf("at %lf  %s\n",wb_robot_get_time(), send_buf);
        printf("at %lf  %s\n",wb_robot_get_time(), send_buf);
        if (strlen (pBug)> 5)
        {
        // fprintf(fptr, "%s\n",pBug);
        }
        #endif
         
        
        if (write(fd,send_buf,strlen(send_buf)) <= 0)
        {
          fprintf (stderr,"Send Data Error\n");
        }

        if (fd) 
        {
          FD_ZERO(&rfds);
          FD_SET(fd, &rfds);
          struct timeval tv;
          tv.tv_sec = 0.05;
          tv.tv_usec = 0;
          int number = select(fd + 1, &rfds, NULL, NULL, &tv);
          if (number != 0) 
          {
            // there is a valid connection
                int n = recv(fd, (char *)command_buffer, 1000, 0);

                if (n < 0) {
        #ifdef _WIN32
                  int e = WSAGetLastError();
                  if (e == WSAECONNABORTED)
                    fprintf(stderr, "Connection aborted.\n");
                  else if (e == WSAECONNRESET)
                    fprintf(stderr, "Connection reset.\n");
                  else
                    fprintf(stderr, "Error reading from socket: %d.\n", e);
        #else
                  if (errno)
                    fprintf(stderr, "Error reading from socket: %d.\n", errno);
        #endif
                  break;
                }
                if (n==0)
                {
                  break;
                }
                if (n > 0)
                {
                  command_buffer[n] = 0;
                  if (parse_controls (command_buffer))
                  {
                    update_controls();
                    //https://cyberbotics.com/doc/reference/robot#wb_robot_step
                    // this is used to force webots not to execute untill it receives feedback from simulator.
                    wb_robot_step(timestep);
                  }

                }
          }
          
        }
    }
    socket_cleanup();
}


bool initialize (int argc, char *argv[])
{
  fd_set rfds;
  #ifdef DEBUG_SENSORS
  fptr = fopen ("/tmp/log.txt","w");
  #endif
  port = 5599;  // default port
  for (int i = 0; i < argc; ++i)
  {
      if (strcmp (argv[i],"-p")==0)
      { // specify port for SITL.
        if (argc > i+1 )
        {
          port = atoi (argv[i+1]);
          printf("socket port %d\n",port);
        }
      }
      else if (strcmp (argv[i],"-df")==0)
      { // specify drag functor used to simulate air resistance.
        if (argc > i+1 )
        {
          dragFactor = atof (argv[i+1]);
          printf("drag Factor %f\n",dragFactor);
        }
        else
        {
          fprintf(stderr,"Missing drag factor value.\n");
          return false;
        }
        
      }
  }
    
    
  sfd = create_socket_server(port);
  
  /* necessary to initialize webots stuff */
  wb_robot_init();
  
  timestep = (int)wb_robot_get_basic_time_step();
  timestep_scale = timestep * 1000.0;
  printf("timestep_scale: %f \n", timestep_scale);
  
  
  // inertialUnit
  inertialUnit = wb_robot_get_device("inertial_unit");
  wb_inertial_unit_enable(inertialUnit, timestep);

  // gyro
  gyro = wb_robot_get_device("gyro1");
  wb_gyro_enable(gyro, timestep);

  // accelerometer
  accelerometer = wb_robot_get_device("accelerometer1");
  wb_accelerometer_enable(accelerometer, timestep);
  
  // compass
  compass = wb_robot_get_device("compass1");
  wb_compass_enable(compass, timestep);

  // gps
  gps = wb_robot_get_device("gps1");
  wb_gps_enable(gps, timestep);

  // camera
  camera = wb_robot_get_device("camera1");
   wb_camera_enable(camera, CAMERA_FRAME_RATE_FACTOR * timestep);

  #ifdef WIND_SIMULATION
  // emitter
  emitter = wb_robot_get_device("emitter_plugin");
  #endif

  // names of motor should be the same as name of motor in the robot.
  const char *MOTOR_NAMES[] = {"motor1", "motor2", "motor3", "motor4"};
  
  // get motor device tags
  for (int i = 0; i < MOTOR_NUM; i++) {
    motors[i] = wb_robot_get_device(MOTOR_NAMES[i]);
    v[i] = 0.0f;
  }
  
  FD_ZERO(&rfds);
  FD_SET(sfd, &rfds);

  // init linear_velocity untill we receive valid data from Supervisor.
  linear_velocity = &_linear_velocity[0] ;


  return true;
}
/*
 * This is the main program.
 * The arguments of the main function can be specified by the
 * "controllerArgs" field of the Robot node
 */
int main(int argc, char **argv)
{

  

  if (initialize( argc, argv))
  {
  
    /*
     * Enter here functions to send actuator commands, like:
     * wb_differential_wheels_set_speed(100.0,100.0);
     */
    run();
  }

    /* Enter your cleanup code here */

    /* This is necessary to cleanup webots resources */
    wb_robot_cleanup();

  return 0;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // #define DEBUG_MOTORS 
// #define DEBUG_WIND    
// #define DEBUG_SENSORS   
// #define DEBUG_USE_KB 
// #define DEBUG_INPUT_DATA
// #define LINEAR_THRUST
// #define DEBUG_SOCKETS



#define WIND_SIMULATION
#define VEHICLE_DRAG_FACTOR 0.001

// # of simulation steps between two image frames.
#define CAMERA_FRAME_RATE_FACTOR  50

#define ARRAY_SIZE(_arr) (sizeof(_arr) / sizeof(_arr[0]))


enum data_type {
        DATA_FLOAT,
        DATA_DOUBLE,
        DATA_VECTOR4F,
        DATA_VECTOR16F,
    };

struct vector4f 
{
    float w,x,y,z;
};

typedef struct vector4f VECTOR4F;

struct vector16f 
{
    float v[16];
};

typedef struct vector16f VECTOR16F;

struct {
        double timestamp;
        VECTOR16F motors;
        VECTOR4F wind; 
        /*
         struct {
        float speed;      // m/s
        float direction;  // degrees 0..360
        float turbulence;
        float dir_z;	  //degrees -90..90
        } wind;
        */
       } state, last_state;



// table to aid parsing of JSON sensor data
struct keytable {
        const char *section;
        const char *key;
        void *ptr;
        enum data_type type;

} keytable[2] = {
        { "", "pwm",    &state.motors, DATA_VECTOR16F },
        { "", "wnd",    &state.wind, DATA_VECTOR4F }
        
};

/*
        w: wind speed
        x , y, z: wind direction.
*/
VECTOR4F   wind_webots_axis;

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #include <stdio.h>
#include <sys/time.h>
#include <webots/supervisor.h>
#include "sensors.h"

#define M_PI  3.14159265358979323846
#define M_PI2 6.28318530718


/*
https://discuss.ardupilot.org/t/copter-x-y-z-which-is-which/6823/2

Copy pasted what’s important:
NED Coordinate System:

The x axis is aligned with the vector to the north pole (tangent to meridians).
The y axis points to the east side (tangent to parallels)
The z axis points to the center of the earth
There is also Body Fixed Frame:
Body Fixed Frame (Attached to the aircraft)

The x axis points in forward (defined by geometry and not by movement) direction. (= roll axis)
The y axis points to the right (geometrically) (= pitch axis)
The z axis points downwards (geometrically) (= yaw axis)
In order to convert from Body Frame to NED what you need to call this function:

copter.rotate_body_frame_to_NE(vel_vector.x, vel_vector.y);




 */
/*
  returns: "yaw":_6.594794831471518e-05,"pitch":_-0.0005172680830582976,"roll":_0.022908752784132957}}
*/
void getInertia (const WbDeviceTag inertialUnit, char *buf)
{
  const double *inertial_directions = wb_inertial_unit_get_roll_pitch_yaw (inertialUnit);
  
  sprintf(buf,"\"roll\": %f,\"pitch\": %f,\"yaw\": %f",inertial_directions[0], inertial_directions[1], inertial_directions[2]);
  
  return ;

}

/*
  returns: "magnetic_field":_[23088.669921875,_3876.001220703125,_-53204.57421875]
*/
void getCompass (const WbDeviceTag compass, char *buf)
{
    const double *north3D = wb_compass_get_values(compass);
    
    sprintf(buf,"[%f, %f, %f]",north3D[0], north3D[2], north3D[1]);
    
    return ;

}


double old_north3D[3];
double lllinear_velocity[3];
double llspeed;
/*
  returns: "vehicle.gps":{"timestamp":_1563301031.055164,"x":_5.5127296946011484e-05,"y":_-0.0010968948481604457,"z":_0.037179552018642426}, 
*/
void getGPS (const WbDeviceTag gps, char *buf)
{

    const double *north3D = wb_gps_get_values(gps);
    llspeed = wb_gps_get_speed(gps);
    const double delta = (north3D[0] - old_north3D[0]);
    if (delta != 0.0)
    {
      lllinear_velocity[0] = (north3D[0] - old_north3D[0]) * timestep_scale;
      lllinear_velocity[1] = (north3D[1] - old_north3D[1]) * timestep_scale;
      lllinear_velocity[2] = (north3D[2] - old_north3D[2]) * timestep_scale;
    }
    old_north3D[0] = north3D[0];
    old_north3D[1] = north3D[1];
    old_north3D[2] = north3D[2];

    sprintf(buf,"\"x\": %f,\"y\": %f,\"z\": %f", north3D[0], north3D[2], north3D[1]);
    
    return ;
}

/*
 returns: "linear_acceleration": [0.005074390675872564, 0.22471477091312408, 9.80740737915039]
*/
void getAcc (const WbDeviceTag accelerometer, char *buf)
{
    //SHOULD BE CORRECT 
    const double *a = wb_accelerometer_get_values(accelerometer);
    
    sprintf(buf,"[%f, %f, %f]",a[0], a[2], a[1]);
    
    //sprintf(buf,"[0.0, 0.0, 0.0]");

    return ;
}


/*
  returns: "angular_velocity": [-1.0255117643964695e-07, -8.877226775894087e-08, 2.087078510015772e-09]
*/
void getGyro (const WbDeviceTag gyro, char *buf)
{

    const double *g = wb_gyro_get_values(gyro);
    
    sprintf(buf,"[%f, %f, %f]",g[0], g[2], g[1]);
    
    return ;
}


void getLinearVelocity (WbNodeRef nodeRef,  char * buf)
{
    if (linear_velocity != NULL)
    {
      sprintf (buf,"[%f, %f, %f]", lllinear_velocity[0], lllinear_velocity[2], lllinear_velocity[1]);
      //sprintf (pBug,"[%f, %f, %f]", lllinear_velocity[0], lllinear_velocity[2], lllinear_velocity[1]);
    }

    return ;
}

void getAllSensors (char *buf, WbDeviceTag gyro, WbDeviceTag accelerometer, WbDeviceTag compass, const WbDeviceTag gps, const WbDeviceTag inertial_unit)
{

/*
{"timestamp": 1563544049.2840538, 
    "vehicle.imu": {"timestamp": 1563544049.2673872, 
    "angular_velocity": [-2.0466000023589004e-06, 3.1428675129063777e-07, -6.141597896913709e-09],
    "linear_acceleration": [0.005077465437352657, 0.22471386194229126, 9.807389259338379], 
    "magnetic_field": [23088.71484375, 3875.498046875, -53204.48046875]}, 
    "vehicle.gps": {
        "timestamp": 1563544049.2673872, 
        "x": 4.985610576113686e-05, "y": -0.0010973707539960742, "z": 0.037179529666900635}, 
    "vehicle.velocity": {"timestamp": 1563544049.2673872, 
                        "linear_velocity": [-3.12359499377024e-10, -1.3824124955874595e-08, -6.033386625858839e-07],
                        "angular_velocity": [-2.0466000023589004e-06, 3.1428675129063777e-07, -6.141597896913709e-09], 
                        "world_linear_velocity": [0.0, 0.0, -6.034970851942489e-07]}, 
    "vehicle.pose": {"timestamp": 1563544049.2673872, 
                            "x": 4.985610576113686e-05, "y": -0.0010973707539960742, "z": 0.037179529666900635, "yaw": 8.899446402210742e-05, "pitch": -0.0005175824626348913, "roll": 0.022908702492713928}
                            }
*/
        

        static char compass_buf [150];
        static char acc_buf [150];
        static char gyro_buf [150];
        static char gps_buf [150];
        static char inertial_buf [150];
        static char linear_velocity_buf [150];

        char szTime[21];
        double time = wb_robot_get_time(); // current simulation time in [s]
        sprintf(szTime,"%lf", time);
        
        getGyro(gyro, gyro_buf);
        getAcc(accelerometer, acc_buf);
        getCompass(compass, compass_buf);
        getGPS(gps, gps_buf);
        getInertia (inertial_unit, inertial_buf);
        getLinearVelocity(self_node, linear_velocity_buf);

        sprintf (buf,"{\"ts\": %s,\"vehicle.imu\": {\"av\": %s,\"la\": %s,\"mf\": %s,\"vehicle.gps\":{%s},\"vehicle.velocity\":{\"wlv\": %s},\"vehicle.pose\":{%s,%s}}\r\n"
                      , szTime,                     gyro_buf,    acc_buf,   compass_buf,               gps_buf,                                  linear_velocity_buf,               gps_buf, inertial_buf );

}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            

#include <webots/robot.h>
#include <webots/keyboard.h>
#include <webots/compass.h>
#include <webots/accelerometer.h>
#include <webots/inertial_unit.h>
#include <webots/gps.h>
#include <webots/gyro.h>
#include <webots/motor.h>
#include <webots/camera.h>


WbNodeRef self_node;
double *linear_velocity;
double timestep_scale;
char pBug[1024];
void getInertia (const WbDeviceTag inertialUnit, char *buf);
void getLinearVelocity (WbNodeRef nodeRef, char * buf);
void getCompass (const WbDeviceTag compass, char *buf);
void getAcc (const WbDeviceTag accelerometer, char *buf);
void getGyro (const WbDeviceTag gyro, char *buf);
void getGPS (const WbDeviceTag gps, char *buf);
void getAllSensors (char *buf, WbDeviceTag gyro, WbDeviceTag accelerometer, WbDeviceTag compass, const WbDeviceTag gps, const WbDeviceTag inertial_unit);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
#include "sockets.h"


bool socket_init() {
#ifdef _WIN32 /* initialize the socket API */
  WSADATA info;
  if (WSAStartup(MAKEWORD(1, 1), &info) != 0) {
    fprintf(stderr, "Cannot initialize Winsock.\n");
    return false;
  }
#endif
  return true;
}

bool socket_set_non_blocking(int fd) {
  if (fd < 0)
    return false;
#ifdef _WIN32
  unsigned long mode = 1;
  return (ioctlsocket(fd, FIONBIO, &mode) == 0) ? true : false;
#else
  int flags = fcntl(fd, F_GETFL, 0) | O_NONBLOCK;
  return (fcntl(fd, F_SETFL, flags) == 0) ? true : false;
#endif
}

int socket_accept(int server_fd) {
  int cfd;
  struct sockaddr_in client;
  struct hostent *client_info;
#ifndef _WIN32
  socklen_t asize;
#else
  int asize;
#endif
  asize = sizeof(struct sockaddr_in);
  cfd = accept(server_fd, (struct sockaddr *)&client, &asize);
  if (cfd == -1) {
#ifdef _WIN32
    int e = WSAGetLastError();
    if (e == WSAEWOULDBLOCK)
      return 0;
    fprintf(stderr, "Accept error: %d.\n", e);
#else
    if (errno == EWOULDBLOCK)
      return 0;
    fprintf(stderr, "Accept error: %d.\n", errno);
#endif
    return -1;
  }
  client_info = gethostbyname((char *)inet_ntoa(client.sin_addr));
  printf("Accepted connection from: %s.\n", client_info->h_name);
  return cfd;
}

bool socket_close(int fd) {
#ifdef _WIN32
  return (closesocket(fd) == 0) ? true : false;
#else
  return (close(fd) == 0) ? true : false;
#endif
}

bool socket_cleanup() {
#ifdef _WIN32
  return (WSACleanup() == 0) ? true : false;
#else
  return true;
#endif
}




/*
  Creates a socket and bind it to port.
 */
int create_socket_server(int port) {
  int sfd, rc;
  struct sockaddr_in address;
  if (!socket_init())
  {
    fprintf (stderr, "socket_init failed");
    return -1;
  }
  sfd = socket(AF_INET, SOCK_STREAM, 0);
  if (sfd == -1) {
    fprintf(stderr, "Cannot create socket.\n");
    return -1;
  }
  int one = 1;
  setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
  memset(&address, 0, sizeof(struct sockaddr_in));
  address.sin_family = AF_INET;
  address.sin_port = htons((unsigned short)port);
  address.sin_addr.s_addr = INADDR_ANY;
  rc = bind(sfd, (struct sockaddr *)&address, sizeof(struct sockaddr));
  if (rc == -1) {
    fprintf(stderr, "Cannot bind port %d.\n", port);
    socket_close(sfd);
    return -1;
  }
  if (listen(sfd, 1) == -1) {
    fprintf(stderr, "Cannot listen for connections.\n");
    socket_close(sfd);
    return -1;
  }
  
  printf ("socket initialized at port %d.\n", port);
  return sfd;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>


#ifdef _WIN32
#include <winsock.h>
#else
#include <arpa/inet.h> /* definition of inet_ntoa */
#include <errno.h>
#include <fcntl.h>
#include <netdb.h>      /* definition of gethostbyname */
#include <netinet/in.h> /* definition of struct sockaddr_in */
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <unistd.h> /* definition of close */
#endif

int create_socket_server(int port);
bool socket_cleanup();
int socket_accept(int server_fd);
bool socket_set_non_blocking(int fd);

int fd;
int sfd;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # Copyright 1996-2019 Cyberbotics Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Generic Makefile.include for Webots controllers, physics plugins, robot
### window libraries, remote control libraries and other libraries
### to be used with GNU make
###
### Platforms: Windows, macOS, Linux
### Languages: C, C++
###
### Authors: Olivier Michel, Yvan Bourquin, Fabien Rohrer
###          Edmund Ronald, Sergei Poskriakov
###
###-----------------------------------------------------------------------------
###
### This file is meant to be included from the Makefile files located in the
### Webots projects subdirectories. It is possible to set a number of variables
### to customize the build process, i.e., add source files, compilation flags,
### include paths, libraries, etc. These variables should be set in your local
### Makefile just before including this Makefile.include. This Makefile.include
### should never be modified.
###
### Here is a description of the variables you may set in your local Makefile:
###
### ---- C Sources ----
### if your program uses several C source files:
### C_SOURCES = my_plugin.c my_clever_algo.c my_graphics.c
###
### ---- C++ Sources ----
### if your program uses several C++ source files:
### CXX_SOURCES = my_plugin.cc my_clever_algo.cpp my_graphics.c++
###
### ---- Compilation options ----
### if special compilation flags are necessary:
### CFLAGS = -Wno-unused-result
###
### ---- Linked libraries ----
### if your program needs additional libraries:
### INCLUDE = -I"/my_library_path/include"
### LIBRARIES = -L"/path/to/my/library" -lmy_library -lmy_other_library
###
### ---- Linking options ----
### if special linking flags are needed:
### LFLAGS = -s
###
### ---- Webots included libraries ----
### if you want to use the Webots C API in your C++ controller program:
### USE_C_API = true
### if you want to link with the Qt framework embedded in Webots:
### QT = core gui widgets network
###
### ---- Debug mode ----
### if you want to display the gcc command line for compilation and link, as
### well as the rm command details used for cleaning:
### VERBOSE = 1
###
###-----------------------------------------------------------------------------

### Do not modify: this includes Webots global Makefile.include
C_SOURCES = ardupilot_SITL_ROVER.c sockets.c sensors.c
INCLUDE = -I"./"
LIBRARIES = -ldriver -lcar
space :=
space +=
WEBOTS_HOME_PATH=$(subst $(space),\ ,$(strip $(subst \,/,$(WEBOTS_HOME))))
include $(WEBOTS_HOME_PATH)/resources/Makefile.include
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * File:          ardupilot_SITL_ROV.c
 * Date:          July 2019
 * Description: integration with ardupilot SITL simulation.
 * Author: M.S.Hefny (HefnySco)
 * Modifications:
 *  - Blocking sockets
 *  - Advance simulation time only when receive motor data.
 */

/*
 * You may need to add include files like <webots/distance_sensor.h> or
 * <webots/motor.h>, etc.
 */
#include <webots/robot.h>
#include <webots/supervisor.h>

#include <webots/vehicle/car.h>

#include <webots/vehicle/driver.h>
#include "ardupilot_SITL_ROVER.h"
#include "sockets.h"
#include "sensors.h"


#define MOTOR_NUM 2

static WbDeviceTag gyro;
static WbDeviceTag accelerometer;
static WbDeviceTag compass;
static WbDeviceTag gps;
static WbDeviceTag camera;
static WbDeviceTag inertialUnit;
static WbDeviceTag car;
static WbNodeRef world_info;

static const double *northDirection;


const float max_speed = 27; //m/s 

static double v[MOTOR_NUM];
int port;

static int timestep;



#ifdef DEBUG_USE_KB
/*
// Code used tp simulae motors using keys to make sure that sensors directions and motor torques and thrusts are all correct.
// You can start this controller and use telnet instead of SITL to start the simulator.
Then you can use Keyboard to emulate motor input.
*/
void process_keyboard ()
{
  switch (wb_keyboard_get_key()) 
  {
    case 'Q':  // Q key -> up & left
      v[0] = 0.0;
      v[1] = 0.0;
      break;

    case 'W':
      v[1] += 0.01;
      break;

    case 'S':
      v[1] -= 0.01;
      break;
  
    case 'A':
      v[0] = v[0] + 0.01;
      break;

    case 'D':
      v[0] = v[0] - 0.01;
      break;

    
  }

  wbu_driver_set_cruising_speed (v[1]);
  wbu_driver_set_steering_angle (v[0]);
  
  printf ("Motors Internal %f %f\n", v[0],v[1]);
  
}
#endif




/*
// apply motor thrust.
*/
void update_controls()
{
  float cruise_speed = state.rover.y * max_speed * 3.6f;
  float steer_angle =  state.rover.x  * 0.7f;
  wbu_driver_set_cruising_speed (cruise_speed + v[1]);
  wbu_driver_set_steering_angle (steer_angle + v[0]);
  
  #ifdef DEBUG_MOTORS
  printf("cruise speed: %f steering angle: %f\n", cruise_speed, steer_angle);
  #endif
}



bool parse_controls(const char *json)
{
    //state.timestamp = 1.0;
    #ifdef DEBUG_INPUT_DATA
    printf("%s\n", json);
    #endif
    
    for (uint16_t i=0; i < ARRAY_SIZE(keytableROV); i++) {
        struct keytableROV *key;
        key = &keytableROV[i];
        //printf("search   %s/%s\n", key->section, key->key);
        // look for section header 
        const char *p = strstr(json, key->section);
        if (!p) {
            // we don't have this sensor
            continue;
        }
        p += strlen(key->section)+1;

        // find key inside section
        p = strstr(p, key->key);
        if (!p) {
            printf("Failed to find key %s/%s DATA:%s\n", key->section, key->key, json);
            return false;
        }

        p += strlen(key->key)+3;
        
        switch (key->type) 
        {
          case DATA_FLOAT:
              *((float *)key->ptr) = atof(p);
              #ifdef DEBUG_INPUT_DATA
              printf("GOT  %s/%s\n", key->section, key->key);
              #endif
              break;

          case DATA_DOUBLE:
              *((double *)key->ptr) = atof(p);
              #ifdef DEBUG_INPUT_DATA
              printf("GOT  %s/%s\n", key->section, key->key);
              #endif
              break;
          case DATA_VECTOR2F:
          {
              VECTOR2F *v = (VECTOR2F *)key->ptr;
              if (sscanf(p, "[%f, %f]", &(v->x), &(v->y)) != 2) {
                  printf("Failed to parse Vector2f for %s %s/%s\n",p,  key->section, key->key);
                  return false;
              }
              else
              {
                  #ifdef DEBUG_INPUT_DATA
                  printf("GOT  %s/%s [%f, %f]\n ", key->section, key->key,v->x,v->y);
                  #endif
              }
              break;
          }
          case DATA_VECTOR4F: {
              VECTOR4F *v = (VECTOR4F *)key->ptr;
              if (sscanf(p, "[%f, %f, %f, %f]", &(v->w), &(v->x), &(v->y), &(v->z)) != 4) {
                  printf("Failed to parse Vector4f for %s %s/%s\n",p,  key->section, key->key);
                  return false;
              }
              else
              {
                  #ifdef DEBUG_INPUT_DATA
                  printf("GOT  %s/%s\n[%f, %f, %f, %f]\n ", key->section, key->key,v->w,v->x,v->y,v->z);
                  #endif
              }
              
              break;
              }
        }
    }
    return true;
}


void run ()
{

    char send_buf[1000]; //1000 just a safe margin
    char command_buffer[1000];
    fd_set rfds;
    
    // trigget ArduPilot to send motor data
    wb_robot_step(timestep);
    
    while (true) 
    {
        #ifdef DEBUG_USE_KB
        process_keyboard();
        #endif

        if (fd == 0) 
        {
          // if no socket wait till you get a socket
            fd = socket_accept(sfd);
            if (fd > 0)
            {
              //socket_set_non_blocking(fd);
            }
            else if (fd < 0)
              break;
        }
         
        getAllSensors ((char *)send_buf, gyro,accelerometer,compass,gps, inertialUnit);

        #ifdef DEBUG_SENSORS
        printf("%s\n",send_buf);
        #endif
        
        if (write(fd,send_buf,strlen(send_buf)) <= 0)
        {
          printf ("Send Data Error\n");
        }

        if (fd) 
        {
          FD_ZERO(&rfds);
          FD_SET(fd, &rfds);
          struct timeval tv;
          tv.tv_sec = 0.05;
          tv.tv_usec = 0;
          int number = select(fd + 1, &rfds, NULL, NULL, &tv);
          if (number != 0) 
          { 
            // there is a valid connection
                
                int n = recv(fd, (char *)command_buffer, 1000, 0);
                if (n < 0) {
        #ifdef _WIN32
                  int e = WSAGetLastError();
                  if (e == WSAECONNABORTED)
                    fprintf(stderr, "Connection aborted.\n");
                  else if (e == WSAECONNRESET)
                    fprintf(stderr, "Connection reset.\n");
                  else
                    fprintf(stderr, "Error reading from socket: %d.\n", e);
        #else
                  if (errno)
                    fprintf(stderr, "Error reading from socket: %d.\n", errno);
        #endif
                  break;
                }
                if (n==0)
                {
                  break;
                }
                if (command_buffer[0] == 'e')
                {
                  break;
                }
                if (n > 0)
                {

                  command_buffer[n] = 0;
                  if (parse_controls (command_buffer))
                  {
                    update_controls();
                    //https://cyberbotics.com/doc/reference/robot#wb_robot_step
                    wb_robot_step(timestep);
                  }

                }
          }
          
        }
    }
    
    socket_cleanup();
}


void initialize (int argc, char *argv[])
{
  
  fd_set rfds;
  port = 5599;  // default port
  for (int i = 0; i < argc; ++i)
    {
        if (strcmp (argv[i],"-p")==0)
        {
          if (argc > i+1 )
          {
            port = atoi (argv[i+1]);
          }
        }
    }
    
    
  sfd = create_socket_server(port);
  
  
  

  /* necessary to initialize webots stuff */
  wb_robot_init();
  wbu_driver_init (); 
  

  WbNodeRef root, node;
  WbFieldRef children, field;
  int n, i;
  root = wb_supervisor_node_get_root();
  children = wb_supervisor_node_get_field(root, "children");
  n = wb_supervisor_field_get_count(children);
  printf("This world contains %d nodes:\n", n);
  for (i = 0; i < n; i++) {
    node = wb_supervisor_field_get_mf_node(children, i);
    if (wb_supervisor_node_get_type(node) == WB_NODE_WORLD_INFO)
    {
      world_info = node; 
      break;
    }
  }

  printf("\n");
  node = wb_supervisor_field_get_mf_node(children, 0);
  field = wb_supervisor_node_get_field(node, "northDirection");
  northDirection = wb_supervisor_field_get_sf_vec3f(field);
  
  if (northDirection[0] == 1)
  {
    printf ("Axis Default Directions");
  }

  printf("WorldInfo.northDirection = %g %g %g\n\n", northDirection[0], northDirection[1], northDirection[2]);



  // keybaard
  timestep = (int)wb_robot_get_basic_time_step();
  wb_keyboard_enable(timestep);



  // inertialUnit
  inertialUnit = wb_robot_get_device("inertial_unit");
  wb_inertial_unit_enable(inertialUnit, timestep);

  // gyro
  gyro = wb_robot_get_device("gyro1");
  wb_gyro_enable(gyro, timestep);

  // accelerometer
  accelerometer = wb_robot_get_device("accelerometer1");
  wb_accelerometer_enable(accelerometer, timestep);
  
  // compass
  compass = wb_robot_get_device("compass1");
  wb_compass_enable(compass, timestep);

  // gps
  gps = wb_robot_get_device("gps1");
  wb_gps_enable(gps, timestep);

  // camera
  camera = wb_robot_get_device("camera1");
  wb_camera_enable(camera, CAMERA_FRAME_RATE_FACTOR * timestep);


  car = wb_robot_get_device ("rover");

  FD_ZERO(&rfds);
  FD_SET(sfd, &rfds);
}


/*
 * This is the main program.
 * The arguments of the main function can be specified by the
 * "controllerArgs" field of the Robot node
 */
int main(int argc, char **argv) {
  /* necessary to initialize webots stuff */
  wb_robot_init();


  initialize( argc, argv);

  /*
   * You should declare here WbDeviceTag variables for storing
   * robot devices like this:
   *  WbDeviceTag my_sensor = wb_robot_get_device("my_sensor");
   *  WbDeviceTag my_actuator = wb_robot_get_device("my_actuator");
   */

  /* main loop
   * Perform simulation steps of TIME_STEP milliseconds
   * and leave the loop when the simulation is over
   */
  run();

  /* Enter your cleanup code here */

  wbu_driver_cleanup();
  /* This is necessary to cleanup webots resources */
  wb_robot_cleanup();

  return 0;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #define DEBUG_USE_KB 
#define DEBUG_MOTORS
#define DEBUG_INPUT_DATA
#define LINEAR_THRUST  


#define CAMERA_FRAME_RATE_FACTOR  50

#define ARRAY_SIZE(_arr) (sizeof(_arr) / sizeof(_arr[0]))


enum data_type {
        DATA_FLOAT,
        DATA_DOUBLE,
        DATA_VECTOR4F,
        DATA_VECTOR2F,
    };

struct vector4f 
{
    float w,x,y,z;
};

struct vector2f 
{
    float x,y;
};

typedef struct vector4f VECTOR4F;
typedef struct vector2f VECTOR2F;

struct {
        double timestamp;
        VECTOR2F rover;
        } state, last_state;



// table to aid parsing of JSON sensor data
struct keytableROV {
        const char *section;
        const char *key;
        void *ptr;
        enum data_type type;

} keytableROV[1] = {
        //{ "", "timestamp", &state.timestamp, DATA_DOUBLE },
        { "", "rover",    &state.rover, DATA_VECTOR2F }
};


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #include <stdio.h>
#include <sys/time.h>
#include <webots/supervisor.h>
#include "sensors.h"

#define M_PI  3.14159265358979323846
#define M_PI2 6.28318530718


/*
https://discuss.ardupilot.org/t/copter-x-y-z-which-is-which/6823/2

Copy pasted what’s important:
NED Coordinate System:

The x axis is aligned with the vector to the north pole (tangent to meridians).
The y axis points to the east side (tangent to parallels)
The z axis points to the center of the earth
There is also Body Fixed Frame:
Body Fixed Frame (Attached to the aircraft)

The x axis points in forward (defined by geometry and not by movement) direction. (= roll axis)
The y axis points to the right (geometrically) (= pitch axis)
The z axis points downwards (geometrically) (= yaw axis)
In order to convert from Body Frame to NED what you need to call this function:

copter.rotate_body_frame_to_NE(vel_vector.x, vel_vector.y);




 */
/*
  returns: "yaw":_6.594794831471518e-05,"pitch":_-0.0005172680830582976,"roll":_0.022908752784132957}}
*/
void getInertia (const WbDeviceTag inertialUnit, char *buf)
{
  const double *inertial_directions = wb_inertial_unit_get_roll_pitch_yaw (inertialUnit);
  
  sprintf(buf,"\"roll\": %f,\"pitch\": %f,\"yaw\": %f",inertial_directions[0], inertial_directions[1], inertial_directions[2]);
  
  return ;

}

/*
  returns: "magnetic_field":_[23088.669921875,_3876.001220703125,_-53204.57421875]
*/
void getCompass (const WbDeviceTag compass, char *buf)
{
    const double *north3D = wb_compass_get_values(compass);
    
    sprintf(buf,"[%f, %f, %f]",north3D[0], north3D[2], north3D[1]);
    
    return ;

}



/*
  returns: "vehicle.gps":{"timestamp":_1563301031.055164,"x":_5.5127296946011484e-05,"y":_-0.0010968948481604457,"z":_0.037179552018642426}, 
*/
void getGPS (const WbDeviceTag gps, char *buf)
{

    const double *north3D = wb_gps_get_values(gps);
    
    sprintf(buf,"\"x\": %f,\"y\": %f,\"z\": %f", north3D[0], north3D[2], north3D[1]);
    
    return ;
}

/*
 returns: "linear_acceleration": [0.005074390675872564, 0.22471477091312408, 9.80740737915039]
*/
void getAcc (const WbDeviceTag accelerometer, char *buf)
{
    //SHOULD BE CORRECT 
    const double *a = wb_accelerometer_get_values(accelerometer);
    
    sprintf(buf,"[%f, %f, %f]",a[0], a[2], a[1]);
    
    //sprintf(buf,"[0.0, 0.0, 0.0]");

    return ;
}


/*
  returns: "angular_velocity": [-1.0255117643964695e-07, -8.877226775894087e-08, 2.087078510015772e-09]
*/
void getGyro (const WbDeviceTag gyro, char *buf)
{

    const double *g = wb_gyro_get_values(gyro);
    
    sprintf(buf,"[%f, %f, %f]",g[0], g[2], g[1]);
    
    return ;
}


void getLinearVelocity (WbNodeRef nodeRef,  char * buf)
{
    if (linear_velocity != NULL)
    {
      sprintf (buf,"[%f, %f, %f]", linear_velocity[0], linear_velocity[2], linear_velocity[1]);
    }

    return ;
}

void getAllSensors (char *buf, WbDeviceTag gyro, WbDeviceTag accelerometer, WbDeviceTag compass, const WbDeviceTag gps, const WbDeviceTag inertial_unit)
{

/*
{"timestamp": 1563544049.2840538, 
    "vehicle.imu": {"timestamp": 1563544049.2673872, 
    "angular_velocity": [-2.0466000023589004e-06, 3.1428675129063777e-07, -6.141597896913709e-09],
    "linear_acceleration": [0.005077465437352657, 0.22471386194229126, 9.807389259338379], 
    "magnetic_field": [23088.71484375, 3875.498046875, -53204.48046875]}, 
    "vehicle.gps": {
        "timestamp": 1563544049.2673872, 
        "x": 4.985610576113686e-05, "y": -0.0010973707539960742, "z": 0.037179529666900635}, 
    "vehicle.velocity": {"timestamp": 1563544049.2673872, 
                        "linear_velocity": [-3.12359499377024e-10, -1.3824124955874595e-08, -6.033386625858839e-07],
                        "angular_velocity": [-2.0466000023589004e-06, 3.1428675129063777e-07, -6.141597896913709e-09], 
                        "world_linear_velocity": [0.0, 0.0, -6.034970851942489e-07]}, 
    "vehicle.pose": {"timestamp": 1563544049.2673872, 
                            "x": 4.985610576113686e-05, "y": -0.0010973707539960742, "z": 0.037179529666900635, "yaw": 8.899446402210742e-05, "pitch": -0.0005175824626348913, "roll": 0.022908702492713928}
                            }
*/
        

        static char compass_buf [150];
        static char acc_buf [150];
        static char gyro_buf [150];
        static char gps_buf [150];
        static char inertial_buf [150];
        static char linear_velocity_buf [150];

        char szTime[21];
        double time = wb_robot_get_time(); // current simulation time in [s]
        sprintf(szTime,"%lf", time);
        
        getGyro(gyro, gyro_buf);
        getAcc(accelerometer, acc_buf);
        getCompass(compass, compass_buf);
        getGPS(gps, gps_buf);
        getInertia (inertial_unit, inertial_buf);
        getLinearVelocity(self_node, linear_velocity_buf);

        sprintf (buf,"{\"ts\": %s,\"vehicle.imu\": {\"av\": %s,\"la\": %s,\"mf\": %s,\"vehicle.gps\":{%s},\"vehicle.velocity\":{\"wlv\": %s},\"vehicle.pose\":{%s,%s}}\r\n"
                      , szTime,                     gyro_buf,    acc_buf,   compass_buf,               gps_buf,                                  linear_velocity_buf,               gps_buf, inertial_buf );

}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   

#include <webots/robot.h>
#include <webots/keyboard.h>
#include <webots/compass.h>
#include <webots/accelerometer.h>
#include <webots/inertial_unit.h>
#include <webots/gps.h>
#include <webots/gyro.h>
#include <webots/motor.h>
#include <webots/camera.h>




void getInertia (const WbDeviceTag inertialUnit,  char *buf);
void getLinearVelocity (WbNodeRef nodeRef,  char * buf);
void getCompass (const WbDeviceTag compass,  char *buf);
void getAcc (const WbDeviceTag accelerometer,  char *buf);
void getGyro (const WbDeviceTag gyro,  char *buf);
void getGPS (const WbDeviceTag gps,  char *buf);
void getAllSensors (char *buf,  WbDeviceTag gyro, WbDeviceTag accelerometer, WbDeviceTag compass, const WbDeviceTag gps, WbDeviceTag inertial_unit);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * File: ardupilot_SITL_ROV.c
 * Date: 03 Aug 2019
 * Description: integration with ardupilot SITL simulation.
 * Author: M.S.Hefny (HefnySco)
 * Modifications:
 */

#include <math.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <webots/supervisor.h>
#include "sockets.h"
#include "sensors.h"

bool socket_init() {
#ifdef _WIN32 /* initialize the socket API */
  WSADATA info;
  if (WSAStartup(MAKEWORD(1, 1), &info) != 0) {
    fprintf(stderr, "Cannot initialize Winsock.\n");
    return false;
  }
#endif
  return true;
}

bool socket_set_non_blocking(int fd) {
  if (fd < 0)
    return false;
#ifdef _WIN32
  unsigned long mode = 1;
  return (ioctlsocket(fd, FIONBIO, &mode) == 0) ? true : false;
#else
  int flags = fcntl(fd, F_GETFL, 0) | O_NONBLOCK;
  return (fcntl(fd, F_SETFL, flags) == 0) ? true : false;
#endif
}

int socket_accept(int server_fd) {
  int cfd;
  struct sockaddr_in client;
  struct hostent *client_info;
#ifndef _WIN32
  socklen_t asize;
#else
  int asize;
#endif
  asize = sizeof(struct sockaddr_in);
  cfd = accept(server_fd, (struct sockaddr *)&client, &asize);
  if (cfd == -1) {
#ifdef _WIN32
    int e = WSAGetLastError();
    if (e == WSAEWOULDBLOCK)
      return 0;
    fprintf(stderr, "Accept error: %d.\n", e);
#else
    if (errno == EWOULDBLOCK)
      return 0;
    fprintf(stderr, "Accept error: %d.\n", errno);
#endif
    return -1;
  }
  client_info = gethostbyname((char *)inet_ntoa(client.sin_addr));
  printf("Accepted connection from: %s.\n", client_info->h_name);
  return cfd;
}

bool socket_close(int fd) {
#ifdef _WIN32
  return (closesocket(fd) == 0) ? true : false;
#else
  return (close(fd) == 0) ? true : false;
#endif
}

bool socket_cleanup() {
#ifdef _WIN32
  return (WSACleanup() == 0) ? true : false;
#else
  return true;
#endif
}




/*
  Creates a socket and bind it to port.
 */
int create_socket_server(int port) {
  int sfd, rc;
  struct sockaddr_in address;
  if (!socket_init())
  {
    fprintf (stderr, "socket_init failed");
    return -1;
  }
  sfd = socket(AF_INET, SOCK_STREAM, 0);
  if (sfd == -1) {
    fprintf(stderr, "Cannot create socket.\n");
    return -1;
  }
  int one = 1;
  setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
  memset(&address, 0, sizeof(struct sockaddr_in));
  address.sin_family = AF_INET;
  address.sin_port = htons((unsigned short)port);
  address.sin_addr.s_addr = INADDR_ANY;
  rc = bind(sfd, (struct sockaddr *)&address, sizeof(struct sockaddr));
  if (rc == -1) {
    fprintf(stderr, "Cannot bind port %d.\n", port);
    socket_close(sfd);
    return -1;
  }
  if (listen(sfd, 1) == -1) {
    fprintf(stderr, "Cannot listen for connections.\n");
    socket_close(sfd);
    return -1;
  }
  
  printf ("socket initialized at port %d.\n", port);
  return sfd;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>


#ifdef _WIN32
#include <winsock.h>
#else
#include <arpa/inet.h> /* definition of inet_ntoa */
#include <errno.h>
#include <fcntl.h>
#include <netdb.h>      /* definition of gethostbyname */
#include <netinet/in.h> /* definition of struct sockaddr_in */
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <unistd.h> /* definition of close */
#endif

int create_socket_server(int port);
bool socket_cleanup();
int socket_accept(int server_fd);
bool socket_set_non_blocking(int fd);

int fd;
int sfd;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # Copyright 1996-2019 Cyberbotics Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Generic Makefile.include for Webots controllers, physics plugins, robot
### window libraries, remote control libraries and other libraries
### to be used with GNU make
###
### Platforms: Windows, macOS, Linux
### Languages: C, C++
###
### Authors: Olivier Michel, Yvan Bourquin, Fabien Rohrer
###          Edmund Ronald, Sergei Poskriakov
###
###-----------------------------------------------------------------------------
###
### This file is meant to be included from the Makefile files located in the
### Webots projects subdirectories. It is possible to set a number of variables
### to customize the build process, i.e., add source files, compilation flags,
### include paths, libraries, etc. These variables should be set in your local
### Makefile just before including this Makefile.include. This Makefile.include
### should never be modified.
###
### Here is a description of the variables you may set in your local Makefile:
###
### ---- C Sources ----
### if your program uses several C source files:
### C_SOURCES = my_plugin.c my_clever_algo.c my_graphics.c
###
### ---- C++ Sources ----
### if your program uses several C++ source files:
### CXX_SOURCES = my_plugin.cc my_clever_algo.cpp my_graphics.c++
###
### ---- Compilation options ----
### if special compilation flags are necessary:
### CFLAGS = -Wno-unused-result
###
### ---- Linked libraries ----
### if your program needs additional libraries:
### INCLUDE = -I"/my_library_path/include"
### LIBRARIES = -L"/path/to/my/library" -lmy_library -lmy_other_library
###
### ---- Linking options ----
### if special linking flags are needed:
### LFLAGS = -s
###
### ---- Webots included libraries ----
### if you want to use the Webots C API in your C++ controller program:
### USE_C_API = true
### if you want to link with the Qt framework embedded in Webots:
### QT = core gui widgets network
###
### ---- Debug mode ----
### if you want to display the gcc command line for compilation and link, as
### well as the rm command details used for cleaning:
### VERBOSE = 1
###
###-----------------------------------------------------------------------------

C_SOURCES = ardupilot_SITL_TRICOPTER.c sockets.c sensors.c
INCLUDE = -I"./"
### Do not modify: this includes Webots global Makefile.include
space :=
space +=
WEBOTS_HOME_PATH=$(subst $(space),\ ,$(strip $(subst \,/,$(WEBOTS_HOME))))
include $(WEBOTS_HOME_PATH)/resources/Makefile.include
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * File: ardupilot_SITL_TRICOPTER.c
 * Date: 18 Aug 2019
 * Description: integration with ardupilot SITL simulation.
 * Author: M.S.Hefny (HefnySco)
 * Modifications:
 *  - Blocking sockets
 *  - Advance simulation time only when receive motor data.
 */


/*
  Data is sent in format:
  
  {"timestamp": 1561043647.7598028, 
            "vehicle.imu": {"timestamp": 1561043647.7431362, 
                    "angular_velocity": [-8.910427823138889e-06, 1.6135254554683343e-06, 0.0005768465343862772], 
                    "linear_acceleration": [-0.06396577507257462, 0.22235631942749023, 9.807276725769043], 
                    "magnetic_field": [23662.052734375, 2878.55859375, -53016.55859375]}, 
                    "vehicle.gps": {"timestamp": 1561043647.7431362, "x": -0.0027823783457279205, "y": -0.026340210810303688, "z": 0.159392312169075}, 
                    "vehicle.velocity": {"timestamp": 1561043647.7431362, "linear_velocity": [-6.0340113122947514e-05, -2.264878639834933e-05, 9.702569059300004e-07], 
                    "angular_velocity": [-8.910427823138889e-06, 1.6135254554683343e-06, 0.0005768465343862772], 
                    "world_linear_velocity": [-5.9287678595865145e-05, -2.5280191039200872e-05, 8.493661880493164e-07]}, 
                    "vehicle.pose": {"timestamp": 1561043647.7431362, "x": -0.0027823783457279205, "y": -0.026340210810303688, "z": 0.159392312169075, "yaw": 0.04371734336018562, "pitch": 0.0065115075558424, "roll": 0.022675735875964165}}
*/


/*
 * You may need to add include files like <webots/distance_sensor.h> or
 * <webots/differential_wheels.h>, etc.
 */
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <webots/robot.h>
#include <webots/supervisor.h>
#include <webots/emitter.h>
#include <webots/receiver.h>
#include "ardupilot_SITL_TRICOPTER.h"
#include "sockets.h"
#include "sensors.h"


#define MOTOR_NUM 3

static WbDeviceTag motors[MOTOR_NUM];
static WbDeviceTag servo;
static WbDeviceTag gyro;
static WbDeviceTag accelerometer;
static WbDeviceTag compass;
static WbDeviceTag gps;
static WbDeviceTag camera;
static WbDeviceTag inertialUnit;
static WbDeviceTag receiver;

#ifdef WIND_SIMULATION
static WbDeviceTag emitter;
#endif
static double _linear_velocity[3] = {0.0,0.0,0.0};
static double v[MOTOR_NUM];
static double servo_value = 0;
#ifdef DEBUG_USE_KB
static double servo_value_extra = 0;
#endif

int port;
float dragFactor = VEHICLE_DRAG_FACTOR;

int timestep;


#ifdef DEBUG_USE_KB
/*
// Code used tp simulae motors using keys to make sure that sensors directions and motor torques and thrusts are all correct.
// You can start this controller and use telnet instead of SITL to start the simulator.
Then you can use Keyboard to emulate motor input.
*/
void process_keyboard ()
{
  switch (wb_keyboard_get_key()) 
  {
    case 'Q':  // Q key -> up & left
      v[0] = 0.0;
      v[1] = 0.0;
      v[2] = 0.0;
      servo_value_extra = 0.0;
      break;

    case 'Y':
      v[0] = v[0] + 0.01;
      v[1] = v[1] + 0.01;
      v[2] = v[2] - 0.02;
      break;

    case 'H':
      v[0] = v[0] - 0.01;
      v[1] = v[1] - 0.01;
      v[2] = v[2] + 0.02;
      break;

    case 'G':
      v[0] = v[0] + 0.01;
      v[1] = v[1] - 0.01;
      break;

    case 'J':
      v[0] = v[0] - 0.01;
      v[1] = v[1] + 0.01;
      break;

    case 'W':
      for (int i=0; i<MOTOR_NUM;++i)
      {
        v[i] += 0.01;
      }
      break;

    case 'S':
      for (int i=0; i<MOTOR_NUM;++i)
      {
        v[i] -= 0.01;
      }
      break;
  
    case 'A':
      servo_value_extra = servo_value_extra + 0.01;
      break;

    case 'D':
      servo_value_extra = servo_value_extra - 0.01;
      break;

    
  }

  for (int i=0; i< MOTOR_NUM; ++i)
  {
    if (v[i] <=0) v[i]=0;
    if (v[i] >=600) v[i]=10;

    wb_motor_set_position(motors[i], INFINITY);
    wb_motor_set_velocity(motors[i], v[i]); 
  }

  wb_motor_set_position (servo, servo_value_extra);
  wb_motor_set_velocity (servo, 100);
  
  
  printf ("Motors Internal right:%f left:%f back:%f servo:%f\n", v[0],v[1],v[2],servo_value);
  
}
#endif

// Read all messages and empty the Q and keep last value as the valid one.
static void read_incoming_messages() 
{
   // read while queue not empty
   while (wb_receiver_get_queue_length(receiver) > 0) {
     // I'm only expecting ascii messages
     double * data = (double *) wb_receiver_get_data(receiver);
     _linear_velocity[0] = data[0];
     _linear_velocity[1] = data[1];
     _linear_velocity[2] = data[2];
     //printf("RAW Data [%f, %f, %f]\n", linear_velocity[0], linear_velocity[2], linear_velocity[1]);
    
     wb_receiver_next_packet(receiver);
   }
 }

/*
// apply motor thrust.
*/
void update_controls()
{
  /*
      1 N = 101.9716213 grams force
      Thrust = t1 * |omega| * omega - t2 * |omega| * V
      Where t1 and t2 are the constants specified in the thrustConstants field,
      omega is the motor angular velocity 
      and V is the component of the linear velocity of the center of thrust along the shaft axis.

      if Vehicle mass = 1 Kg. and we want omega = 1.0 to hover
      then (mass / 0.10197) / (4 motors) = t1

    LINEAR_THRUST
      we also want throttle to be linear with thrust so we use sqrt to calculate omega from input.
   */
  static float factor = 1.0f;
  static float offset = 0.0f;
  static float v[MOTOR_NUM];
  
#ifdef LINEAR_THRUST
  v[0] = sqrt(state.motors.w ) * factor + offset;
  v[1] = sqrt(state.motors.x ) * factor + offset;
  v[2] = sqrt(state.motors.z ) * factor + offset;
#else  
  v[0] = (state.motors.w ) * factor + offset;
  v[1] = (state.motors.x ) * factor + offset;
  v[2] = (state.motors.z ) * factor + offset;
#endif

  servo_value = -state.motors.y ;

  for ( int i=0; i<MOTOR_NUM; ++i)
  {
    wb_motor_set_position(motors[i], INFINITY);
    wb_motor_set_velocity(motors[i], v[i]); 
  }

#ifdef DEBUG_USE_KB
  wb_motor_set_position(servo, servo_value + servo_value_extra);
#else
  wb_motor_set_position(servo, servo_value);
#endif
  wb_motor_set_velocity(servo, 1000); 

  #ifdef DEBUG_MOTORS
  printf ("RAW    R:%f L:%f SRV:%f B:%f\n", state.motors.w, state.motors.x, state.motors.y, state.motors.z);
  printf ("Motors R:%f L:%f SRV:%f B:%f\n", v[0], v[1], servo_value, v[2]);
  #endif


#ifdef WIND_SIMULATION
  
  double linear_speed = sqrt(linear_velocity[0] * linear_velocity[0] + linear_velocity[1] * linear_velocity[1] + linear_velocity[2] * linear_velocity[2]);
  wind_webots_axis.w =  state.wind.w + 0.01 * linear_speed * linear_speed;
  
  if (northDirection == 1)
  {
    wind_webots_axis.x =  state.wind.x - linear_velocity[0];
    wind_webots_axis.z = -state.wind.y - linear_velocity[2];   // "-state.wind.y" as angle 90 wind is from EAST.
    wind_webots_axis.y =  state.wind.z - linear_velocity[1];
  }
  else
  { // as in pyramids and any open map street world.
    wind_webots_axis.x =  state.wind.y  - linear_velocity[0]; // always add "linear_velocity" as there is no axis transformation here.
    wind_webots_axis.z =  -state.wind.x - linear_velocity[2];
    wind_webots_axis.y =  state.wind.z  - linear_velocity[1];
  }

  wb_emitter_send(emitter, &wind_webots_axis, sizeof(VECTOR4F));

#endif
}


// data example: [my_controller_SITL] {"engines": [0.000, 0.000, 0.000, 0.000]}
// the JSON parser is directly inspired by https://github.com/ArduPilot/ardupilot/blob/master/libraries/SITL/SIM_Morse.cpp
bool parse_controls(const char *json)
{
    #ifdef DEBUG_INPUT_DATA
    printf("%s\n", json);
    #endif
    
    for (uint16_t i=0; i < ARRAY_SIZE(keytable); i++) {
        struct keytable *key;
        key = &keytable[i];
        // look for section header 
        const char *p = strstr(json, key->section);
        if (!p) {
            // we don't have this sensor
            continue;
        }
        p += strlen(key->section)+1;

        // find key inside section
        p = strstr(p, key->key);
        if (!p) {
            fprintf(stderr,"Failed to find key %s/%s DATA:%s\n", key->section, key->key, json);
            return false;
        }

        p += strlen(key->key)+3;
        
        switch (key->type) 
        {
          case DATA_FLOAT:
  