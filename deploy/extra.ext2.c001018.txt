all_message_hook_context(check_airspeeds)
            self.fly_mission("ap1.txt", strict=False)

            if airspeed[0] is None:
                raise NotAchievedException("Never saw an airspeed1")
            if airspeed[1] is None:
                raise NotAchievedException("Never saw an airspeed2")
            if not self.current_onboard_log_contains_message("ARSP"):
                raise NotAchievedException("Expected ARSP log message")
            self.disarm_vehicle()
            self.context_pop()

    def TurbineStart(self, timeout=200):
        """Check Turbine Start Feature"""
        RAMP_TIME = 4
        # set option for Turbine Start
        self.set_parameter("RC6_OPTION", 161)
        self.set_parameter("H_RSC_RAMP_TIME", RAMP_TIME)
        self.set_parameter("H_RSC_SETPOINT", 66)
        self.set_parameter("DISARM_DELAY", 0)
        self.set_rc(3, 1000)
        self.set_rc(8, 1000)

        # check that turbine start doesn't activate while disarmed
        self.progress("Checking Turbine Start doesn't activate while disarmed")
        self.set_rc(6, 2000)
        tstart = self.get_sim_time()
        while self.get_sim_time() - tstart < 2:
            servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)
            if servo.servo8_raw > 1050:
                raise NotAchievedException("Turbine Start activated while disarmed")
        self.set_rc(6, 1000)

        # check that turbine start doesn't activate armed with interlock enabled
        self.progress("Checking Turbine Start doesn't activate while armed with interlock enabled")
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.set_rc(8, 2000)
        self.set_rc(6, 2000)
        tstart = self.get_sim_time()
        while self.get_sim_time() - tstart < 5:
            servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)
            if servo.servo8_raw > 1660:
                raise NotAchievedException("Turbine Start activated with interlock enabled")

        self.set_rc(8, 1000)
        self.set_rc(6, 1000)
        self.disarm_vehicle()

        # check that turbine start activates as designed (armed with interlock disabled)
        self.progress("Checking Turbine Start activates as designed (armed with interlock disabled)")
        self.delay_sim_time(2)
        self.arm_vehicle()

        self.set_rc(6, 2000)
        tstart = self.get_sim_time()
        while True:
            if self.get_sim_time() - tstart > 5:
                raise AutoTestTimeoutException("Turbine Start did not activate")
            servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)
            if servo.servo8_raw > 1800:
                break

        self.wait_servo_channel_value(8, 1000, timeout=3)
        self.set_rc(6, 1000)

        # check that turbine start will not reactivate after interlock enabled
        self.progress("Checking Turbine Start doesn't activate once interlock is enabled after start)")
        self.set_rc(8, 2000)
        self.set_rc(6, 2000)
        tstart = self.get_sim_time()
        while self.get_sim_time() - tstart < 5:
            servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)
            if servo.servo8_raw > 1660:
                raise NotAchievedException("Turbine Start activated with interlock enabled")
        self.set_rc(6, 1000)
        self.set_rc(8, 1000)
        self.disarm_vehicle()

    def PIDNotches(self):
        """Use dynamic harmonic notch to control motor noise."""
        self.progress("Flying with PID notches")
        self.set_parameters({
            "FILT1_TYPE": 1,
            "FILT2_TYPE": 1,
            "AHRS_EKF_TYPE": 10,
            "INS_LOG_BAT_MASK": 3,
            "INS_LOG_BAT_OPT": 0,
            "INS_GYRO_FILTER": 100, # set the gyro filter high so we can observe behaviour
            "LOG_BITMASK": 65535,
            "LOG_DISARMED": 0,
            "SIM_VIB_FREQ_X": 120,  # roll
            "SIM_VIB_FREQ_Y": 120,  # pitch
            "SIM_VIB_FREQ_Z": 180,  # yaw
            "FILT1_NOTCH_FREQ": 120,
            "FILT2_NOTCH_FREQ": 180,
            "ATC_RAT_RLL_NEF": 1,
            "ATC_RAT_PIT_NEF": 1,
            "ATC_RAT_YAW_NEF": 2,
            "SIM_GYR1_RND": 5,
        })
        self.reboot_sitl()

        self.hover_and_check_matched_frequency_with_fft(5, 20, 350, reverse=True, takeoff=True)

    def AutoTune(self):
        """Test autotune mode"""
        # test roll and pitch FF tuning
        self.set_parameters({
            "ATC_ANG_RLL_P": 4.5,
            "ATC_RAT_RLL_P": 0,
            "ATC_RAT_RLL_I": 0.1,
            "ATC_RAT_RLL_D": 0,
            "ATC_RAT_RLL_FF": 0.15,
            "ATC_ANG_PIT_P": 4.5,
            "ATC_RAT_PIT_P": 0,
            "ATC_RAT_PIT_I": 0.1,
            "ATC_RAT_PIT_D": 0,
            "ATC_RAT_PIT_FF": 0.15,
            "ATC_ANG_YAW_P": 4.5,
            "ATC_RAT_YAW_P": 0.18,
            "ATC_RAT_YAW_I": 0.024,
            "ATC_RAT_YAW_D": 0.003,
            "ATC_RAT_YAW_FF": 0.024,
            "AUTOTUNE_AXES": 3,
            "AUTOTUNE_SEQ": 1,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # test pitch rate P and Rate D tuning
        self.set_parameters({
            "AUTOTUNE_AXES": 2,
            "AUTOTUNE_SEQ": 2,
            "AUTOTUNE_GN_MAX": 1.8,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # test Roll rate P and Rate D tuning
        self.set_parameters({
            "AUTOTUNE_AXES": 1,
            "AUTOTUNE_SEQ": 2,
            "AUTOTUNE_GN_MAX": 1.6,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # test Roll and pitch angle P tuning
        self.set_parameters({
            "AUTOTUNE_AXES": 3,
            "AUTOTUNE_SEQ": 4,
            "AUTOTUNE_FRQ_MIN": 5,
            "AUTOTUNE_FRQ_MAX": 50,
            "AUTOTUNE_GN_MAX": 1.6,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # test yaw FF and rate P and Rate D
        self.set_parameters({
            "AUTOTUNE_AXES": 4,
            "AUTOTUNE_SEQ": 3,
            "AUTOTUNE_FRQ_MIN": 10,
            "AUTOTUNE_FRQ_MAX": 70,
            "AUTOTUNE_GN_MAX": 1.4,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # test yaw angle P tuning
        self.set_parameters({
            "AUTOTUNE_AXES": 4,
            "AUTOTUNE_SEQ": 4,
            "AUTOTUNE_FRQ_MIN": 5,
            "AUTOTUNE_FRQ_MAX": 50,
            "AUTOTUNE_GN_MAX": 1.5,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.autotune_land_and_save_gains()

        # tune check
        self.set_parameters({
            "AUTOTUNE_AXES": 7,
            "AUTOTUNE_SEQ": 16,
            "AUTOTUNE_FRQ_MIN": 10,
            "AUTOTUNE_FRQ_MAX": 80,
            })

        # Conduct testing from althold
        self.takeoff(10, mode="ALT_HOLD")

        # hold position in loiter
        self.change_mode('AUTOTUNE')

        tstart = self.get_sim_time()
        self.wait_statustext('AutoTune: Success', timeout=1000)
        now = self.get_sim_time()
        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
        self.land_and_disarm()

    def autotune_land_and_save_gains(self):
        self.set_rc(3, 1000)
        self.context_collect('STATUSTEXT')
        self.wait_statustext(r"SIM Hit ground at ([0-9.]+) m/s",
                             check_context=True,
                             regex=True)
        self.set_rc(8, 1000)
        self.wait_disarmed()

    def land_and_disarm(self, **kwargs):
        super(AutoTestHelicopter, self).land_and_disarm(**kwargs)
        self.progress("Killing rotor speed")
        self.set_rc(8, 1000)

    def do_RTL(self, **kwargs):
        super(AutoTestHelicopter, self).do_RTL(**kwargs)
        self.progress("Killing rotor speed")
        self.set_rc(8, 1000)

    def tests(self):
        '''return list of all tests'''
        ret = vehicle_test_suite.TestSuite.tests(self)
        ret.extend([
            self.AVCMission,
            self.RotorRunup,
            self.PosHoldTakeOff,
            self.StabilizeTakeOff,
            self.SplineWaypoint,
            self.AutoRotation,
            self.ManAutoRotation,
            self.governortest,
            self.FlyEachFrame,
            self.AirspeedDrivers,
            self.TurbineStart,
            self.NastyMission,
            self.PIDNotches,
            self.AutoTune,
        ])
        return ret

    def disabled_tests(self):
        return {
        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #!/usr/bin/env bash

# Try to run a command in an appropriate type of terminal window
# depending on whats available
# Sigh: theres no common way of handling command line args :-(
name="$1"
shift
echo "RiTW: Starting $name : $*"

if [ -z "$SITL_RITW_MINIMIZE" ]; then
    SITL_RITW_MINIMIZE=1
fi

if [ -n "$SITL_RITW_TERMINAL" ]; then
  # create a small shell script containing the command to run; this
  # avoids problems where "screen" expects arguments in
  # argv[1],argv[2],argv[3] where gnome-terminal expects the command
  # to run be in argv[n+1] where argv[n] is "-e"
  # this should work with:
  # export SITL_RITW_TERMINAL="screen -D -m"
  # export SITL_RITW_TERMINAL="gnome-terminal -e"
  # export SITL_RITW_TERMINAL="konsole -e"

  test -z "$TMPDIR" && TMPDIR="/tmp/"
  FILENAME="ritw-`date '+%Y%m%d%H%M%S'`"
  FILEPATH="$TMPDIR/$FILENAME"
  echo "#!/bin/sh" >"$FILEPATH"
  printf "%q " "$@" >>"$FILEPATH"
  chmod +x "$FILEPATH"
  $SITL_RITW_TERMINAL "$FILEPATH" &
elif [ -n "$TMUX" ]; then
  tmux new-window -dn "$name" "$*"
elif [ -n "$DISPLAY" -a -n "$(which osascript)" ]; then
  osascript -e 'tell application "Terminal" to do script "'"cd $(pwd) && clear && $* "'"'
elif [ -n "$DISPLAY" -a -n "$(which xterm)" ]; then
  if [ $SITL_RITW_MINIMIZE -eq 1 ]; then
      ICONIC=-iconic
  fi
  xterm $ICONIC -xrm 'XTerm*selectToClipboard: true' -xrm 'XTerm*initialFont: 6' -n "$name" -name "$name" -T "$name" -hold -e $* &
elif [ -n "$DISPLAY" -a -n "$(which konsole)" ]; then
  konsole --hold -e $*
elif [ -n "$DISPLAY" -a -n "$(which gnome-terminal)" ]; then
  gnome-terminal -e "$*"
elif [ -n "$STY" ]; then
  # We are running inside of screen, try to start it there
  screen -X screen -t "$name" bash -c "cd $PWD; $*"
elif [ -n "$ZELLIJ" ]; then
  # Create a new pane to run
  zellij run -n "$name" -- "$1" "${@:2}"
else
  filename="/tmp/$name.log"
  echo "RiTW: Window access not found, logging to $filename"
  cmd="$1"
  shift
# the following "true" is to avoid bash optimising the following call
# to avoid creating a subshell.  We need that subshell, or
# _fdm_input_step sees ArduPilot has no parent and kills ArduPilot!
  ( : ; "$cmd" $* &>"$filename" < /dev/null ) &
fi
exit 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #!/usr/bin/python3

'''
Run a mission in SITL

AP_FLAKE8_CLEAN
'''

import vehicle_test_suite
import os
import sys
import argparse

from pysim import util


class RunMission(vehicle_test_suite.TestSuite):
    def __init__(self, vehicle_binary, model, mission_filepath, speedup=None, sim_rate_hz=None):
        super(RunMission, self).__init__(vehicle_binary)
        self.mission_filepath = mission_filepath
        self.model = model
        self.speedup = speedup
        self.sim_rate_hz = sim_rate_hz

        if self.speedup is None:
            self.speedup = 100

    def vehicleinfo_key(self):
        '''magically guess vehicleinfo_key from filepath'''
        path = self.binary.lower()
        if "plane" in path:
            return "ArduPlane"
        if "copter" in path:
            return "ArduCopter"
        raise ValueError("Can't determine vehicleinfo_key from binary path")

    def run(self):
        self.start_SITL(
            binary=self.binary,
            model=self.model,
            sitl_home=self.sitl_home_string_from_mission_filepath(self.mission_filepath),
            speedup=self.speedup,
            sim_rate_hz=self.sim_rate_hz,
            defaults_filepath=self.model_defaults_filepath(self.model),
        )
        self.get_mavlink_connection_going()

        # hack; Plane defaults are annoying... we should do better
        # here somehow.
        if self.vehicleinfo_key() == "ArduPlane":
            self.set_parameter("RTL_AUTOLAND", 1)

        self.load_mission_from_filepath(self.mission_filepath, strict=False)
        self.change_mode('AUTO')
        self.set_streamrate(1)
        self.wait_ready_to_arm()
        self.arm_vehicle()
        self.wait_disarmed(timeout=600)
        self.stop_SITL()


if __name__ == "__main__":
    ''' main program '''
    os.environ['PYTHONUNBUFFERED'] = '1'

    if sys.platform != "darwin":
        os.putenv('TMPDIR', util.reltopdir('tmp'))

    parser = argparse.ArgumentParser("run_mission.py")
    parser.add_argument(
        'vehicle_binary',
        type=str,
        help='vehicle binary to use'
    )
    parser.add_argument(
        'model',
        type=str,
        help='vehicle model to use'
    )
    parser.add_argument(
        'mission_filepath',
        type=str,
        help='mission file path'
    )
    parser.add_argument(
        '--speedup',
        type=int,
        help='simulation speedup',
        default=None,
    )
    parser.add_argument(
        '--sim-rate-hz',
        type=int,
        help='simulation physics rate',
        default=None,
    )

    args = parser.parse_args()

    x = RunMission(
        args.vehicle_binary,
        args.model,
        args.mission_filepath,
        speedup=args.speedup,
        sim_rate_hz=args.sim_rate_hz
    )
    x.run()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       '''
Drive a Sailboat in SITL

AP_FLAKE8_CLEAN

'''

from __future__ import print_function

import os

from rover import AutoTestRover

from vehicle_test_suite import AutoTestTimeoutException
from vehicle_test_suite import PreconditionFailedException

# get location of scripts
testdir = os.path.dirname(os.path.realpath(__file__))


def log_name(self):
    return "Sailboat"


class AutoTestSailboat(AutoTestRover):

    def vehicleinfo_key(self):
        return "Rover"

    def init(self):
        if self.frame is None:
            self.frame = 'sailboat'
        super(AutoTestSailboat, self).init()

    def DriveRTL(self, timeout=120):
        '''Drive an RTL Mission'''
        self.wait_ready_to_arm()
        self.arm_vehicle()

        self.load_mission("rtl.txt")
        self.change_mode("AUTO")

        tstart = self.get_sim_time()
        while True:
            now = self.get_sim_time_cached()
            if now - tstart > timeout:
                raise AutoTestTimeoutException("Didn't see wp 3")
            m = self.mav.recv_match(type='MISSION_CURRENT',
                                    blocking=True,
                                    timeout=1)
            self.progress("MISSION_CURRENT: %s" % str(m))
            if m.seq == 3:
                break

        self.drain_mav()

        m = self.assert_receive_message('NAV_CONTROLLER_OUTPUT', timeout=1)

        wp_dist_min = 5
        if m.wp_dist < wp_dist_min:
            raise PreconditionFailedException(
                "Did not start at least %f metres from destination (is=%f)" %
                (wp_dist_min, m.wp_dist))

        self.progress("NAV_CONTROLLER_OUTPUT.wp_dist looks good (%u >= %u)" %
                      (m.wp_dist, wp_dist_min,))

        # wait for mission to complete
        self.wait_statustext("Mission Complete", timeout=70)

        # sailboat loiters around RTL point indefinitely:
        self.wait_groundspeed(0.5, 3, timeout=20, minimum_duration=10)

        self.disarm_vehicle()

        self.progress("RTL Mission OK")

    def DriveMission(self):
        '''sail a simple mission'''
        self.drive_mission("balancebot1.txt", strict=False)

    def tests(self):
        '''return list of all tests'''
        ret = ([])

        ret.extend([
            self.DriveRTL,
            self.DriveMission,
        ])
        return ret

    def default_mode(self):
        return 'MANUAL'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #!/usr/bin/env python3

"""
Framework to start a simulated vehicle and connect it to MAVProxy.

Peter Barker, April 2016
based on sim_vehicle.sh by Andrew Tridgell, October 2011

AP_FLAKE8_CLEAN

"""
from __future__ import print_function

import atexit
import datetime
import errno
import optparse
import os
import os.path
import re
import signal
import subprocess
import sys
import tempfile
import textwrap
import time
import shlex
import binascii
import math

from pysim import util
from pysim import vehicleinfo


# List of open terminal windows for macosx
windowID = []

autotest_dir = os.path.dirname(os.path.realpath(__file__))
root_dir = os.path.realpath(os.path.join(autotest_dir, '../..'))

try:
    from pymavlink import mavextra
except ImportError:
    sys.path.append(os.path.join(root_dir, "modules/mavlink"))
    from pymavlink import mavextra

os.environ["SIM_VEHICLE_SESSION"] = binascii.hexlify(os.urandom(8)).decode()


class CompatError(Exception):
    """A custom exception class to hold state if we encounter the parse
    error we are looking for"""
    def __init__(self, error, opts, rargs):
        Exception.__init__(self, error)
        self.opts = opts
        self.rargs = rargs


class CompatOptionParser(optparse.OptionParser):
    """An option parser which emulates the behaviour of the old
    sim_vehicle.sh; if passed -C, the first argument not understood starts
    a list of arguments that are passed straight to mavproxy
    """

    class CustomFormatter(optparse.IndentedHelpFormatter):
        def __init__(self, *args, **kwargs):
            optparse.IndentedHelpFormatter.__init__(self, *args, **kwargs)

        # taken and modified from from optparse.py's format_option
        def format_option_preserve_nl(self, option):
            # The help for each option consists of two parts:
            #   * the opt strings and metavars
            #     eg. ("-x", or "-fFILENAME, --file=FILENAME")
            #   * the user-supplied help string
            #     eg. ("turn on expert mode", "read data from FILENAME")
            #
            # If possible, we write both of these on the same line:
            #   -x      turn on expert mode
            #
            # But if the opt string list is too long, we put the help
            # string on a second line, indented to the same column it would
            # start in if it fit on the first line.
            #   -fFILENAME, --file=FILENAME
            #           read data from FILENAME
            result = []
            opts = self.option_strings[option]
            opt_width = self.help_position - self.current_indent - 2
            if len(opts) > opt_width:
                opts = "%*s%s\n" % (self.current_indent, "", opts)
            else:                       # start help on same line as opts
                opts = "%*s%-*s  " % (self.current_indent, "", opt_width, opts)
            result.append(opts)
            if option.help:
                help_text = self.expand_default(option)
                tw = textwrap.TextWrapper(replace_whitespace=False,
                                          initial_indent="",
                                          subsequent_indent="    ",
                                          width=self.help_width)

                for line in help_text.split("\n"):
                    help_lines = tw.wrap(line)
                    for wline in help_lines:
                        result.extend(["%*s%s\n" % (self.help_position,
                                                    "",
                                                    wline)])
            elif opts[-1] != "\n":
                result.append("\n")
            return "".join(result)

        def format_option(self, option):
            if str(option).find('frame') != -1:
                return self.format_option_preserve_nl(option)
            return optparse.IndentedHelpFormatter.format_option(self, option)

    def __init__(self, *args, **kwargs):
        formatter = CompatOptionParser.CustomFormatter()
        optparse.OptionParser.__init__(self,
                                       *args,
                                       formatter=formatter,
                                       **kwargs)

    def error(self, error):
        """Override default error handler called by
        optparse.OptionParser.parse_args when a parse error occurs;
        raise a detailed exception which can be caught
        """
        if error.find("no such option") != -1:
            raise CompatError(error, self.values, self.rargs)

        optparse.OptionParser.error(self, error)

    def parse_args(self, args=None, values=None):
        '''Wrap parse_args so we can catch the exception raised upon
        discovering the known parameter parsing error
        '''

        try:
            opts, args = optparse.OptionParser.parse_args(self)
        except CompatError as e:
            if not e.opts.sim_vehicle_sh_compatible:
                print(e)
                print("Perhaps you want --sim_vehicle_sh_compatible (-C)?")
                sys.exit(1)
            if e.opts.mavproxy_args:
                print("--mavproxy-args not permitted in compat mode")
                sys.exit(1)

            args = []
            opts = e.opts
            mavproxy_args = [str(e)[16:]]  # this trims "no such option" off
            mavproxy_args.extend(e.rargs)
            opts.ensure_value("mavproxy_args", " ".join(mavproxy_args))

        return opts, args


def cygwin_pidof(proc_name):
    """ Thanks to kata198 for this:
    https://github.com/kata198/cygwin-ps-misc/blob/master/pidof
    """
    pipe = subprocess.Popen("ps -ea | grep " + proc_name,
                            shell=True,
                            stdout=subprocess.PIPE)
    output_lines = pipe.stdout.read().decode('utf-8').replace("\r", "").split("\n")
    ret = pipe.wait()
    pids = []
    if ret != 0:
        # No results
        return []
    for line in output_lines:
        if not line:
            continue
        line_split = [item for item in line.split(' ') if item]
        cmd = line_split[-1].split('/')[-1]
        if cmd == proc_name:
            try:
                pid = int(line_split[0].strip())
            except Exception:
                pid = int(line_split[1].strip())
            if pid not in pids:
                pids.append(pid)
    return pids


def under_cygwin():
    """Return if Cygwin binary exist"""
    return os.path.exists("/usr/bin/cygstart")


def under_macos():
    return sys.platform == 'darwin'


def under_vagrant():
    return os.path.isfile("/ardupilot.vagrant")


def under_wsl2():
    import platform
    return 'microsoft-standard-WSL2' in platform.release()


def wsl2_host_ip():
    if not under_wsl2():
        return None

    pipe = subprocess.Popen("ip route show default | awk '{print $3}'",
                            shell=True,
                            stdout=subprocess.PIPE)
    output_lines = pipe.stdout.read().decode('utf-8').strip(' \r\n')
    ret = pipe.wait()

    if ret != 0:
        # Command exited with an error. The output it generated probably isn't what we're expecting
        return None

    if not output_lines:
        # No output detected, maybe there's no nameserver or WSL2 has some abnormal firewalls/network settings?
        return None

    return str(output_lines)


def kill_tasks_cygwin(victims):
    """Shell out to ps -ea to find processes to kill"""
    for victim in list(victims):
        pids = cygwin_pidof(victim)
#        progress("pids for (%s): %s" %
#                 (victim,",".join([ str(p) for p in pids])))
        for apid in pids:
            os.kill(apid, signal.SIGKILL)


def kill_tasks_macos():
    for window in windowID:
        cmd = ("osascript -e \'tell application \"Terminal\" to close "
               "(window(get index of window id %s))\'" % window)
        os.system(cmd)


def kill_tasks_psutil(victims):
    """Use the psutil module to kill tasks by name.  Sadly, this module is
    not available on Windows, but when it is we should be able to *just*
    use this routine"""
    import psutil
    for proc in psutil.process_iter():
        pdict = proc.as_dict(attrs=['environ', 'status'])
        if pdict['status'] == psutil.STATUS_ZOMBIE:
            continue
        if pdict['environ'] is not None:
            if pdict['environ'].get('SIM_VEHICLE_SESSION') == os.environ['SIM_VEHICLE_SESSION']:
                proc.kill()


def kill_tasks_pkill(victims):
    """Shell out to pkill(1) to kill processed by name"""
    for victim in victims:  # pkill takes a single pattern, so iterate
        cmd = ["pkill", victim[:15]]  # pkill matches only first 15 characters
        run_cmd_blocking("pkill", cmd, quiet=True)


class BobException(Exception):
    """Handle Bob's Exceptions"""
    pass


def kill_tasks():
    """Clean up stray processes by name.  This is a shotgun approach"""
    progress("Killing tasks")

    if cmd_opts.coverage:
        import psutil
        for proc in psutil.process_iter(['pid', 'name', 'environ']):
            if proc.name() not in ["arducopter", "ardurover", "arduplane", "ardusub", "antennatracker"]:
                # only kill vehicle that way
                continue
            if os.environ['SIM_VEHICLE_SESSION'] not in proc.environ().get('SIM_VEHICLE_SESSION'):
                # only kill vehicle launched with sim_vehicle.py that way
                continue
            proc.terminate()
            progress("Waiting SITL to exit cleanly and write coverage .gcda")
            try:
                proc.wait(timeout=30)
                progress("Done")
            except psutil.TimeoutExpired:
                progress("SITL doesn't want to exit cleaning, killing ...")
                proc.kill()

    try:
        victim_names = {
            'JSBSim',
            'lt-JSBSim',
            'ArduPlane.elf',
            'ArduCopter.elf',
            'ArduSub.elf',
            'Rover.elf',
            'AntennaTracker.elf',
            'JSBSIm.exe',
            'MAVProxy.exe',
            'runsim.py',
            'AntennaTracker.elf',
            'scrimmage',
            'ardurover',
            'arduplane',
            'arducopter'
        }
        for vehicle in vinfo.options:
            for frame in vinfo.options[vehicle]["frames"]:
                frame_info = vinfo.options[vehicle]["frames"][frame]
                if "waf_target" not in frame_info:
                    continue
                exe_name = os.path.basename(frame_info["waf_target"])
                victim_names.add(exe_name)

        if under_cygwin():
            return kill_tasks_cygwin(victim_names)
        if under_macos() and os.environ.get('DISPLAY'):
            # use special macos kill routine if Display is on
            return kill_tasks_macos()

        try:
            kill_tasks_psutil(victim_names)
        except ImportError:
            kill_tasks_pkill(victim_names)
    except Exception as e:
        progress("kill_tasks failed: {}".format(str(e)))


def progress(text):
    """Display sim_vehicle progress text"""
    print("SIM_VEHICLE: " + text)


def wait_unlimited():
    """Wait until signal received"""
    while True:
        time.sleep(600)


vinfo = vehicleinfo.VehicleInfo()


def do_build(opts, frame_options):
    """Build sitl using waf"""
    progress("WAF build")

    old_dir = os.getcwd()
    os.chdir(root_dir)

    waf_light = os.path.join(root_dir, "modules/waf/waf-light")

    configure_target = frame_options.get('configure_target', 'sitl')

    cmd_configure = [waf_light, "configure", "--board", configure_target]
    if opts.debug:
        cmd_configure.append("--debug")

    if opts.coverage:
        cmd_configure.append("--coverage")

    if opts.enable_onvif and 'antennatracker' in frame_options["waf_target"]:
        cmd_configure.append("--enable-onvif")

    if opts.OSD:
        cmd_configure.append("--enable-sfml")
        cmd_configure.append("--sitl-osd")

    if opts.OSDMSP:
        cmd_configure.append("--osd")

    if opts.rgbled:
        cmd_configure.append("--enable-sfml")
        cmd_configure.append("--sitl-rgbled")

    if opts.tonealarm:
        cmd_configure.append("--enable-sfml-audio")

    if opts.math_check_indexes:
        cmd_configure.append("--enable-math-check-indexes")

    if opts.enable_ekf2:
        cmd_configure.append("--enable-ekf2")

    if opts.disable_ekf3:
        cmd_configure.append("--disable-ekf3")

    if opts.postype_single:
        cmd_configure.append("--postype-single")

    if opts.ekf_double:
        cmd_configure.append("--ekf-double")

    if opts.ekf_single:
        cmd_configure.append("--ekf-single")

    if opts.force_32bit:
        cmd_configure.append("--force-32bit")

    if opts.ubsan:
        cmd_configure.append("--ubsan")

    if opts.ubsan_abort:
        cmd_configure.append("--ubsan-abort")

    if opts.num_aux_imus:
        cmd_configure.append("--num-aux-imus=%s" % opts.num_aux_imus)

    for nv in opts.define:
        cmd_configure.append("--define=%s" % nv)

    if opts.enable_dds:
        cmd_configure.append("--enable-dds")

    if opts.disable_networking:
        cmd_configure.append("--disable-networking")

    if opts.enable_ppp:
        cmd_configure.append("--enable-ppp")

    if opts.enable_networking_tests:
        cmd_configure.append("--enable-networking-tests")

    pieces = [shlex.split(x) for x in opts.waf_configure_args]
    for piece in pieces:
        cmd_configure.extend(piece)

    if not cmd_opts.no_configure:
        run_cmd_blocking("Configure waf", cmd_configure, check=True)

    if opts.clean:
        run_cmd_blocking("Building clean", [waf_light, "clean"])

    print(frame_options)
    cmd_build = [waf_light, "build", "--target", frame_options["waf_target"]]
    if opts.jobs is not None:
        cmd_build += ['-j', str(opts.jobs)]
    pieces = [shlex.split(x) for x in opts.waf_build_args]
    for piece in pieces:
        cmd_build.extend(piece)

    _, sts = run_cmd_blocking("Building", cmd_build)

    if sts != 0:  # build failed
        if opts.rebuild_on_failure:
            progress("Build failed; cleaning and rebuilding")
            run_cmd_blocking("Building clean", [waf_light, "clean"])

            _, sts = run_cmd_blocking("Building", cmd_build)
            if sts != 0:
                progress("Build failed")
                sys.exit(1)
        else:
            progress("Build failed")
            sys.exit(1)

    os.chdir(old_dir)


def do_build_parameters(vehicle):
    # build succeeded
    # now build parameters
    progress("Building fresh parameter descriptions")
    param_parse_path = os.path.join(
        autotest_dir, "param_metadata/param_parse.py")
    cmd_param_build = ["python", param_parse_path, '--vehicle', vehicle]

    _, sts = run_cmd_blocking("Building fresh params", cmd_param_build)
    if sts != 0:
        progress("Parameter build failed")
        sys.exit(1)


def get_user_locations_path():
    '''The user locations.txt file is located by default in
    $XDG_CONFIG_DIR/ardupilot/locations.txt. If $XDG_CONFIG_DIR is
    not defined, we look in $HOME/.config/ardupilot/locations.txt.  If
    $HOME is not defined, we look in ./.config/ardupilot/locations.txt.'''

    config_dir = os.environ.get(
        'XDG_CONFIG_DIR',
        os.path.join(os.environ.get('HOME', '.'), '.config'))

    user_locations_path = os.path.join(
        config_dir, 'ardupilot', 'locations.txt')

    return user_locations_path


def find_offsets(instances, file_path):
    offsets = {}
    swarminit_filepath = os.path.join(autotest_dir, "swarminit.txt")
    comment_regex = re.compile(r"\s*#.*")
    for path in [file_path, swarminit_filepath]:
        if os.path.isfile(path):
            with open(path, 'r') as fd:
                for line in fd:
                    line = re.sub(comment_regex, "", line)
                    line = line.rstrip("\n")
                    if len(line) == 0:
                        continue
                    (instance, offset) = line.split("=")
                    instance = (int)(instance)
                    if (instance not in offsets) and (instance in instances):
                        offsets[instance] = [(float)(x) for x in offset.split(",")]
                        continue
                    if len(offsets) == len(instances):
                        return offsets
        if len(offsets) == len(instances):
            return offsets
    for instance in instances:
        if instance not in offsets:
            offsets[instance] = [90.0, 20.0 * instance, 0.0, None]
    return offsets


def find_geocoder_location(locname):
    '''find a location using geocoder and SRTM'''
    try:
        import geocoder
    except ImportError:
        print("geocoder not installed")
        return None
    j = geocoder.osm(locname)
    if j is None or not hasattr(j, 'lat') or j.lat is None:
        print("geocoder failed to find '%s'" % locname)
        return None
    lat = j.lat
    lon = j.lng
    from MAVProxy.modules.mavproxy_map import srtm
    downloader = srtm.SRTMDownloader()
    downloader.loadFileList()
    start = time.time()
    alt = None
    while time.time() - start < 5:
        tile = downloader.getTile(int(math.floor(lat)), int(math.floor(lon)))
        if tile:
            alt = tile.getAltitudeFromLatLon(lat, lon)
            break
    if alt is None:
        print("timed out getting altitude for '%s'" % locname)
        return None
    return [lat, lon, alt, 0.0]


def find_location_by_name(locname):
    """Search locations.txt for locname, return GPS coords"""
    locations_userpath = os.environ.get('ARDUPILOT_LOCATIONS',
                                        get_user_locations_path())
    locations_filepath = os.path.join(autotest_dir, "locations.txt")
    comment_regex = re.compile(r"\s*#.*")
    for path in [locations_userpath, locations_filepath]:
        if not os.path.isfile(path):
            continue
        with open(path, 'r') as fd:
            for line in fd:
                line = re.sub(comment_regex, "", line)
                line = line.rstrip("\n")
                if len(line) == 0:
                    continue
                (name, loc) = line.split("=")
                if name == locname:
                    return [(float)(x) for x in loc.split(",")]

    # fallback to geocoder if available
    loc = find_geocoder_location(locname)
    if loc is None:
        sys.exit(1)
    return loc


def find_spawns(loc, offsets):
    lat, lon, alt, heading = loc
    spawns = {}
    for k in offsets:
        (x, y, z, head) = offsets[k]
        if head is None:
            head = heading
        g = mavextra.gps_offset(lat, lon, x, y)
        spawns[k] = ",".join([str(g[0]), str(g[1]), str(alt+z), str(head)])
    return spawns


def progress_cmd(what, cmd):
    """Print cmd in a way a user could cut-and-paste to get the same effect"""
    progress(what)
    shell_text = "%s" % (" ".join(['"%s"' % x for x in cmd]))
    progress(shell_text)


def run_cmd_blocking(what, cmd, quiet=False, check=False, **kw):
    if not quiet:
        progress_cmd(what, cmd)

    try:
        p = subprocess.Popen(cmd, **kw)
        ret = os.waitpid(p.pid, 0)
    except Exception as e:
        print("[%s] An exception has occurred with command: '%s'" % (what, (' ').join(cmd)))
        print(e)
        sys.exit(1)

    _, sts = ret
    if check and sts != 0:
        progress("(%s) exited with code %d" % (what, sts,))
        sys.exit(1)
    return ret


def run_in_terminal_window(name, cmd, **kw):

    """Execute the run_in_terminal_window.sh command for cmd"""
    global windowID
    runme = [os.path.join(autotest_dir, "run_in_terminal_window.sh"), name]
    runme.extend(cmd)
    progress_cmd("Run " + name, runme)

    if under_macos() and os.environ.get('DISPLAY'):
        # on MacOS record the window IDs so we can close them later
        out = subprocess.Popen(runme, stdout=subprocess.PIPE, **kw).communicate()[0]
        out = out.decode('utf-8')
        p = re.compile('tab 1 of window id (.*)')

        tstart = time.time()
        while time.time() - tstart < 5:
            tabs = p.findall(out)

            if len(tabs) > 0:
                break

            time.sleep(0.1)
        # sleep for extra 2 seconds for application to start
        time.sleep(2)
        if len(tabs) > 0:
            windowID.append(tabs[0])
        else:
            progress("Cannot find %s process terminal" % name)
    else:
        subprocess.Popen(runme, **kw)


tracker_serial0 = None  # blemish


def start_antenna_tracker(opts):
    """Compile and run the AntennaTracker, add tracker to mavproxy"""

    global tracker_serial0
    progress("Preparing antenna tracker")
    tracker_home = find_location_by_name(opts.tracker_location)
    vehicledir = os.path.join(autotest_dir, "../../" + "AntennaTracker")
    options = vinfo.options["AntennaTracker"]
    tracker_default_frame = options["default_frame"]
    tracker_frame_options = options["frames"][tracker_default_frame]
    do_build(opts, tracker_frame_options)
    tracker_instance = 1
    oldpwd = os.getcwd()
    os.chdir(vehicledir)
    tracker_serial0 = "tcp:127.0.0.1:" + str(5760 + 10 * tracker_instance)
    binary_basedir = "build/sitl"
    exe = os.path.join(root_dir,
                       binary_basedir,
                       "bin/antennatracker")
    run_in_terminal_window("AntennaTracker",
                           ["nice",
                            exe,
                            "-I" + str(tracker_instance),
                            "--model=tracker",
                            "--home=" + ",".join([str(x) for x in tracker_home])])
    os.chdir(oldpwd)


def start_CAN_Periph(opts, frame_info):
    """Compile and run the sitl_periph"""

    progress("Preparing sitl_periph_universal")
    options = vinfo.options["sitl_periph_universal"]['frames']['universal']
    defaults_path = frame_info.get('periph_params_filename', None)
    if defaults_path is None:
        defaults_path = options.get('default_params_filename', None)

    if not isinstance(defaults_path, list):
        defaults_path = [defaults_path]

    # add in path and make a comma separated list
    defaults_path = ','.join([util.relcurdir(os.path.join(autotest_dir, p)) for p in defaults_path])

    if not cmd_opts.no_rebuild:
        do_build(opts, options)
    exe = os.path.join(root_dir, 'build/sitl_periph_universal', 'bin/AP_Periph')
    cmd = ["nice"]
    cmd_name = "sitl_periph_universal"
    if opts.valgrind:
        cmd_name += " (valgrind)"
        cmd.append("valgrind")
        # adding this option allows valgrind to cope with the overload
        # of operator new
        cmd.append("--soname-synonyms=somalloc=nouserintercepts")
        cmd.append("--track-origins=yes")
    if opts.gdb or opts.gdb_stopped:
        cmd_name += " (gdb)"
        cmd.append("gdb")
        gdb_commands_file = tempfile.NamedTemporaryFile(mode='w', delete=False)
        atexit.register(os.unlink, gdb_commands_file.name)
        gdb_commands_file.write("set pagination off\n")
        if not opts.gdb_stopped:
            gdb_commands_file.write("r\n")
        gdb_commands_file.close()
        cmd.extend(["-x", gdb_commands_file.name])
        cmd.append("--args")
    cmd.append(exe)
    if defaults_path is not None:
        cmd.append("--defaults")
        cmd.append(defaults_path)
    run_in_terminal_window(cmd_name, cmd)


def start_vehicle(binary, opts, stuff, spawns=None):
    """Run the ArduPilot binary"""

    cmd_name = opts.vehicle
    cmd = []
    if opts.valgrind:
        cmd_name += " (valgrind)"
        cmd.append("valgrind")
        # adding this option allows valgrind to cope with the overload
        # of operator new
        cmd.append("--soname-synonyms=somalloc=nouserintercepts")
        cmd.append("--track-origins=yes")
    if opts.callgrind:
        cmd_name += " (callgrind)"
        cmd.append("valgrind")
        cmd.append("--tool=callgrind")
    if opts.gdb or opts.gdb_stopped:
        cmd_name += " (gdb)"
        cmd.append("gdb")
        gdb_commands_file = tempfile.NamedTemporaryFile(mode='w', delete=False)
        atexit.register(os.unlink, gdb_commands_file.name)

        for breakpoint in opts.breakpoint:
            gdb_commands_file.write("b %s\n" % (breakpoint,))
        if opts.disable_breakpoints:
            gdb_commands_file.write("disable\n")
        gdb_commands_file.write("set pagination off\n")
        if not opts.gdb_stopped:
            gdb_commands_file.write("r\n")
        gdb_commands_file.close()
        cmd.extend(["-x", gdb_commands_file.name])
        cmd.append("--args")
    elif opts.lldb or opts.lldb_stopped:
        cmd_name += " (lldb)"
        cmd.append("lldb")
        lldb_commands_file = tempfile.NamedTemporaryFile(mode='w', delete=False)
        atexit.register(os.unlink, lldb_commands_file.name)

        for breakpoint in opts.breakpoint:
            lldb_commands_file.write("b %s\n" % (breakpoint,))
        if not opts.lldb_stopped:
            lldb_commands_file.write("process launch\n")
        lldb_commands_file.close()
        cmd.extend(["-s", lldb_commands_file.name])
        cmd.append("--")
    if opts.strace:
        cmd_name += " (strace)"
        cmd.append("strace")
        strace_options = ['-o', binary + '.strace', '-s', '8000', '-ttt']
        cmd.extend(strace_options)

    cmd.append(binary)
    cmd.append("-S")
    if opts.wipe_eeprom:
        cmd.append("-w")
    cmd.extend(["--model", stuff["model"]])
    cmd.extend(["--speedup", str(opts.speedup)])
    if opts.sysid is not None:
        cmd.extend(["--sysid", str(opts.sysid)])
    if opts.slave is not None:
        cmd.extend(["--slave", str(opts.slave)])
    if opts.sitl_instance_args:
        # this could be a lot better:
        cmd.extend(opts.sitl_instance_args.split(" "))
    if opts.mavlink_gimbal:
        cmd.append("--gimbal")
    path = None
    if "default_params_filename" in stuff:
        paths = stuff["default_params_filename"]
        if not isinstance(paths, list):
            paths = [paths]
        paths = [util.relcurdir(os.path.join(autotest_dir, x)) for x in paths]
        for x in paths:
            if not os.path.isfile(x):
                print("The parameter file (%s) does not exist" % (x,))
                sys.exit(1)
        path = ",".join(paths)
        if cmd_opts.count > 1 or opts.auto_sysid:
            # we are in a subdirectory when using -n
            path = os.path.join("..", path)
        progress("Using defaults from (%s)" % (path,))
    if opts.flash_storage:
        cmd.append("--set-storage-flash-enabled 1")
        cmd.append("--set-storage-posix-enabled 0")
    elif opts.fram_storage:
        cmd.append("--set-storage-fram-enabled 1")
        cmd.append("--set-storage-posix-enabled 0")
    if opts.add_param_file:
        for file in opts.add_param_file:
            if not os.path.isfile(file):
                print("The parameter file (%s) does not exist" %
                      (file,))
                sys.exit(1)

            if path is not None:
                path += "," + str(file)
            else:
                path = str(file)

            progress("Adding parameters from (%s)" % (str(file),))
    if opts.OSDMSP:
        path += "," + os.path.join(root_dir, "libraries/AP_MSP/Tools/osdtest.parm")
        path += "," + os.path.join(autotest_dir, "default_params/msposd.parm")
        subprocess.Popen([os.path.join(root_dir, "libraries/AP_MSP/Tools/msposd.py")])

    if path is not None and len(path) > 0:
        cmd.extend(["--defaults", path])

    if cmd_opts.start_time is not None:
        # Parse start_time into a double precision number specifying seconds since 1900.
        try:
            start_time_UTC = time.mktime(datetime.datetime.strptime(cmd_opts.start_time, '%Y-%m-%d-%H:%M').timetuple())
        except Exception:
            print("Incorrect start time format - require YYYY-MM-DD-HH:MM (given %s)" % cmd_opts.start_time)
            sys.exit(1)

        cmd.append("--start-time=%d" % start_time_UTC)

    cmd.append("--sim-address=%s" % cmd_opts.sim_address)

    old_dir = os.getcwd()
    for i, i_dir in zip(instances, instance_dir):
        c = ["-I" + str(i)]
        if spawns is not None:
            c.extend(["--home", spawns[i]])
        if opts.mcast:
            c.extend(["--serial0", "mcast:"])
        elif opts.udp:
            c.extend(["--serial0", "udpclient:127.0.0.1:" + str(5760+i*10)])
        if opts.auto_sysid:
            if opts.sysid is not None:
                raise ValueError("Can't use auto-sysid and sysid together")
            sysid = i + 1
            # Take 0-based logging into account
            if sysid < 1 or sysid > 255:
                raise ValueError("Invalid system id %d" % sysid)
            c.extend(["--sysid", str(sysid)])

        os.chdir(i_dir)
        run_in_terminal_window(cmd_name, cmd + c)
    os.chdir(old_dir)


def start_mavproxy(opts, stuff):
    """Run mavproxy"""
    # FIXME: would be nice to e.g. "mavproxy.mavproxy(....).run"
    # rather than shelling out

    extra_cmd = ""
    cmd = []
    if under_cygwin():
        cmd.append("/usr/bin/cygstart")
        cmd.append("-w")
        cmd.append("mavproxy.exe")
    else:
        cmd.append("mavproxy.py")

    if opts.mcast:
        cmd.extend(["--master", "mcast:"])

    # returns a valid IP of the host windows computer if we're WSL2.
    # This is run before the loop so it only runs once
    wsl2_host_ip_str = wsl2_host_ip()

    for i in instances:
        if not opts.no_extra_ports:
            ports = [14550 + 10 * i]
            for port in ports:
                if under_vagrant():
                    # We're running inside of a vagrant guest; forward our
                    # mavlink out to the containing host OS
                    cmd.extend(["--out", "10.0.2.2:" + str(port)])
                elif wsl2_host_ip_str:
                    # We're running WSL2; forward our
                    # mavlink out to the containing host Windows OS
                    cmd.extend(["--out", str(wsl2_host_ip_str) + ":" + str(port)])
                else:
                    cmd.extend(["--out", "127.0.0.1:" + str(port)])

        if not opts.mcast:
            if opts.udp:
                cmd.extend(["--master", ":" + str(5760 + 10 * i)])
            else:
                cmd.extend(["--master", "tcp:127.0.0.1:" + str(5760 + 10 * i)])
        if stuff["sitl-port"] and not opts.no_rcin:
            cmd.extend(["--sitl", "127.0.0.1:" + str(5501 + 10 * i)])

    if opts.tracker:
        cmd.extend(["--load-module", "tracker"])
        global tracker_serial0
        # tracker_serial0 is set when we start the tracker...
        extra_cmd += ("module load map;"
                      "tracker set port %s; "
                      "tracker start; "
                      "tracker arm;" % (tracker_serial0,))

    if opts.mavlink_gimbal:
        cmd.extend(["--load-module", "gimbal"])

    if "extra_mavlink_cmds" in stuff:
        extra_cmd += " " + stuff["extra_mavlink_cmds"]

    # Parsing the arguments to pass to mavproxy, split args on space
    # and "=" signs and ignore those signs within quotation marks
    if opts.mavproxy_args:
        # It would be great if this could be done with regex
        mavargs = opts.mavproxy_args.split(" ")
        # Find the arguments with '=' in them and split them up
        for i, x in enumerate(mavargs):
            if '=' in x:
                mavargs[i] = x.split('=')[0]
                mavargs.insert(i+1, x.split('=')[1])
        # Use this flag to tell if parsing character inbetween a pair
        # of quotation marks
        inString = False
        beginStringIndex = []
        endStringIndex = []
        # Iterate through the arguments, looking for the arguments
        # that begin with a quotation mark and the ones that end with
        # a quotation mark
        for i, x in enumerate(mavargs):
            if not inString and x[0] == "\"":
                beginStringIndex.append(i)
                mavargs[i] = x[1:]
                inString = True
            elif inString and x[-1] == "\"":
                endStringIndex.append(i)
                inString = False
                mavargs[i] = x[:-1]
        # Replace the list items with one string to be passed into mavproxy
        for begin, end in zip(beginStringIndex, endStringIndex):
            replacement = " ".join(mavargs[begin:end+1])
            mavargs[begin] = replacement
            mavargs = mavargs[0:begin+1] + mavargs[end+1:]
        cmd.extend(mavargs)

    # compatibility pass-through parameters (for tm-address",
                     type=str,
                     default="127.0.0.1",
                     help="IP address of the simulator. Defaults to localhost")
group_sim.add_option("--enable-dds", action='store_true',
                     help="Enable the dds client to connect with ROS2/DDS")
group_sim.add_option("--disable-networking", action='store_true',
                     help="Disable networking APIs")
group_sim.add_option("--enable-ppp", action='store_true',
                     help="Enable PPP networking")
group_sim.add_option("--enable-networking-tests", action='store_true',
                     help="Enable networking tests")

parser.add_option_group(group_sim)


# special-cased parameters for mavproxy, because some people's fingers
# have long memories, and they don't want to use -C :-)
group = optparse.OptionGroup(parser,
                             "Compatibility MAVProxy options "
                             "(consider using --mavproxy-args instead)")
group.add_option("", "--out",
                 default=[],
                 type='string',
                 action="append",
                 help="create an additional mavlink output")
group.add_option("", "--map",
                 default=False,
                 action='store_true',
                 help="load map module on startup")
group.add_option("", "--console",
                 default=False,
                 action='store_true',
                 help="load console module on startup")
group.add_option("", "--aircraft",
                 default=None,
                 help="store state and logs in named directory")
group.add_option("", "--moddebug",
                 default=0,
                 type=int,
                 help="mavproxy module debug")
group.add_option("", "--no-rcin",
                 action='store_true',
                 help="disable mavproxy rcin")
parser.add_option_group(group)

group_completion = optparse.OptionGroup(parser, "Completion helpers")
group_completion.add_option("", "--list-vehicle",
                            action='store_true',
                            help="List the vehicles")
group_completion.add_option("", "--list-frame",
                            type='string',
                            default=None,
                            help="List the vehicle frames")
parser.add_option_group(group_completion)

cmd_opts, cmd_args = parser.parse_args()

if cmd_opts.list_vehicle:
    print(' '.join(vinfo.options.keys()))
    sys.exit(1)
if cmd_opts.list_frame:
    frame_options = sorted(vinfo.options[cmd_opts.list_frame]["frames"].keys())
    frame_options_string = ' '.join(frame_options)
    print(frame_options_string)
    sys.exit(1)

# clean up processes at exit:
atexit.register(kill_tasks)

progress("Start")

if cmd_opts.sim_vehicle_sh_compatible and cmd_opts.jobs is None:
    cmd_opts.jobs = 1

# validate parameters
if cmd_opts.valgrind and (cmd_opts.gdb or cmd_opts.gdb_stopped or cmd_opts.lldb or cmd_opts.lldb_stopped):
    print("May not use valgrind with gdb or lldb")
    sys.exit(1)

if cmd_opts.valgrind and cmd_opts.callgrind:
    print("May not use valgrind with callgrind")
    sys.exit(1)

if cmd_opts.strace and (cmd_opts.gdb or cmd_opts.gdb_stopped or cmd_opts.lldb or cmd_opts.lldb_stopped):
    print("May not use strace with gdb or lldb")
    sys.exit(1)

if (cmd_opts.gdb or cmd_opts.gdb_stopped) and (cmd_opts.lldb or cmd_opts.lldb_stopped):
    print("May not use lldb with gdb")
    sys.exit(1)

if cmd_opts.instance < 0:
    print("May not specify a negative instance ID")
    sys.exit(1)

if cmd_opts.count < 1:
    print("May not specify a count less than 1")
    sys.exit(1)

if cmd_opts.strace and cmd_opts.valgrind:
    print("valgrind and strace almost certainly not a good idea")

if cmd_opts.strace and cmd_opts.callgrind:
    print("callgrind and strace almost certainly not a good idea")

if cmd_opts.sysid and cmd_opts.auto_sysid:
    print("Cannot use auto-sysid together with sysid")
    sys.exit(1)

# magically determine vehicle type (if required):
if cmd_opts.vehicle is None:
    cwd = os.getcwd()
    cmd_opts.vehicle = os.path.basename(cwd)

if cmd_opts.vehicle not in vinfo.options:
    # try in parent directories, useful for having config in subdirectories
    cwd = os.getcwd()
    while cwd:
        bname = os.path.basename(cwd)
        if not bname:
            break
        if bname in vinfo.options:
            cmd_opts.vehicle = bname
            break
        cwd = os.path.dirname(cwd)

if cmd_opts.vehicle in vehicle_map:
    cmd_opts.vehicle = vehicle_map[cmd_opts.vehicle]
elif cmd_opts.vehicle.lower() in vehicle_map:
    cmd_opts.vehicle = vehicle_map[cmd_opts.vehicle.lower()]

# try to validate vehicle
if cmd_opts.vehicle not in vinfo.options:
    progress('''
** Is (%s) really your vehicle type?
Perhaps you could try -v %s
You could also try changing directory to e.g. the ArduCopter subdirectory
''' % (cmd_opts.vehicle, vehicle_options_string))
    sys.exit(1)

# determine frame options (e.g. build type might be "sitl")
if cmd_opts.frame is None:
    cmd_opts.frame = vinfo.options[cmd_opts.vehicle]["default_frame"]

frame_infos = vinfo.options_for_frame(cmd_opts.frame,
                                      cmd_opts.vehicle,
                                      cmd_opts)

vehicle_dir = os.path.realpath(os.path.join(root_dir, cmd_opts.vehicle))
if not os.path.exists(vehicle_dir):
    print("vehicle directory (%s) does not exist" % (vehicle_dir,))
    sys.exit(1)

if cmd_opts.instances is not None:
    instances = set()
    for i in cmd_opts.instances.split(' '):
        i = (int)(i)
        if i < 0:
            print("May not specify a negative instance ID")
            sys.exit(1)
        instances.add(i)
    instances = sorted(instances) # to list
else:
    instances = range(cmd_opts.instance, cmd_opts.instance + cmd_opts.count)

if cmd_opts.instance == 0:
    kill_tasks()

if cmd_opts.tracker:
    start_antenna_tracker(cmd_opts)

if cmd_opts.can_peripherals or frame_infos.get('periph_params_filename', None) is not None:
    start_CAN_Periph(cmd_opts, frame_infos)

if cmd_opts.custom_location:
    location = [(float)(x) for x in cmd_opts.custom_location.split(",")]
    progress("Starting up at %s" % (location,))
elif cmd_opts.location is not None:
    location = find_location_by_name(cmd_opts.location)
    progress("Starting up at %s (%s)" % (location, cmd_opts.location))
else:
    progress("Starting up at SITL location")
    location = None
if cmd_opts.swarm is not None:
    offsets = find_offsets(instances, cmd_opts.swarm)
elif cmd_opts.auto_offset_line is not None:
    if location is None:
        raise ValueError("location needed for auto-offset-line")
    (bearing, metres) = cmd_opts.auto_offset_line.split(",")
    bearing = float(bearing)
    metres = float(metres)
    dist = 0
    offsets = {}
    for x in instances:
        offsets[x] = [dist*math.sin(math.radians(bearing)), dist*math.cos(math.radians(bearing)), 0, 0]
        dist += metres
else:
    offsets = {x: [0.0, 0.0, 0.0, None] for x in instances}
if location is not None:
    spawns = find_spawns(location, offsets)
else:
    spawns = None

if cmd_opts.use_dir is not None:
    base_dir = os.path.realpath(cmd_opts.use_dir)
    try:
        os.makedirs(base_dir)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise
    os.chdir(base_dir)
else:
    base_dir = os.getcwd()
instance_dir = []
if len(instances) == 1:
    instance_dir.append(base_dir)
else:
    for i in instances:
        i_dir = os.path.join(base_dir, str(i))
        try:
            os.makedirs(i_dir)
        except OSError as exception:
            if exception.errno != errno.EEXIST:
                raise
        finally:
            instance_dir.append(i_dir)

if True:
    if not cmd_opts.no_rebuild:  # i.e. we should rebuild
        do_build(cmd_opts, frame_infos)

    if cmd_opts.fresh_params:
        do_build_parameters(cmd_opts.vehicle)

    if cmd_opts.vehicle_binary is not None:
        vehicle_binary = cmd_opts.vehicle_binary
    else:
        binary_basedir = "build/sitl"
        vehicle_binary = os.path.join(root_dir,
                                      binary_basedir,
                                      frame_infos["waf_target"])

    if not os.path.exists(vehicle_binary):
        print("Vehicle binary (%s) does not exist" % (vehicle_binary,))
        sys.exit(1)

    start_vehicle(vehicle_binary,
                  cmd_opts,
                  frame_infos,
                  spawns=spawns)


if cmd_opts.delay_start:
    progress("Sleeping for %f seconds" % (cmd_opts.delay_start,))
    time.sleep(float(cmd_opts.delay_start))

tmp = None
if cmd_opts.frame in ['scrimmage-plane', 'scrimmage-copter']:
    # import only here so as to avoid jinja dependency in whole script
    from jinja2 import Environment, FileSystemLoader
    from tempfile import mkstemp
    entities = []
    config = {}
    config['plane'] = cmd_opts.vehicle == 'ArduPlane'
    if location is not None:
        config['lat'] = location[0]
        config['lon'] = location[1]
        config['alt'] = location[2]
    entities = {}
    for i in instances:
        (x, y, z, heading) = offsets[i]
        entities[i] = {
            'x': x, 'y': y, 'z': z, 'heading': heading,
            'to_ardupilot_port': 9003 + i * 10,
            'from_ardupilot_port': 9002 + i * 10,
            'to_ardupilot_ip': '127.0.0.1'
        }
    if cmd_opts.scrimmage_args is not None:
        scrimmage_args = cmd_opts.scrimmage_args.split(',')
        global_opts = ['terrain']
        instance_opts = ['motion_model', 'visual_model']
        for arg in scrimmage_args:
            arg = arg.split('=', 2)
            if len(arg) == 2:
                k, v = arg
                if k in global_opts:
                    config[k] = v
                elif k in instance_opts:
                    for i in entities:
                        # explicit instance args take precedence; don't overwrite
                        if k not in entities[i]:
                            entities[i][k] = v
            elif len(arg) == 3:
                i, k, v = arg
                try:
                    i = int(i)
                except ValueError:
                    continue
                if i in entities and k in instance_opts:
                    entities[i][k] = v
    config['entities'] = list(entities.values())
    env = Environment(loader=FileSystemLoader(os.path.join(autotest_dir, 'template')))
    mission = env.get_template('scrimmage.xml.j2').render(**config)
    tmp = mkstemp()
    atexit.register(os.remove, tmp[1])

    with os.fdopen(tmp[0], 'w') as fd:
        fd.write(mission)
    run_in_terminal_window('SCRIMMAGE', ['scrimmage', tmp[1]])


if cmd_opts.delay_start:
    progress("Sleeping for %f seconds" % (cmd_opts.delay_start,))
    time.sleep(float(cmd_opts.delay_start))

try:
    if cmd_opts.no_mavproxy:
        time.sleep(3)  # output our message after run_in_terminal_window.sh's
        progress("Waiting for SITL to exit")
        wait_unlimited()
    else:
        start_mavproxy(cmd_opts, frame_infos)
except KeyboardInterrupt:
    progress("Keyboard Interrupt received ...")

sys.exit(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #instance=East,North,Up(Offset in meters),Absolute Heading
1=20,20,0,90
2=40,0,0,45
3=-20,-20,0,225
4=-80,0,20,0
5=0,-100,-10,0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="http://gtri.gatech.edu"?>
<runscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="Straight flying">

  <!--  <run start="0.0" end="100" dt="0.00833333" -->
  <run start="0.0" end="10000000" dt="0.001"
       {% if plane %}
       motion_multiplier="1"
       {% endif %}
       time_warp="1"
       enable_gui="true"
       network_gui="false"
       start_paused="false"/>

  <stream_port>50051</stream_port>
  <stream_ip>localhost</stream_ip>

  <end_condition>all_dead</end_condition> <!-- time, one_team, none-->

  <grid_spacing>10</grid_spacing>
  <grid_size>1000</grid_size>

  <terrain>{% if terrain %}{{ terrain }}{% else %}mcmillan{% endif %}</terrain>
  <background_color>191 191 191</background_color> <!-- Red Green Blue -->
  <gui_update_period>10</gui_update_period> <!-- milliseconds -->

  <plot_tracks>false</plot_tracks>
  <output_type>all</output_type>
  <show_plugins>false</show_plugins>

  <metrics>SimpleCollisionMetrics</metrics>

  <log_dir>~/.scrimmage/logs</log_dir>

  {% if plane %}
  <latitude_origin>{% if lat %}{{ lat }}{% else %}32.42553{% endif %}</latitude_origin>
  <longitude_origin>{% if lon %}{{ lon }}{% else %}-84.79109{% endif %}</longitude_origin>
  <altitude_origin>{% if alt %}{{ alt }}{% else %}75{% endif %}</altitude_origin>
  {% else %}
  <latitude_origin>{% if lat %}{{ lat }}{% else %}34.458281{% endif %}</latitude_origin>
  <longitude_origin>{% if lon %}{{ lon }}{% else %}-84.180209{% endif %}</longitude_origin>
  <altitude_origin>{% if alt %}{{ alt }}{% else %}450{% endif %}</altitude_origin>
  {% endif %}

  <show_origin>true</show_origin>
  <origin_length>10</origin_length>

  <network>LocalNetwork</network>
  <network>GlobalNetwork</network>

  <entity_interaction>SimpleCollision</entity_interaction>
  <entity_interaction enable_startup_collisions="false"
                      remove_on_collision="false">GroundCollision</entity_interaction>

  <!-- uncomment "seed" and use integer for deterministic results -->
  <!--<seed>2147483648</seed>-->

  <!-- ========================== TEAM 1 ========================= -->
  {% for e in entities %}
  <entity>
    <team_id>1</team_id>
    <color>77 77 255</color>
    <count>1</count>
    <health>1</health>
    <radius>1</radius>

    <x>{% if e.x %}{{ e.x }}{% else %}0{% endif %}</x>
    <y>{% if e.y %}{{ e.y }}{% else %}0{% endif %}</y>
    <z>{% if e.z %}{{ e.z }}{% else %}0{% endif %}</z>
    {% if plane %}<pitch>-20</pitch>{% endif %}
    <heading>{% if e.heading %}{{ e.heading }}{% else %}0{% endif %}</heading>


    <sensor>RigidBody6DOFStateSensor</sensor>
    <controller>DirectController</controller>

    <!-- Use this settings in SITL -->
    <autonomy to_ardupilot_port="{% if e.to_ardupilot_port %}{{ e.to_ardupilot_port }}{% else %}9003{% endif %}"
              from_ardupilot_port="{% if e.from_ardupilot_port %}{{ e.from_ardupilot_port }}{% else %}9002{% endif %}"
              to_ardupilot_ip="{% if e.to_ardupilot_ip %}{{ e.to_ardupilot_ip }}{% else %}127.0.0.1{% endif %}"
    {% if plane %}
        >ArduPilot</autonomy>
    <!-- Use this settings in HIL through mavproxy -->
    <!-- <autonomy to_ardupilot_port="5501" from_ardupilot_port="5502" mavproxy_mode="true">ArduPilot</autonomy> -->
    <!-- <motion_model drawVel="0" drawAngVel="0" drawAcc="0" use_launcher="1" launch_time="60" launch_accel="200">${motion_model=JSBSimControl}</motion_model> -->
    <motion_model drawVel="0" drawAngVel="0" drawAcc="0">{% if e.motion_model %}{{ e.motion_model }}{% else %}JSBSimControl{% endif %}</motion_model>
    <script_name>rascal_no_autopilot.xml</script_name>
    <visual_model>{% if e.visual_model %}{{ e.visual_model }}{% else %}zephyr-blue{% endif %}</visual_model>
    {% else %}
    servo_map="[ motor_0 0 1000 +2000    346.41 1200.0 +1 ]
               [ motor_1 1 1000 +2000    346.41 1200.0 +1 ]
               [ motor_2 2 1000 +2000    346.41 1200.0 +1 ]
               [ motor_3 3 1000 +2000    346.41 1200.0 +1 ]"
        >ArduPilot</autonomy>
    <motion_model write_csv="true">{% if e.motion_model %}{{ e.motion_model }}{% else %}Multirotor{% endif %}</motion_model>
    <visual_model>{% if e.visual_model %}{{ e.visual_model }}{% else %}iris{% endif %}</visual_model>
    {% endif %}
  </entity>
  {% endfor %}
</runscript>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #!/usr/bin/env python3

"""
Contains functions used to test the ArduPilot build_options.py structures

To extract feature sizes:

cat >> /tmp/extra-hwdef.dat <<EOF
undef AP_BARO_MS56XX_ENABLED
define AP_BARO_MS56XX_ENABLED 1
EOF

nice time ./Tools/autotest/test_build_options.py --board=CubeOrange --extra-hwdef=/tmp/extra-hwdef.dat --no-run-with-defaults --no-disable-all --no-enable-in-turn | tee /tmp/tbo-out  # noqa
grep 'sabling.*saves' /tmp/tbo-out

 - note that a lot of the time explicitly disabling features will make the binary larger as the ROMFS includes the generated hwdef.h which will have the extra define in it  # noqa

AP_FLAKE8_CLEAN
"""

from __future__ import print_function

import fnmatch
import optparse
import os
import pathlib
import sys

from pysim import util

sys.path.insert(1, os.path.join(os.path.dirname(__file__), '..', 'scripts'))
import extract_features  # noqa


class TestBuildOptionsResult(object):
    '''object to return results from a comparison'''

    def __init__(self, feature, vehicle, bytes_delta):
        self.feature = feature
        self.vehicle = vehicle
        self.bytes_delta = bytes_delta


class TestBuildOptions(object):
    def __init__(self,
                 match_glob=None,
                 do_step_disable_all=True,
                 do_step_disable_none=False,
                 do_step_disable_defaults=True,
                 do_step_disable_in_turn=True,
                 do_step_enable_in_turn=True,
                 build_targets=None,
                 board="CubeOrange",  # DevEBoxH7v2 also works
                 extra_hwdef=None,
                 emit_disable_all_defines=None,
                 ):
        self.extra_hwdef = extra_hwdef
        self.sizes_nothing_disabled = None
        self.match_glob = match_glob
        self.do_step_disable_all = do_step_disable_all
        self.do_step_disable_none = do_step_disable_none
        self.do_step_run_with_defaults = do_step_disable_defaults
        self.do_step_disable_in_turn = do_step_disable_in_turn
        self.do_step_enable_in_turn = do_step_enable_in_turn
        self.build_targets = build_targets
        if self.build_targets is None:
            self.build_targets = self.all_targets()
        self._board = board
        self.emit_disable_all_defines = emit_disable_all_defines
        self.results = {}

        self.enable_in_turn_results = {}
        self.sizes_everything_disabled = None

    def must_have_defines_for_board(self, board):
        '''return a set of defines which must always be enabled'''
        must_have_defines = {
            "CubeOrange": frozenset([
                'AP_BARO_MS56XX_ENABLED',
                'AP_COMPASS_LSM303D_ENABLED',
                'AP_COMPASS_AK8963_ENABLED',
                'AP_COMPASS_AK09916_ENABLED',
                'AP_COMPASS_ICM20948_ENABLED',
            ]),
            "CubeBlack": frozenset([
                'AP_BARO_MS56XX_ENABLED',
                'AP_COMPASS_LSM303D_ENABLED',
                'AP_COMPASS_AK8963_ENABLED',
                'AP_COMPASS_AK09916_ENABLED',
                'AP_COMPASS_ICM20948_ENABLED',
            ]),
            "Pixhawk6X-GenericVehicle": frozenset([
                "AP_BARO_BMP388_ENABLED",
                "AP_BARO_ICP201XX_ENABLED",
            ]),
        }
        return must_have_defines.get(board, frozenset([]))

    def must_have_defines(self):
        return self.must_have_defines_for_board(self._board)

    @staticmethod
    def all_targets():
        return ['copter', 'plane', 'rover', 'antennatracker', 'sub', 'blimp']

    def progress(self, message):
        print("###### %s" % message, file=sys.stderr)

    # swiped from app.py:
    def get_build_options_from_ardupilot_tree(self):
        '''return a list of build options'''
        import importlib.util
        spec = importlib.util.spec_from_file_location(
            "build_options.py",
            os.path.join(os.path.dirname(os.path.realpath(__file__)),
                         '..', 'scripts', 'build_options.py'))
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)
        return mod.BUILD_OPTIONS

    def write_defines_to_file(self, defines, filepath):
        self.write_defines_to_Path(defines, pathlib.Path(filepath))

    def write_defines_to_Path(self, defines, Path):
        lines = []
        lines.extend(["undef %s\n" % (a, ) for (a, b) in defines.items()])
        lines.extend(["define %s %s\n" % (a, b) for (a, b) in defines.items()])
        content = "".join(lines)
        Path.write_text(content)

    def get_disable_defines(self, feature, options):
        '''returns a hash of (name, value) defines to turn feature off -
        recursively gets dependencies'''
        ret = {
            feature.define: 0,
        }
        added_one = True
        while added_one:
            added_one = False
            for option in options:
                if option.define in ret:
                    continue
                if option.dependency is None:
                    continue
                for dep in option.dependency.split(','):
                    f = self.get_option_by_label(dep, options)
                    if f.define not in ret:
                        continue

                    # print("%s requires %s" % (option.define, f.define), file=sys.stderr)
                    added_one = True
                    ret[option.define] = 0
                    break
        return ret

    def update_get_enable_defines_for_feature(self, ret, feature, options):
        '''recursive function to turn on required feature and what it depends
        on'''
        ret[feature.define] = 1
        if feature.dependency is None:
            return
        for depname in feature.dependency.split(','):
            dep = None
            for f in options:
                if f.label == depname:
                    dep = f
            if dep is None:
                raise ValueError("Invalid dep (%s) for feature (%s)" %
                                 (depname, feature.label))
            self.update_get_enable_defines_for_feature(ret, dep, options)

    def get_enable_defines(self, feature, options):
        '''returns a hash of (name, value) defines to turn all features *but* feature (and whatever it depends on) on'''
        ret = self.get_disable_all_defines()
        self.update_get_enable_defines_for_feature(ret, feature, options)
        for define in self.must_have_defines_for_board(self._board):
            ret[define] = 1
        return ret

    def test_disable_feature(self, feature, options):
        defines = self.get_disable_defines(feature, options)

        if len(defines.keys()) > 1:
            self.progress("Disabling %s disables (%s)" % (
                feature.define,
                ",".join(defines.keys())))

        self.test_compile_with_defines(defines)

        # if the feature is truly disabled then extract_features.py
        # should say so:
        for target in self.build_targets:
            path = self.target_to_elf_path(target)
            extracter = extract_features.ExtractFeatures(path)
            (compiled_in_feature_defines, not_compiled_in_feature_defines) = extracter.extract()
            for define in defines:
                # the following defines are known not to work on some
                # or all vehicles:
                feature_define_whitelist = set([
                    'AP_RANGEFINDER_ENABLED',  # only at vehicle level ATM
                    'BEACON_ENABLED',  # Rover doesn't obey this (should also be AP_BEACON_ENABLED)
                    'WINCH_ENABLED',  # Copter doesn't use this; should use AP_WINCH_ENABLED
                ])
                if define in compiled_in_feature_defines:
                    error = f"feature gated by {define} still compiled into ({target}); extract_features.py bug?"
                    if define in feature_define_whitelist:
                        print("warn: " + error)
                    else:
                        raise ValueError(error)

    def test_enable_feature(self, feature, options):
        defines = self.get_enable_defines(feature, options)

        enabled = list(filter(lambda x : bool(defines[x]), defines.keys()))

        if len(enabled) > 1:
            self.progress("Enabling %s enables (%s)" % (
                feature.define,
                ",".join(enabled)))

        self.test_compile_with_defines(defines)

    def board(self):
        '''returns board to build for'''
        return self._board

    def test_compile_with_defines(self, defines):
        extra_hwdef_filepath = "/tmp/extra.hwdef"
        self.write_defines_to_file(defines, extra_hwdef_filepath)
        if self.extra_hwdef is not None:
            content = open(self.extra_hwdef, "r").read()
            with open(extra_hwdef_filepath, "a") as f:
                f.write(content)
        util.waf_configure(
            self.board(),
            extra_hwdef=extra_hwdef_filepath,
        )
        for t in self.build_targets:
            try:
                util.run_cmd([util.relwaf(), t])
            except Exception:
                print("Failed to build (%s) with things disabled" %
                      (t,))
                raise

    def target_to_path(self, target, extension=None):
        '''given a build target (e.g. copter), return expected path to .bin
        file for that target'''
        target_to_binpath = {
            "copter": "arducopter",
            "plane": "arduplane",
            "rover": "ardurover",
            "antennatracker": "antennatracker",
            "sub": "ardusub",
            "blimp": "blimp",
        }
        filename = target_to_binpath[target]
        if extension is not None:
            filename += "." + extension
        return os.path.join("build", self.board(), "bin", filename)

    def target_to_bin_path(self, target):
        '''given a build target (e.g. copter), return expected path to .bin
        file for that target'''
        return self.target_to_path(target, 'bin')

    def target_to_elf_path(self, target):
        '''given a build target (e.g. copter), return expected path to .elf
        file for that target'''
        return self.target_to_path(target)

    def find_build_sizes(self):
        '''returns a hash with size of all build targets'''
        ret = {}
        for target in self.build_targets:
            path = self.target_to_bin_path(target)
            ret[target] = os.path.getsize(path)
        return ret

    def csv_for_results(self, results):
        '''return a string with csv for results'''
        features = sorted(results.keys())
        all_vehicles = set()
        for feature in features:
            all_vehicles.update(list(results[feature].keys()))
        sorted_all_vehicles = sorted(list(all_vehicles))
        ret = ""
        ret += ",".join(["Feature"] + sorted_all_vehicles) + "\n"
        for feature in features:
            line = [feature]
            feature_results = results[feature]
            for vehicle in sorted_all_vehicles:
                bytes_delta = ""
                if vehicle in feature_results:
                    result = feature_results[vehicle]
                    bytes_delta = result.bytes_delta
                line.append(str(bytes_delta))
            ret += ",".join(line) + "\n"
        return ret

    def disable_in_turn_check_sizes(self, feature, sizes_nothing_disabled):
        if not self.do_step_disable_none:
            self.progress("disable-none skipped, size comparison not available")
            return
        current_sizes = self.find_build_sizes()
        for (build, new_size) in current_sizes.items():
            old_size = sizes_nothing_disabled[build]
            self.progress("Disabling %s(%s) on %s saves %u bytes" %
                          (feature.label, feature.define, build, old_size - new_size))
            if feature.define not in self.results:
                self.results[feature.define] = {}
            self.results[feature.define][build] = TestBuildOptionsResult(feature.define, build, old_size - new_size)
            with open("/tmp/some.csv", "w") as f:
                f.write(self.csv_for_results(self.results))

    def run_disable_in_turn(self):
        options = self.get_build_options_from_ardupilot_tree()
        count = 1
        for feature in sorted(options, key=lambda x : x.define):
            if self.match_glob is not None:
                if not fnmatch.fnmatch(feature.define, self.match_glob):
                    continue
            with open("/tmp/run-disable-in-turn-progress", "w") as f:
                f.write(f"{count}/{len(options)} {feature.define}\n")
                #            if feature.define < "WINCH_ENABLED":
                #                count += 1
                #                continue
            if feature.define in self.must_have_defines_for_board(self._board):
                self.progress("Feature %s(%s) (%u/%u) is a MUST-HAVE" %
                              (feature.label, feature.define, count, len(options)))
                count += 1
                continue
            self.progress("Disabling feature %s(%s) (%u/%u)" %
                          (feature.label, feature.define, count, len(options)))
            self.test_disable_feature(feature, options)
            count += 1
            self.disable_in_turn_check_sizes(feature, self.sizes_nothing_disabled)

    def enable_in_turn_check_sizes(self, feature, sizes_everything_disabled):
        if not self.do_step_disable_all:
            self.progress("disable-none skipped, size comparison not available")
            return
        current_sizes = self.find_build_sizes()
        for (build, new_size) in current_sizes.items():
            old_size = sizes_everything_disabled[build]
            self.progress("Enabling %s(%s) on %s costs %u bytes" %
                          (feature.label, feature.define, build, old_size - new_size))
            if feature.define not in self.enable_in_turn_results:
                self.enable_in_turn_results[feature.define] = {}
            self.enable_in_turn_results[feature.define][build] = TestBuildOptionsResult(feature.define, build, old_size - new_size)  # noqa
            with open("/tmp/enable-in-turn.csv", "w") as f:
                f.write(self.csv_for_results(self.enable_in_turn_results))

    def run_enable_in_turn(self):
        options = self.get_build_options_from_ardupilot_tree()
        count = 1
        for feature in options:
            if self.match_glob is not None:
                if not fnmatch.fnmatch(feature.define, self.match_glob):
                    continue
            self.progress("Enabling feature %s(%s) (%u/%u)" %
                          (feature.label, feature.define, count, len(options)))
            with open("/tmp/run-enable-in-turn-progress", "w") as f:
                f.write(f"{count}/{len(options)} {feature.define}\n")
            self.test_enable_feature(feature, options)
            count += 1
            self.enable_in_turn_check_sizes(feature, self.sizes_everything_disabled)

    def get_option_by_label(self, label, options):
        for x in options:
            if x.label == label:
                return x
        raise ValueError("No such option (%s)" % label)

    def get_disable_all_defines(self):
        '''returns a hash of defines which turns all features off'''
        options = self.get_build_options_from_ardupilot_tree()
        defines = {}
        for feature in options:
            if self.match_glob is not None:
                if not fnmatch.fnmatch(feature.define, self.match_glob):
                    continue
            defines[feature.define] = 0
        for define in self.must_have_defines_for_board(self._board):
            defines[define] = 1

        return defines

    def run_disable_all(self):
        defines = self.get_disable_all_defines()
        self.test_compile_with_defines(defines)
        self.sizes_everything_disabled = self.find_build_sizes()

    def run_disable_none(self):
        self.test_compile_with_defines({})
        self.sizes_nothing_disabled = self.find_build_sizes()

    def run_with_defaults(self):
        options = self.get_build_options_from_ardupilot_tree()
        defines = {}
        for feature in options:
            defines[feature.define] = featu:020000040800F2
:1000000000070020F1010008092E0008C12D00089A
:10001000E92D0008C12D0008E12D0008F3010008BA
:10002000F3010008F3010008F3010008E93D0008AE
:10003000F3010008F3010008F3010008F3010008D0
:10004000F3010008F3010008F3010008F3010008C0
:10005000F3010008F3010008F14200081943000809
:10006000414300086943000891430008F301000878
:10007000F3010008F3010008F3010008F301000890
:10008000F3010008F3010008F3010008F301000880
:10009000F3010008712D0008852D0008B943000800
:1000A000F3010008F3010008F3010008F301000860
:1000B000A1440008F3010008F3010008F30100085F
:1000C000F3010008F3010008F3010008F301000840
:1000D000F3010008F30100088D440008F301000853
:1000E0001D440008F3010008F3010008F3010008B3
:1000F000F3010008F3010008F3010008F301000810
:10010000F3010008F3010008F3010008F3010008FF
:10011000F3010008F3010008F3010008F3010008EF
:10012000F3010008F3010008F3010008F3010008DF
:10013000F3010008F3010008F3010008F3010008CF
:10014000F3010008F3010008F3010008F3010008BF
:10015000F3010008F3010008F3010008F3010008AF
:10016000F3010008F3010008F3010008F30100089F
:10017000F3010008F3010008F3010008F30100088F
:10018000F3010008F3010008F3010008F30100087F
:10019000F3010008F3010008992D0008AD2D0008B7
:1001A000F3010008F3010008F3010008F30100085F
:1001B000F3010008F3010008F3010008F30100084F
:1001C000F3010008F3010008F3010008F30100083F
:1001D000F3010008F3010008F3010008F30100082F
:1001E0002D150008000000000000000000000000C5
:1001F00002E000F000F8FEE772B6374880F30888A6
:10020000364880F3098836483649086040F20000D5
:10021000CCF200004EF63471CEF200010860BFF35C
:100220004F8FBFF36F8F40F20000C0F2F0004EF628
:100230008851CEF200010860BFF34F8FBFF36F8F7C
:100240004FF00000E1EE100A4EF63C71CEF20001D4
:100250000860062080F31488BFF36F8F04F0A2FFBC
:1002600005F082F84FF055301F491B4A91423CBFC0
:1002700041F8040BFAE71D49184A91423CBF41F886
:10028000040BFAE71A491B4A1B4B9A423EBF51F82E
:10029000040B42F8040BF8E700201849184A914271
:1002A0003CBF41F8040BFAE704F080FF05F0A2F828
:1002B000144C154DAC4203DA54F8041B8847F9E797
:1002C00000F042F8114C124DAC4203DA54F8041B12
:1002D0008847F9E704F068BF0007002000230020EA
:1002E0000000000808ED00E00001002000070020E9
:1002F000E856000800230020B4230020B823002083
:10030000B4690020E0010008E4010008E4010008ED
:10031000E40100082DE9F04F2DED108AC1F80CD052
:10032000C3689D46BDEC108ABDE8F08F002383F3BF
:1003300011882846A047002004F0BAFBFEE704F02D
:1003400043FB00DFFEE70000F8B501F061F904F0BF
:10035000CBFE074604F01CFF0546A8BB1F4B9F427F
:1003600032D001339F4232D01D4B27F0FF029A4218
:1003700030D1F8B200F022FF2E4642F2107400F0A5
:1003800023FF08B10024264601F070FC20B10320B1
:1003900000F07AF80024264635B1124B9F4203D074
:1003A00004F0EEFE00242646002004F0A7FE0EB165
:1003B00000F080F801F040FA00F038FF204600F02D
:1003C000D1F800F077F8F9E72E460024D7E7044685
:1003D0000126D4E7064640F6C414D0E7010007B072
:1003E000000008B0263A09B008B501F0DDF8A0F128
:1003F00020035842584108BD07B541F212030221BB
:1004000001A8ADF8043001F0EDF803B05DF804FB8D
:1004100038B5302383F31188174803680BB104F013
:1004200005FC164A144800234FF47A7104F0F4FBDB
:10043000002383F31188124C236813B12368013B16
:100440002360636813B16368013B63600D4D2B78D3
:1004500033B963687BB9022001F07CF93223636011
:100460002B78032B07D163682BB9022001F072F9B6
:100470004FF47A73636038BDB8230020110400087C
:10048000D8240020D0230020084B187003280CD853
:10049000DFE800F008050208022001F051B902204F
:1004A00001F044B9024B00225A607047D02300206B
:1004B000D824002010B501F0D9FB30B1234B032222
:1004C0001A70234B00225A6010BD224B224A1C4650
:1004D00019680131F8D004339342F9D16268A2421D
:1004E000F2D31E4B9B6803F1006303F510439A425D
:1004F000EAD204F017FE04F029FE002001F0A2F871
:100500000220FFF7C1FF164B9A6D00229A65996F82
:100510009A67996FD96DDA65D96FDA67D96F196EF5
:100520001A66D3F88010C3F88020D3F8803072B6F2
:100530004FF0E0233021C3F8084DD4E9003281F3B5
:1005400011889D4683F308881047BDE7D02300201B
:10055000D8240020009000082090000800230020EC
:10056000001002402DE9F04F93B0AC4B00902022D8
:10057000FF210AA89D6801F009F9A94A1378A3B9D7
:10058000A848012103601170302383F311880368A8
:100590000BB104F04BFBA44AA24800234FF47A713C
:1005A00004F03AFB002383F31188009B13B19F4BA7
:1005B000009A1A609E4A009C1378032B1EBF0023EA
:1005C00013709A4A4FF0000A18BF5360D34656463C
:1005D000D146012001F0B4F824B1944B1B68002BE4
:1005E00000F01582002000F0DFFF0390039B002B3A
:1005F00001DA00F06FFE039B002BEDDB012001F020
:1006000095F8039B213B162BE3D801A252F823F067
:100610006D0600089506000829070008D3050008A4
:10062000D3050008D3050008B307000883090008B4
:100630009D080008FF080008270900084D09000868
:10064000D30500085F090008D3050008D109000898
:100650000D070008D3050008150A000879060008F0
:100660000D070008D3050008FF0800080220FFF767
:10067000BBFE002840F0F581009B0221BAF1000F7B
:1006800008BF1C4605A841F21233ADF8143000F043
:10069000A9FF9EE74FF47A7000F086FF071EEBDBA0
:1006A0000220FFF7A1FE0028E6D0013F052F00F24F
:1006B000DA81DFE807F0030A0D10133605230593EE
:1006C000042105A800F08EFF17E054480421F9E743
:1006D00058480421F6E758480421F3E74FF01C0876
:1006E000404600F0B1FF08F104080590042105A878
:1006F00000F078FFB8F12C0FF2D1012000FA07F7D3
:1007000047EA0B0B5FFA8BFB4FF0000901F08AF808
:1007100026B10BF00B030B2B08BF0024FFF76CFE78
:1007200057E746480421CDE7002EA5D00BF00B0378
:100730000B2BA1D10220FFF757FE074600289BD0C4
:10074000012000F07FFF0220FFF79EFE00261FFA27
:1007500086F8404600F086FF044690B100214046EE
:1007600000F098FF01360028F1D1BA46044641F264
:100770001213022105A8ADF814303E4600F032FFF6
:1007800027E70120FFF780FE2546244B9B68AB42FC
:1007900007D9284600F058FF013040F06781043542
:1007A000F3E7234B00251D70204BBA465D603E46A3
:1007B000ACE7002E3FF460AF0BF00B030B2B7FF484
:1007C0005BAF0220FFF760FE322000F0EDFEB0F1DB
:1007D0000008FFF651AF18F003077FF44DAF0F4A42
:1007E000926808EB050393423FF646AFB8F5807F69
:1007F0003FF742AF124B0193B84523DD4FF47A70B7
:1008000000F0D2FE0390039A002AFFF635AF019B59
:10081000039A03F8012B0137EDE700BF0023002006
:10082000D4240020B823002011040008D82400207C
:10083000D023002004230020082300200C230020C4
:10084000D4230020C820FFF7CFFD074600283FF43F
:1008500013AF1F2D11D8C5F1200242450AAB25F078
:10086000030028BF424683490192184400F07CFFF0
:10087000019A8048FF2100F089FF4FEAA8037D49D3
:100880000193C8F38702284600F088FF0646002837
:100890003FF46DAF019B05EB830537E70220FFF7BF
:1008A000A3FD00283FF4E8AE00F006FF00283FF467
:1008B000E3AE0027B846704B9B68BB4218D91F2F88
:1008C00011D80A9B01330ED027F0030312AA134458
:1008D00053F8203C05934046042205A901F0B0F9E5
:1008E00004378046E7E7384600F0AEFE0590F2E7B1
:1008F000CDF81480042105A800F074FE06E700235B
:10090000642104A8049300F063FE00287FF4B4AED1
:100910000220FFF769FD00283FF4AEAE049800F016
:10092000C1FE0590E6E70023642104A8049300F0CB
:100930004FFE00287FF4A0AE0220FFF755FD0028EF
:100940003FF49AAE049800F0AFFEEAE70220FFF70A
:100950004BFD00283FF490AE00F0BEFEE1E7022020
:10096000FFF742FD00283FF487AE05A9142000F0F0
:10097000B9FE04210746049004A800F033FE39466E
:10098000B9E7322000F010FE071EFFF675AEBB0778
:100990007FF472AE384A926807EB090393423FF640
:1009A0006BAE0220FFF720FD00283FF465AE27F074
:1009B00003074F44B9453FF4A9AE484600F044FE52
:1009C0000421059005A800F00DFE09F10409F1E7E6
:1009D0004FF47A70FFF708FD00283FF44DAE00F0A9
:1009E0006BFE002844D00A9B01330BD008220AA9D1
:1009F000002000F0D3FE00283AD02022FF210AA8D0
:100A000000F0C4FEFFF7F8FC1C4804F057F813B0E0
:100A1000BDE8F08F002E3FF42FAE0BF00B030B2B35
:100A20007FF42AAE0023642105A8059300F0D0FDD1
:100A3000074600287FF420AE0220FFF7D5FC804651
:100A400000283FF419AEFFF7D7FC41F2883004F0DC
:100A500035F8059800F0FCFE464600F0E3FE3C4603
:100A6000B7E5064652E64FF0000905E6BA467EE6CF
:100A700037467CE6D423002000230020A086010016
:100A8000094A136849F2690099B21B0C00FB013353
:100A90001360064B186844F2506182B2000C01FBEF
:100AA0000200186080B27047142300201023002039
:100AB00010B500211022044600F068FE034B03CB62
:100AC000206061601868A06010BD00BF9075FF1FB6
:100AD0002DE9F041ADF54E7D0DF134086CAC40F2DE
:100AE000751207460D460EA80021C8F8001000F048
:100AF0004DFE4FF4C4720021204600F047FE02F084
:100B00008BF9274B4FF47A72B0FBF2F0186093E840
:100B10000700022384E807000DF5E9702382FFF740
:100B2000C7FF41F604531F49238406A804F0CCFCF8
:100B30001B2384F832310DF2E32206AB0DF1300CA9
:100B40001E4603CE664510605160334602F108022E
:100B5000F6D13188B3789370118020464146012246
:100B600000F090FE00230393AB7E029305F119037E
:100B7000019380B20123CDE904800093E97E06A3AE
:100B8000D3E90023384602F005FD0DF54E7DBDE8A2
:100B9000F08100BFAFF300809E6AC421818A46EED7
:100BA000E0240020D85400082DE9F0412C4C237A91
:100BB000DAB080460D465BBB27A9284600F072FFDD
:100BC0000746002842D19DF89D60C82E3ED80146B8
:100BD0004FF4A662204600F0D9FD4FF48073C4F8AC
:100BE000F8314FF40073C4F80C334FF44073C4F879
:100BF000203432460DF19E0104F1090000F0B4FDED
:100C000026449DF89C30777223720BB9EB7E2372D9
:100C10008122002106AC27A800F0B8FD0122214660
:100C200027A800F07BFF00230393AB7E029305F11E
:100C3000190380B201932823CDE904400093E97E93
:100C400005A3D3E90023404602F0A4FC5AB0BDE856
:100C5000F08100BFAFF3008026417272DF25D7B765
:100C6000A85E0020F0B5254E4FF48A7505FB00659F
:100C7000F1B096F8D83085F8DC300024D82221462F
:100C800085F8E8403AA800F081FD06F1090000F07F
:100C900075FDD5F8E4308DF8F000C2B206AF06F16C
:100CA00009010DF1F100CDE93A3400F05DFD39465E
:100CB00001223AA800F05EFF80B2CDE9047008235B
:100CC0000127CDE9023706F1D803019330230093C1
:100CD000317A0B4807A3D3E9002302F05BFCA04262
:100CE00006DD02F099F8C5F8E000384671B0F0BDB5
:100CF0002046FBE778F6339F93CACD8DA85E00208F
:100D0000F83400202DE9F04F264FDFF8A480264E5E
:100D100087B0384602F06AFC034600283AD0002427
:100D2000CDE90344ADF81440027B8DF81420996896
:100D30004068029403AA03C21B681C4D43F00043A1
:100D40000293A146A2462B68D3F810B002F066F8D1
:100D500010EB080241F100032846CDF800A002A9DB
:100D6000D84704F5A6640028C8BF49F00109B4F5C6
:100D7000266F05F5A655E6D1B9F1000F05D0384626
:100D800002F038FC86F800A0C3E73378072B04D8BC
:100D90000133337007B0BDE8F08F024802F02AFC3F
:100DA000F8E700BFF8340020DD630020283500207C
:100DB00040420F0070B50D4614461E4602F046FB39
:100DC00050B9022E10D1012C0ED112A3D3E9002369
:100DD000C5E90023012007E0282C10D005D8012CFC
:100DE00009D0052C0FD0002070BD302CFBD10BA3F7
:100DF000D3E90023ECE70BA3D3E90023E8E70BA337
:100E0000D3E90023E4E70BA3D3E90023E0E700BF25
:100E1000AFF30080401DA12026812A0B78F6339F76
:100E200093CACD8D9E6AC421818A46EE2641727294
:100E3000DF25D7B7F017304A39059E5638B5054635
:100E40000E4C0021013500F025FCA4F82C55B4F817
:100E50002C0500F007FC78B1B4F82C0500F012FC6A
:100E6000014648B9B4F82C0500F014FCB4F82C3550
:100E70000133A4F82C35EAE738BD00BFA85E002096
:100E8000F8B50D4C0D4F0226A4F5805343F8307C85
:100E9000237E3BB965692DB1284600F065FF2846E1
:100EA00004F0C8FA204600F05FFF012EA4F5A65416
:100EB00000D1F8BD0126E7E7185A00204055000888
:100EC0002DE9F04F8FB000AF05460C4602F0BEFA98
:100ED000002849D1237E022B1BD1E38A012B18D194
:100EE00001F09AFF0646FFF7CBFD03464FF4C870AA
:100EF000DFF8C482B3FBF0F206F5167602FB10337E
:100F000016FA83F3C8F80030E37E33B9A34B00220E
:100F10001A703C37BD46BDE8F08F07F1240120462A
:100F200000F07EFD0028F4D107F11400FFF7C0FDAA
:100F300097F8264007F11401224607F1270004F034
:100F400091FA0028E2D10F2C08D8944B1C70D8F8E5
:100F50000030A3F51673C8F80030DAE797F82410CC
:100F6000284602F06BFAD4E7E38A282B2BD010D85E
:100F7000012B23D0052BCCD1BFF34F8F8849894B50
:100F8000CA6802F4E0621343CB60BFF34F8F00BF27
:100F9000FDE7302BBDD1844EE17E327A9142B8D14B
:100FA000607E3146002291F8DC50854200F0A58039
:100FB0000132042A01F58A71F5D1AAE721462846B3
:100FC000FFF786FDA5E721462846FFF7EDFDA0E7E0
:100FD000B2F8EC507B6005F103094FEA99094FEA3A
:100FE0008902D11DC908A8EBC1039D46EB4600212B
:100FF000584600F0CBFB04F1EE012A463144584636
:1010000000F0B2FB7B6813B9012000F01BFB96F8DF
:10101000D20000F027FB044630B9307200F04CFBE0
:10102000204600F00FFBB1E0D6F8D4203AB996F88C
:10103000D200B6F82C25824201D8FFF7FFFED6F881
:10104000D4202A44944208D296F8D200B6F82C252F
:101050000130824201D8FFF7F1FE70685FFA89F231
:10106000594600F09BFB08B9C54679E0726896F8CE
:10107000D2002A447260D6F8D42005EB0209C6F8E3
:10108000D49000F0EFFA814509D396F8D220D6F833
:10109000D4000132001B86F8D220C6F8D400FF2D00
:1010A0000FD80024347200F007FB204600F0CAFA83
:1010B00000F0DCFD3D4B188108B9FFF7FBF9C54690
:1010C00027E7BB6896F8D9000AFB0362FB68D2F8F1
:1010D000E41082F8E83001F58061C2F8E030C2F82F
:1010E000E410FFF7BFFDFFF70DFE96F8D92001329F
:1010F00002F0030286F8D920B6E74FF48A7A0AFB99
:1011000002F505F1EA013144204600F05FFDF86088
:1011100000287FF4FEAE3544012285F8E82001F076
:101120007BFED5F8E020D6ED007ADFED216A801A4B
:10113000192838BF192040F6B832904228BF10460F
:10114000B8EE677A07EE900AF8EEE77A67EEA67ACD
:10115000DFED186AE7EE267AFCEEE77AC6ED007A54
:1011600096F8D930BB60BA6873680AFB02F432198A
:1011700092F8E81059B1D2F8E4108B42E8463FF4F7
:1011800027AF002182F8E810C2F8E010C546736866
:10119000064A9B0A01331381BBE600BFF1340020ED
:1011A00000ED00E00400FA05A85E0020E024002025
:1011B000CDCCCC3D6666663FF4340020014B187000
:1011C000704700BFEC24002038B54FF00054134B9B
:1011D00022689A4220D1124B627D12481A70237DF8
:1011E00003724FF48073C0F8F8314FF40073C0F805
:1011F0000C3300254FF44073C0F820340A49C0F87E
:10120000E450C922093000F0AFFAE0222946204616
:1012100000F0BCFA012038BD0020FCE79AAD44C5BF
:10122000EC240020A85E00201600002037B500F056
:101230001DFD1F4C1F4D2049288102236B7123681F
:1012400001225B682046984704F580531A49D3F879
:10125000C03401225B6804F5A6509847002301932F
:10126000164B174900931748174B4FF4805202F062
:10127000BDF8164B197811B1124802F0DFF801F0F1
:10128000CBFD0446FFF7FCFB4FF4C873B0FBF3F251
:1012900002FB130304F5167010FA83F00C4B186070
:1012A00003F076FF08B10F232B8103B030BD00BFE0
:1012B00028350020E024002040420F00B50D000832
:1012C000F0240020F8340020C10E0008EC24002097
:1012D000F43400202DE9F04F2DED028B002493B063
:1012E0000DF12C089FED818BDFF83C92FFF70AFD92
:1012F0000A94ADF834400B94C8F804400026814DA0
:10130000DFF804B2374601238DF81C302B688DF8C6
:101310001D408DED008B0DF11D02D3F808A007A92B
:1013200000232846D0479DF81CA0BAF1000F24D016
:10133000D9F8143083F48063C9F8143010220021E6
:101340000EA800F023FA2B6808AA5F690AA90DF11C
:101350001E032846B84798E803000FAB83E8030054
:101360009DF834308DF844300A9B0E930EA9DDE9C8
:101370000823584602F01CFB574606F5A666B6F54C
:10138000266F05F5A655BED1002FB7D15E4802F0F5
:101390005DF800283FD15D4E01F03EFD3368984274
:1013A00039D301F039FD0546FFF76AFB4FF4C873E6
:1013B000B0FBF3F202FB130305F5167010FA83F08D
:1013C0003060534E8DF82870377817B901238DF8A7
:1013D0002830C7F11005EDB20EA8FFF769FB062D06
:1013E00028BF06250EAB2A46D9190DF1290000F0B9
:1013F000BBF90AAB0393182302930135454B0193C4
:10140000EDB201230093404804953AA3D3E90023A9
:1014100002F062F8347001F0FFFC3F4A3F4D136860
:10142000C31AB3F57A7F2FD3106001F0F7FC0246A0
:101430000B46354802F0E8F8334802F007F818B3D5
:101440002B7A374E002B14BF03230223737101F054
:10145000E3FC0EAF4FF47A730122B0FBF3F0394690
:101460003060304600F0B4FA182302932D4B0193FC
:1014700080B240F25513CDE90370009322481FA3B8
:10148000D3E9002302F028F82B7A93B101F0C4FCD1
:10149000002607464FF48A7895F8D900304400F0CA
:1014A000030008FB005393F8E82072B10136042EC4
:1014B000F2D1C82003F002FB2B7A002B7FF410AF8F
:1014C00013B0BDEC028BBDE8F08FD3F8E02042B141
:1014D0002B68FA2B38BFFA23BA1A0533B2EB430F45
:1014E000E4D3FFF7BFFB0028E0D1E2E700000000F3
:1014F00000000000401DA12026812A0BF1C6A7C1D3
:10150000D068080F28350020F8340020F43400207B
:10151000F1340020F0340020D8630020A85E0020C1
:10152000E0240020DC6300200008004810B5074CD0
:10153000204600F04BFF04F5A65000F047FFBDE841
:101540001040034A0349002003F06EBF28350020F5
:1015500034640020810E000870B5104B1B780133F5
:10156000DBB2012B0C4612D80D4B1D6829684FF4D5
:101570007A730E6AA2FB0332014622462846B04720
:10158000844204D1074B00221A70012070BD4FF431
:10159000FA7003F093FA0020F8E700BF1823002048
:1015A0001C2300202464002007B5002302460121EB
:1015B0000DF107008DF80730FFF7CEFF20B19DF841
:1015C000070003B05DF804FB4FF0FF30F9E70000BF
:1015D0000A4608B50421FFF7BFFF80F00100C0B242
:1015E000404208BD30B4074B0A461978064B53F801
:1015F00021402368DD69054B0146AC46204630BCDE
:10160000604700BF246400201C230020A086010046
:1016100070B503F00BFC094E094D3080002428689A
:101620003388834208D903F0FDFB2B68044401335F
:10163000B4F5104F2B60F2D370BD00BF26640020BC
:10164000E063002003F0A6BC00F1006000F510404C
:101650000068704700F10060920000F5104003F050
:1016600023BC0000054B1A68054B1B889B1A83425C
:1016700002D9104403F0D6BB00207047E06300207D
:1016800026640020024B1B68184403F0D3BB00BF44
:10169000E0630020024B1B68184403F0DDBB00BF71
:1016A000E06300200020704700F10050A0F51040DA
:1016B000D0F8900570470000064991F8243033B106
:1016C0000023086A81F824300822FFF7C3BF0120F5
:1016D000704700BFE4630020014B1868704700BFEB
:1016E000002004E030B50F4B0F4C1B682288C3F379
:1016F0000B030138934208440BD164680A46013C4D
:10170000824213460BD214F9015F2DB102F8015B3E
:10171000F6E781420B4602D22C2203F8012B581A1D
:1017200030BD00BF002004E020230020022802BFBB
:10173000024B4FF080629A61704700BF000800487A
:10174000022802BF024B4FF480629A61704700BFCB
:1017500000080048022801BF024A536983F48063ED
:10176000536170470008004810B50023934203D02E
:10177000CC5CC4540133F9E710BD000003460246B7
:10178000D01A12F9011B0029FAD17047024403460E
:10179000934202D003F8011BFAE770472DE9F843A2
:1017A0001F4D144695F824200746884652BBDFF8A3
:1017B00070909CB395F824302BB92022FF21484625
:1017C0002F62FFF7E3FF95F82400C0F10802A24260
:1017D00028BF2246D6B24146920005EB8000FFF7B3
:1017E000C3FF95F82430A41B1E44F6B2082E1744FC
:1017F0009044E4B285F82460DBD1FFF75DFF002858
:10180000D7D108E02B6A03EB82038342CFD0FFF7E6
:1018100053FF0028CBD10020BDE8F8830120FBE76F
:10182000E4630020024B1A78024B1A70704700BF25
:10183000246400201823002003494FF461430B6007
:10184000024B186803F026B80C6400201C2300200B
:10185000094B10B51822044600211846FFF796FFE1
:10186000064A074B127804600146BDE8104053F861
:10187000220003F00FB800BF0C6400202464002095
:101880001C2300202DE9F0470D4604460021904618
:10189000284640F27912FFF779FF234620220021E3
:1018A000284602F027F8231D02222021284602F0B4
:1018B00021F8631D03222221284602F01BF8A31DF4
:1018C00003222521284602F015F804F1080310220E
:1018D0002821284602F00EF804F1100308223821CE
:1018E000284602F007F804F1110308224021284697
:1018F00002F000F804F1120308224821284601F002
:10190000F9FF04F1140320225021284601F0F2FFD0
:1019100004F1180340227021284601F0EBFF04F186
:1019200020030822B021284601F0E4FF04F121033E
:101930000822B821284601F0DDFF04F12207C02665
:101940003B46314608222846083601F0D3FFB6F55B
:10195000A07F07F10107F3D104F1320308223146D9
:10196000284601F0C7FF002704F1330A94F832300B
:101970004FEAC7099F4209F5A47615D3B8F1000FC5
:1019800008D1314604F599730722284601F0B2FFC9
:1019900009F24F16274694F832213B1B93420CD391
:1019A000F01DC008BDE8F0870AEB070308223146A6
:1019B000284601F09FFF0137D8E707F2331331467D
:1019C0000822284601F096FF08360137E3E70000B9
:1019D00013B504460846002101602346C0F80310F1
:1019E0002022019001F086FF0198231D0222202170
:1019F00001F080FF0198631D0322222101F07AFF8C
:101A00000198A31D0322252101F074FF019804F120
:101A100008031022282101F06DFF072002B010BD3D
:101A2000F7B50023047F00910E46072219460546AC
:101A300001F024FE731C0093012200230721284695
:101A400001F01CFEC4B9B31C0093052223460821F3
:101A5000284601F013FE0D243746B278BB1B934293
:101A600011D32B7FA88A0734E408BBB9844294BF02
:101A70000020012003B0F0BDAB8ADB00083BDB088F
:101A8000B3700824E8E7FB1C0093214600230822DA
:101A9000284601F0F3FD08340137DEE7201A18BFAD
:101AA0000120E7E7F7B50023047F00910E460822E6
:101AB0001946054601F0E2FD731CC4B908220093E3
:101AC00011462346284601F0D9FD102401237278DF
:101AD0005F1C013B934211D32B7FA88A0734E40893
:101AE000BBB9844294BF0020012003B0F0BDAB8A93
:101AF000DB00083BDB0873700824E7E7F319009369
:101B0000214600230822284601F0B8FD08343B4650
:101B1000DDE7201A18BF0120E7E70000F8B50E4600
:101B200005461446002181223046FFF72FFE2B4642
:101B300008220021304601F0DDFE7CB96B1C072233
:101B40000821304601F0D6FE0F2401236A785F1C7D
:101B5000013B934204D3E01DC008F8BD0824F4E71C
:101B6000EB1921460822304601F0C4FE08343B46FA
:101B7000ECE70000F8B50E46054614460021CE22DB
:101B80003046FFF703FE2B4628220021304601F0A5
:101B9000B1FE7CB905F1080308222821304601F086
:101BA000A9FE30242F462A7A7B1B934204D3E01DE2
:101BB000C008F8BD2824F5E707F1090321460822EB
:101BC000304601F097FE08340137ECE7F7B5047FA3
:101BD00000910E46012310220021054601F04EFD22
:101BE000C4B9B31C0093092223461021284601F0F2
:101BF00045FD192437467288BB1B9A4211D82B7FAA
:101C0000A88A0734E408BBB9844294BF00200120AD
:101C100003B0F0BDAB8ADB00103BDB0873801024FF
:101C2000E8E73B1D0093214600230822284601F0E7
:101C300025FD08340137DEE7201A18BF0120E7E749
:101C400030B5094D0A4491420DD011F8013B58407E
:101C5000082340F30004013B2C4013F0FF0384EA07
:101C60005000F6D1EFE730BD2083B8EDF7B5384A24
:101C7000106851686B4603C36A46364936480823E4
:101C800003F000FC0446002833D10A25334A1068CB
:101C900051686B4603C36A4631492F48082303F055
:101CA000F1FB0446002849D00369B3F5EE2F45D86F
:101CB000B0F8661040F21D4291423FD1294A0244D9
:101CC00002F15C018B4239D35C3B234900209E1A10
:101CD000FFF7B6FF3246074604F164010020FFF724
:101CE000AFFFA3689F4229D1E368984208BF00254F
:101CF00024E00369B3F5EE2F27D8418B40F21D4253
:101D0000914220D1174A024402F110018B4218D3AC
:101D1000103B114900209D1AFFF792FF2A46064604
:101D200004F118010020FFF78BFFA3689E4202D147
:101D3000E368984201D00D25A8E70025284603B0A6
:101D4000F0BD1025A2E70C25A0E70B259EE700BFFC
:101D500000550008DC6F07000090000809550008D6
:101D6000906F07000870FFF710B5037C044613B9A5
:101D7000006803F06FFB204610BD00000023BFF396
:101D80005B8FC360BFF35B8FBFF35B8F8360BFF379
:101D90005B8F7047BFF35B8F0068BFF35B8F70474B
:101DA00070B505460C30FFF7F5FF05F1080604464F
:101DB0003046FFF7EFFFA04206D930466D68FFF7C7
:101DC000E9FF2544281A70BD3046FFF7E3FF201ACB
:101DD000F9E7000070B50546406898B105F10800C4
:101DE000FFF7D8FF05F10C0604463046FFF7D2FF97
:101DF0008442304694BF6D680025FFF7CBFF013C5D
:101E00002C44201A70BD000038B50C460546FFF77B
:101E1000C7FFA04210D305F10800FFF7BBFF044441
:101E20006868B4FBF0F100FB1144BFF35B8F012045
:101E3000AC60BFF35B8F38BD0020FCE72DE9F041BB
:101E4000144607460D46FFF7C5FF844228BF0446E7
:101E5000D4B1B84658F80C6B4046FFF79BFF3044AE
:101E6000286040467E68FFF795FF331A9C4203D8EE
:101E70006C600120BDE8F0816B60A41B3B68AB6027
:101E80002044E8600220F5E72046F3E738B50C4629
:101E90000546FFF79FFFA04210D305F10C00FFF7A6
:101EA00079FF04446868B4FBF0F100FB1144BFF310
:101EB0005B8F0120EC60BFF35B8F38BD0020FCE737
:101EC0002DE9FF41884669460746FFF7B7FF6C4694
:101ED00006B204EBC6060025B44209D06268206849
:101EE00008EB0501FFF740FC636808341D44F3E785
:101EF00029463846FFF7CAFF284604B0BDE8F081FE
:101F0000F8B505460C300F46FFF744FF05F108060B
:101F100004463046FFF73EFFA042304688BF6C685B
:101F2000FFF738FF201A386020B130462C68FFF7E1
:101F300031FF2044F8BD000073B5144606460D4637
:101F4000FFF72EFF844228BF04460190DCB101A9AF
:101F50003046FFF7D5FF019B33B93268C5E902333C
:101F6000C5E9002401200CE09C4238BF01942860A0
:101F7000019868608442F5D93368AB60241AEC603C
:101F8000022002B070BD2046FBE700002DE9FF41B2
:101F90000F466946FFF7D0FF6C4600B204EBC00560
:101FA0000026AC4209D0D4F8048054F8081BB819B4
:101FB0004246FFF7D9FB4644F3E7304604B0BDE89C
:101FC000F081000038B50546FFF7E0FF0446014602
:101FD0002846FFF719FF204638BD00007047000073
:101FE00010B41346026814680022A4465DF8044B3E
:101FF0006047000000F5805090F8590470470000D9
:1020000000F5805090F852047047000000F58050B1
:1020100090F958047047000050207047302383F334
:10202000118800F58052D2F89C34D2F898041844F4
:10203000D2F894341844D2F87C341844D2F88C3452
:102040001844D2F888341844002383F31188704769
:1020500000F58050C0F854140120704738B5C26AAA
:10206000936923F001039361044600F0D5FE054611
:10207000E36A9B69DB0706D500F0CEFE431BFA2B13
:10208000F6D9002004E004F58054012084F85204BD
:1020900038BD00002DE9F04F0C4600F5805185B0A9
:1020A0001F4691F85234BDF83890054690469BB1D2
:1020B000D1F878340133C1F878342368980006D415
:1020C000237B082B0BD9627B0AB10F2B07D9D1F8E0
:1020D0007C340133C1F87C344FF0FF3010E0302302
:1020E00083F31188EB6AD3F8C42012F4001B0AD0E2
:1020F000D1F880340133C1F88034002080F3118896
:1021000005B0BDE8F08FD3F8C4302068C3F3014AAE
:102110006B6A4822002812FB0A33B4BF40F08040AB
:10212000800418602268520044BF40F000501860DC
:10213000207B4FEA0A6242EA00425A60607B4FEA23
:102140004A1610B342F440125A60D1F8B02401325A
:10215000C1F8B024AA1902F58352117B41F0200185
:102160001173207B039300F0B3FE039B03308010B8
:102170005FFA8BF282420BF1010B0DDA04EB820164
:1021800003EB820249689160F2E7AA1902F58352D3
:10219000117B60F34511E3E7EB6A012202FA0AF2D0
:1021A000C3F8CC2005EB4A11AB1903F5825301F5B6
:1021B0008251C3E904871831234604F10C0253F815
:1021C000040B41F8040B9342F9D11B880B802E4479
:1021D00041F2680346F803A006F5805609F00303B0
:1021E00096F86C2043F0100322F01F02134386F888
:1021F0006C30002383F31188CDF8009042463B46B3
:102200002146284600F02AFE012079E713B500F5A3
:1022100080540191606CFFF7DDFD1F280AD90199F8
:10222000606C2022FFF74CFEA0F120035842584179
:1022300002B010BD0020FBE708B5302383F31188FE
:1022400000F58050406CFFF799FD002383F311885F
:1022500008BD0000002202608281426082607047F7
:1022600010B500220023C0E90023002304460381A7
:102270000C30FFF7EFFF204610BD00002DE9F047BE
:102280009A4688B0074688469146302383F31188E2
:1022900007F580546846FFF7E3FF606CFFF780FDA9
:1022A0001F282DD9606C20226946FFF78BFE20285D
:1022B00026D194F852341BB303AD444605AB2E46E9
:1022C00003CE9E4220606160354604F10804F6D1D9
:1022D00030682060B388A380DDE90023C9E90023CA
:1022E000BDF80830AAF80030002383F31188534664
:1022F0004A464146384608B0BDE8F04700F09CBD6C
:10230000002080F3118808B0BDE8F0872DE9F84F70
:1023100000230646C0E90133294B46F8303B00F55F
:102320008154054688463746103438462037FFF733
:1023300097FFA742F9D105F580544FF480532663E7
:102340000026C4E90D366764012305F5835705F5BA
:10235000A359E66384F8403084F84830103709F117
:1023600010094FF0000A4FF0000B47E908ABA7F146
:102370001800FFF76FFF203747F8286C4F45F4D15E
:10238000B8F1010F84F85884A4F85A64A4F85C6486
:10239000A4F85E6484F86064A4F86264A4F86464D9
:1023A000A4F8666484F8686402D9064800F02EFD3B
:1023B000054B53F82830EB622846BDE8F88F00BF84
:1023C00040550008145500083055000810B5044B5E
:1023D000197804464A1C1A70FFF798FF204610BD72
:1023E000316400202DE9F84315460C4600295CD0E5
:1023F000022001F077FF2E49B0FBF4F78C428CBF2E
:102400000A2111214B1EB7FBF1F601FB1671DAB25E
:1024100021B1022B1946F5D8002032E0731EB3F526
:10242000806FF9D2C2EBC20808F103014FEAE10E56
:10243000C1F3C701A2EB010C0EF101094FF47A734D
:102440005FFA8CF70EFB033E59FA8CFCBEFBFCFCDA
:10245000BCF5617F17DC1FFA8CF34A1C57FA82F235
:102460007243B0FBF2F08442D6D14A1E0F2AD3D871
:102470007A1E072AD0D801202B806E8028716971BE
:10248000AF71BDE8F88308F1FF314FEAE10CC1F309
:10249000C701521A0CF1010ED7B20CFB03335EFADE
:1024A00082F2B3FBF2F39BB2D7E70846E9E700BF3D
:1024B0003F420F0030B50D4B0D4D05201C786C438D
:1024C0008C420ED15978518099785171D978917197
:1024D000197911715B7903EB83035B001380012091
:1024E00030BD013803F10603E8D1F9E78055000853
:1024F00040420F0038B500F58053114A93F8583424
:10250000D55C4FF45472554305F1804303F52443E1
:10251000044600211846FFF739F90A4B60612B4445
:10252000A361094B2B44E361084B2B442362084B06
:102530002B446362E36A0022C3F8C02038BD00BFA9
:102540002855000870A40040B0A4004088A50040B1
:1025500078A600402DE9F04F00F580551F4695F80C
:102560005834022B89B004468946904604D9002687
:10257000304609B0BDE8F08FA64A52F8231009B9D9
:1025800042F82300A448C4F80C900178277499B944
:10259000302383F31188A14B9A6D42F000729A6543
:1025A0009A6B42F000729A639A6B22F000729A63FF
:1025B0000123037081F3118895F85134CBB930238E
:1025C00083F31188964A95F85834D35C012B2AD0AE
:1025D000022B2FD03BB90321152001F0A5FF0321C9
:1025E000162001F0A1FF012385F85134002383F365
:1025F0001188302383F31188E26A936923F0100372
:10260000936100F009FC8246E36A9E6916F00806B1
:1026100017D000F001FCA0EB0A03FA2BF4D9002636
:1026200086F31188A4E70321562001F07DFF0321E2
:102630005720D6E70321582001F076FF03215920C7
:10264000CFE79A6942F001029A6100F0E5FB824609
:10265000E36A9A69D00706D400F0DEFBA0EB0A0318
:10266000FA2BF5D9DBE79A6942F002029A61E36A34
:102670004FF0000AC3F854A08AF31188686CFFF782
:102680007DFB04F5825B0BF1100B202200216846D4
:10269000FFF77CF802A8FFF7DDFDCDF818A06A4629
:1026A0000BEB06030DF1180E9446BCE80300F4454D
:1026B00018605960624603F10803F5D1DCF80000A8
:1026C000186020369CF804201A71B6F5806FDCD1B2
:1026D000002304F5A25285F8503485F853341A3299
:1026E00049462046FFF77EFE064690B9E26A9369A6
:1026F00023F00103936100F08FFB0546E36A9B69B9
:10270000D9077FF534AF00F087FB431BFA2BF5D9CF
:102710002DE795F85E34C5F86C94591E95F85F3432
:10272000E26A013B1B0243EA416395F860140139F8
:102730000B43B5F85C14013943EA0143D361B8F1A6
:10274000000F36D004F5A352023241462046FFF76F
:10275000B1FE90B9E26A936923F00103936100F03E
:102760005BFB0546E36A9B69DA077FF500AF00F083
:1027700053FB431BFA2BF5D9F9E695F86724C5F806
:102780007084511E95F86824E36A013A120142EA06
:10279000012295F8661401390A43B5F86414013929
:1027A00042EA014242F40002DA60E36A4FF4206236
:1027B0009A642046FFF79EFE002385F85934E36AA9
:1027C0006FF040421A65E36A164A5A65E36A44228A
:1027D0009A65E36A0722C3F8DC20E36A0322974282
:1027E000DA653FF4C5AEE26A936923F001039361B1
:1027F00000F012FB0746E36A9B69DB0705D500F092
:102800000BFBC31BFA2BF6D9B1E6012385F8523432
:10281000AEE600BF286400203064002000100240B3
:10282000285500089B0008002DE9F04F054689B0A7
:1028300090469946002741F2680A00F58056EB6AF7
:10284000D3F8D430FB40D80751D505EB471252449A
:102850004FEA471B1379190749D4D6F8843401335A
:10286000C6F8843405F5A553C3E9008913799A069F
:1028700048BFD6F8B43405EB0B0248BF01335244CD
:1028800048BFC6F8B434137943F008031371DB076B
:1028900022D596F85334FBB105F5825418346846B6
:1028A0005C44FFF7DDFC03AB04F1080C20686168B1
:1028B0001A4603C2083464451346F7D120681060F5
:1028C000A2889A800123ADF808302B68CDE90089F1
:1028D000DB6B694628469847D6F8A834D6F85404E6
:1028E0000133C6F8A83410B103681B699847013753
:1028F000202FA4D109B0BDE8F08F00002DE9F04FE2
:102900008DB004460F4600F089FA82468946002FB2
:1029100056D1E36AD3F89020920141BF04F580516B
:10292000D1F898240132C1F89824D3F890201607E2
:1029300003D100200DB0BDE8F08FD3F89050E669C8
:10294000C5F30125482303FB0566E8464046FFF72B
:1029500081FC326851004ABF22F06043C2F38A43CF
:1029600043F00043920048BF43F0804300937368F4
:1029700013F400131FBF04F5805201238DF80D30AE
:10298000D2F8B8340EBF8DF80D300133C2F8B83428
:10299000F38803F00F038DF80C304FF0000B9DF817
:1029A0000C0000F095FA5FFA8BF3984220D9F218E8
:1029B0000CA90B44127A03F82C2C0BF1010BEEE757
:1029C000012FB6D1E36AD3F89820950141BF04F5F1
:1029D0008051D1F898240132C1F89824D3F8982076
:1029E0001007A6D0D3F89850266AC5F30125A9E7A9
:1029F000EFB9E36AC3F8945004A8FFF731FC98E8F4
:102A00000F0007AD07C52B800023ADF818302368F1
:102A10002046CDE904A9DB6B04A9984704F580544E
:102A200058B1D4F890340133C4F8903482E7012FC0
:102A300004BFE36AC3F89C50DEE7D4F89434013352
:102A4000C4F89434012075E72DE9F04105460F469E
:102A500000F58054012639462846FFF74FFF10B194
:102A600084F85364F7E7D4F8A834D4F85404013355
:102A7000C4F8A83420B10368BDE8F0411B691847C9
:102A8000BDE8F081F0B5C36A1A6C12F47F0F2BD049
:102A900000F580541B6CC4F8AC3441F26805002387
:102AA00047194FF0010C00EB43122A445E011179E3
:102AB00011F0020F15D0490713D4B959C66AD6F8D8
:102AC000C8E00CFA01F111EA0E0F0AD0C6F8D010D6
:102AD000117941F004011171D4F88C240132C4F849
:102AE0008C240133202BDED1F0BD00002B4B70B5C0
:102AF0001E561B5C012B2FD8294D2A4A55F823302E
:102B000052F826400BB341B3236D1A060FD580232C
:102B1000236500F083F950EA01020B4602D0013828
:102B200061F10003024655F82600FFF77DFE236D94
:102B30001B032CD555F826304FF4002203F58053A3
:102B40002265012283F8592421E00123236508230B
:102B500023654FF48063236570BD236DDA0702D4CB
:102B6000236D9B0706D5032355F826002365002116
:102B7000FFF76AFF236D180702D4236DD90606D527
:102B8000182355F8260023650121FFF75DFF55F84E
:102B90002600BDE87040FFF775BF00BF2C55000848
:102BA000286400203055000808B5302383F31188CD
:102BB000FFF768FF002383F3118808BDC36AD3F8C9
:102BC000C40080F40010C0F34050704708B53023B3
:102BD00083F3118800F58050406CFFF7E1F8002383
:102BE00083F3118843090CBF0120002008BD0000B9
:102BF00000F5805393F8592462B1C16A8A6922F0C2
:102C000001028A61D3F89C240132C3F89C2400227B
:102C100083F85924704700002DE9F743302181F3F0
:102C2000118800F582511031002541F2680E4FF0F5
:102C3000010800F5805C00EB4514744426797707A1
:102C40001CD4F6061AD5D0F82C908E69D9F8C87025
:102C500008FA06F63E4211D04F6801970F68974276
:102C6000019F9F410AD2C9F8D060267946F0040638
:102C70002671DCF888440134CCF888440135202DD5
:102C800001F12001D7D1002383F3118803B0BDE8FF
:102C9000F0830000F8B51E46002313700F4605466A
:102CA0001446FFF793FF80F0010038701EB12846EC
:102CB000FFF784FF2070F8BD2DE9F04F85B09946ED
:102CC000DDE90EA30D4602931378019391F800B04D
:102CD0008046164600F0A2F82B7804460F4613B93A
:102CE0003378002B41D022463B464046FFF794FF05
:102CF000FFF75AFFFFF77CFF4B4632462946FFF7A6
:102D0000C9FF2B7833B1BBF1000F03D0012005B010
:102D1000BDE8F08F337813B1019B002BF6D108F595
:102D200080530393029B544577EB03031DD2039B0F
:102D3000D3F85404C8B10368AAEB04011B68984790
:102D40004B46324629464046FFF7A4FF2B7813B185
:102D5000BBF1000FDAD1337813B1019B002BD5D131
:102D600000F05CF804460F46DCE70020CFE70000E7
:102D700008B500210846FFF7B9FEBDE8084001F09C
:102D800067B8000008B501210020FFF7AFFEBDE8DD
:102D9000084001F05DB8000008B500210120FFF7F0
:102DA000A5FEBDE8084001F053B8000008B50121B8
:102DB0000846FFF79BFEBDE8084001F049B8000057
:102DC00000B59BB0EFF3098168226846FEF7CCFCA2
:102DD000EFF30583014B9B6BFEE700BF00ED00E0C6
:102DE00008B5FFF7EDFF000000B59BB0EFF30981D8
:102DF00068226846FEF7B8FCEFF30583014B5B6B76
:102E0000FEE700BF00ED00E0FEE700000FB408B5EC
:102E1000029801F003FEFEE702F002B902F0E4B806
:102E200013B56C4684E80600031D94E8030083E8AC
:102E30000500012002B010BD73B58568019155B140
:102E40001B885B0707D4D0E900369B6B9847019A33
:102E5000C1B23046A847012002B070BDF0B5866807
:102E600089B005460C465EB1BDF838305B070AD420
:102E7000D0E900379B6B98472246C1B23846B0472D
:102E8000012009B