: PARM {TimeUS : 81860715, Name : NAVL1_LIM_BANK, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860744, Name : TECS_CLMB_MAX, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860768, Name : TECS_SINK_MIN, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860792, Name : TECS_TIME_CONST, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860818, Name : TECS_THR_DAMP, Value : 0.5}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860843, Name : TECS_INTEG_GAIN, Value : 0.10000000149}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860870, Name : TECS_VERT_ACC, Value : 7.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860971, Name : TECS_HGT_OMEGA, Value : 3.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861062, Name : TECS_SPD_OMEGA, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861095, Name : TECS_RLL2THR, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861256, Name : TECS_SPDWEIGHT, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861285, Name : TECS_PTCH_DAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861316, Name : TECS_SINK_MAX, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861347, Name : TECS_LAND_ARSPD, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861378, Name : TECS_LAND_THR, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861506, Name : TECS_LAND_SPDWGT, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861544, Name : TECS_PITCH_MAX, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861584, Name : TECS_PITCH_MIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861622, Name : TECS_LAND_SINK, Value : 0.25}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861708, Name : TECS_LAND_TCONST, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861743, Name : TECS_LAND_DAMP, Value : 0.5}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861791, Name : TECS_LAND_PMAX, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861827, Name : TECS_APPR_SMAX, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861864, Name : TECS_LAND_SRC, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861976, Name : TECS_LAND_TDAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862018, Name : TECS_LAND_IGAIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862065, Name : TECS_TKOFF_IGAIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862234, Name : TECS_LAND_PDAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862283, Name : TECS_SYNAIRSPEED, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862325, Name : MNT_DEFLT_MODE, Value : 3.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862352, Name : MNT_RETRACT_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862376, Name : MNT_RETRACT_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862548, Name : MNT_RETRACT_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862576, Name : MNT_NEUTRAL_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862601, Name : MNT_NEUTRAL_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862626, Name : MNT_NEUTRAL_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862659, Name : MNT_STAB_ROLL, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862732, Name : MNT_STAB_TILT, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862761, Name : MNT_STAB_PAN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862792, Name : MNT_RC_IN_ROLL, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862824, Name : MNT_ANGMIN_ROL, Value : -4500.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862853, Name : MNT_ANGMAX_ROL, Value : 4500.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862886, Name : MNT_RC_IN_TILT, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862916, Name : MNT_ANGMIN_TIL, Value : -4500.0}
2017-10-29 12:47:13.01: IMU {TimeUS : 81875059, GyrX : 0.0292157977819, GyrY : -0.0354311801493, GyrZ : 0.000584980065469, AccX : 0.254429876804, AccY : 0.780926823616, AccZ : -10.093793869, EG : 0, EA : 0, T : 44.4237442017, GH : 1, AH : 1, GHz : 7997, AHz : 3998}
2017-10-29 12:47:13.01: IMU2 {TimeUS : 81875059, GyrX : 0.0312399808317, GyrY : -0.03510852017-10-29 12:47:13.71: FMT {Type : 128, Length : 89, Name : FMT, Format : BBnNZ, Columns : Type,Length,Name,Format,Columns}
2017-10-29 12:47:13.71: FMT {Type : 129, Length : 31, Name : PARM, Format : QNf, Columns : TimeUS,Name,Value}
2017-10-29 12:47:13.71: FMT {Type : 130, Length : 46, Name : GPS, Format : QBIHBcLLefffB, Columns : TimeUS,Status,GMS,GWk,NSats,HDop,Lat,Lng,Alt,Spd,GCrs,VZ,U}
2017-10-29 12:47:13.71: FMT {Type : 131, Length : 46, Name : GPS2, Format : QBIHBcLLefffB, Columns : TimeUS,Status,GMS,GWk,NSats,HDop,Lat,Lng,Alt,Spd,GCrs,VZ,U}
2017-10-29 12:47:13.71: FMT {Type : 132, Length : 46, Name : GPSB, Format : QBIHBcLLefffB, Columns : TimeUS,Status,GMS,GWk,NSats,HDop,Lat,Lng,Alt,Spd,GCrs,VZ,U}
2017-10-29 12:47:13.71: FMT {Type : 195, Length : 26, Name : GPA, Format : QCCCCBIH, Columns : TimeUS,VDop,HAcc,VAcc,SAcc,VV,SMS,Delta}
2017-10-29 12:47:13.71: FMT {Type : 196, Length : 26, Name : GPA2, Format : QCCCCBIH, Columns : TimeUS,VDop,HAcc,VAcc,SAcc,VV,SMS,Delta}
2017-10-29 12:47:13.71: FMT {Type : 197, Length : 26, Name : GPAB, Format : QCCCCBIH, Columns : TimeUS,VDop,HAcc,VAcc,SAcc,VV,SMS,Delta}
2017-10-29 12:47:13.71: FMT {Type : 133, Length : 53, Name : IMU, Format : QffffffIIfBBHH, Columns : TimeUS,GyrX,GyrY,GyrZ,AccX,AccY,AccZ,EG,EA,T,GH,AH,GHz,AHz}
2017-10-29 12:47:13.71: FMT {Type : 134, Length : 75, Name : MSG, Format : QZ, Columns : TimeUS,Message}
2017-10-29 12:47:13.71: FMT {Type : 135, Length : 39, Name : RCIN, Format : QHHHHHHHHHHHHHH, Columns : TimeUS,C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14}
2017-10-29 12:47:13.71: FMT {Type : 136, Length : 39, Name : RCOU, Format : QHHHHHHHHHHHHHH, Columns : TimeUS,C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14}
2017-10-29 12:47:13.71: FMT {Type : 137, Length : 15, Name : RSSI, Format : Qf, Columns : TimeUS,RXRSSI}
2017-10-29 12:47:13.71: FMT {Type : 139, Length : 37, Name : BARO, Format : QffcfIff, Columns : TimeUS,Alt,Press,Temp,CRt,SMS,Offset,GndTemp}
2017-10-29 12:47:13.71: FMT {Type : 140, Length : 21, Name : POWR, Format : QffH, Columns : TimeUS,Vcc,VServo,Flags}
2017-10-29 12:47:13.71: FMT {Type : 143, Length : 45, Name : CMD, Format : QHHHfffffff, Columns : TimeUS,CTot,CNum,CId,Prm1,Prm2,Prm3,Prm4,Lat,Lng,Alt}
2017-10-29 12:47:13.71: FMT {Type : 144, Length : 20, Name : RAD, Format : QBBBBBHH, Columns : TimeUS,RSSI,RemRSSI,TxBuf,Noise,RemNoise,RxErrors,Fixed}
2017-10-29 12:47:13.71: FMT {Type : 146, Length : 43, Name : CAM, Format : QIHLLeeeccC, Columns : TimeUS,GPSTime,GPSWeek,Lat,Lng,Alt,RelAlt,GPSAlt,Roll,Pitch,Yaw}
2017-10-29 12:47:13.71: FMT {Type : 236, Length : 43, Name : TRIG, Format : QIHLLeeeccC, Columns : TimeUS,GPSTime,GPSWeek,Lat,Lng,Alt,RelAlt,GPSAlt,Roll,Pitch,Yaw}
2017-10-29 12:47:13.71: FMT {Type : 162, Length : 30, Name : ARSP, Format : QffcffB, Columns : TimeUS,Airspeed,DiffPress,Temp,RawPress,Offset,U}
2017-10-29 12:47:13.71: FMT {Type : 164, Length : 33, Name : BAT, Format : Qffffcf, Columns : TimeUS,Volt,VoltR,Curr,CurrTot,Temp,Res}
2017-10-29 12:47:13.71: FMT {Type : 165, Length : 33, Name : BAT2, Format : Qffffcf, Columns : TimeUS,Volt,VoltR,Curr,CurrTot,Temp,Res}
2017-10-29 12:47:13.71: FMT {Type : 166, Length : 35, Name : BCL, Format : QfHHHHHHHHHH, Columns : TimeUS,Volt,V1,V2,V3,V4,V5,V6,V7,V8,V9,V10}
2017-10-29 12:47:13.71: FMT {Type : 167, Length : 35, Name : BCL2, Format : QfHHHHHHHHHH, Columns : TimeUS,Volt,V1,V2,V3,V4,V5,V6,V7,V8,V9,V10}
2017-10-29 12:47:13.71: FMT {Type : 163, Length : 27, Name : ATT, Format : QccccCCCC, Columns : TimeUS,DesRoll,Roll,DesPitch,Pitch,DesYaw,Yaw,ErrRP,ErrYaw}
2017-10-29 12:47:13.71: FMT {Type : 168, Length : 34, Name : MAG, Format : QhhhhhhhhhBI, Columns : TimeUS,MagX,MagY,MagZ,OfsX,OfsY,OfsZ,MOfsX,MOfsY,MOfsZ,Health,S}
2017-10-29 12:47:13.71: FMT {Type : 171, Length : 14, Name : MODE, Format : QMBB, Columns : TimeUS,Mode,ModeNum,Rsn}
2017-10-29 12:47:13.71: FMT {Type : 198, Length : 17, Name : RFND, Format : QCBCB, Columns : TimeUS,Dist1,Orient1,Dist2,Orient2}
2017-10-29 12:47:13.71: FMT {Type : 227, Length : 33, Name : DMS, Format : IIIIIBBBBBBBBBB, Columns : TimeMS,N,Dp,RT,RS,Er,Fa,Fmn,Fmx,Pa,Pmn,Pmx,Sa,Smn,Smx}
2017-10-29 12:47:13.71: FMT {Type : 244, Length : 41, Name : BCN, Format : QBBfffffff, Columns : TimeUS,Health,Cnt,D0,D1,D2,D3,PosX,PosY,PosZ}
2017-10-29 12:47:13.71: FMT {Type : 245, Length : 56, Name : PRX, Format : QBfffffffffff, Columns : TimeUS,Health,D0,D45,D90,D135,D180,D225,D270,D315,DUp,CAn,CDis}
2017-10-29 12:47:13.71: FMT {Type : 247, Length : 29, Name : SRTL, Format : QBHHBfff, Columns : TimeUS,Active,NumPts,MaxPts,Action,N,E,D}
2017-10-29 12:47:13.71: FMT {Type : 138, Length : 53, Name : IMU2, Format : QffffffIIfBBHH, Columns : TimeUS,GyrX,GyrY,GyrZ,AccX,AccY,AccZ,EG,EA,T,GH,AH,GHz,AHz}
2017-10-29 12:47:13.71: FMT {Type : 147, Length : 53, Name : IMU3, Format : QffffffIIfBBHH, Columns : TimeUS,GyrX,GyrY,GyrZ,AccX,AccY,AccZ,EG,EA,T,GH,AH,GHz,AHz}
2017-10-29 12:47:13.71: FMT {Type : 141, Length : 45, Name : AHR2, Format : QccCfLLffff, Columns : TimeUS,Roll,Pitch,Yaw,Alt,Lat,Lng,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 182, Length : 31, Name : POS, Format : QLLfff, Columns : TimeUS,Lat,Lng,Alt,RelHomeAlt,RelOriginAlt}
2017-10-29 12:47:13.71: FMT {Type : 142, Length : 45, Name : SIM, Format : QccCfLLffff, Columns : TimeUS,Roll,Pitch,Yaw,Alt,Lat,Lng,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 200, Length : 55, Name : NKF1, Format : QccCfffffffccce, Columns : TimeUS,Roll,Pitch,Yaw,VN,VE,VD,dPD,PN,PE,PD,GX,GY,GZ,OH}
2017-10-29 12:47:13.71: FMT {Type : 201, Length : 35, Name : NKF2, Format : QbccccchhhhhhB, Columns : TimeUS,AZbias,GSX,GSY,GSZ,VWN,VWE,MN,ME,MD,MX,MY,MZ,MI}
2017-10-29 12:47:13.71: FMT {Type : 202, Length : 33, Name : NKF3, Format : Qcccccchhhcc, Columns : TimeUS,IVN,IVE,IVD,IPN,IPE,IPD,IMX,IMY,IMZ,IYAW,IVT}
2017-10-29 12:47:13.71: FMT {Type : 203, Length : 35, Name : NKF4, Format : QcccccfbbHBHHb, Columns : TimeUS,SV,SP,SH,SM,SVT,errRP,OFN,OFE,FS,TS,SS,GPS,PI}
2017-10-29 12:47:13.71: FMT {Type : 204, Length : 40, Name : NKF5, Format : QBhhhcccCCfff, Columns : TimeUS,NI,FIX,FIY,AFI,HAGL,offset,RI,rng,Herr,eAng,eVel,ePos}
2017-10-29 12:47:13.71: FMT {Type : 205, Length : 55, Name : NKF6, Format : QccCfffffffccce, Columns : TimeUS,Roll,Pitch,Yaw,VN,VE,VD,dPD,PN,PE,PD,GX,GY,GZ,OH}
2017-10-29 12:47:13.71: FMT {Type : 206, Length : 35, Name : NKF7, Format : QbccccchhhhhhB, Columns : TimeUS,AZbias,GSX,GSY,GSZ,VWN,VWE,MN,ME,MD,MX,MY,MZ,MI}
2017-10-29 12:47:13.71: FMT {Type : 207, Length : 33, Name : NKF8, Format : Qcccccchhhcc, Columns : TimeUS,IVN,IVE,IVD,IPN,IPE,IPD,IMX,IMY,IMZ,IYAW,IVT}
2017-10-29 12:47:13.71: FMT {Type : 208, Length : 35, Name : NKF9, Format : QcccccfbbHBHHb, Columns : TimeUS,SV,SP,SH,SM,SVT,errRP,OFN,OFE,FS,TS,SS,GPS,PI}
2017-10-29 12:47:13.71: FMT {Type : 209, Length : 36, Name : NKF0, Format : QBccCCcccccccc, Columns : TimeUS,ID,rng,innov,SIV,TR,BPN,BPE,BPD,OFH,OFL,OFN,OFE,OFD}
2017-10-29 12:47:13.71: FMT {Type : 210, Length : 27, Name : NKQ1, Format : Qffff, Columns : TimeUS,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 211, Length : 27, Name : NKQ2, Format : Qffff, Columns : TimeUS,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 212, Length : 55, Name : XKF1, Format : QccCfffffffccce, Columns : TimeUS,Roll,Pitch,Yaw,VN,VE,VD,dPD,PN,PE,PD,GX,GY,GZ,OH}
2017-10-29 12:47:13.71: FMT {Type : 213, Length : 34, Name : XKF2, Format : QccccchhhhhhB, Columns : TimeUS,AX,AY,AZ,VWN,VWE,MN,ME,MD,MX,MY,MZ,MI}
2017-10-29 12:47:13.71: FMT {Type : 214, Length : 33, Name : XKF3, Format : Qcccccchhhcc, Columns : TimeUS,IVN,IVE,IVD,IPN,IPE,IPD,IMX,IMY,IMZ,IYAW,IVT}
2017-10-29 12:47:13.71: FMT {Type : 215, Length : 35, Name : XKF4, Format : QcccccfbbHBHHb, Columns : TimeUS,SV,SP,SH,SM,SVT,errRP,OFN,OFE,FS,TS,SS,GPS,PI}
2017-10-29 12:47:13.71: FMT {Type : 216, Length : 40, Name : XKF5, Format : QBhhhcccCCfff, Columns : TimeUS,NI,FIX,FIY,AFI,HAGL,offset,RI,rng,Herr,eAng,eVel,ePos}
2017-10-29 12:47:13.71: FMT {Type : 217, Length : 55, Name : XKF6, Format : QccCfffffffccce, Columns : TimeUS,Roll,Pitch,Yaw,VN,VE,VD,dPD,PN,PE,PD,GX,GY,GZ,OH}
2017-10-29 12:47:13.71: FMT {Type : 218, Length : 34, Name : XKF7, Format : QccccchhhhhhB, Columns : TimeUS,AX,AY,AZ,VWN,VWE,MN,ME,MD,MX,MY,MZ,MI}
2017-10-29 12:47:13.71: FMT {Type : 219, Length : 33, Name : XKF8, Format : Qcccccchhhcc, Columns : TimeUS,IVN,IVE,IVD,IPN,IPE,IPD,IMX,IMY,IMZ,IYAW,IVT}
2017-10-29 12:47:13.71: FMT {Type : 220, Length : 35, Name : XKF9, Format : QcccccfbbHBHHb, Columns : TimeUS,SV,SP,SH,SM,SVT,errRP,OFN,OFE,FS,TS,SS,GPS,PI}
2017-10-29 12:47:13.71: FMT {Type : 221, Length : 36, Name : XKF0, Format : QBccCCcccccccc, Columns : TimeUS,ID,rng,innov,SIV,TR,BPN,BPE,BPD,OFH,OFL,OFN,OFE,OFD}
2017-10-29 12:47:13.71: FMT {Type : 222, Length : 27, Name : XKQ1, Format : Qffff, Columns : TimeUS,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 223, Length : 27, Name : XKQ2, Format : Qffff, Columns : TimeUS,Q1,Q2,Q3,Q4}
2017-10-29 12:47:13.71: FMT {Type : 224, Length : 35, Name : XKFD, Format : Qffffff, Columns : TimeUS,IX,IY,IZ,IVX,IVY,IVZ}
2017-10-29 12:47:13.71: FMT {Type : 225, Length : 59, Name : XKV1, Format : Qffffffffffff, Columns : TimeUS,V00,V01,V02,V03,V04,V05,V06,V07,V08,V09,V10,V11}
2017-10-29 12:47:13.71: FMT {Type : 226, Length : 59, Name : XKV2, Format : Qffffffffffff, Columns : TimeUS,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23}
2017-10-29 12:47:13.71: FMT {Type : 148, Length : 34, Name : TERR, Format : QBLLHffHH, Columns : TimeUS,Status,Lat,Lng,Spacing,TerrH,CHeight,Pending,Loaded}
2017-10-29 12:47:13.71: FMT {Type : 149, Length : 22, Name : UBX1, Format : QBHBBHI, Columns : TimeUS,Instance,noisePerMS,jamInd,aPower,agcCnt,config}
2017-10-29 12:47:13.71: FMT {Type : 150, Length : 16, Name : UBX2, Format : QBbBbB, Columns : TimeUS,Instance,ofsI,magI,ofsQ,magQ}
2017-10-29 12:47:13.71: FMT {Type : 151, Length : 22, Name : UBY1, Format : QBHBBHI, Columns : TimeUS,Instance,noisePerMS,jamInd,aPower,agcCnt,config}
2017-10-29 12:47:13.71: FMT {Type : 152, Length : 16, Name : UBY2, Format : QBbBbB, Columns : TimeUS,Instance,ofsI,magI,ofsQ,magQ}
2017-10-29 12:47:13.71: FMT {Type : 172, Length : 42, Name : GRAW, Format : QIHBBddfBbB, Columns : TimeUS,WkMS,Week,numSV,sv,cpMes,prMes,doMes,mesQI,cno,lli}
2017-10-29 12:47:13.71: FMT {Type : 173, Length : 24, Name : GRXH, Format : QdHbBB, Columns : TimeUS,rcvTime,week,leapS,numMeas,recStat}
2017-10-29 12:47:13.71: FMT {Type : 174, Length : 41, Name : GRXS, Format : QddfBBBHBBBBB, Columns : TimeUS,prMes,cpMes,doMes,gnss,sv,freq,lock,cno,prD,cpD,doD,trk}
2017-10-29 12:47:13.71: FMT {Type : 175, Length : 63, Name : SBFE, Format : QIHBBdddfffff, Columns : TimeUS,TOW,WN,Mode,Err,Lat,Lng,Height,Undul,Vn,Ve,Vu,COG}
2017-10-29 12:47:13.71: FMT {Type : 153, Length : 19, Name : ESC1, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 154, Length : 19, Name : ESC2, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 155, Length : 19, Name : ESC3, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 156, Length : 19, Name : ESC4, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 157, Length : 19, Name : ESC5, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 158, Length : 19, Name : ESC6, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 159, Length : 19, Name : ESC7, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 160, Length : 19, Name : ESC8, Format : Qcccc, Columns : TimeUS,RPM,Volt,Curr,Temp}
2017-10-29 12:47:13.71: FMT {Type : 169, Length : 34, Name : MAG2, Format : QhhhhhhhhhBI, Columns : TimeUS,MagX,MagY,MagZ,OfsX,OfsY,OfsZ,MOfsX,MOfsY,MOfsZ,Health,S}
2017-10-29 12:47:13.71: FMT {Type : 170, Length : 34, Name : MAG3, Format : QhhhhhhhhhBI, Columns : TimeUS,MagX,MagY,MagZ,OfsX,OfsY,OfsZ,MOfsX,MOfsY,MOfsZ,Health,S}
2017-10-29 12:47:13.71: FMT {Type : 176, Length : 31, Name : ACC1, Format : QQfff, Columns : TimeUS,SampleUS,AccX,AccY,AccZ}
2017-10-29 12:47:13.71: FMT {Type : 177, Length : 31, Name : ACC2, Format : QQfff, Columns : TimeUS,SampleUS,AccX,AccY,AccZ}
2017-10-29 12:47:13.71: FMT {Type : 178, Length : 31, Name : ACC3, Format : QQfff, Columns : TimeUS,SampleUS,AccX,AccY,AccZ}
2017-10-29 12:47:13.71: FMT {Type : 179, Length : 31, Name : GYR1, Format : QQfff, Columns : TimeUS,SampleUS,GyrX,GyrY,GyrZ}
2017-10-29 12:47:13.71: FMT {Type : 180, Length : 31, Name : GYR2, Format : QQfff, Columns : TimeUS,SampleUS,GyrX,GyrY,GyrZ}
2017-10-29 12:47:13.71: FMT {Type : 181, Length : 31, Name : GYR3, Format : QQfff, Columns : TimeUS,SampleUS,GyrX,GyrY,GyrZ}
2017-10-29 12:47:13.71: FMT {Type : 183, Length : 35, Name : PIDR, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 184, Length : 35, Name : PIDP, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 185, Length : 35, Name : PIDY, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 186, Length : 35, Name : PIDA, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 187, Length : 35, Name : PIDS, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 188, Length : 56, Name : DSTL, Format : QBfLLeccfeffff, Columns : TimeUS,Stg,THdg,Lat,Lng,Alt,XT,Travel,L1I,Loiter,Des,P,I,D}
2017-10-29 12:47:13.71: FMT {Type : 161, Length : 37, Name : BAR2, Format : QffcfIff, Columns : TimeUS,Alt,Press,Temp,CRt,SMS,Offset,GndTemp}
2017-10-29 12:47:13.71: FMT {Type : 199, Length : 37, Name : BAR3, Format : QffcfIff, Columns : TimeUS,Alt,Press,Temp,CRt,SMS,Offset,GndTemp}
2017-10-29 12:47:13.71: FMT {Type : 189, Length : 35, Name : VIBE, Format : QfffIII, Columns : TimeUS,VibeX,VibeY,VibeZ,Clip0,Clip1,Clip2}
2017-10-29 12:47:13.71: FMT {Type : 190, Length : 47, Name : IMT, Format : Qfffffffff, Columns : TimeUS,DelT,DelvT,DelaT,DelAX,DelAY,DelAZ,DelVX,DelVY,DelVZ}
2017-10-29 12:47:13.71: FMT {Type : 191, Length : 47, Name : IMT2, Format : Qfffffffff, Columns : TimeUS,DelT,DelvT,DelaT,DelAX,DelAY,DelAZ,DelVX,DelVY,DelVZ}
2017-10-29 12:47:13.71: FMT {Type : 192, Length : 47, Name : IMT3, Format : Qfffffffff, Columns : TimeUS,DelT,DelvT,DelaT,DelAX,DelAY,DelAZ,DelVX,DelVY,DelVZ}
2017-10-29 12:47:13.71: FMT {Type : 193, Length : 24, Name : ORGN, Format : QBLLe, Columns : TimeUS,Type,Lat,Lng,Alt}
2017-10-29 12:47:13.71: FMT {Type : 246, Length : 34, Name : DSF, Format : QIBHIIII, Columns : TimeUS,Dp,IErr,Blk,Bytes,FMn,FMx,FAv}
2017-10-29 12:47:13.71: FMT {Type : 194, Length : 19, Name : RPM, Format : Qff, Columns : TimeUS,rpm1,rpm2}
2017-10-29 12:47:13.71: FMT {Type : 237, Length : 47, Name : GMB1, Format : Iffffffffff, Columns : TimeMS,dt,dax,day,daz,dvx,dvy,dvz,jx,jy,jz}
2017-10-29 12:47:13.71: FMT {Type : 238, Length : 44, Name : GMB2, Format : IBfffffffff, Columns : TimeMS,es,ex,ey,ez,rx,ry,rz,tx,ty,tz}
2017-10-29 12:47:13.71: FMT {Type : 239, Length : 13, Name : GMB3, Format : Ihhh, Columns : TimeMS,rl_torque_cmd,el_torque_cmd,az_torque_cmd}
2017-10-29 12:47:13.71: FMT {Type : 240, Length : 59, Name : RATE, Format : Qffffffffffff, Columns : TimeUS,RDes,R,ROut,PDes,P,POut,YDes,Y,YOut,ADes,A,AOut}
2017-10-29 12:47:13.71: FMT {Type : 241, Length : 23, Name : RALY, Format : QBBLLh, Columns : TimeUS,Tot,Seq,Lat,Lng,Alt}
2017-10-29 12:47:13.71: FMT {Type : 242, Length : 43, Name : VISO, Format : Qffffffff, Columns : TimeUS,dt,AngDX,AngDY,AngDZ,PosDX,PosDY,PosDZ,conf}
2017-10-29 12:47:13.71: FMT {Type : 228, Length : 23, Name : SBPH, Format : QIII, Columns : TimeUS,CrcError,LastInject,IARhyp}
2017-10-29 12:47:13.71: FMT {Type : 233, Length : 67, Name : SBRH, Format : QQQQQQQQ, Columns : TimeUS,msg_flag,1,2,3,4,5,6}
2017-10-29 12:47:13.71: FMT {Type : 234, Length : 123, Name : SBRM, Format : QQQQQQQQQQQQQQQ, Columns : TimeUS,msg_flag,1,2,3,4,5,6,7,8,9,10,11,12,13}
2017-10-29 12:47:13.71: FMT {Type : 235, Length : 23, Name : SBRE, Format : QHIiBB, Columns : TimeUS,GWk,GMS,ns_residual,level,quality}
2017-10-29 12:47:13.71: FMT {Type : 2, Length : 31, Name : PM, Format : QHHIIII, Columns : TimeUS,NLon,NLoop,MaxT,MinT,LogDrop,Mem}
2017-10-29 12:47:13.71: FMT {Type : 3, Length : 14, Name : STRT, Format : QBH, Columns : TimeUS,SType,CTot}
2017-10-29 12:47:13.71: FMT {Type : 0, Length : 25, Name : CTUN, Format : Qcccchhh, Columns : TimeUS,NavRoll,Roll,NavPitch,Pitch,ThrOut,RdrOut,ThrDem}
2017-10-29 12:47:13.71: FMT {Type : 1, Length : 33, Name : NTUN, Format : Qfcccfff, Columns : TimeUS,WpDist,TargBrg,NavBrg,AltErr,XT,XTi,ArspdErr}
2017-10-29 12:47:13.71: FMT {Type : 7, Length : 24, Name : SONR, Format : QffBf, Columns : TimeUS,Dist,Volt,Cnt,Corr}
2017-10-29 12:47:13.71: FMT {Type : 8, Length : 14, Name : ARM, Format : QBH, Columns : TimeUS,ArmState,ArmChecks}
2017-10-29 12:47:13.71: FMT {Type : 145, Length : 27, Name : ATRP, Format : QBBcfff, Columns : TimeUS,Type,State,Servo,Demanded,Achieved,P}
2017-10-29 12:47:13.71: FMT {Type : 9, Length : 22, Name : STAT, Format : QBfBBBBBB, Columns : TimeUS,isFlying,isFlyProb,Armed,Safety,Crash,Still,Stage,Hit}
2017-10-29 12:47:13.71: FMT {Type : 11, Length : 51, Name : QTUN, Format : Qffffhhfffff, Columns : TimeUS,AngBst,ThrOut,DAlt,Alt,DCRt,CRt,DVx,DVy,DAx,DAy,TMix}
2017-10-29 12:47:13.71: FMT {Type : 243, Length : 19, Name : AOA, Format : Qff, Columns : TimeUS,AOA,SSA}
2017-10-29 12:47:13.71: FMT {Type : 10, Length : 28, Name : OF, Format : QBffff, Columns : TimeUS,Qual,flowX,flowY,bodyX,bodyY}
2017-10-29 12:47:13.71: FMT {Type : 15, Length : 35, Name : PIQR, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 16, Length : 35, Name : PIQP, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 17, Length : 35, Name : PIQY, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 18, Length : 35, Name : PIQA, Format : Qffffff, Columns : TimeUS,Des,P,I,D,FF,AFF}
2017-10-29 12:47:13.71: FMT {Type : 19, Length : 21, Name : AETR, Format : Qhhhhh, Columns : TimeUS,Ail,Elev,Thr,Rudd,Flap}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718843, Name : FORMAT_VERSION, Value : 13.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718863, Name : SYSID_SW_TYPE, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718883, Name : SYSID_THISMAV, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718903, Name : SYSID_MYGCS, Value : 255.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718925, Name : SERIAL0_BAUD, Value : 115.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81718995, Name : SERIAL0_PROTOCOL, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719029, Name : SERIAL1_PROTOCOL, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719054, Name : SERIAL1_BAUD, Value : 57.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719083, Name : SERIAL2_PROTOCOL, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719110, Name : SERIAL2_BAUD, Value : 57.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719140, Name : SERIAL3_PROTOCOL, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719168, Name : SERIAL3_BAUD, Value : 38.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719200, Name : SERIAL4_PROTOCOL, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719299, Name : SERIAL4_BAUD, Value : 38.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719334, Name : SERIAL5_PROTOCOL, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719386, Name : SERIAL5_BAUD, Value : 921600.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719413, Name : AUTOTUNE_LEVEL, Value : 6.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719434, Name : TELEM_DELAY, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719454, Name : GCS_PID_MASK, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719601, Name : KFF_RDDRMIX, Value : 0.5}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719621, Name : KFF_THR2PTCH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719640, Name : STAB_PITCH_DOWN, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719660, Name : GLIDE_SLOPE_MIN, Value : 15.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719680, Name : GLIDE_SLOPE_THR, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719701, Name : STICK_MIXING, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719721, Name : AUTO_FBW_STEER, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719832, Name : TKOFF_THR_MINSPD, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719851, Name : TKOFF_THR_MINACC, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719872, Name : TKOFF_THR_DELAY, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719893, Name : TKOFF_TDRAG_ELEV, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719913, Name : TKOFF_TDRAG_SPD1, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719932, Name : TKOFF_ROTATE_SPD, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81719953, Name : TKOFF_THR_SLEW, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720018, Name : TKOFF_PLIM_SEC, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720047, Name : TKOFF_FLAP_PCNT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720067, Name : FBWA_TDRAG_CHAN, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720088, Name : LEVEL_ROLL_LIMIT, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720108, Name : USE_REV_THRUST, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720129, Name : NAV_CONTROLLER, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720149, Name : ALT_CTRL_ALG, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720169, Name : ALT_OFFSET, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720189, Name : WP_RADIUS, Value : 90.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720208, Name : WP_MAX_RADIUS, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720300, Name : WP_LOITER_RAD, Value : 60.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720319, Name : RTL_RADIUS, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720340, Name : FENCE_ACTION, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720361, Name : FENCE_TOTAL, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720427, Name : FENCE_CHANNEL, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720446, Name : FENCE_MINALT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720596, Name : FENCE_MAXALT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720616, Name : FENCE_RETALT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720636, Name : FENCE_AUTOENABLE, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720657, Name : FENCE_RET_RALLY, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720678, Name : STALL_PREVENTION, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720698, Name : ARSPD_FBW_MIN, Value : 9.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720717, Name : ARSPD_FBW_MAX, Value : 22.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720738, Name : FBWB_ELEV_REV, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720850, Name : TERRAIN_FOLLOW, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720869, Name : TERRAIN_LOOKAHD, Value : 2000.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720890, Name : FBWB_CLIMB_RATE, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720911, Name : THR_MIN, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720931, Name : THR_MAX, Value : 100.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720952, Name : TKOFF_THR_MAX, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720972, Name : THR_SLEWRATE, Value : 100.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81720993, Name : FLAP_SLEWRATE, Value : 75.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721057, Name : THR_SUPP_MAN, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721086, Name : THR_PASS_STAB, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721106, Name : THR_FAILSAFE, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721126, Name : THR_FS_VALUE, Value : 950.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721147, Name : TRIM_THROTTLE, Value : 45.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721168, Name : THROTTLE_NUDGE, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721188, Name : FS_SHORT_ACTN, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721208, Name : FS_SHORT_TIMEOUT, Value : 1.5}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721300, Name : FS_LONG_ACTN, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721319, Name : FS_LONG_TIMEOUT, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721339, Name : FS_BATT_VOLTAGE, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721359, Name : FS_BATT_MAH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721382, Name : FS_GCS_ENABL, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721403, Name : FLTMODE_CH, Value : 8.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721547, Name : FLTMODE1, Value : 10.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721568, Name : FLTMODE2, Value : 11.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721589, Name : FLTMODE3, Value : 10.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721609, Name : FLTMODE4, Value : 8.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721630, Name : FLTMODE5, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721650, Name : FLTMODE6, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721671, Name : INITIAL_MODE, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721781, Name : LIM_ROLL_CD, Value : 6000.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721801, Name : LIM_PITCH_MAX, Value : 3000.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721821, Name : LIM_PITCH_MIN, Value : -3000.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721841, Name : ACRO_ROLL_RATE, Value : 180.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721860, Name : ACRO_PITCH_RATE, Value : 180.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721881, Name : ACRO_LOCKING, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721901, Name : GROUND_STEER_ALT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721920, Name : GROUND_STEER_DPS, Value : 90.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721941, Name : TRIM_AUTO, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721961, Name : MIXING_GAIN, Value : 0.5}
2017-10-29 12:47:12.86: PARM {TimeUS : 81721981, Name : RUDDER_ONLY, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722001, Name : MIXING_OFFSET, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722029, Name : DSPOILR_RUD_RATE, Value : 100.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722048, Name : SYS_NUM_RESETS, Value : 23.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722068, Name : LOG_BITMASK, Value : 65535.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722155, Name : RST_SWITCH_CH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722245, Name : RST_MISSION_CH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722265, Name : TRIM_ARSPD_CM, Value : 1200.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722285, Name : SCALING_SPEED, Value : 15.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722304, Name : MIN_GNDSPD_CM, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722324, Name : TRIM_PITCH_CD, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722344, Name : ALT_HOLD_RTL, Value : 10000.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722363, Name : ALT_HOLD_FBWCM, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722387, Name : MAG_ENABLE, Value : 1.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722588, Name : FLAP_IN_CHANNEL, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722609, Name : FLAP_1_PERCNT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722629, Name : FLAP_1_SPEED, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722650, Name : FLAP_2_PERCNT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722671, Name : FLAP_2_SPEED, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722692, Name : INVERTEDFLT_CH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722712, Name : HIL_MODE, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722733, Name : HIL_SERVOS, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722843, Name : HIL_ERR_LIMIT, Value : 5.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722864, Name : RTL_AUTOLAND, Value : 2.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722885, Name : CRASH_ACC_THRESH, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722905, Name : CRASH_DETECT, Value : 0.0}
2017-10-29 12:47:12.86: PARM {TimeUS : 81722928, Name : GND_ABS_PRESS, Value : 94144.53125}
2017-10-29 12:47:12.86: FMT {Type : 254, Length : 47, Name : NKT1, Format : QIffffffff, Columns : TimeUS,Cnt,IMUMin,IMUMax,EKFMin,EKFMax,AngMin,AngMax,VelMin,VelM}
2017-10-29 12:47:12.86: FMT {Type : 253, Length : 47, Name : NKT2, Format : QIffffffff, Columns : TimeUS,Cnt,IMUMin,IMUMax,EKFMin,EKFMax,AngMin,AngMax,VelMin,VelM}
2017-10-29 12:47:12.93: IMU {TimeUS : 81794643, GyrX : -0.1165708526968956, GyrY : 0.009646732360124588, GyrZ : -0.0036614425480365753, AccX : 0.41619187593460083, AccY : 0.4691760838031769, AccZ : -9.780994415283203, EG : 0, EA : 0, T : 44.423282623291016, GH : 1, AH : 1, GHz : 7997, AHz : 3998}
2017-10-29 12:47:12.93: IMU2 {TimeUS : 81794643, GyrX : -0.11092303693294525, GyrY : 0.009959599003195763, GyrZ : -0.001431140466593206, AccX : 0.3878509998321533, AccY : 0.5220719575881958, AccZ : -9.676275253295898, EG : 0, EA : 0, T : 39.922950744628906, GH : 1, AH : 1, GHz : 7746, AHz : 3873}
2017-10-29 12:47:12.94: ATT {TimeUS : 81795644, DesRoll : -0.44, Roll : -7.18, DesPitch : -2.38, Pitch : 2.58, DesYaw : 0.0, Yaw : 337.1, ErrRP : 0.1, ErrYaw : 0.0}
2017-10-29 12:47:12.94: PIDR {TimeUS : 81795659, Des : -3.622222423553467, P : -4.2087931632995605, I : 0.0, D : -0.9049264788627625, FF : -0.0, AFF : 0.0}
2017-10-29 12:47:12.94: PIDP {TimeUS : 81795673, Des : -9.483899116516113, P : -5.515493869781494, I : 0.0, D : -2.4356839656829834, FF : -0.0, AFF : 0.0}
2017-10-29 12:47:12.94: PIDY {TimeUS : 81795692, Des : 0.0, P : 0.0, I : 0.0, D : 0.0, FF : 0.0, AFF : 0.0}
2017-10-29 12:47:12.94: PIDS {TimeUS : 81795728, Des : 0.0, P : 0.0, I : 0.0, D : 0.0, FF : 0.0, AFF : 0.0}
2017-10-29 12:47:12.94: NKF1 {TimeUS : 81795742, Roll : -7.18, Pitch : 2.58, Yaw : 337.09000000000003, VN : -0.1471521407365799, VE : -0.02632063254714012, VD : 0.2681138813495636, dPD : 0.0, PN : 0.9315431118011475, PE : -5.7226481437683105, PD : 1.2151875495910645, GX : -0.15, GY : 0.07, GZ : -0.07, OH : 585.6}
2017-10-29 12:47:12.94: NKF2 {TimeUS : 81795742, AZbias : -14, GSX : 0.0, GSY : 0.0, GSZ : 0.0, VWN : 0.0, VWE : 0.0, MN : 254, ME : 53, MD : -547, MX : 0, MY : 0, MZ : 0, MI : 0}
2017-10-29 12:47:12.94: NKF3 {TimeUS : 81795742, IVN : -0.05, IVE : 0.07, IVD : -0.18, IPN : -0.17, IPE : 0.19, IPD : 0.8300000000000001, IMX : 0, IMY : 0, IMZ : 0, IYAW : 0.48, IVT : 0.0}
2017-10-29 12:47:12.94: NKF4 {TimeUS : 81795742, SV : 0.04, SP : 0.02, SH : 0.05, SM : 0.0, SVT : 0.0, errRP : 0.0004897002363577485, OFN : 0, OFE : 0, FS : 0, TS : 16, SS : 9023, GPS : 0, PI : 0}
2017-10-29 12:47:12.94: NKF5 {TimeUS : 81795742, NI : 0, FIX : 0, FIY : 0, AFI : 0, HAGL : 0.06, offset : 1.2, RI : 0.0, rng : 0.0, Herr : 0.5, eAng : 0.00038084021070972085, eVel : 0.0076996986754238605, ePos : 0.012555407360196114}
2017-10-29 12:47:12.94: NKQ1 {TimeUS : 81795742, Q1 : 0.9793059229850769, Q2 : -0.03368415683507919, Q3 : 0.0282882172614336, Q4 : -0.1975475549697876}
2017-10-29 12:47:12.94: NKF6 {TimeUS : 81795742, Roll : -7.390000000000001, Pitch : 2.45, Yaw : 337.97, VN : -0.14771932363510132, VE : 0.010903592221438885, VD : 0.24134519696235657, dPD : 0.0, PN : 0.9318153858184814, PE : -5.69254207611084, PD : 1.167079210281372, GX : -0.11, GY : 0.09, GZ : -0.03, OH : 585.5600000000001}
2017-10-29 12:47:12.94: NKF7 {TimeUS : 81795742, AZbias : -3, GSX : 0.0, GSY : 0.0, GSZ : 0.0, VWN : 0.0, VWE : 0.0, MN : 255, ME : 53, MD : -547, MX : 0, MY : 0, MZ : 0, MI : 0}
2017-10-29 12:47:12.94: NKF8 {TimeUS : 81795742, IVN : -0.05, IVE : 0.11, IVD : -0.2, IPN : -0.17, IPE : 0.2, IPD : 0.79, IMX : 0, IMY : 0, IMZ : 0, IYAW : 0.77, IVT : 0.0}
2017-10-29 12:47:12.94: NKF9 {TimeUS : 81795742, SV : 0.05, SP : 0.02, SH : 0.05, SM : 0.0, SVT : 0.0, errRP : 0.0004956433549523354, OFN : 0, OFE : 0, FS : 0, TS : 16, SS : 9023, GPS : 0, PI : 0}
2017-10-29 12:47:12.94: NKQ2 {TimeUS : 81795742, Q1 : 0.9807466268539429, Q2 : -0.03590918704867363, Q3 : 0.02724980004131794, Q4 : -0.19001054763793945}
2017-10-29 12:47:12.94: AHR2 {TimeUS : 81796314, Roll : -7.36, Pitch : 2.5500000000000003, Yaw : 336.91, Alt : 584.6099853515625, Lat : -35.362628, Lng : 149.1653033, Q1 : 0.9777901768684387, Q2 : -0.05842684954404831, Q3 : 0.034671951085329056, Q4 : -0.1982688158750534}
2017-10-29 12:47:12.94: POS {TimeUS : 81796345, Lat : -35.3626298, Lng : 149.1653055, Alt : 584.3800048828125, RelHomeAlt : -0.2551875710487366, RelOriginAlt : -1.2151875495910645}
2017-10-29 12:47:12.94: AOA {TimeUS : 81796366, AOA : 0.0, SSA : 0.0}
2017-10-29 12:47:12.94: CTUN {TimeUS : 81796390, NavRoll : -0.44, Roll : -7.18, NavPitch : -2.38, Pitch : 2.58, ThrOut : 0, RdrOut : -1971, ThrDem : 0}
2017-10-29 12:47:12.94: NTUN {TimeUS : 81796404, WpDist : 14.151667594909668, TargBrg : 0.0, NavBrg : 0.0, AltErr : 6.67, XT : 0.0, XTi : 0.0, ArspdErr : -0.5819692611694336}
2017-10-29 12:47:12.94: RCIN {TimeUS : 81796423, C1 : 1515, C2 : 1512, C3 : 968, C4 : 1474, C5 : 968, C6 : 968, C7 : 1515, C8 : 1838, C9 : 1515, C10 : 1515, C11 : 1514, C12 : 1514, C13 : 1514, C14 : 1514}
2017-10-29 12:47:12.94: RCOU {TimeUS : 81796497, C1 : 1560, C2 : 1402, C3 : 1100, C4 : 1506, C5 : 1650, C6 : 1579, C7 : 1500, C8 : 1500, C9 : 1500, C10 : 1500, C11 : 1500, C12 : 1500, C13 : 1500, C14 : 1500}
2017-10-29 12:47:12.94: RSSI {TimeUS : 81796520, RXRSSI : 0.4697265625}
2017-10-29 12:47:12.94: AETR {TimeUS : 81796537, Ail : -33, Elev : -8, Thr : 0, Rudd : -1971, Flap : 0}
2017-10-29 12:47:12.94: VIBE {TimeUS : 81796556, VibeX : 0.06547215580940247, VibeY : 0.22843439877033234, VibeZ : 0.13090363144874573, Clip0 : 0, Clip1 : 0, Clip2 : 0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81796662, Name : GND_TEMP, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81796686, Name : GND_ALT_OFFSET, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81796753, Name : GND_PRIMARY, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81796781, Name : GND_EXT_BUS, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81796988, Name : GND_ABS_PRESS2, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797016, Name : GND_ABS_PRESS3, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797053, Name : GPS_TYPE, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797079, Name : GPS_TYPE2, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797105, Name : GPS_NAVFILTER, Value : 8.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797229, Name : GPS_AUTO_SWITCH, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797258, Name : GPS_MIN_DGPS, Value : 100.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797287, Name : GPS_SBAS_MODE, Value : 2.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797318, Name : GPS_MIN_ELEV, Value : -100.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797416, Name : GPS_INJECT_TO, Value : 127.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797445, Name : GPS_SBP_LOGMASK, Value : -256.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797478, Name : GPS_RAW_DATA, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797512, Name : GPS_GNSS_MODE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797547, Name : GPS_SAVE_CFG, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797582, Name : GPS_GNSS_MODE2, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797688, Name : GPS_AUTO_CONFIG, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797723, Name : GPS_RATE_MS, Value : 200.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797756, Name : GPS_RATE_MS2, Value : 200.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797799, Name : GPS_POS1_X, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81797958, Name : GPS_POS1_Y, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798044, Name : GPS_POS1_Z, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798087, Name : GPS_POS2_X, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798216, Name : GPS_POS2_Y, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798250, Name : GPS_POS2_Z, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798285, Name : GPS_DELAY_MS, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798321, Name : GPS_DELAY_MS2, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798363, Name : GPS_BLEND_MASK, Value : 5.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798400, Name : GPS_BLEND_TC, Value : 10.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798435, Name : CAM_TRIGG_TYPE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798461, Name : CAM_DURATION, Value : 10.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798485, Name : CAM_SERVO_ON, Value : 1300.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798510, Name : CAM_SERVO_OFF, Value : 1100.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798536, Name : CAM_TRIGG_DIST, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798565, Name : CAM_RELAY_ON, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798663, Name : CAM_MIN_INTERVAL, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798690, Name : CAM_MAX_ROLL, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798726, Name : CAM_FEEDBACK_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798759, Name : CAM_FEEDBACK_POL, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798794, Name : ARMING_REQUIRE, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798911, Name : ARMING_CHECK, Value : 8191.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798939, Name : ARMING_ACCTHRESH, Value : 0.75}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798968, Name : ARMING_VOLT_MIN, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81798998, Name : ARMING_VOLT2_MIN, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799094, Name : ARMING_RUDDER, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799124, Name : RELAY_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799150, Name : RELAY_PIN2, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799177, Name : RELAY_PIN3, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799205, Name : RELAY_PIN4, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799234, Name : RELAY_DEFAULT, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799351, Name : CHUTE_ENABLED, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799375, Name : CHUTE_CHAN, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799400, Name : RNGFND_TYPE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799426, Name : RNGFND_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799450, Name : RNGFND_SCALING, Value : 3.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799602, Name : RNGFND_OFFSET, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799630, Name : RNGFND_FUNCTION, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799657, Name : RNGFND_MIN_CM, Value : 20.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799684, Name : RNGFND_MAX_CM, Value : 700.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799716, Name : RNGFND_STOP_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799767, Name : RNGFND_SETTLE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799800, Name : RNGFND_RMETRIC, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799830, Name : RNGFND_PWRRNG, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81799998, Name : RNGFND_GNDCLEAR, Value : 10.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800047, Name : RNGFND_ADDR, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800130, Name : RNGFND_POS_X, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800163, Name : RNGFND_POS_Y, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800195, Name : RNGFND_POS_Z, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800232, Name : RNGFND_ORIENT, Value : 25.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800271, Name : RNGFND2_TYPE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800310, Name : RNGFND2_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800345, Name : RNGFND2_SCALING, Value : 3.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800379, Name : RNGFND2_OFFSET, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800491, Name : RNGFND2_FUNCTION, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800528, Name : RNGFND2_MIN_CM, Value : 20.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800565, Name : RNGFND2_MAX_CM, Value : 700.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800609, Name : RNGFND2_STOP_PIN, Value : -1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800816, Name : RNGFND2_SETTLE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800863, Name : RNGFND2_RMETRIC, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81800910, Name : RNGFND2_GNDCLEAR, Value : 10.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801067, Name : RNGFND2_ADDR, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801165, Name : RNGFND2_POS_X, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801206, Name : RNGFND2_POS_Y, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801248, Name : RNGFND2_POS_Z, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801297, Name : RNGFND2_ORIENT, Value : 25.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801331, Name : RNGFND_LANDING, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801356, Name : TERRAIN_ENABLE, Value : 1.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801380, Name : TERRAIN_SPACING, Value : 100.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801443, Name : ADSB_ENABLE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81801591, Name : AVD_ENABLE, Value : 0.0}
2017-10-29 12:47:12.94: PARM {TimeUS : 81803313, Name : Q_ENABLE, Value : 0.0}
2017-10-29 12:47:12.95: IMU {TimeUS : 81814512, GyrX : -0.13836318254470825, GyrY : 0.0018676562467589974, GyrZ : -0.0142067214474082, AccX : 0.34250038862228394, AccY : 0.8393300771713257, AccZ : -9.94543170928955, EG : 0, EA : 0, T : 44.423648834228516, GH : 1, AH : 1, GHz : 7997, AHz : 3998}
2017-10-29 12:47:12.95: IMU2 {TimeUS : 81814512, GyrX : -0.13656744360923767, GyrY : 0.000773540697991848, GyrZ : -0.013492329977452755, AccX : 0.3158155083656311, AccY : 0.8752908706665039, AccZ : -9.836442947387695, EG : 0, EA : 0, T : 39.92375183105469, GH : 1, AH : 1, GHz : 7746, AHz : 3873}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815554, Name : TUNE_PARAM, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815584, Name : TUNE_CHAN, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815617, Name : TUNE_CHAN_MIN, Value : 1000.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815646, Name : TUNE_CHAN_MAX, Value : 2000.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815679, Name : TUNE_SELECTOR, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815709, Name : TUNE_RANGE, Value : 2.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815817, Name : TUNE_MODE_REVERT, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815848, Name : TUNE_ERR_THRESH, Value : 0.15000000596046448}
2017-10-29 12:47:12.96: PARM {TimeUS : 81815980, Name : RLL2SRV_TCONST, Value : 0.44999998807907104}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816003, Name : RLL2SRV_P, Value : 1.600000023841858}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816036, Name : RLL2SRV_D, Value : 0.05988609418272972}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816061, Name : RLL2SRV_I, Value : 0.20000000298023224}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816087, Name : RLL2SRV_RMAX, Value : 75.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816113, Name : RLL2SRV_IMAX, Value : 3000.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816145, Name : RLL2SRV_FF, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816307, Name : PTCH2SRV_TCONST, Value : 0.44999998807907104}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816331, Name : PTCH2SRV_P, Value : 0.8809988498687744}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816355, Name : PTCH2SRV_D, Value : 0.0660749152302742}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816380, Name : PTCH2SRV_I, Value : 0.10000000149011612}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816415, Name : PTCH2SRV_RMAX_UP, Value : 75.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816441, Name : PTCH2SRV_RMAX_DN, Value : 75.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816567, Name : PTCH2SRV_RLL, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816595, Name : PTCH2SRV_IMAX, Value : 3000.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816633, Name : PTCH2SRV_FF, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816665, Name : YAW2SRV_SLIP, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816688, Name : YAW2SRV_INT, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816713, Name : YAW2SRV_DAMP, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816738, Name : YAW2SRV_RLL, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816901, Name : YAW2SRV_IMAX, Value : 1500.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81816928, Name : STEER2SRV_TCONST, Value : 0.75}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817034, Name : STEER2SRV_P, Value : 1.7999999523162842}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817058, Name : STEER2SRV_I, Value : 0.20000000298023224}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817083, Name : STEER2SRV_D, Value : 0.004999999888241291}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817109, Name : STEER2SRV_IMAX, Value : 1500.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817136, Name : STEER2SRV_MINSPD, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817167, Name : STEER2SRV_FF, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817395, Name : STEER2SRV_DRTSPD, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817423, Name : STEER2SRV_DRTFCT, Value : 10.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817453, Name : STEER2SRV_DRTMIN, Value : 4500.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817483, Name : COMPASS_OFS_X, Value : -58.51350402832031}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817604, Name : COMPASS_OFS_Y, Value : 57.09157180786133}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817628, Name : COMPASS_OFS_Z, Value : 90.30577087402344}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817652, Name : COMPASS_DEC, Value : 0.2061450481414795}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817679, Name : COMPASS_LEARN, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817711, Name : COMPASS_USE, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817741, Name : COMPASS_AUTODEC, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817771, Name : COMPASS_MOTCT, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817806, Name : COMPASS_MOT_X, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817834, Name : COMPASS_MOT_Y, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817867, Name : COMPASS_MOT_Z, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81817942, Name : COMPASS_ORIENT, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818060, Name : COMPASS_EXTERNAL, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818096, Name : COMPASS_OFS2_X, Value : -171.87391662597656}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818126, Name : COMPASS_OFS2_Y, Value : 546.2582397460938}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818157, Name : COMPASS_OFS2_Z, Value : -565.5618286132812}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818193, Name : COMPASS_MOT2_X, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818354, Name : COMPASS_MOT2_Y, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818389, Name : COMPASS_MOT2_Z, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818425, Name : COMPASS_PRIMARY, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818464, Name : COMPASS_OFS3_X, Value : -78.1209716796875}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818641, Name : COMPASS_OFS3_Y, Value : 316.3206787109375}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818674, Name : COMPASS_OFS3_Z, Value : -241.25311279296875}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818714, Name : COMPASS_MOT3_X, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818751, Name : COMPASS_MOT3_Y, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818784, Name : COMPASS_MOT3_Z, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818819, Name : COMPASS_DEV_ID, Value : 466441.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818853, Name : COMPASS_DEV_ID2, Value : 460042.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818886, Name : COMPASS_DEV_ID3, Value : 263178.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81818974, Name : COMPASS_USE2, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819016, Name : COMPASS_ORIENT2, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819146, Name : COMPASS_EXTERN2, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819189, Name : COMPASS_USE3, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819233, Name : COMPASS_ORIENT3, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819282, Name : COMPASS_EXTERN3, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819468, Name : COMPASS_DIA_X, Value : 1.0176981687545776}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819507, Name : COMPASS_DIA_Y, Value : 0.9811005592346191}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819546, Name : COMPASS_DIA_Z, Value : 1.139333963394165}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819694, Name : COMPASS_ODI_X, Value : -0.009979741647839546}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819733, Name : COMPASS_ODI_Y, Value : 0.006699814926832914}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819777, Name : COMPASS_ODI_Z, Value : 0.014479503035545349}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819853, Name : COMPASS_DIA2_X, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819894, Name : COMPASS_DIA2_Y, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81819935, Name : COMPASS_DIA2_Z, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820053, Name : COMPASS_ODI2_X, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820167, Name : COMPASS_ODI2_Y, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820208, Name : COMPASS_ODI2_Z, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820264, Name : COMPASS_DIA3_X, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820310, Name : COMPASS_DIA3_Y, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820485, Name : COMPASS_DIA3_Z, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820541, Name : COMPASS_ODI3_X, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820583, Name : COMPASS_ODI3_Y, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820724, Name : COMPASS_ODI3_Z, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820766, Name : COMPASS_CAL_FIT, Value : 16.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820857, Name : COMPASS_OFFS_MAX, Value : 850.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820901, Name : COMPASS_TYPEMASK, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820940, Name : SCHED_DEBUG, Value : 0.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81820963, Name : SCHED_LOOP_RATE, Value : 50.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821053, Name : RCMAP_ROLL, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821079, Name : RCMAP_PITCH, Value : 2.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821106, Name : RCMAP_THROTTLE, Value : 3.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821208, Name : RCMAP_YAW, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821235, Name : SR0_RAW_SENS, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821258, Name : SR0_EXT_STAT, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821282, Name : SR0_RC_CHAN, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821308, Name : SR0_RAW_CTRL, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821338, Name : SR0_POSITION, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821493, Name : SR0_EXTRA1, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821524, Name : SR0_EXTRA2, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821552, Name : SR0_EXTRA3, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821580, Name : SR0_PARAMS, Value : 10.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821609, Name : SR0_ADSB, Value : 5.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821733, Name : SR1_RAW_SENS, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821757, Name : SR1_EXT_STAT, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821781, Name : SR1_RC_CHAN, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821806, Name : SR1_RAW_CTRL, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821835, Name : SR1_POSITION, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821866, Name : SR1_EXTRA1, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821893, Name : SR1_EXTRA2, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821920, Name : SR1_EXTRA3, Value : 4.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821948, Name : SR1_PARAMS, Value : 10.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81821977, Name : SR1_ADSB, Value : 5.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822005, Name : SR2_RAW_SENS, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822093, Name : SR2_EXT_STAT, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822187, Name : SR2_RC_CHAN, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822217, Name : SR2_RAW_CTRL, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822243, Name : SR2_POSITION, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822269, Name : SR2_EXTRA1, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822296, Name : SR2_EXTRA2, Value : 1.0}
2017-10-29 12:47:12.96: PARM {TimeUS : 81822505, Name : SR2_EXTRA3, Value : 1.0}
2017-10-29 12:47:12.99: IMU {TimeUS : 81854801, GyrX : 0.002554166130721569, GyrY : -0.03929126262664795, GyrZ : 0.0009851300856098533, AccX : 0.4403998553752899, AccY : 1.0167560577392578, AccZ : -9.709002494812012, EG : 0, EA : 0, T : 44.423667907714844, GH : 1, AH : 1, GHz : 7997, AHz : 3998}
2017-10-29 12:47:12.99: IMU2 {TimeUS : 81854801, GyrX : 0.000432980596087873, GyrY : -0.03630329295992851, GyrZ : 0.0014690083917230368, AccX : 0.42589250206947327, AccY : 1.1100810766220093, AccZ : -9.582712173461914, EG : 0, EA : 0, T : 39.925132751464844, GH : 1, AH : 1, GHz : 7746, AHz : 3873}
2017-10-29 12:47:13.00: GPS {TimeUS : 81855471, Status : 3, GMS : 6448000, GWk : 1973, NSats : 11, HDop : 0.77, Lat : -35.3626277, Lng : 149.1653034, Alt : 588.82, Spd : 0.20000000298023224, GCrs : 36.869895935058594, VZ : 0.3499999940395355, U : 1}
2017-10-29 12:47:13.00: GPA {TimeUS : 81855471, VDop : 1.22, HAcc : 1.61, VAcc : 2.41, SAcc : 0.51, VV : 1, SMS : 81855, Delta : 211}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856007, Name : SR2_PARAMS, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856055, Name : SR2_ADSB, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856083, Name : SR3_RAW_SENS, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856107, Name : SR3_EXT_STAT, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856131, Name : SR3_RC_CHAN, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856296, Name : SR3_RAW_CTRL, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856322, Name : SR3_POSITION, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856349, Name : SR3_EXTRA1, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856376, Name : SR3_EXTRA2, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856416, Name : SR3_EXTRA3, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856444, Name : SR3_PARAMS, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856516, Name : SR3_ADSB, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856544, Name : INS_PRODUCT_ID, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856575, Name : INS_GYROFFS_X, Value : -0.07990042120218277}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856600, Name : INS_GYROFFS_Y, Value : -0.005997729022055864}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856624, Name : INS_GYROFFS_Z, Value : 0.00634012371301651}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856652, Name : INS_GYR2OFFS_X, Value : 0.0170903280377388}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856753, Name : INS_GYR2OFFS_Y, Value : 0.012941292487084866}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856778, Name : INS_GYR2OFFS_Z, Value : 0.006737963296473026}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856808, Name : INS_GYR3OFFS_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856834, Name : INS_GYR3OFFS_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856860, Name : INS_GYR3OFFS_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81856891, Name : INS_ACCSCAL_X, Value : 0.999653160572052}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857120, Name : INS_ACCSCAL_Y, Value : 0.9025073051452637}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857147, Name : INS_ACCSCAL_Z, Value : 1.0012799501419067}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857178, Name : INS_ACCOFFS_X, Value : -0.03169693425297737}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857206, Name : INS_ACCOFFS_Y, Value : 2.4852089881896973}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857451, Name : INS_ACCOFFS_Z, Value : -0.29318252205848694}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857526, Name : INS_ACC2SCAL_X, Value : 0.9992037415504456}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857555, Name : INS_ACC2SCAL_Y, Value : 1.0004595518112183}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857583, Name : INS_ACC2SCAL_Z, Value : 0.9905006885528564}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857622, Name : INS_ACC2OFFS_X, Value : 0.04508588835597038}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857650, Name : INS_ACC2OFFS_Y, Value : 0.24372582137584686}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857679, Name : INS_ACC2OFFS_Z, Value : 0.07323608547449112}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857715, Name : INS_ACC3SCAL_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857744, Name : INS_ACC3SCAL_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857848, Name : INS_ACC3SCAL_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857884, Name : INS_ACC3OFFS_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857915, Name : INS_ACC3OFFS_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81857945, Name : INS_ACC3OFFS_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858123, Name : INS_GYRO_FILTER, Value : 20.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858163, Name : INS_ACCEL_FILTER, Value : 20.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858200, Name : INS_USE, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858237, Name : INS_USE2, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858275, Name : INS_USE3, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858455, Name : INS_STILL_THRESH, Value : 0.10000000149011612}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858499, Name : INS_GYR_CAL, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858606, Name : INS_TRIM_OPTION, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858652, Name : INS_ACC_BODYFIX, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858698, Name : INS_POS1_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858735, Name : INS_POS1_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858771, Name : INS_POS1_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858818, Name : INS_POS2_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858932, Name : INS_POS2_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81858970, Name : INS_POS2_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859034, Name : INS_POS3_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859071, Name : INS_POS3_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859245, Name : INS_POS3_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859283, Name : INS_GYR_ID, Value : 2164234.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859321, Name : INS_GYR2_ID, Value : 2360330.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859364, Name : INS_GYR3_ID, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859497, Name : INS_ACC_ID, Value : 1246730.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859542, Name : INS_ACC2_ID, Value : 1442826.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859627, Name : INS_ACC3_ID, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859677, Name : INS_FAST_SAMPLE, Value : 3.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859803, Name : INS_NOTCH_ENABLE, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859842, Name : AHRS_GPS_GAIN, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859873, Name : AHRS_GPS_USE, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81859967, Name : AHRS_YAW_P, Value : 0.20000000298023224}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860014, Name : AHRS_RP_P, Value : 0.20000000298023224}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860056, Name : AHRS_WIND_MAX, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860087, Name : AHRS_TRIM_X, Value : 0.04817604646086693}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860246, Name : AHRS_TRIM_Y, Value : -0.0030614794231951237}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860273, Name : AHRS_TRIM_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860304, Name : AHRS_ORIENTATION, Value : 8.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860332, Name : AHRS_COMP_BETA, Value : 0.10000000149011612}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860365, Name : AHRS_GPS_MINSATS, Value : 6.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860402, Name : AHRS_EKF_TYPE, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860571, Name : ARSPD_TYPE, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860642, Name : NAVL1_PERIOD, Value : 20.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860665, Name : NAVL1_DAMPING, Value : 0.75}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860689, Name : NAVL1_XTRACK_I, Value : 0.019999999552965164}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860715, Name : NAVL1_LIM_BANK, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860744, Name : TECS_CLMB_MAX, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860768, Name : TECS_SINK_MIN, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860792, Name : TECS_TIME_CONST, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860818, Name : TECS_THR_DAMP, Value : 0.5}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860843, Name : TECS_INTEG_GAIN, Value : 0.10000000149011612}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860870, Name : TECS_VERT_ACC, Value : 7.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81860971, Name : TECS_HGT_OMEGA, Value : 3.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861062, Name : TECS_SPD_OMEGA, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861095, Name : TECS_RLL2THR, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861256, Name : TECS_SPDWEIGHT, Value : 1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861285, Name : TECS_PTCH_DAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861316, Name : TECS_SINK_MAX, Value : 5.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861347, Name : TECS_LAND_ARSPD, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861378, Name : TECS_LAND_THR, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861506, Name : TECS_LAND_SPDWGT, Value : -1.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861544, Name : TECS_PITCH_MAX, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861584, Name : TECS_PITCH_MIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861622, Name : TECS_LAND_SINK, Value : 0.25}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861708, Name : TECS_LAND_TCONST, Value : 2.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861743, Name : TECS_LAND_DAMP, Value : 0.5}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861791, Name : TECS_LAND_PMAX, Value : 10.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861827, Name : TECS_APPR_SMAX, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861864, Name : TECS_LAND_SRC, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81861976, Name : TECS_LAND_TDAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862018, Name : TECS_LAND_IGAIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862065, Name : TECS_TKOFF_IGAIN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862234, Name : TECS_LAND_PDAMP, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862283, Name : TECS_SYNAIRSPEED, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862325, Name : MNT_DEFLT_MODE, Value : 3.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862352, Name : MNT_RETRACT_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862376, Name : MNT_RETRACT_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862548, Name : MNT_RETRACT_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862576, Name : MNT_NEUTRAL_X, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862601, Name : MNT_NEUTRAL_Y, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862626, Name : MNT_NEUTRAL_Z, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862659, Name : MNT_STAB_ROLL, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862732, Name : MNT_STAB_TILT, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862761, Name : MNT_STAB_PAN, Value : 0.0}
2017-10-29 12:47:13.00: PARM {TimeUS : 81862792, Name : MNT_RC_IN_ROLL, Value : 0.#!/usr/bin/env python


"""
Unit tests for the fgFDM library
"""

from __future__ import print_function
import unittest

from pymavlink.fgFDM import fgFDMError, fgFDMVariable, fgFDMVariableList, fgFDM


class fgFDMErrorTest(unittest.TestCase):
    """
    Class to test fgFDMError
    """
    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(fgFDMErrorTest, self).__init__(*args, **kwargs)
        
    def test_constructor(self):
        ex = fgFDMError("Test Exception {0}".format(1))
        
        assert ex.message == "fgFDMError: Test Exception 1"

class fgFDMVariableTest(unittest.TestCase):
    """
    Class to test fgFDMVariable
    """
    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(fgFDMVariableTest, self).__init__(*args, **kwargs)
        
    def test_constructor(self):
        """Test the constructor"""
        varry = fgFDMVariable(0, 3, 'radians')
        
        assert varry.index == 0
        assert varry.arraylength == 3
        assert varry.units == 'radians'

        
class fgFDMVariableListTest(unittest.TestCase):
    """
    Class to test fgFDMVariableList
    """
    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(fgFDMVariableListTest, self).__init__(*args, **kwargs)
        
    def test_constructor(self):
        """Test the constructor and adding variables"""
        mapping = fgFDMVariableList()
        mapping.add('longitude', units='radians')
        mapping.add('stall_warning')
        mapping.add('rpm', 4)
        
        assert mapping._nextidx == 6
        assert mapping.vars['longitude'].index == 0
        assert mapping.vars['longitude'].units == 'radians'
        assert mapping.vars['rpm'].index == 2
        assert mapping.vars['rpm'].units is None


class fgFDMTest(unittest.TestCase):
    """
    Class to test fgFDM
    """
    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(fgFDMTest, self).__init__(*args, **kwargs)
        
    def test_constructor(self):
        """Test the constructor"""
        fdm = fgFDM()
        
        assert fdm.FG_NET_FDM_VERSION == 24

    def test_getset(self):
        """Test the getting and setting and unit conversion of variables"""
        fdm = fgFDM()
        
        fdm.set('latitude', 67.4, units='degrees')
        fdm.set('longitude', 120.6, units='degrees')
        fdm.set('num_engines', 1)
        fdm.set('vcas', 44, units='mps')
        
        assert fdm.get('latitude', units='degrees') == 67.4
        assert round(fdm.get('vcas', units='knots'), 2) == 85.53

    def test_packparse(self):
        """Test the packing and parsing of an fgFDM packet"""
        fdm = fgFDM()     

        fdm.set('latitude', 67.4, units='degrees')
        fdm.set('longitude', 120.6, units='degrees')
        fdm.set('num_engines', 1)
        fdm.set('vcas', 44, units='mps')

        packedBytes = fdm.pack()
        
        parsedObj = fgFDM()
        parsedObj.parse(packedBytes)
        
        assert parsedObj.get('latitude', units='degrees') == 67.4
        assert round(parsedObj.get('vcas', units='knots'), 2) == 85.53
        
if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #!/usr/bin/env python


"""
Unit tests for the mavexpression library
"""

from __future__ import print_function
import unittest
import random

from pymavlink import mavexpression

class ExpressionTest(unittest.TestCase):

    """
    Class to test evaluate_expression
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        self.varsDict = {}
        self.varsDict['lat'] = 5.67
        self.varsDict['speed'] = 8
        super(ExpressionTest, self).__init__(*args, **kwargs)


    def test_novars(self):
        """Test the evaluate_expression functionality"""
        assert mavexpression.evaluate_expression('1+2', {}) == 3
        assert mavexpression.evaluate_expression('4/0', {}) is None
        assert mavexpression.evaluate_expression('A+4', {}) is None

    def test_vars(self):
        """Test the evaluate_expression functionality with local vars"""
        assert mavexpression.evaluate_expression('lat+10', self.varsDict) == 15.67
        assert mavexpression.evaluate_expression('4.0/speed', self.varsDict) == 0.5
        assert mavexpression.evaluate_expression('speed+lat+wrong', self.varsDict) is None
        
    def test_mavextra(self):
        """Test evaluate_expression using the functions in mavextra.py"""
        assert mavexpression.evaluate_expression('kmh(10)', {}) == 36
        assert mavexpression.evaluate_expression('angle_diff(170, -90)', {}) == -100
        
if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #!/usr/bin/env python


"""
regression tests for mavlogdump.py
"""

from __future__ import absolute_import, print_function
import unittest
import os
import pkg_resources
import sys

class MAVLogDumpTest(unittest.TestCase):

    """
    Class to test mavlogdump
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(MAVLogDumpTest, self).__init__(*args, **kwargs)

    def test_dump_same(self):
        """Test dump of file is what we expect"""
        test_filename = "test.BIN"
        test_filepath = pkg_resources.resource_filename(__name__,
                                                        test_filename)
        dump_filename = "tmp.dump"
        os.system("mavlogdump.py %s >%s" % (test_filepath, dump_filename))
        with open(dump_filename) as f:
            got = f.read()

        possibles = ["test.BIN.py3.dumped",
                     "test.BIN.dumped"]
        success = False
        for expected in possibles:
            expected_filepath = pkg_resources.resource_filename(__name__,
                                                                expected)
            with open(expected_filepath) as e:
                expected = e.read()

            if expected == got:
                success = True

        assert True

if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #!/usr/bin/env python


"""
Unit tests for the mavparm library
"""

from __future__ import print_function
import unittest
import os

from pymavlink import mavparm

class MAVParmDictTest(unittest.TestCase):

    """
    Class to test MAVParmDict
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        self.parms = mavparm.MAVParmDict()
        self.parms['AFS_ACTION'] = 42
        self.parms['PARAM1'] = 34.45
        self.parms['PARAM2'] = 0
        self.parms['PARAM3'] = -13.4
        super(MAVParmDictTest, self).__init__(*args, **kwargs)


    def test_dict(self):
        """Test simple dict operations"""
        self.parms['AFS_ACTION'] = 34
        
        assert self.parms['AFS_ACTION'] == 34
        assert self.parms['PARAM1'] == 34.45

    def test_saveload(self):
        """Test the saving and loading to file"""
        self.parms.save('prms.txt')
        assert os.path.isfile('prms.txt')
        
        newparms = mavparm.MAVParmDict()
        newparms.load('prms.txt')
        os.remove('prms.txt')
        
        assert newparms['AFS_ACTION'] == self.parms['AFS_ACTION']
        assert newparms['PARAM3'] == self.parms['PARAM3']
        
        
        
    def test_showdiff(self):
        """Test show and diff functions"""
        self.parms.save('prms.txt')
        
        self.parms.show()
        
        self.parms.diff('prms.txt')
        
if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #!/usr/bin/env python
"""
Module to test MAVXML
"""

from __future__ import print_function
import unittest
import pkg_resources

from pymavlink.generator.mavparse import MAVXML
from pymavlink.generator.mavparse import MAVParseError

class MAVXMLTest(unittest.TestCase):
    """
    Class to test MAVXML
    """

    def test_fields_number(self):
        """Test that a message can have at most 64 fields"""
        test_filename = "64-fields.xml"
        test_filepath = pkg_resources.resource_filename(__name__,
                                                        test_filename)
        xml = MAVXML(test_filepath)
        count = len(xml.message[0].fields)
        self.assertEqual(count, 64)

        test_filename = "65-fields.xml"
        test_filepath = pkg_resources.resource_filename(__name__,
                                                        test_filename)
        with self.assertRaises(MAVParseError):
            _ = MAVXML(test_filepath)


    def test_wire_protocol_version(self):
        """Test that an unknown MAVLink wire protocol version raises an exception"""
        with self.assertRaises(MAVParseError):
            _ = MAVXML(filename="", wire_protocol_version=42)


if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #!/usr/bin/env python


"""
Unit tests for the quaternion library
"""

from __future__ import absolute_import, division, print_function
import unittest
import numpy as np
from pymavlink.quaternion import QuaternionBase, Quaternion
from pymavlink.rotmat import Vector3, Matrix3

__author__ = "Thomas Gubler"
__copyright__ = "Copyright (C) 2014 Thomas Gubler"
__license__ = "GNU Lesser General Public License v3"
__email__ = "thomasgubler@gmail.com"


class QuaternionBaseTest(unittest.TestCase):

    """
    Class to test QuaternionBase
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(QuaternionBaseTest, self).__init__(*args, **kwargs)
        self.quaternions = self._all_quaternions()

    def test_constructor(self):
        """Test the constructor functionality"""
        # Test the identity case
        q = [1, 0, 0, 0]
        euler = [0, 0, 0]
        dcm = np.eye(3)
        self._helper_test_constructor(q, euler, dcm)

        # test a case with rotations around all euler angles
        q = [0.707106781186547, 0, 0.707106781186547, 0]
        euler = [np.radians(90), np.radians(90), np.radians(90)]
        dcm = [[0, 0, 1],
               [0, 1, 0],
               [-1, 0, 0]]
        # test a case with rotations around all angles (values from matlab)
        q = [0.774519052838329, 0.158493649053890, 0.591506350946110,
             0.158493649053890]
        euler = [np.radians(60), np.radians(60), np.radians(60)]
        dcm = [[0.25, -0.058012701892219, 0.966506350946110],
               [0.433012701892219, 0.899519052838329, -0.058012701892219],
               [-0.866025403784439, 0.433012701892219, 0.25]]
        self._helper_test_constructor(q, euler, dcm)

        # test another case (values from matlab)
        q = [0.754971823897152, 0.102564313848771, -0.324261369073765,
             -0.560671625082406]
        euler = [np.radians(34), np.radians(-22), np.radians(-80)]
        dcm = [[0.161003786707723, 0.780067269138261, -0.604626195500121],
               [-0.913097848445116, 0.350255780704370, 0.208741963313735],
               [0.374606593415912, 0.518474631686401, 0.768670252102276]]
        self._helper_test_constructor(q, euler, dcm)

    def _helper_test_constructor(self, q, euler, dcm):
        """
        Helper function for constructor test

        Calls constructor for the quaternion from q euler and dcm and checks
        if the resulting conversions are equivalent to the arguments.
        The test for the euler angles is weak as the solution is not unique

        :param q: quaternion 4x1, [w, x, y, z]
        :param euler: [roll, pitch, yaw], needs to be equivalent to q
        :param q: dcm 3x3, needs to be equivalent to q
        """
        # construct q from a QuaternionBase
        quaternion_instance = QuaternionBase(q)
        q_test = QuaternionBase(quaternion_instance)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = QuaternionBase(quaternion_instance)
        np.testing.assert_almost_equal(q_test.dcm, dcm)
        q_test = QuaternionBase(quaternion_instance)
        q_euler = QuaternionBase(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # construct q from a quaternion
        q_test = QuaternionBase(q)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = QuaternionBase(q)
        np.testing.assert_almost_equal(q_test.dcm, dcm)
        q_test = QuaternionBase(q)
        q_euler = QuaternionBase(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # construct q from a euler angles
        q_test = QuaternionBase(euler)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = QuaternionBase(euler)
        np.testing.assert_almost_equal(q_test.dcm, dcm)
        q_test = QuaternionBase(euler)
        q_euler = QuaternionBase(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # construct q from dcm
        q_test = QuaternionBase(dcm)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = QuaternionBase(dcm)
        np.testing.assert_almost_equal(q_test.dcm, dcm)
        q_test = QuaternionBase(dcm)
        q_euler = QuaternionBase(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

    def test_norm(self):
        # """Tests the norm functions"""
        qa = [1, 2, 3, 4]
        q = QuaternionBase(qa)
        n = np.sqrt(np.dot(qa, qa))
        qan = qa / n

        self.assertAlmostEqual(n, QuaternionBase.norm_array(qa))
        np.testing.assert_almost_equal(qan, QuaternionBase.normalize_array(qa))
        np.testing.assert_almost_equal(n, q.norm)
        q.normalize()
        np.testing.assert_almost_equal(qan, q.q)
        self.assertAlmostEqual(1, q.norm)

    def _all_angles(self, step=np.radians(45)):
        """
        Creates a list of all euler angles

        :param step: stepsixe in radians
        :returns: euler angles [[phi, thea, psi], [phi, theta, psi], ...]
        """
        e = 0.5
        r_phi = np.arange(-np.pi + e, np.pi - e, step)
        r_theta = np.arange(-np.pi/2 + e, np.pi/2 - e, step)
        r_psi = np.arange(-np.pi + e, np.pi - e, step)
        return [[phi, theta, psi] for phi in r_phi for theta in r_theta
                for psi in r_psi]

    def _all_quaternions(self):
        """Generate quaternions from all euler angles"""
        return [QuaternionBase(e) for e in self._all_angles()]

    def test_conversion(self):
        """
        Tests forward and backward conversions
        """
        for q in self.quaternions:
            # quaternion -> euler -> quaternion
            q0 = q
            e = QuaternionBase(q.q).euler
            q1 = QuaternionBase(e)
            assert q0.close(q1)

            # quaternion -> dcm -> quaternion
            q0 = q
            dcm = QuaternionBase(q.q).dcm
            q1 = QuaternionBase(dcm)
            assert q0.close(q1)

    def test_inversed(self):
        """Test inverse"""
        for q in self.quaternions:
            q_inv = q.inversed
            q_inv_inv = q_inv.inversed
            assert q.close(q_inv_inv)

    def test_mul(self):
        """Test multiplication"""
        for q in self.quaternions:
            for p in self.quaternions:
                assert q.close(p * p.inversed * q)
                r = p * q
                r_dcm = np.dot(p.dcm, q.dcm)
                np.testing.assert_almost_equal(r_dcm, r.dcm)

    def test_div(self):
        """Test division"""
        for q in self.quaternions:
            for p in self.quaternions:
                mul = q * p.inversed
                div = q / p
                assert mul.close(div)

    def test_transform(self):
        """Test transform"""
        for q in self.quaternions:
            q_inv = q.inversed
            v = np.array([1, 2, 3])
            v1 = q.transform(v)
            v1_dcm = np.dot(q.dcm, v)
            np.testing.assert_almost_equal(v1, v1_dcm)
            # test versus slower solution using multiplication
            v1_mul = q * QuaternionBase(np.hstack([0, v])) * q.inversed
            np.testing.assert_almost_equal(v1, v1_mul[1:4])
            v2 = q_inv.transform(v1)
            np.testing.assert_almost_equal(v, v2)


class QuaternionTest(QuaternionBaseTest):
    """
    Class to test Quaternion
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(QuaternionTest, self).__init__(*args, **kwargs)
        self.quaternions = self._all_quaternions()

    def _all_quaternions(self):
        """Generate quaternions from all euler angles"""
        return [Quaternion(e) for e in self._all_angles()]

    def test_constructor(self):
        """Test the constructor functionality"""
        # Test the identity case
        q = [1, 0, 0, 0]
        euler = [0, 0, 0]
        dcm = Matrix3()
        self._helper_test_constructor(q, euler, dcm)

        # test a case with rotations around all angles (values from matlab)
        q = [0.774519052838329, 0.158493649053890, 0.591506350946110,
             0.158493649053890]
        euler = [np.radians(60), np.radians(60), np.radians(60)]
        dcm = Matrix3(Vector3(0.25, -0.058012701892219, 0.966506350946110),
                      Vector3(0.433012701892219, 0.899519052838329,
                              -0.058012701892219),
                      Vector3(-0.866025403784439, 0.433012701892219, 0.25))

        self._helper_test_constructor(q, euler, dcm)

    def _helper_test_constructor(self, q, euler, dcm):
        """
        Helper function for constructor test

        Calls constructor for the quaternion from q euler and dcm and checks
        if the resulting conversions are equivalent to the arguments.
        The test for the euler angles is weak as the solution is not unique

        :param q: quaternion 4x1, [w, x, y, z]
        :param euler: Vector3(roll, pitch, yaw), needs to be equivalent to q
        :param q: Matrix3, needs to be equivalent to q
        """
        # construct q from a Quaternion
        quaternion_instance = Quaternion(q)
        q_test = Quaternion(quaternion_instance)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = Quaternion(quaternion_instance)
        assert q_test.dcm.close(dcm)
        q_test = Quaternion(quaternion_instance)
        q_euler = Quaternion(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # construct q from a QuaternionBase
        quaternion_instance = QuaternionBase(q)
        q_test = Quaternion(quaternion_instance)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = Quaternion(quaternion_instance)
        assert q_test.dcm.close(dcm)
        q_test = Quaternion(quaternion_instance)
        q_euler = Quaternion(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # construct q from a quaternion
        q_test = Quaternion(q)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = Quaternion(q)
        assert q_test.dcm.close(dcm)
        q_test = Quaternion(q)
        q_euler = Quaternion(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # # construct q from a euler angles
        q_test = Quaternion(euler)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = Quaternion(euler)
        assert q_test.dcm.close(dcm)
        q_test = Quaternion(euler)
        q_euler = Quaternion(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

        # # construct q from dcm (Matrix3 instance)
        q_test = Quaternion(dcm)
        np.testing.assert_almost_equal(q_test.q, q)
        q_test = Quaternion(dcm)
        assert q_test.dcm.close(dcm)
        q_test = Quaternion(dcm)
        q_euler = Quaternion(q_test.euler)
        assert(np.allclose(q_test.euler, euler) or
               np.allclose(q_test.q, q_euler.q))

    def test_conversion(self):
        """
        Tests forward and backward conversions
        """
        for q in self.quaternions:
            # quaternion -> euler -> quaternion
            q0 = q
            e = Quaternion(q.q).euler
            q1 = Quaternion(e)
            assert q0.close(q1)

            # quaternion -> dcm (Matrix3) -> quaternion
            q0 = q
            dcm = Quaternion(q.q).dcm
            q1 = Quaternion(dcm)
            assert q0.close(q1)

    def test_transform(self):
        """Test transform"""
        for q in self.quaternions:
            q_inv = q.inversed
            v = Vector3(1, 2, 3)
            v1 = q.transform(v)
            v1_dcm = q.dcm * v
            assert v1.close(v1_dcm)
            v2 = q_inv.transform(v1)
            assert v.close(v2)

    def test_mul(self):
        """Test multiplication"""
        for q in self.quaternions:
            for p in self.quaternions:
                assert q.close(p * p.inversed * q)
                r = p * q
                r_dcm = p.dcm * q.dcm
                assert r_dcm.close(r.dcm)


if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #!/usr/bin/env python


"""
Unit tests for the rotmat library
"""

from __future__ import absolute_import, print_function
from math import radians, degrees
import unittest
import random
import numpy as np

from pymavlink.rotmat import Vector3, Matrix3, Plane, Line

class VectorTest(unittest.TestCase):

    """
    Class to test Vector3
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(VectorTest, self).__init__(*args, **kwargs)


    def test_constructor(self):
        """Test the constructor functionality"""
        v1 = Vector3(1, 0.2, -3)
        v2 = Vector3([1, 0.2, -3])
        v3 = Vector3([1, 0.3, -3])

        assert v1 == v2
        assert v1 != v3
        assert str(v1) == "Vector3(1.00, 0.20, -3.00)"


    def test_maths(self):
        """Test simple maths"""
        v1 = Vector3(1, 2, -3)
        v2 = Vector3(1, 3, 3)

        assert v1 + v2 == Vector3(2, 5, 0)
        assert v1 - v2 == Vector3(0, -1, -6)
        assert (v1 * 3) == Vector3(3, 6, -9)
        assert v1 * v2 == -2
        assert v2 / 2.0 == Vector3(0.5, 1.5, 1.5)
        assert v2 // 2.0 == Vector3(0, 1, 1)
        assert v2 / 2.1 == Vector3(0.47619047619047616, 1.4285714285714286, 1.4285714285714286)
        assert v2 // 2.1 == Vector3(0.0, 1.0, 1.0)

        assert v1 % v2 == Vector3(15.00, -6.00, 1.00)
        np.testing.assert_almost_equal(v2.length(), 4.358898943540674)
        assert v2.normalized().close(Vector3(0.23, 0.69, 0.69), tol=1e-2)
        np.testing.assert_almost_equal(v1.angle(v2), 1.693733631245806)


class MatrixTest(unittest.TestCase):

    """
    Class to test Matrix3
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(MatrixTest, self).__init__(*args, **kwargs)

    def test_constructor(self):
        """Test the constructor functionality"""
        m1 = Matrix3(Vector3(1, 0, 0), Vector3(1, 5, 0), Vector3(1, 0, -7))
        m2 = Matrix3()

        assert str(m1) == 'Matrix3((1.00, 0.00, 0.00), (1.00, 5.00, 0.00), (1.00, 0.00, -7.00))'
        assert str(m2) == 'Matrix3((1.00, 0.00, 0.00), (0.00, 1.00, 0.00), (0.00, 0.00, 1.00))'

    def test_maths(self):
        m1 = Matrix3(Vector3(1, 0, 0), Vector3(1, 5, 0), Vector3(1, 0, -7))
        m2 = Matrix3()

        assert m1 + m2 == Matrix3(Vector3(2, 0, 0), Vector3(1, 6, 0), Vector3(1, 0, -6))
        assert m1 - m2 == Matrix3(Vector3(0, 0, 0), Vector3(1, 4, 0), Vector3(1, 0, -8))
        assert m1 * 3 == Matrix3(Vector3(3, 0, 0), Vector3(3, 15, 0), Vector3(3, 0, -21))
        assert m1 * m1 == Matrix3(Vector3(1, 0, 0), Vector3(6, 25, 0), Vector3(-6, 0, 49))
        assert m1 / 2.0 == Matrix3(Vector3(0.5, 0, 0), Vector3(0.5, 2.5, 0), Vector3(0.5, 0, -3.5))
        assert m1 / 0.5 == Matrix3(Vector3(2, 0, 0), Vector3(2, 10, 0), Vector3(2, 0, -14))
        assert m1.transposed() == Matrix3(Vector3(1, 1, 1), Vector3(0, 5, 0), Vector3(0, 0, -7))

    def test_euler(self):
        '''check that from_euler() and to_euler() are consistent'''
        m = Matrix3()
        for r in range(-179, 179, 10):
            for p in range(-89, 89, 10):
                for y in range(-179, 179, 10):
                    m.from_euler(radians(r), radians(p), radians(y))
                    (r2, p2, y2) = m.to_euler()
                    v1 = Vector3(r, p, y)
                    v2 = Vector3(degrees(r2), degrees(p2), degrees(y2))
                    diff = v1 - v2
                    assert diff.length() < 1.0e-12
                    # construct the rotation using 321 ordering
                    m2 = Matrix3()
                    m2.rotate_yaw(radians(y))
                    m2.rotate_pitch(radians(p))
                    m2.rotate_roll(radians(r))
                    (r2, p2, y2) = m2.to_euler()
                    v2 = Vector3(degrees(r2), degrees(p2), degrees(y2))
                    diff = v1 - v2
                    assert diff.length() < 1.0e-12
        # test rotate_321()
        (r1,p1,y1) = radians(17),radians(-35),radians(126)
        (r2,p2,y2) = radians(-39),radians(63),radians(-18)
        m.from_euler(r1,p1,y1)
        m2 = m.copy()
        m2.rotate_yaw(y2)
        m2.rotate_pitch(p2)
        m2.rotate_roll(r2)
        (r3,p3,y3) = m2.to_euler()
        v1 = Vector3(degrees(r3),degrees(p3),degrees(y3))
        m3 = m.copy()
        m3.rotate_321(r2,p2,y2)
        (r3,p3,y3) = m3.to_euler()
        v2 = Vector3(degrees(r3),degrees(p3),degrees(y3))
        diff = v1 - v2
        assert diff.length() < 1.0e-12


    def test_euler312(self):
        '''check that from_euler312() and to_euler312() are consistent'''
        m = Matrix3()
        for r in range(-89, 89, 10):
            for p in range(-179, 179, 10):
                for y in range(-179, 179, 10):
                    m.from_euler312(radians(r), radians(p), radians(y))
                    (r2, p2, y2) = m.to_euler312()
                    v1 = Vector3(r, p, y)
                    v2 = Vector3(degrees(r2), degrees(p2), degrees(y2))
                    diff = v1 - v2
                    assert diff.length() < 1.0e-12
                    # construct the rotation using 312 ordering
                    m2 = Matrix3()
                    m2.identity()
                    m2.rotate_yaw(radians(y))
                    m2.rotate_roll(radians(r))
                    m2.rotate_pitch(radians(p))
                    (r2, p2, y2) = m2.to_euler312()
                    v2 = Vector3(degrees(r2), degrees(p2), degrees(y2))
                    diff = v1 - v2
                    assert diff.length() < 1.0e-12
        # test rotate_312()
        (r1,p1,y1) = radians(17),radians(-35),radians(126)
        (r2,p2,y2) = radians(-39),radians(63),radians(-18)
        m.from_euler312(r1,p1,y1)
        m2 = m.copy()
        m2.rotate_yaw(y2)
        m2.rotate_roll(r2)
        m2.rotate_pitch(p2)
        (r3,p3,y3) = m2.to_euler312()
        v1 = Vector3(degrees(r3),degrees(p3),degrees(y3))
        m3 = m.copy()
        m3.rotate_312(r2,p2,y2)
        (r3,p3,y3) = m3.to_euler312()
        v2 = Vector3(degrees(r3),degrees(p3),degrees(y3))
        diff = v1 - v2
        assert diff.length() < 1.0e-12

    def test_matrixops(self):
        m1 = Matrix3(Vector3(1, 0, 0), Vector3(1, 5, 0), Vector3(1, 0, -7))

        m1.normalize()
        #print(m1)
        assert m1.close(Matrix3(Vector3(0.2, -0.98, 0), Vector3(0.1, 1, 0), Vector3(0, 0, 1)), tol=1e-2)
        np.testing.assert_almost_equal(m1.trace(), 2.19115332535)

        m1.rotate(Vector3(0.2,-0.98,0))
        assert m1.close(Matrix3(Vector3(0.2,-0.98,0), Vector3(0.1,1,-0.3), Vector3(0.98,0.2,1)), tol=1e-2)

    def test_axisangle(self):
        axis = Vector3(0, 1, 0)
        angle = radians(45)

        m1 = Matrix3()
        m1.from_axis_angle(axis, angle)
        #print(m1)
        assert m1.close(Matrix3(Vector3(0.71, 0.00, 0.71),
                                         Vector3(0.00, 1.00, 0.00),
                                         Vector3(-0.71, 0.00, 0.71)), tol=1e-2)

    def test_two_vectors(self):
        '''test the from_two_vectors() method'''
        for i in range(100):
            v1 = Vector3(1, 0.2, -3)
            v2 = Vector3(random.uniform(-5, 5), random.uniform(-5, 5), random.uniform(-5, 5))
            m = Matrix3()
            m.from_two_vectors(v1, v2)
            v3 = m * v1
            diff = v3.normalized() - v2.normalized()
            (r, p, y) = m.to_euler()
            assert diff.length() < 0.001


class LinePlaneTest(unittest.TestCase):

    """
    Class to test Line and Plane classes
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(LinePlaneTest, self).__init__(*args, **kwargs)

    def test_plane(self):
        '''testing line/plane intersection'''
        plane = Plane(Vector3(0, 0, 0), Vector3(0, 0, 1))
        line = Line(Vector3(0, 0, 100), Vector3(10, 10, -90))
        p = line.plane_intersection(plane)
        assert p.close(Vector3(11.11, 11.11, 0.00), tol=1e-2)


if __name__ == '__main__':
    unittest.main()
   #!/usr/bin/python


"""
test for trimming under Python 3
"""

from __future__ import absolute_import, print_function
import unittest
import os
import pkg_resources
import sys
from pymavlink import mavutil

class PayLoadTrimZeros(unittest.TestCase):
    '''Trivial test for trimming zeros from end of messages'''

    def test_dump_length(self):
        mavutil.mavlink.WIRE_PROTOCOL_VERSION = 2
        mav = mavutil.mavudp(":12345")

        ts = [ ((1, 1), 14),
              ((1, 0), 13),
              ((0, 0), 13)
              ]
        for t in ts:
            ((sysid, compid), result) = t
            m = mavutil.mavlink.MAVLink_param_request_list_message(sysid, compid)
            packed = m.pack(mav.mav)
            print("(%u/%u) should be %u" % (sysid,compid, result))
            self.assertEqual(len(packed), result)

if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #!/usr/bin/env python

"""
regression tests for mavwp.py
"""

from __future__ import absolute_import, print_function
import unittest
import os
import pkg_resources
import sys

os.environ["MAVLINK20"] = "1"

from pymavlink import mavwp
from pymavlink import mavutil

class MAVWPTest(unittest.TestCase):

    """
    Class to test mavwp
    """

    def __init__(self, *args, **kwargs):
        """Constructor, set up some data that is reused in many tests"""
        super(MAVWPTest, self).__init__(*args, **kwargs)

    def makewp(self, seq):
        return mavutil.mavlink.MAVLink_mission_item_int_message(
            1, # wp.target_system,
            1, # wp.target_component,
            0, # wp.seq,
            0, # wp.frame,
            0, # wp.command,
            0, # wp.current,
            1, # wp.autocontinue,
            0, # wp.param1,
            0, # wp.param2,
            0, # wp.param3,
            0, # wp.param4,
            0, # int(wp.x*1.0e7),
            0, # int(wp.y*1.0e7),
            seq, # wp.z
        )

    def make_wps(self):
        # create waypoints
        count = 4
        waypoints = []
        for i in range(count):
            waypoints.append(self.makewp(i))

        return waypoints

    def test_add_remove(self):
        """Test we can add/remove waypoints to/from mavwp"""
        loader = mavwp.MAVWPLoader()
        self.assertEqual(loader.mav_mission_type(),
                         mavutil.mavlink.MAV_MISSION_TYPE_MISSION)

        waypoints = self.make_wps()

        # make sure basic addition works
        for i in range(len(waypoints)):
            self.assertEqual(loader.count(), i)
            loader.add(waypoints[i])
            self.assertEqual(loader.count(), i+1)

        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(2).seq, 2)
        self.assertEqual(loader.wp(0).z, 0)
        self.assertEqual(loader.wp(1).z, 1)
        self.assertEqual(loader.wp(2).z, 2)
        # short test for the new item() method:
        self.assertEqual(loader.item(0).z, 0)
        self.assertEqual(loader.item(1).z, 1)
        self.assertEqual(loader.item(2).z, 2)


        # remove a middle one, make sure things get renumbered
        loader.remove(waypoints[0])
        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(2).seq, 2)
        self.assertEqual(loader.wp(0).z, 1)
        self.assertEqual(loader.wp(1).z, 2)
        self.assertEqual(loader.wp(2).z, 3)

        loader.clear()
        self.assertEqual(loader.count(), 0)

    def test_insert(self):
        """Test we can insert waypoints into mavwp"""
        loader = mavwp.MAVWPLoader()
        waypoints = self.make_wps()

        loader.add(waypoints[0])
        loader.add(waypoints[2])
        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(0).z, 0)
        self.assertEqual(loader.wp(1).z, 2)
        loader.insert(1, waypoints[3])
        self.assertEqual(loader.count(), 3)
        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(2).seq, 2)
        self.assertEqual(loader.wp(0).z, 0)
        self.assertEqual(loader.wp(1).z, 3)
        self.assertEqual(loader.wp(2).z, 2)

    def test_set(self):
        """Test we set waypoints in mavwp"""
        loader = mavwp.MAVWPLoader()
        waypoints = self.make_wps()

        loader.add(waypoints[0])
        loader.add(waypoints[2])
        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(0).z, 0)
        self.assertEqual(loader.wp(1).z, 2)
        loader.set(waypoints[3], 1)
        self.assertEqual(loader.count(), 2)
        self.assertEqual(loader.wp(0).seq, 0)
        self.assertEqual(loader.wp(1).seq, 1)
        self.assertEqual(loader.wp(0).z, 0)
        self.assertEqual(loader.wp(1).z, 3)

        # setting at the end of the list extends the list:
        loader.set(waypoints[1], 2)

    def test_add_latlonalt(self):
        '''test add_latlonalt method'''
        loader = mavwp.MAVWPLoader()
        waypoints = self.make_wps()

        loader.add(waypoints[0])
        loader.add(waypoints[2])

        loader.add_latlonalt(5, 6, 7, terrain_alt=True)
        loader.add_latlonalt(10, 11, 12, terrain_alt=False)

        wp1 = loader.wp(2)
        self.assertEqual(wp1.x, 5)
        self.assertEqual(wp1.y, 6)
        self.assertEqual(wp1.z, 7)
        self.assertEqual(wp1.frame, mavutil.mavlink.MAV_FRAME_GLOBAL_TERRAIN_ALT)

        wp1 = loader.wp(3)
        self.assertEqual(wp1.x, 10)
        self.assertEqual(wp1.y, 11)
        self.assertEqual(wp1.z, 12)
        self.assertEqual(wp1.frame, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT)

    def test_save(self):
        '''test load/save in default format'''
        loader = mavwp.MAVWPLoader()
        waypoints = self.make_wps()
        for wp in waypoints:
            loader.add(wp)

        outfile = "test_wp-wp.txt"
        loader.save(outfile)

        loader2 = mavwp.MAVWPLoader()
        loader2.load(outfile)

        outfile2 = "test_wp-wp2.txt"
        loader.save(outfile2)

        self.assertEqual(loader.count(), loader2.count())

        for i in range(loader.count()):
            self.assertEqual(loader.wp(i).z, loader2.wp(i).z)

    def test_wp_is_loiter(self):
        '''test is_loiter method'''
        loader = mavwp.MAVWPLoader()

        wp = self.makewp(1)
        wp.command = mavutil.mavlink.MAV_CMD_NAV_LOITER_TURNS
        loader.add(wp)

        wp = self.makewp(2)
        wp.command = mavutil.mavlink.MAV_CMD_NAV_WAYPOINT
        loader.add(wp)

        wp = self.makewp(2)
        wp.command = mavutil.mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH
        loader.add(wp)

        self.assertTrue(loader.wp_is_loiter(0))
        self.assertFalse(loader.wp_is_loiter(1))
        self.assertFalse(loader.wp_is_loiter(2))

        assert True

    def test_is_location_command(self):
        loader = mavwp.MAVWPLoader()
        self.assertFalse(loader.is_location_command(mavutil.mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH))
        self.assertTrue(loader.is_location_command(mavutil.mavlink.MAV_CMD_NAV_WAYPOINT))
        self.assertTrue(loader.is_location_command(mavutil.mavlink.MAV_CMD_NAV_LOITER_TURNS))

class RallyTest(unittest.TestCase):
    '''tests functions related to loading waypoints and transfering them
    via the mission-item-protocol'''
    def test_rally_load(self):
        '''test loading rally points from old RALLY style file'''
        loader = mavwp.MissionItemProtocol_Rally()
        self.assertEqual(loader.mav_mission_type(),
                         mavutil.mavlink.MAV_MISSION_TYPE_RALLY)
        self.assertTrue(loader.is_location_command(mavutil.mavlink.MAV_CMD_NAV_RALLY_POINT))

        # test loading a QGC WPL 110 file:
        rally_filepath = pkg_resources.resource_filename(__name__, "rally-110.txt")
        loader.load(rally_filepath)
        self.assertEqual(loader.count(), 2)
        self.assertEqual(loader.wp(0).command, mavutil.mavlink.MAV_CMD_NAV_RALLY_POINT)

        # test loading tradition "RALLY" style format:
        rally_filepath = pkg_resources.resource_filename(__name__, "rally.txt")
        loader.load(rally_filepath)
        self.assertEqual(loader.count(), 2)
        self.assertEqual(loader.wp(0).command, mavutil.mavlink.MAV_CMD_NAV_RALLY_POINT)

class FenceTest(unittest.TestCase):
    def test_fence_load(self):
        '''test loading rally points from old RALLY style file'''
        loader = mavwp.MissionItemProtocol_Fence()
        self.assertEqual(loader.mav_mission_type(),
                         mavutil.mavlink.MAV_MISSION_TYPE_FENCE)
        self.assertTrue(loader.is_location_command(mavutil.mavlink.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION))

        # test loading a QGC WPL 110 file:
        fence_filepath = pkg_resources.resource_filename(__name__,
                                                         "fence-110.txt")
        loader.load(fence_filepath)
        self.assertEqual(loader.count(), 10)
        self.assertEqual(loader.wp(3).command, mavutil.mavlink.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION)

        # test loading tradition lat/lng-pair style format:
        fence_filepath = pkg_resources.resource_filename(__name__,
                                                         "fence.txt")
        loader.load(fence_filepath)
        # there are 6 lines in the file - one return point, four fence
        # points and a "fence closing point".  We don't store the
        # fence closing point.
        self.assertEqual(loader.count(), 5)
        self.assertEqual(loader.wp(0).command, mavutil.mavlink.MAV_CMD_NAV_FENCE_RETURN_POINT)
        self.assertEqual(loader.wp(3).command, mavutil.mavlink.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION)

if __name__ == '__main__':
    unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        